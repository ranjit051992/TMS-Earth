[
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\Framework\\CustomHelper\\eventListeners.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 159,
                "endColumn": 1
            },
            {
                "ruleId": "dd-eslint-rules/Startup-automation-component-adoption",
                "severity": 1,
                "message": "component - Startup automation componenet used for getting logins fro DB is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 159,
                "endColumn": 1
            },
            {
                "ruleId": "dd-eslint-rules/Actionbot-automation-component-adoption",
                "severity": 1,
                "message": "component - Actionbot automation componenet not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 159,
                "endColumn": 1
            },
            {
                "ruleId": "dd-eslint-rules/i18nUtil-LMT-automation-component-adoption",
                "severity": 1,
                "message": "component - i18nUtil LMT automation componenet not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 159,
                "endColumn": 1
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 19,
                "column": 13,
                "nodeType": "Literal",
                "endLine": 19,
                "endColumn": 37
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 130,
                "column": 26,
                "nodeType": "Literal",
                "endLine": 130,
                "endColumn": 83
            }
        ],
        "errorCount": 1,
        "warningCount": 6,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "const recorder = require(\"codeceptjs\").recorder;\r\nconst request = require(\"request\");\r\nimport { event } from \"codeceptjs\";\r\nimport console from \"console\";\r\nimport { Jiralogger } from \"../Jiralogging/Jiralogging\";\r\nimport { xray_ImportCucumberApiRequest } from \"../Xray_Api/xray_ImportFeature_Request\";\r\nconst jsesc = require(\"jsesc\");\r\nconst moment = require(\"moment\");\r\nlet errorOccured = false;\r\nconst JiraloggingFlag = (process.env.JiraloggingFlag == \"true\");\r\nconst TestExecutionFlag = (process.env.TestExecutionFlag == \"true\");\r\nlet info = \"\";\r\nlet tests = \"\";\r\nlet json: any;\r\nconst promises: any = [];\r\nconst promisesfirst: any = [];\r\nconst config = {\r\n  debug: false,\r\n  jira_url: \"https://localhost:8080\",\r\n  jira_user: \"root\",\r\n  jira_password: \"root\",\r\n  test_revison: \"001\",\r\n  testEnvironments: \"[\\\"browser:chrome\\\", \\\"linux\\\"]\",\r\n};\r\nexport class eventListener {\r\n  static async init() {\r\n    // event.dispatcher.on(event.all.before, async function(suite) {\r\n    //   console.log(\"--- I am all before ---\");\r\n    //   if (process.env.storyNo) {\r\n    //     console.log(\"updating the linking\");\r\n    //     Jiralogger.updateissue(process.env.storyNo);\r\n    //   }\r\n    // });\r\n    event.dispatcher.on(event.test.started, async function() {\r\n      console.log(\"--- I am before test --\");\r\n    });\r\n\r\n    event.dispatcher.on(event.test.after, async function(test) {\r\n      console.log(\"--- I am after test --\", test.tags[0]);\r\n      let status: any;\r\n      let comment: any;\r\n      let defect: any;\r\n      if (test.state == \"passed\") {\r\n        status = \"PASSED\";\r\n        comment = \"Successful execution\";\r\n        promises.push(new Promise(async (resolve, reject) => {\r\n          if (tests.length < 1) {\r\n            if (process.env.testPlanKey) {\r\n              info = \"{ \\\"info\\\" : { \\\"summary\\\" :\\\"Sample summary\\\", \\\"startDate\\\" : \\\"\" + moment().format() + \"\\\", \\\"finishDate\\\" :\\\"\" + moment().format() + \"\\\",\\\"revision\\\": \\\"\" + config.test_revison + \"\\\",\\\"description\\\" : \\\"Results of test execution \\\", \\\"testPlanKey\\\" : \\\"\" + process.env.testPlanKey + \"\\\"},\";\r\n            } else {\r\n              info = \"{ \\\"info\\\" : { \\\"summary\\\" :\\\"Sample summary\\\", \\\"startDate\\\" : \\\"\" + moment().format() + \"\\\", \\\"finishDate\\\" :\\\"\" + moment().format() + \"\\\",\\\"revision\\\": \\\"\" + config.test_revison + \"\\\",\\\"description\\\" : \\\"Results of test execution \\\" \" + \"},\";\r\n            }\r\n\r\n            tests = \"\\\"tests\\\" : [\";\r\n            tests = tests + \"\" + \"{\\\"testKey\\\":\\\"\" + (test.tags[1].split(\"@\")[1]).split(\"_\")[1] + \"\\\",\\\"status\\\":\\\"\" + status + \"\\\",\\\"comment\\\" : \\\"\" + comment + \"\\\" }\";\r\n            resolve(tests);\r\n          } else {\r\n            tests = tests + \"\" + \",{\\\"testKey\\\":\\\"\" + (test.tags[1].split(\"@\")[1]).split(\"_\")[1] + \"\\\",\\\"status\\\":\\\"\" + status + \"\\\",\\\"comment\\\" : \\\"\" + comment + \"\\\" }\";\r\n            resolve(tests);\r\n          }\r\n        }));\r\n      } else {\r\n        status = \"FAILED\";\r\n        promises.push(new Promise(async (resolve, reject) => {\r\n          await Jiralogger.logJira(test.title, test.parent.title, test.err.stack, JiraloggingFlag).then(async function(json: any) {\r\n            comment = jsesc(test.err.toString().replace(/\\\"/g, \"\")\r\n              .replace(/\\'/g, \"\")\r\n              .replace(/\\é/g, \"e\")\r\n              .replace(/\\è/g, \"e\")\r\n              .replace(/\\ê/g, \"e\")\r\n              .replace(/\\à/g, \"a\")\r\n              .replace(/\\ù/g, \"u\")\r\n              .replace(/\\x1B/g, \"\")\r\n              .replace(/\\[\\d*[m]/g, \"\"));\r\n            console.log(comment);\r\n            if (json) {\r\n              defect = \"[\\\"\" + json[\"key\"] + \"\\\"]\";\r\n            } else {\r\n              defect = \"[]\";\r\n            }\r\n            if (tests.length < 1) {\r\n              if (process.env.testPlanKey) {\r\n                info = \"{ \\\"info\\\" : { \\\"summary\\\" :\\\"Sample summary\\\", \\\"startDate\\\" : \\\"\" + moment().format() + \"\\\", \\\"finishDate\\\" :\\\"\" + moment().format() + \"\\\",\\\"revision\\\": \\\"\" + config.test_revison + \"\\\",\\\"description\\\" : \\\"Results of test execution \\\", \\\"testPlanKey\\\" : \\\"\" + process.env.testPlanKey + \"\\\"},\";\r\n              } else {\r\n                info = \"{ \\\"info\\\" : { \\\"summary\\\" :\\\"Sample summary\\\", \\\"startDate\\\" : \\\"\" + moment().format() + \"\\\", \\\"finishDate\\\" :\\\"\" + moment().format() + \"\\\",\\\"revision\\\": \\\"\" + config.test_revison + \"\\\",\\\"description\\\" : \\\"Results of test execution \\\" \" + \"},\";\r\n              }\r\n\r\n              tests = \"\\\"tests\\\" : [\";\r\n              tests = tests + \"\" + \"{\\\"testKey\\\":\\\"\" + (test.tags[1].split(\"@\")[1]).split(\"_\")[1] + \"\\\",\\\"status\\\":\\\"\" + status + \"\\\",\\\"comment\\\" : \\\"\" + comment + \"\\\",\\\"defects\\\" : \" + defect + \" }\";\r\n              resolve(tests);\r\n            } else {\r\n              tests = tests + \"\" + \",{\\\"testKey\\\":\\\"\" + (test.tags[1].split(\"@\")[1]).split(\"_\")[1] + \"\\\",\\\"status\\\":\\\"\" + status + \"\\\",\\\"comment\\\" : \\\"\" + comment + \"\\\",\\\"defects\\\" : \" + defect + \" }\";\r\n              resolve(tests);\r\n            }\r\n          });\r\n        }));\r\n      }\r\n    });\r\n\r\n    event.dispatcher.on(event.test.failed, async function(test, e) {\r\n      errorOccured = true;\r\n      console.log(\"--- I am failed test --\" + errorOccured);\r\n    });\r\n\r\n    event.dispatcher.on(event.test.finished, async function(test, err) {\r\n      console.log(\"--- I am finished test --\" + errorOccured + \"  ==  \" + JiraloggingFlag);\r\n      /* promisesfirst.push(new Promise(async (resolve, reject) => {\r\n           if (errorOccured && JiraloggingFlag) {\r\n             json = await Jiralogger.logJira(test.title, test.parent.title, test.err.stack)\r\n             console.log(\"Jira bug ID \", json)\r\n             resolve(json)\r\n           }\r\n         })) */\r\n    });\r\n\r\n    event.dispatcher.on(event.all.after, async function(suite) {\r\n      console.log(\"--- I am all after --- \");\r\n      if (TestExecutionFlag) {\r\n        console.log(\"Logging a test execution ticket in jira\");\r\n        Promise.all(promises).then(async (testcases: any) => {\r\n          console.log(\"SEND TO XRAY=>\" + info + tests + \"]}\");\r\n          if (config.debug) console.log(\"SEND TO XRAY=>\" + info + tests + \"]}\");\r\n          recorder.add(\"Sending new result to xray\", async function() {\r\n            return new Promise(async (doneFn, errFn) => {\r\n              await xray_ImportCucumberApiRequest.generateAuthToken().then(async function(authToken) {\r\n                const finalToken: string = \"Bearer \" + authToken.replace(/(\\\")/gm, \"\");\r\n\r\n                const options = {\r\n                  \"method\": \"POST\",\r\n                  \"url\": \"https://xray.cloud.xpand-it.com/api/v1/import/execution\",\r\n                  \"headers\": {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"Authorization\": finalToken,\r\n                  },\r\n                  \"body\": info + tests + \"]}\",\r\n\r\n                };\r\n                request(options, async function(error: any, response: any) {\r\n                  if (error) doneFn(error);\r\n                  else {\r\n                    console.log(response.body);\r\n                    await Jiralogger.updateIssueLink((JSON.parse(response.body))[\"key\"]).then(async function(linkStatus) {\r\n                      console.log(\"After update call\");\r\n                      doneFn(response.body);\r\n                    });\r\n                  }\r\n                });\r\n              });\r\n            });\r\n          });\r\n        });\r\n      }\r\n    });\r\n    event.dispatcher.on(event.suite.after, (suite) => {\r\n      console.log(\"----- After suite-------\");\r\n    });\r\n  }\r\n}\r\n"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\Framework\\fileOperations\\fs_ops.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 2,
                "column": 1,
                "nodeType": "Program",
                "endLine": 90,
                "endColumn": 19
            },
            {
                "ruleId": "dd-eslint-rules/Actionbot-automation-component-adoption",
                "severity": 1,
                "message": "component - Actionbot automation componenet not adopted",
                "line": 2,
                "column": 1,
                "nodeType": "Program",
                "endLine": 90,
                "endColumn": 19
            },
            {
                "ruleId": "dd-eslint-rules/i18nUtil-LMT-automation-component-adoption",
                "severity": 1,
                "message": "component - i18nUtil LMT automation componenet not adopted",
                "line": 2,
                "column": 1,
                "nodeType": "Program",
                "endLine": 90,
                "endColumn": 19
            },
            {
                "ruleId": "unused-imports/no-unused-imports",
                "severity": 1,
                "message": "'xray_ExportCucumberApiRequest' is defined but never used.",
                "line": 4,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "unusedVar",
                "endLine": 4,
                "endColumn": 39,
                "fix": {
                    "range": [
                        94,
                        171
                    ],
                    "text": ""
                }
            }
        ],
        "errorCount": 1,
        "warningCount": 4,
        "fixableErrorCount": 0,
        "fixableWarningCount": 1,
        "source": "\r\nconst fs = require('fs')\r\nimport { Startup } from \"../FrameworkUtilities/Startup/Startup\";\r\nimport { xray_ExportCucumberApiRequest } from \"../Xray_Api/export_Feature\";\r\nvar recursive = require(\"recursive-readdir\");\r\n\r\nexport class fileSystemOperation {\r\n\r\n    static async mapTagsToFeature() {\r\n        // await xray_ExportCucumberApiRequest.process_ScenarioLabel();\r\n        recursive(\"./src/TMS/features/\", async function (err: any, files: any) {\r\n            let arrayOfFeatureFiles : any = files;\r\n            console.log(\"Files under review  \",arrayOfFeatureFiles )\r\n            for (let index : any= 0; index < arrayOfFeatureFiles.length; index++) {\r\n                let filepath: any = arrayOfFeatureFiles[index];\r\n                await fs.readFile(filepath, \"utf-8\", async (err: any, data: any) => {\r\n                    let regexForScenario : any = new RegExp(\"(Scenario: [A-Z a-z\\\\d]*)\", \"gm\");\r\n                    let scenarioList: any = data.match(regexForScenario)\r\n                    if (scenarioList != null) {\r\n                        for (let i = 0; i < scenarioList.length; i++) {\r\n                            let scenarioName: any = scenarioList[i].replace(/Scenario:\\s*/gm, '')\r\n                            if (Startup.finalScenarioLabel_map.has(scenarioName)) {\r\n                                console.log(scenarioName, '       @TEST_' + Startup.finalScenarioLabel_map.get(scenarioName))\r\n                                var pattern = '(.*((@[a-z A-Z \\\\d]*[- : _ ]*[\\\\d]*))[\\\\r \\\\n \\\\t .]*)(Scenario: ' + scenarioName + ')';\r\n                                var regex = new RegExp(pattern, \"m\");\r\n                                let matches: any = data.search(regex)\r\n                                let tagToBeAdded = '@TEST_' + Startup.finalScenarioLabel_map.get(scenarioName) + ' '\r\n                                if (data.match(tagToBeAdded)) {\r\n                                    console.log(\"Tag Already added\")\r\n                                }\r\n                                else {\r\n                                    data = [data.slice(0, matches), tagToBeAdded, data.slice(matches)].join('');\r\n                                    console.log(\"Tag is newly added to scenario\")\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    fs.writeFile(filepath, data, (err: any) => {\r\n                        console.log(data)\r\n                        if (err) console.log(err);\r\n                        console.log(\"Successfully Written to File.\" + filepath);\r\n                    });\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n// fileSystemOperation.mapTagsToFeature();\r\n// D:/POC_framework/JiraIntegration/src/SampleTestcases/features/feaure_for_Tag_Mapping.feature\r\n// D:/POC_framework/JiraIntegration/src/SampleTestcases/features/googleFeature.feature\r\n// fs.readFile(\"D:/POC_framework/JiraIntegration/src/SampleTestcases/features/feaure_for_Tag_Mapping_SecondFile.feature\", \"utf-8\", (err: any, data: string) => {\r\n\r\n//     var d = (data.replace(/\\r\\n/gm, \"\"))\r\n//     let match: any = d.match(/((@[a-z A-Z \\d :-]*)*)(?<=Scenario: first scenario from second file)/m)\r\n//     if (match) {\r\n//         console.log(match[0])\r\n//         let y = \"qwerty \" + match[0]\r\n//         let w = d.replace(match[0], y)\r\n//         let x = w.replace(/(\\s\\s+)/gm, \"\\r\\n\")\r\n\r\n//         fs.writeFile(\"D:/POC_framework/JiraIntegration/src/SampleTestcases/features/feaure_for_Tag_Mapping_SecondFilecopy.feature\", x, (err: any) => {\r\n//             if (err) console.log(err);\r\n//             console.log(\"Successfully Written to File.\");\r\n//         });\r\n//     }\r\n// });\r\n\r\n// if (matches) {\r\n            //     console.log(matches[0])\r\n            //     let updatedTags = \"qwerty \" + matches[0]\r\n            //     let FileContent = newData.replace(matches[0], updatedTags)\r\n            //     let finalContent = FileContent.replace(/(\\s\\s+)/gm, \"\\r\\n\").replace(\"Feature\", \"\\nFeature\")\r\n            // }\r\n\r\n                 // var scenarioName = 'search work on google'\r\n            // var pattern = '(.*((@[a-z A-Z \\\\d]*[- : _ ]*[\\\\d]*))[\\\\r \\\\n \\\\t .]*)(Scenario: ' + scenarioName + ')';\r\n            // var regex = new RegExp(pattern, \"m\");\r\n            // var newData = data\r\n            // console.log(newData)\r\n            // let matches: any = newData.search(regex)\r\n            // console.log(newData.length)\r\n            // console.log(matches)\r\n            // var output = [newData.slice(0, matches), \"@qwerty\", newData.slice(matches)].join('');\r\n            // console.log(output)\r\n\r\n            // fs.writeFile(\"D:/POC_framework/JiraIntegration/src/SampleTestcases/features/feaure_for_Tag_Mapping_SecondFilecopy.feature\", output, (err: any) => {\r\n            //     if (err) console.log(err);\r\n            //     console.log(\"Successfully Written to File.\");\r\n            // });"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\Framework\\fileOperations\\importFeature.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 2,
                "column": 1,
                "nodeType": "Program",
                "endLine": 105,
                "endColumn": 1
            },
            {
                "ruleId": "dd-eslint-rules/Actionbot-automation-component-adoption",
                "severity": 1,
                "message": "component - Actionbot automation componenet not adopted",
                "line": 2,
                "column": 1,
                "nodeType": "Program",
                "endLine": 105,
                "endColumn": 1
            },
            {
                "ruleId": "dd-eslint-rules/i18nUtil-LMT-automation-component-adoption",
                "severity": 1,
                "message": "component - i18nUtil LMT automation componenet not adopted",
                "line": 2,
                "column": 1,
                "nodeType": "Program",
                "endLine": 105,
                "endColumn": 1
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath ******",
                "line": 24,
                "column": 32,
                "nodeType": "BinaryExpression",
                "endLine": 24,
                "endColumn": 112
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 24,
                "column": 32,
                "nodeType": "Literal",
                "endLine": 24,
                "endColumn": 99
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath ******",
                "line": 51,
                "column": 40,
                "nodeType": "BinaryExpression",
                "endLine": 51,
                "endColumn": 106
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 51,
                "column": 40,
                "nodeType": "Literal",
                "endLine": 51,
                "endColumn": 90
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath ******",
                "line": 74,
                "column": 44,
                "nodeType": "BinaryExpression",
                "endLine": 74,
                "endColumn": 110
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 74,
                "column": 44,
                "nodeType": "Literal",
                "endLine": 74,
                "endColumn": 94
            }
        ],
        "errorCount": 1,
        "warningCount": 9,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "\r\nconst fs = require('fs')\r\nimport { Startup } from \"../FrameworkUtilities/Startup/Startup\";\r\nimport { xray_ImportCucumberApiRequest } from \"../Xray_Api/xray_ImportFeature_Request\";\r\nimport { fileSystemOperation } from \"./fs_ops\";\r\nvar request = require('request');\r\nvar recursive = require(\"recursive-readdir\");\r\nvar zipFolder = require('zip-folder');\r\n/*compressed folder*/\r\n\r\nexport class fileSystemOperationImport {\r\n\r\n    static async importFeature(projectKey: string, productName: string) {\r\n        await zipFolder('./src/TMS/features/', './out.zip', async function (err: any) {\r\n            if (err) {\r\n                console.log('zip error', err)\r\n            } else {\r\n                console.log('zip success');\r\n                await xray_ImportCucumberApiRequest.generateAuthToken().then(async function (authToken) {\r\n\r\n                    let finalToken: string = 'Bearer ' + authToken.replace(/(\\\")/gm, \"\")\r\n                    var options = {\r\n                        'method': 'POST',\r\n                        'url': 'https://xray.cloud.xpand-it.com/api/v1/import/feature?projectKey=' + projectKey,\r\n                        'headers': {\r\n                            'Content-Type': 'multipart/form-data',\r\n                            'Authorization': finalToken\r\n                        },\r\n                        formData: {\r\n                            'file': {\r\n                                'value': fs.createReadStream('./out.zip'),\r\n                                'options': {\r\n                                    'filename': './out.zip',\r\n                                    'contentType': null\r\n                                }\r\n                            }\r\n                        }\r\n                    };\r\n                    console.log(options)\r\n                    await request(options, async function (error: any, response: any) {\r\n                        if (error) throw new Error(error);\r\n                        // console.log(response.body)\r\n                        fs.unlinkSync('./out.zip');\r\n                        console.log(\"File deleted\");\r\n                        let jiraID: any = JSON.parse(response.body);\r\n                        for (const sample of jiraID[\"updatedOrCreatedTests\"]) {\r\n                            console.log(\"Issue under update \" , sample[\"key\"])\r\n                            var request = require('request');\r\n                            var options = {\r\n                                'method': 'GET',\r\n                                'url': 'https://pdtzycus.atlassian.net/rest/api/3/issue/' + sample[\"key\"],\r\n                                'headers': {\r\n                                    'Authorization': 'Basic SklSQS1ib3R1c2VyQHp5Y3VzLmNvbTpRbnhXTVRKd0pQc0Q4aGpNMFdoVjlENTM='\r\n                                }\r\n                            };\r\n                            await request(options, async function (error: any, response1: any) {\r\n                                if (error) throw new Error(error);\r\n                                let userStoryKey: string = \"\";\r\n                                let linkedIssues: any = JSON.parse(response1.body)[\"fields\"][\"issuelinks\"];\r\n                                for (const link of linkedIssues) {\r\n                                    try{\r\n                                    if (link[\"type\"][\"name\"] == \"Test\") {\r\n                                        userStoryKey = userStoryKey + link[\"outwardIssue\"][\"key\"]\r\n                                    }\r\n                                }\r\n                                catch (err){\r\n                                    \r\n                                }\r\n                                }\r\n                                console.log(\"User story key for above issue\",userStoryKey)\r\n                                if(userStoryKey!=undefined){\r\n                                var options = {\r\n                                    'method': 'PUT',\r\n                                    'url': 'https://pdtzycus.atlassian.net/rest/api/3/issue/' + sample[\"key\"],\r\n                                    'headers': {\r\n                                        'Accept': 'application/json',\r\n                                        'Content-Type': 'application/json',\r\n                                        'Authorization': 'Basic SklSQS1ib3R1c2VyQHp5Y3VzLmNvbTpRbnhXTVRKd0pQc0Q4aGpNMFdoVjlENTM=',\r\n                                    },\r\n                                    body: JSON.stringify({ \"update\": {}, \"fields\": { \"customfield_10128\": { \"value\": productName }, \"customfield_19004\": userStoryKey } })\r\n\r\n                                };\r\n                                await request(options, async function (error: any, response2: any) {\r\n                                    if (error) throw new Error(error);\r\n                                    console.log(\"User story   \",userStoryKey, \"Updated the product and user story key for xray test id \", sample[\"key\"]);\r\n                                    Startup.finalScenarioLabel_map.set(JSON.parse(response1.body)[\"fields\"][\"summary\"], sample[\"key\"])\r\n                                });\r\n                            }\r\n                            });\r\n                            await fileSystemOperationImport.delay(1000);\r\n                        }\r\n                        await fileSystemOperation.mapTagsToFeature();\r\n                    });\r\n                })\r\n            }\r\n        })\r\n    }\r\n    static async delay(ms: number) {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n}\r\n\r\n\r\nfileSystemOperationImport.importFeature(\"DDS\", \"TMS\");\r\n"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\Framework\\FrameworkUtilities\\Bootstrap\\bootstrap.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 87,
                "endColumn": 5
            },
            {
                "ruleId": "dd-eslint-rules/Actionbot-automation-component-adoption",
                "severity": 1,
                "message": "component - Actionbot automation componenet not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 87,
                "endColumn": 5
            },
            {
                "ruleId": "dd-eslint-rules/i18nUtil-LMT-automation-component-adoption",
                "severity": 1,
                "message": "component - i18nUtil LMT automation componenet not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 87,
                "endColumn": 5
            }
        ],
        "errorCount": 1,
        "warningCount": 3,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import { DatabaseOperations } from \"../DatabaseOperations/databaseOperations\";\r\nimport { Startup } from \"../Startup/Startup\";\r\nimport { logger } from \"../Logger/logger\";\r\nimport { prop } from \"../config\";\r\nimport { eventListener } from \"../../CustomHelper/eventListeners\";\r\n\r\nexport async function bootstrap() {\r\n        eventListener.init();\r\n        Startup.testData = await DatabaseOperations.getTestData();\r\n        Startup.uiElements = await DatabaseOperations.getUiElementXpath();\r\n        if (process.env.GRID) {\r\n                Startup.users = await DatabaseOperations.getAndUpdateUser(prop.username);\r\n        }\r\n        else {\r\n                logger.info(`Using local credentials --> ${prop.username} / ${prop.password}`);\r\n                let testDataMap: Map<string, string> = new Map();\r\n                testDataMap.set(\"USERNAME\", prop.username);\r\n                testDataMap.set(\"PASSWORD\", prop.password);\r\n                Startup.users = testDataMap;\r\n        }\r\n        Startup.lmt = await DatabaseOperations.getLMTDetails();\r\n        Startup.allkeys = await DatabaseOperations.getLMTKeys();\r\n        logger.info(\"for this Chunk USERNAME  : \" + Startup.users.get(\"USERNAME\"));\r\n}\r\n\r\nexport async function teardown() {\r\n        if (process.env.GRID) {\r\n                await DatabaseOperations.updateUSER(Startup.users.get(\"USERNAME\") as string, \"true\");\r\n                logger.info(\" for this Chunk USERNAME  : \" + Startup.users.get(\"USERNAME\"));\r\n        }\r\n}\r\n\r\nexport async function bootstrapAll() {\r\n        logger.info(\"inside bootstrapAll\");\r\n}\r\n\r\nexport async function teardownAll() {\r\n        logger.info(\"inside tearDownAll\");\r\n} \r\n \r\n\r\n\r\n\r\n// import { DatabaseOperations } from \"../DatabaseOperations/databaseOperations\";\r\n// import { Startup } from \"../Startup/startup\";\r\n// import { logger } from \"../Logger/logger\";\r\n// import { prop } from \"../config\";\r\n\r\n// export async function bootstrap() {\r\n//         Startup.testData = await DatabaseOperations.getTestData();\r\n//            console.log(\"Printing from Bootstrap...\"+Startup.testData.size);\r\n//         for( const data in Startup.testData)\r\n//         {\r\n//                 \r\n//                 console.log(data+\"-----\"+Startup.testData.get(data));\r\n\r\n//         } \r\n//         Startup.uiElements = await DatabaseOperations.getUiElementXpath();\r\n//         if (process.env.GRID) {\r\n//                 Startup.users = await DatabaseOperations.getAndUpdateUser();\r\n//         }\r\n//         else {\r\n//                 logger.info(`Using local credentials --> ${prop.USERNAME} / ${prop.PASSWORD}`);\r\n//                 let testDataMap: Map<string, string> = new Map();\r\n//                 testDataMap.set(\"USERNAME\", prop.USERNAME);\r\n//                 testDataMap.set(\"PASSWORD\", prop.PASSWORD);\r\n//                 Startup.users = testDataMap;\r\n//         }\r\n//         Startup.lmt = await DatabaseOperations.getLMTDetails();\r\n//         Startup.allkeys = await DatabaseOperations.getLMTKeys();\r\n//         logger.info(\"for this Chunk USERNAME  : \" + Startup.users.get(\"USERNAME\"));\r\n// }\r\n\r\n// export async function teardown() {\r\n//         if (process.env.GRID) {\r\n//                 await DatabaseOperations.updateUSER(Startup.users.get(\"USERNAME\") as string, \"true\");\r\n//                 logger.info(\" for this Chunk USERNAME  : \" + Startup.users.get(\"USERNAME\"));\r\n//         }\r\n// }\r\n\r\n// export async function bootstrapAll() {\r\n//         logger.info(\"inside bootstrapAll\");\r\n// }\r\n\r\n// export async function teardownAll() {\r\n//         logger.info(\"inside tearDownAll\");\r\n// }"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\Framework\\FrameworkUtilities\\CommonUtilities.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 9,
                "endColumn": 1
            },
            {
                "ruleId": "dd-eslint-rules/Startup-automation-component-adoption",
                "severity": 1,
                "message": "component - Startup automation componenet used for getting logins fro DB is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 9,
                "endColumn": 1
            },
            {
                "ruleId": "dd-eslint-rules/Actionbot-automation-component-adoption",
                "severity": 1,
                "message": "component - Actionbot automation componenet not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 9,
                "endColumn": 1
            },
            {
                "ruleId": "dd-eslint-rules/i18nUtil-LMT-automation-component-adoption",
                "severity": 1,
                "message": "component - i18nUtil LMT automation componenet not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 9,
                "endColumn": 1
            },
            {
                "ruleId": "unused-imports/no-unused-imports",
                "severity": 1,
                "message": "'actor' is defined but never used.",
                "line": 1,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "unusedVar",
                "endLine": 1,
                "endColumn": 15,
                "fix": {
                    "range": [
                        0,
                        37
                    ],
                    "text": ""
                }
            },
            {
                "ruleId": "unused-imports/no-unused-imports",
                "severity": 1,
                "message": "'logger' is defined but never used.",
                "line": 2,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "unusedVar",
                "endLine": 2,
                "endColumn": 16,
                "fix": {
                    "range": [
                        37,
                        82
                    ],
                    "text": ""
                }
            }
        ],
        "errorCount": 1,
        "warningCount": 6,
        "fixableErrorCount": 0,
        "fixableWarningCount": 2,
        "source": "import { actor } from \"codeceptjs\";\r\nimport { logger } from \"./Logger/logger\";\r\n\r\nconst { I } = inject();\r\n\r\nexport class CommonUtilities\r\n{\r\n}\r\n"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\Framework\\FrameworkUtilities\\config.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 29,
                "endColumn": 1
            },
            {
                "ruleId": "dd-eslint-rules/Startup-automation-component-adoption",
                "severity": 1,
                "message": "component - Startup automation componenet used for getting logins fro DB is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 29,
                "endColumn": 1
            },
            {
                "ruleId": "dd-eslint-rules/Actionbot-automation-component-adoption",
                "severity": 1,
                "message": "component - Actionbot automation componenet not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 29,
                "endColumn": 1
            },
            {
                "ruleId": "dd-eslint-rules/i18nUtil-LMT-automation-component-adoption",
                "severity": 1,
                "message": "component - i18nUtil LMT automation componenet not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 29,
                "endColumn": 1
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 2,
                "column": 20,
                "nodeType": "Literal",
                "endLine": 2,
                "endColumn": 59
            }
        ],
        "errorCount": 1,
        "warningCount": 5,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "export let prop= {\r\n            \"url\": \"https://dewdrops-rp.zycus.com/home/#/\",\r\n            \"SETUP\": \"RM\",\r\n            \"TENANT\": \"ZCS\",\r\n            \"browser\": \"chrome\",\r\n            \"host\": \"127.0.0.1\",\r\n            \"restart\": \"false\",\r\n            \"port\": 4444,\r\n            \"windowSize\": \"maximize\",\r\n            \"stepFilePath\": \"./steps_file\",\r\n            \"projectName\": \"BDD_UI_Automation\",\r\n            \"DEFAULT_WAIT\": \"2\",\r\n            \"DEFAULT_LOW_WAIT\": \"5\",\r\n            \"DEFAULT_MEDIUM_WAIT\": \"10\",\r\n            \"DEFAULT_HIGH_WAIT\": \"15\",\r\n            \"CONDITIONAL_WAIT\": 50,\r\n            \"DBhost\": \"192.168.5.221\",\r\n            \"DBdatabase\": \"Gauge_schema\",\r\n            \"DBuser\": \"gauge.poc\",\r\n            \"DBpassword\": \"gauge@123\",\r\n            \"username\": \"11m@zycus.com\",\r\n            \"password\": \"gIgUxOpOaAcIqEvOvUbAnUcApEaI7#\",\r\n            \"testdataTable\": \"TestData_eproc\",\r\n            \"uiElementTable\": \"Dev_eProc_UI_Elements\",\r\n            \"UserTable\":\"eProc_credentials\"\r\n        }\r\n        \r\n    \r\n"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\Framework\\FrameworkUtilities\\DatabaseOperations\\databaseOperations.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 712,
                "endColumn": 2
            },
            {
                "ruleId": "dd-eslint-rules/Actionbot-automation-component-adoption",
                "severity": 1,
                "message": "component - Actionbot automation componenet not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 712,
                "endColumn": 2
            },
            {
                "ruleId": "dd-eslint-rules/i18nUtil-LMT-automation-component-adoption",
                "severity": 1,
                "message": "component - i18nUtil LMT automation componenet not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 712,
                "endColumn": 2
            },
            {
                "ruleId": "unused-imports/no-unused-imports",
                "severity": 1,
                "message": "'Connection' is defined but never used.",
                "line": 4,
                "column": 28,
                "nodeType": "Identifier",
                "messageId": "unusedVar",
                "endLine": 4,
                "endColumn": 38,
                "fix": {
                    "range": [
                        152,
                        164
                    ],
                    "text": ""
                }
            },
            {
                "ruleId": "unused-imports/no-unused-imports",
                "severity": 1,
                "message": "'MysqlError' is defined but never used.",
                "line": 4,
                "column": 40,
                "nodeType": "Identifier",
                "messageId": "unusedVar",
                "endLine": 4,
                "endColumn": 50,
                "fix": {
                    "range": [
                        163,
                        175
                    ],
                    "text": ""
                }
            }
        ],
        "errorCount": 1,
        "warningCount": 5,
        "fixableErrorCount": 0,
        "fixableWarningCount": 2,
        "source": "import parser from \"mssql-connection-string\";\r\nimport { logger } from \"../Logger/logger\";\r\nimport { prop } from \"../config\";\r\nimport { createConnection, Connection, MysqlError } from \"mysql\";\r\nimport { Startup } from \"../Startup/Startup\";\r\nimport { random } from \"faker\";\r\nimport * as fs from \"fs\";\r\n\r\nexport class DatabaseOperations {\r\n\r\n    // static async getTestData(): Promise<Map<string, string>> {\r\n    //     const connectionString = \"Data Source=tcp:\" + prop.DBhost + \",3306;Initial Catalog=\" + prop.DBdatabase + \";User Id=\" + prop.DBuser + \";Password=\" + prop.DBpassword + \";\";\r\n    //     logger.info(\"connectionString  : \" + connectionString);\r\n\r\n    //     const connectionObj = parser(connectionString);\r\n\r\n    //     const columnName = process.env.SETUP + \"_\" + process.env.TENANT;\r\n    //     logger.info(columnName);\r\n\r\n    //     const query = `SELECT FIELD_NAME, ${columnName} FROM ${prop.testdataTable}`;\r\n\r\n    //     logger.info(\"getTestData query : \" + query);\r\n\r\n    //     return new Promise((resolve, reject) => {\r\n    //         let testDataMap: Map<string, string> = new Map();\r\n\r\n    //         logger.info(\"Creating sql connection\");\r\n\r\n    //         const connection = createConnection(connectionObj);\r\n\r\n    //         logger.info(\"Checking sql connection\");\r\n\r\n    //         connection.connect((error) => {\r\n    //             if (!!error) {\r\n    //                 logger.info(\"Error1\");\r\n    //             }\r\n    //             else {\r\n    //                 logger.info(\"Connected\");\r\n    //                 logger.info(\"Triggering sql query\");\r\n    //                 connection.query(query, function (error, rows, fields) {\r\n    //                     if (!!error) {\r\n    //                         logger.info(\"Error in the query\");\r\n    //                     }\r\n    //                     else {\r\n    //                         logger.info(\"SUCCESS!\");\r\n\r\n    //                         for (let i = 0; i < rows.length; i++) {\r\n    //                             let mapKey: string = \"\";\r\n    //                             let mapValue: string = \"\";\r\n\r\n    //                             for (let [key, value] of Object.entries(rows[i])) {\r\n    //                                 if (key === \"FIELD_NAME\") {\r\n    //                                     mapKey = value as string;\r\n    //                                 }\r\n    //                                 else if (key === columnName) {\r\n    //                                     mapValue = value as string;\r\n    //                                 }\r\n    //                             }\r\n    //                             testDataMap.set(mapKey, mapValue);\r\n    //                         }\r\n    //                         connection.destroy();\r\n    //                         logger.info(`Data map size --> ${testDataMap.size}`);\r\n    //                         resolve(testDataMap);\r\n    //                     }\r\n    //                 });\r\n    //             }\r\n    //         });\r\n    //     });\r\n    // }\r\n\r\n    // static async getUiElementXpath(): Promise<Map<string, string>>{\r\n    //     let tablename = \"uiElementTable\"\r\n\r\n    //     const connectionString = \"Data Source=tcp:\" + prop.DBhost + \",3306;Initial Catalog=\" + prop.DBdatabase + \";User Id=\" + prop.DBuser + \";Password=\" + prop.DBpassword + \";\";\r\n    //     logger.info(\"connectionString  : \" + connectionString);\r\n\r\n    //     const connectionObj = parser(connectionString);\r\n    //     if (process.env.SETUP) {\r\n    //         tablename = process.env.SETUP + \"_uiElementTable\";\r\n    //     }\r\n    //     else {\r\n    //         tablename = prop.SETUP + \"_uiElementTable\";\r\n    //     }\r\n\r\n    //     const query = `SELECT PAGE_NAME, ELEMENT_NAME, XPATH FROM ${Startup.configmap.get(tablename)}`;\r\n    //     logger.info(\"---=-==-=-=-=-=-=-=>\" + query);\r\n    //     return new Promise((resolve, reject) => {\r\n    //         let elementMap: Map<string, string> = new Map();\r\n\r\n    //         logger.info(\"Creating sql connection\");\r\n    //         let connection = createConnection(connectionObj);\r\n\r\n    //         logger.info(\"Checking sql connection\");\r\n    //         connection.connect(function (error) {\r\n    //             if (!!error) {\r\n    //                 logger.info(\"Error2\");\r\n    //             }\r\n    //             else {\r\n    //                 logger.info(\"Connected\");\r\n    //                 logger.info(\"Triggering sql query\");\r\n    //                 connection.query(query, function (error, rows, fields) {\r\n    //                     if (!!error) {\r\n    //                         logger.info(\"Error in the query\");\r\n    //                     }\r\n    //                     else {\r\n    //                         logger.info(\"SUCCESS!\");\r\n\r\n    //                         for (let i = 0; i < rows.length; i++) {\r\n    //                             let mapKey: string = \"\";\r\n    //                             let mapValue: string = \"\";\r\n\r\n    //                             for (let [key, value] of Object.entries(rows[i])) {\r\n    //                                 if (key === \"PAGE_NAME\") {\r\n    //                                     mapKey = value as string;\r\n    //                                 }\r\n    //                                 else if (key === \"ELEMENT_NAME\") {\r\n    //                                     mapKey = `${mapKey}/${value}`;\r\n    //                                 }\r\n    //                                 else if (key === \"XPATH\") {\r\n    //                                     mapValue = value as string;\r\n    //                                 }\r\n    //                             }\r\n    //                             elementMap.set(mapKey, mapValue);\r\n    //                         }\r\n    //                         connection.destroy();\r\n    //                         logger.info(`UiElement map size --> ${elementMap.size}`);\r\n    //                         resolve(elementMap);\r\n    //                     }\r\n    //                 });\r\n    //             }\r\n    //         });\r\n    //     });\r\n    // }\r\n\r\n    // static async getLMTDetails(): Promise<Map<string, Map<string, string>>> {\r\n    //     // const prop = global.confi_prop;\r\n\r\n    //     const connectionString = \"Data Source=tcp:\" + prop.DBhost + \",3306;Initial Catalog=\" + prop.DBdatabase + \";User Id=\" + prop.DBuser + \";Password=\" + prop.DBpassword + \";\";\r\n    //     logger.info(\"connectionString  : \" + connectionString);\r\n\r\n    //     const connectionObj = parser(connectionString);\r\n\r\n    //     const query = \"SELECT * FROM LMT\";\r\n\r\n    //     return new Promise((resolve, reject) => {\r\n    //         let LMTMap: Map<string, Map<string, string>> = new Map();\r\n\r\n    //         logger.info(\"Creating sql connection\");\r\n    //         let connection = createConnection(connectionObj);\r\n\r\n    //         logger.info(\"Checking sql connection\");\r\n    //         connection.connect(function (error) {\r\n    //             if (!!error) {\r\n    //                 logger.info(\"Error\");\r\n    //             }\r\n    //             else {\r\n    //                 logger.info(\"Connected\");\r\n    //                 logger.info(\"Triggering sql query\");\r\n    //                 connection.query(query, function (error, rows, fields) {\r\n    //                     if (!!error) {\r\n    //                         logger.info(\"Error in the query\");\r\n    //                     }\r\n    //                     else {\r\n    //                         logger.info(\"SUCCESS!\");\r\n\r\n    //                         for (let i = 0; i < rows.length; i++) {\r\n    //                             let mapKey: string = \"\";\r\n    //                             let LMTValueMap: Map<string, string> = new Map();\r\n    //                             for (let [key, value] of Object.entries(rows[i])) {\r\n    //                                 if (key === \"Key\") {\r\n    //                                     mapKey = value as string;\r\n    //                                 } else {\r\n    //                                     LMTValueMap.set(key, value as string);\r\n    //                                 }\r\n    //                             }\r\n    //                             LMTMap.set(mapKey, LMTValueMap);\r\n    //                         }\r\n    //                         connection.destroy();\r\n    //                         logger.info(`LMT map size --> ${LMTMap.size}`);\r\n    //                         resolve(LMTMap);\r\n    //                     }\r\n    //                 });\r\n    //             }\r\n    //         });\r\n    //     });\r\n    // }\r\n\r\n    // static async getLMTKeys(): Promise<Map<string, string>> {\r\n    //     // const prop = global.confi_prop;\r\n\r\n    //     const connectionString = \"Data Source=tcp:\" + prop.DBhost + \",3306;Initial Catalog=\" + prop.DBdatabase + \";User Id=\" + prop.DBuser + \";Password=\" + prop.DBpassword + \";\";\r\n    //     logger.info(\"connectionString  : \" + connectionString)\r\n\r\n    //     const connectionObj = parser(connectionString);\r\n\r\n    //     const query = `SELECT * FROM LMT`;\r\n\r\n    //     return new Promise((resolve, reject) => {\r\n    //         let getLMTKeys: Map<string, string> = new Map();\r\n\r\n    //         logger.info(\"Creating sql connection\");\r\n    //         let connection = createConnection(connectionObj);\r\n\r\n    //         logger.info(\"Checking sql connection\");\r\n    //         connection.connect(function (error) {\r\n    //             if (!!error) {\r\n    //                 logger.info(\"Error\");\r\n    //             }\r\n    //             else {\r\n    //                 logger.info(\"Connected\");\r\n    //                 logger.info(\"Triggering sql query\");\r\n    //                 connection.query(query, function (error, rows, fields) {\r\n    //                     if (!!error) {\r\n    //                         logger.info(\"Error in the query\");\r\n    //                     }\r\n    //                     else {\r\n    //                         logger.info(\"SUCCESS!\");\r\n\r\n    //                         for (let i = 0; i < rows.length; i++) {\r\n    //                             let mapKey: string = \"\";\r\n    //                             let mapValue: string = \"\";\r\n    //                             let LMTValueMap = new Map();\r\n    //                             for (let [key, value] of Object.entries(rows[i])) {\r\n    //                                 if (key === \"en\") {\r\n    //                                     mapKey = value as string;\r\n    //                                 } else {\r\n    //                                     if (key === \"Key\") {\r\n    //                                         mapValue = value as string;\r\n    //                                     }\r\n    //                                 }\r\n    //                             }\r\n    //                             getLMTKeys.set(mapKey, mapValue);\r\n    //                         }\r\n    //                         connection.destroy();\r\n    //                         logger.info(`LMT map size --> ${getLMTKeys.size}`);\r\n    //                         resolve(getLMTKeys);\r\n    //                     }\r\n    //                 });\r\n    //             }\r\n    //         });\r\n    //     });\r\n    // }\r\n\r\n    // static async getUser(query:string): Promise<Map<string, string>> {\r\n    //     const connectionString = \"Data Source=tcp:\" + prop.DBhost + \",3306;Initial Catalog=\" + prop.DBdatabase + \";User Id=\" + prop.DBuser + \";Password=\" + prop.DBpassword + \";\";\r\n        \r\n    //     const connectionObj = parser(connectionString);\r\n\r\n    //     //logger.info(columnName);\r\n    //    // const query = `SELECT USERNAME,PASSWORD,DISPLAY_NAME,SCOPE FROM ${prop.UserTable} WHERE SETUP_NAME='${process.env.SETUP}' AND TENANT_NAME='${process.env.TENANT}' AND flag='true' AND SCOPE = '${prop.USERSCOPE}'`;\r\n\r\n    //     logger.info(\"getUser query : \" + query);\r\n\r\n    //     let timeout = 0;\r\n    //      if (process.env.GRID) {\r\n    //          timeout = random.number({ min: 60000, max: 300000 });\r\n    //    } \r\n    //     logger.info(`waiting for timeout --> ${timeout}`);\r\n\r\n    //     return new Promise((resolve, reject) => {\r\n    //         setTimeout(() => {\r\n    //             logger.info(`waited for timeout --> ${timeout}`);\r\n    //             let testDataMap: Map<string, string> = new Map();\r\n    //             //logger.info(\"Creating sql connection\");\r\n    //             let connection = createConnection(connectionObj);\r\n    //             //logger.info(\"Checking sql connection\");\r\n    //             connection.connect(function (error) {\r\n    //                 if (!!error) {\r\n    //                     //logger.info(\"Error1\");\r\n    //                 }\r\n    //                 else {\r\n    //                     //logger.info(\"Connected\");\r\n    //                     //logger.info(\"Triggering sql query\");\r\n    //                     connection.query(query, function (error, rows, fields) {\r\n    //                         let displayName: string = \"\";\r\n    //                         let userScope: string = \"\";\r\n    //                         if (!!error) {\r\n    //                             //logger.info(\"Error in the query\");\r\n    //                         }\r\n    //                         else {\r\n    //                             //logger.info(\"SUCCESS!\");\r\n    //                             for (let i = 0; i < rows.length; i++) {\r\n    //                                 displayName = rows[i].DISPLAY_NAME;\r\n    //                                 userScope = rows[i].SCOPE;\r\n    //                                 testDataMap.set(\"USERNAME\", rows[i].USERNAME as string);\r\n    //                                 testDataMap.set(\"PASSWORD\", rows[i].PASSWORD as string);\r\n    //                             }\r\n    //                             connection.destroy();\r\n    //                             logger.info(`user map size --> ${testDataMap.size}`);\r\n    //                             logger.info(`user map size --> ${testDataMap.get(\"USERNAME\")}`);\r\n    //                             logger.info(`user map size --> ${testDataMap.get(\"PASSWORD\")}`);\r\n    //                             Startup.displayName = displayName;\r\n    //                             resolve(testDataMap);\r\n    //                         }\r\n    //                     });\r\n    //                 }\r\n    //             });\r\n    //         }, timeout);\r\n    //     });\r\n    // }\r\n\r\n    // static async getUserScope(query:string): Promise<Map<string, string>> {\r\n    //     const connectionString = \"Data Source=tcp:\" + prop.DBhost + \",3306;Initial Catalog=\" + prop.DBdatabase + \";User Id=\" + prop.DBuser + \";Password=\" + prop.DBpassword + \";\";\r\n        \r\n    //     const connectionObj = parser(connectionString);\r\n\r\n    //     //logger.info(columnName);\r\n    //    // const query = `SELECT USERNAME,PASSWORD,DISPLAY_NAME,SCOPE FROM ${prop.UserTable} WHERE SETUP_NAME='${process.env.SETUP}' AND TENANT_NAME='${process.env.TENANT}' AND flag='true' AND SCOPE = '${prop.USERSCOPE}'`;\r\n\r\n    //     logger.info(\"getUser query : \" + query);\r\n\r\n    //     let timeout = 0;\r\n    //    // if (process.env.GRID) {\r\n    //      //   timeout = random.number({ min: 60000, max: 300000 });\r\n    //    // }\r\n    //     logger.info(`waiting for timeout --> ${timeout}`);\r\n\r\n    //     return new Promise((resolve, reject) => {\r\n    //         setTimeout(() => {\r\n    //             logger.info(`waited for timeout --> ${timeout}`);\r\n    //             let testDataMap: Map<string, string> = new Map();\r\n    //             //logger.info(\"Creating sql connection\");\r\n    //             let connection = createConnection(connectionObj);\r\n    //             //logger.info(\"Checking sql connection\");\r\n    //             connection.connect(function (error) {\r\n    //                 if (!!error) {\r\n    //                     //logger.info(\"Error1\");\r\n    //                 }\r\n    //                 else {\r\n    //                     //logger.info(\"Connected\");\r\n    //                     //logger.info(\"Triggering sql query\");\r\n    //                     connection.query(query, function (error, rows, fields) {\r\n    //                         let displayName: string = \"\";\r\n    //                         let userScope: string = \"\";\r\n    //                         if (!!error) {\r\n    //                             //logger.info(\"Error in the query\");\r\n    //                         }\r\n    //                         else {\r\n    //                             //logger.info(\"SUCCESS!\");\r\n    //                             for (let i = 0; i < rows.length; i++) {\r\n    //                                 displayName = rows[i].DISPLAY_NAME;\r\n    //                                 userScope = rows[i].SCOPE;\r\n    //                                 testDataMap.set(\"USERNAME\", rows[i].USERNAME as string);\r\n    //                                 testDataMap.set(\"PASSWORD\", rows[i].PASSWORD as string);\r\n    //                             }\r\n    //                             connection.destroy();\r\n    //                             logger.info(`user map size --> ${testDataMap.size}`);\r\n    //                             logger.info(`user map size --> ${testDataMap.get(\"USERNAME\")}`);\r\n    //                             logger.info(`user map size --> ${testDataMap.get(\"PASSWORD\")}`);\r\n    //                             Startup.displayName = displayName;\r\n    //                             resolve(testDataMap);\r\n    //                         }\r\n    //                     });\r\n    //                 }\r\n    //             });\r\n    //         }, timeout);\r\n    //     });\r\n    // }\r\n\r\n\r\n    // static async updateUSER(userName: string, status: string) {\r\n    //     // const prop = global.confi_prop;\r\n    //     //logger.info(\"userName  : \" + userName);\r\n    //     const connectionString = \"Data Source=tcp:\" + prop.DBhost + \",3306;Initial Catalog=\" + prop.DBdatabase + \";User Id=\" + prop.DBuser + \";Password=\" + prop.DBpassword + \";\";\r\n    //     //logger.info(\"connectionString  : \" + connectionString);\r\n    //     const connectionObj = parser(connectionString);\r\n    //     const query = `UPDATE eProc_credentials SET FLAG='${status}' WHERE USERNAME='${userName}'`;\r\n    //     //logger.info(query);\r\n    //     return new Promise((resolve, reject) => {\r\n    //         let testDataMap = new Map();\r\n    //         //logger.info(\"Creating sql connection\");\r\n    //         let connection = createConnection(connectionObj);\r\n    //         //logger.info(\"Checking sql connection\");\r\n    //         connection.connect(function (error) {\r\n    //             if (!!error) {\r\n    //                 //logger.info(\"Error1\");\r\n    //             }\r\n    //             else {\r\n    //                 //logger.info(\"Connected\");\r\n    //                 //logger.info(\"Triggering sql query\");\r\n    //                 connection.query(query, function (error, rows, fields) {\r\n    //                     if (!!error) {\r\n    //                         //logger.info(\"Error in the query\");\r\n    //                         connection.destroy();\r\n    //                     }\r\n    //                     else {\r\n    //                         //logger.info(\"SUCCESS!\");\r\n    //                         connection.destroy();\r\n    //                         resolve(\"RESOLVED\");\r\n    //                     }\r\n    //                 });\r\n    //             }\r\n    //         });\r\n    //     });\r\n    // }\r\n\r\n    static async getAndUpdateUser(query:string) {\r\n        let testDataMap = await this.getUser(query);\r\n        await this.updateUSER(testDataMap.get(\"USERNAME\") as string, \"false\");\r\n      \r\n        return testDataMap;\r\n    }\r\n\r\n    static async createEnvFile() {\r\n        let envVar = `Product='${process.env.PRODUCT}' \\n Setup ='${process.env.SETUP}' \\n Tenant='${process.env.TENANT}' \\n Browser='${prop.browser}' \\n Resolution='${prop.windowSize}'`;\r\n        fs.writeFile(\"./output/environment.properties\", envVar,\r\n        function (err) {\r\n            if (err) throw err;\r\n            console.log(\"Saved!\");\r\n        });\r\n    }\r\n\r\n    // static async getAutomationKey() {\r\n    //     const connectionString = \"Data Source=tcp:\" + prop.DBhost + \",3306;Initial Catalog=\" + prop.DBdatabase + \";User Id=\" + prop.DBuser + \";Password=\" + prop.DBpassword + \";\";\r\n    //     logger.info(\"connectionString  : \" + connectionString)\r\n        \r\n    //     const connectionObj = parser(connectionString);\r\n        \r\n    //     const columnName = process.env.SETUP + \"_\" + process.env.TENANT;\r\n    //     logger.info(columnName);\r\n        \r\n    //     const query = \"SELECT `Key`, MST_key FROM LMT\";\r\n    //     logger.info(query);\r\n        \r\n    //     return new Promise((resolve, reject) => {\r\n    //         let testDataMap = new Map();\r\n        \r\n    //         logger.info(\"Creating sql connection\");\r\n        \r\n    //         let connection = createConnection(connectionObj);\r\n        \r\n    //         logger.info(\"Checking sql connection\");\r\n    //         connection.connect(function (error) {\r\n    //             if (!!error) {\r\n    //                 logger.info(\"Error\");\r\n    //             }\r\n    //             else {\r\n    //                 logger.info(\"Connected\");\r\n    //                 logger.info(\"Triggering sql query\");\r\n    //                 connection.query(query, function (error, rows, fields) {\r\n    //                     if (!!error) {\r\n    //                         logger.info(\"Error in the query\");\r\n    //                     }\r\n    //                     else {\r\n    //                         logger.info(\"SUCCESS!\");\r\n        \r\n    //                         for (let i = 0; i < rows.length; i++) {\r\n    //                             let mapKey;\r\n    //                             let mapValue;\r\n        \r\n    //                             for (let [key, value] of Object.entries(rows[i])) {\r\n    //                                 if (key === \"Key\") {\r\n    //                                     mapKey = value;\r\n    //                                 }\r\n    //                                 else {//if(key === \"en\") {\r\n    //                                     mapValue = value;\r\n    //                                 }\r\n    //                             }\r\n    //                             testDataMap.set(mapKey, mapValue);\r\n    //                         }\r\n    //                         connection.destroy();\r\n    //                         logger.info(`Automation Keys size --> ${testDataMap.size}`);\r\n    //                         resolve(testDataMap);\r\n    //                     }\r\n    //                 });\r\n    //             }\r\n    //         });\r\n    //     });\r\n    // }\r\n\r\n\r\n\r\n    static addPoDetailsInZsn(poNumber: string, poType: string,supplier: string,date:string) \r\n    {\r\n       \r\n        logger.info(\"in add po details\");\r\n        const connectionString = \"Data Source=tcp:192.168.5.221,3306;Initial Catalog=ZSN_Schema;User Id=zsnuser;Password=zsn@123;\";\r\n\r\n        logger.info(\"connectionString  : \" + connectionString);\r\n        const connectionObj = parser(connectionString);\r\n\r\n        const query = `INSERT INTO Po_Details (SETUP_NAME,TENANT_NAME,PO_NUMBER,FLAG,PO_TYPE,SUPPLIER,CREATION_DATE) VALUES('${process.env.SETUP}','${process.env.TENANT}','${poNumber}','true','${poType}','${supplier}','${date}');`\r\n        logger.info(query);\r\n        return new Promise((resolve, reject) => {\r\n            let testDataMap = new Map();\r\n            let connection = createConnection(connectionObj);\r\n            connection.connect(function (error) {\r\n                if (!!error) {\r\n                    logger.info(\"Error while connecting zsn db\");\r\n                }\r\n                else {\r\n                    logger.info(\"Connected to zsn\");\r\n                    //logger.info(\"Triggering sql query\");\r\n                    connection.query(query, function (error, rows, fields) {\r\n                        if (!!error) {\r\n                            logger.info(\"Error in the query\");\r\n                            connection.destroy();\r\n                        }\r\n                        else {\r\n                            logger.info(\"SUCCESS!\");\r\n                            connection.destroy();\r\n                            resolve(\"RESOLVED\");\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    static async getTestData(): Promise<Map<string, string>> {\r\n        let testDataMap: Map<string, string> = new Map();\r\n\r\n        let testDataFilePath = `./src/${process.env.PRODUCT}/DataRepository/${process.env.SETUP}_TestData_${process.env.PRODUCT}.json`;\r\n        logger.info(`Test data json file path --> ${testDataFilePath}`);\r\n        \r\n        if(!fs.existsSync(testDataFilePath)) {\r\n            logger.info(`Test data json file '${testDataFilePath}' not found`);\r\n            throw new Error(`Test data json file '${testDataFilePath}' not found`);\r\n        }\r\n        else {\r\n            let jsonObject = JSON.parse(fs.readFileSync(testDataFilePath, \"utf-8\"));\r\n            jsonObject = jsonObject[`${process.env.SETUP}_${process.env.TENANT}` as string];\r\n\r\n            for (const [key, value] of Object.entries(jsonObject)) {\r\n                if(key !== \"CREDENTIALS\") {\r\n                    testDataMap.set(key, value as string);\r\n                }\r\n            }\r\n        }\r\n\r\n        logger.info(`Data map size --> ${testDataMap.size}`);\r\n\r\n        return testDataMap;\r\n    }\r\n\r\n    static async getUiElementXpath(): Promise<Map<string, string>> {\r\n        let uiElementJsonFileName = `./src/${process.env.PRODUCT}/ObjectRepository/UI_Elements.json`;\r\n        \r\n        logger.info(`UI elements to be retrieved from file --> ${uiElementJsonFileName}`);\r\n\r\n        let jsonObject = JSON.parse(fs.readFileSync(uiElementJsonFileName, \"utf-8\"));\r\n        \r\n        let elementMap: Map<string, string> = new Map();\r\n     \r\n        for (const [key, value] of Object.entries(jsonObject)) {\r\n            let elementObject: object = value as object;\r\n\r\n            let xpath = elementObject[\"XPATH\"];\r\n            \r\n            elementMap.set(key, xpath);\r\n        }\r\n\r\n        console.log(\"-------------------elementMap size -----------\" + elementMap.size);\r\n        \r\n        return elementMap;\r\n    }\r\n\r\n    static async getLMTDetails(): Promise<Map<string, Map<string, string>>> {\r\n        let lmtJsonFilePath = `./src/${process.env.PRODUCT}/LmtRepository/Lmt.json`;\r\n        let jsonObject = JSON.parse(fs.readFileSync(lmtJsonFilePath, \"utf-8\"));\r\n        let LMTMap: Map<string, Map<string, string>> = new Map();\r\n        for (const [key, value] of Object.entries(jsonObject)) {\r\n                        \r\n            let map: Map<string, string> = new Map();\r\n            //map.set(\"Module\", childObject[\"Module\"]);\r\n            // map.set(\"Key\", childObject[\"Key\"]);\r\n            // map.set(\"MST_key\", childObject[\"MST_key\"]);\r\n             map.set(key, value as string);\r\n            LMTMap.set(key, map);\r\n        }\r\n        return LMTMap;\r\n    }\r\n\r\n    static async getLMTKeys(): Promise<Map<string, string>> {\r\n        let lmtJsonFilePath = `./src/${process.env.PRODUCT}/LmtRepository/Lmt.json`;\r\n        let jsonObject = JSON.parse(fs.readFileSync(lmtJsonFilePath, \"utf-8\"));\r\n        let getLMTKeys: Map<string, string> = new Map();\r\n        for (const [key, value] of Object.entries(jsonObject)) {\r\n            let mapKey: string = \"\";\r\n            let mapValue: string = \"\";\r\n            if(key === \"en\") {\r\n                mapKey = key;\r\n            }\r\n            else {\r\n                mapValue = key;\r\n            }\r\n            getLMTKeys.set(mapKey, mapValue);\r\n        }\r\n        return getLMTKeys;\r\n    }\r\n\r\n    static async getAutomationKey() {\r\n        let lmtJsonFilePath = `./src/${process.env.PRODUCT}/LmtRepository/Lmt.json`;\r\n        let jsonObject = JSON.parse(fs.readFileSync(lmtJsonFilePath, \"utf-8\"));\r\n        let testDataMap = new Map(); \r\n            \r\n        for (let [key, value] of Object.entries(jsonObject))  \r\n        {\r\n            let mapKey;\r\n            let mapValue;\r\n            mapKey = key;\r\n        \r\n            mapValue = value;\r\n           \r\n            testDataMap.set(mapKey, mapValue);\r\n        }       \r\n        \r\n        logger.info(`Automation Keys size --> ${testDataMap.size}`);\r\n        return testDataMap;\r\n        }\r\n    \r\n    static async getUser(query:string): Promise<Map<string, string>> {\r\n        let timeout = 0;\r\n        if (process.env.GRID) {\r\n            // timeout = random.number({ min: 60000, max: 300000 });\r\n        } \r\n        logger.info(`waiting for timeout --> ${timeout}`);\r\n\r\n        let credsMap: Map<string, string> = new Map();\r\n        \r\n        return new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n                logger.info(`waited for timeout --> ${timeout}`);\r\n                \r\n                let credentialsFilePath = `./src/${process.env.PRODUCT}/DataRepository/${process.env.SETUP}_TestData_${process.env.PRODUCT}.json`;\r\n                logger.info(`Credentials json file path --> ${credentialsFilePath}`);\r\n                \r\n                if(!fs.existsSync(credentialsFilePath)) {\r\n                    logger.info(`Credentials json file '${credentialsFilePath}' not found`);\r\n                    throw new Error(`Credentials json file '${credentialsFilePath}' not found`);\r\n                }\r\n                else {\r\n                    let displayName: string = \"\";\r\n                    let userScope: string = \"\";\r\n                    let jsonObject = JSON.parse(fs.readFileSync(credentialsFilePath, \"utf-8\"));\r\n                    let credsArray: object[] = jsonObject[`${process.env.SETUP}_${process.env.TENANT}` as string][\"CREDENTIALS\"];\r\n\r\n                    for (let i = 0; i < credsArray.length; i++) {\r\n                        if(credsArray[i][\"FLAG\"] === \"true\") {\r\n                            displayName = credsArray[i][\"DISPLAY_NAME\"];\r\n                            credsMap.set(\"USERNAME\", credsArray[i][\"USERNAME\"]);\r\n                            credsMap.set(\"PASSWORD\", credsArray[i][\"PASSWORD\"]);\r\n                        }\r\n                    }\r\n\r\n                    logger.info(`user map size --> ${credsMap.size}`);\r\n                    logger.info(`user map size --> ${credsMap.get(\"USERNAME\")}`);\r\n                    logger.info(`user map size --> ${credsMap.get(\"PASSWORD\")}`);\r\n                    Startup.displayName = displayName;\r\n\r\n                    resolve(credsMap);\r\n                }\r\n            }, timeout);\r\n        });\r\n    }\r\n           \r\n    static async updateUSER(userName: string, status: string) {\r\n        let credentialsFilePath = `./src/${process.env.PRODUCT}/DataRepository/${process.env.SETUP}_TestData_${process.env.PRODUCT}.json`;\r\n        logger.info(`Credentials json file path --> ${credentialsFilePath}`);\r\n\r\n        let jsonObject = JSON.parse(fs.readFileSync(credentialsFilePath, \"utf-8\"));\r\n        let credsArray: object[] = jsonObject[`${process.env.SETUP}_${process.env.TENANT}` as string][\"CREDENTIALS\"];\r\n\r\n        for (let i = 0; i < credsArray.length; i++) {\r\n            if(credsArray[i][\"USERNAME\"] === userName) {\r\n                jsonObject[`${process.env.SETUP}_${process.env.TENANT}` as string][\"CREDENTIALS\"][i][\"FLAG\"] = status;\r\n                fs.writeFileSync(credentialsFilePath, JSON.stringify(jsonObject, null, \"\\t\"));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    static async getUserScope(query:string): Promise<Map<string, string>> {\r\n        let timeout = 0;\r\n        if (process.env.GRID) {\r\n            timeout = random.number({ min: 60000, max: 300000 });\r\n        } \r\n        logger.info(`waiting for timeout --> ${timeout}`);\r\n        let credsMap: Map<string, string> = new Map();\r\n        return new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n                logger.info(`waited for timeout --> ${timeout}`);\r\n                let credentialsFilePath = `./src/${process.env.PRODUCT}/DataRepository/${process.env.SETUP}_TestData_${process.env.PRODUCT}.json`;\r\n                logger.info(`Credentials json file path --> ${credentialsFilePath}`);\r\n                if(!fs.existsSync(credentialsFilePath)) {\r\n                    logger.info(`Credentials json file '${credentialsFilePath}' not found`);\r\n                    throw new Error(`Credentials json file '${credentialsFilePath}' not found`);\r\n                }\r\n                else {\r\n                    let displayName: string = \"\";\r\n                    let userScope: string = \"\";\r\n                    let jsonObject = JSON.parse(fs.readFileSync(credentialsFilePath, \"utf-8\"));\r\n                    let credsArray: object[] = jsonObject[process.env.TENANT as string][\"CREDENTIALS\"];\r\n                    for (let i = 0; i < credsArray.length; i++) {\r\n                        if(credsArray[i][\"FLAG\"] === \"true\" && credsArray[i][\"SCOPE\"] === \"Global\") {\r\n                            displayName = credsArray[i][\"DISPLAY_NAME\"];\r\n                            userScope = credsArray[i][\"SCOPE\"];\r\n                            credsMap.set(\"USERNAME\", credsArray[i][\"USERNAME\"]);\r\n                            credsMap.set(\"PASSWORD\", credsArray[i][\"PASSWORD\"]);\r\n                        }\r\n                    }\r\n                    logger.info(`user map size --> ${credsMap.size}`);\r\n                    logger.info(`user map size --> ${credsMap.get(\"USERNAME\")}`);\r\n                    logger.info(`user map size --> ${credsMap.get(\"PASSWORD\")}`);\r\n                    Startup.displayName = displayName;\r\n                    resolve(credsMap);\r\n                }\r\n            }, timeout);\r\n        });\r\n    }\r\n\r\n}"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\Framework\\FrameworkUtilities\\i18nUtil\\readI18NProp.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 2,
                "column": 1,
                "nodeType": "Program",
                "endLine": 142,
                "endColumn": 2
            },
            {
                "ruleId": "dd-eslint-rules/Actionbot-automation-component-adoption",
                "severity": 1,
                "message": "component - Actionbot automation componenet not adopted",
                "line": 2,
                "column": 1,
                "nodeType": "Program",
                "endLine": 142,
                "endColumn": 2
            },
            {
                "ruleId": "dd-eslint-rules/i18nUtil-LMT-automation-component-adoption",
                "severity": 1,
                "message": "component - i18nUtil LMT automation componenet not adopted",
                "line": 2,
                "column": 1,
                "nodeType": "Program",
                "endLine": 142,
                "endColumn": 2
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 81,
                "column": 19,
                "nodeType": "MemberExpression",
                "endLine": 81,
                "endColumn": 30
            }
        ],
        "errorCount": 1,
        "warningCount": 4,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "\r\nimport { logger } from \"../Logger/logger\";\r\nimport { Startup } from \"../Startup/Startup\";\r\n//import { setStepData } from \"../Share_data/client.js\";\r\nconst fetch = require(\"node-fetch\");\r\nconst { I } = inject();\r\n\r\nexport class TMSLmt {\r\n\r\n    static async getElement(elementKey) {\r\n                        const I = this;\r\n                        const element = Startup.uiElements.get(elementKey) as string;\r\n                        return element;\r\n                      } \r\n\r\n        static async getData(key) {\r\n            const I = this;\r\n            const Value = Startup.testData.get(key) as string;\r\n            return Value;\r\n\r\n            //const I = this;\r\n            //var value;\r\n            // var index = 0;\r\n            // if (key.includes(\"[\") && key.includes(\"]\")) {\r\n            //   let startindex = key.indexOf(\"[\");\r\n            //   let endtindex = key.indexOf(\"]\");\r\n            //   index = key.substring(startindex + 1, endtindex);\r\n            //   key = key.substring(0, startindex);\r\n            // }\r\n            // else {\r\n            //   logger.info(\"warning : no index in key so it will return 0 index value\");\r\n            // }\r\n      \r\n            //let mapValue = Startup.testData.get(key) as string;\r\n            // if (typeof mapValue == 'undefined') {\r\n            //   logger.info(\"Error : Getting null from testData for given field : \" + key);\r\n            // }\r\n            // else {\r\n            //   let arrayVal = mapValue.split(\"||\");\r\n            //   if (index < arrayVal.length) {\r\n            //     value = arrayVal[index];\r\n            //   }\r\n            //   else {\r\n            //     logger.info(\"warning : index is greater then size returning 0 index value\");\r\n            //     value = arrayVal[0];\r\n            //   }\r\n            // }\r\n            //return value;\r\n          }\r\n\r\n    static async getLabel(key: string) {\r\n        // console.log((await client.getStepData(\"mstMap\")).has(key))\r\n        if ((Startup.mst_final).has(key)) {\r\n            console.log(\"mst key taken\" + (Startup.mst_final).get(key))\r\n            let val=(Startup.mst_final).get(key);\r\n            return val;\r\n        } else {\r\n            console.log(\"lmt key taken\")\r\n            let map = Startup.lmt.get(key) as Map<string, string>;\r\n            return map.get(Startup.lang);\r\n        }\r\n        \r\n        // return (await client.getStepData(\"mstMap\")).get(key);\r\n    }\r\n\r\n    // async getLabel(key){\r\n    //     return Startup.lmt.get(key).get((await client.getStepData(\"UserLang\")).toString());\r\n    //    }\r\n    \r\n    static getLabelFromKey(label: string) {\r\n        if (Startup.allkeys.get(label)) {\r\n            return this.getLabel(Startup.allkeys.get(label) as string);\r\n        }\r\n        else {\r\n            logger.info(\"exception occured as key may not happened\")\r\n        }\r\n    }\r\n\r\n    static async getUserLangCode(): Promise<any> {\r\n        return new Promise(async function (resolve, reject) {\r\n            await I.getCookie().then(async function (SAAS_TOKEN: string) {\r\n                console.log(SAAS_TOKEN)\r\n                fetch(\"\" + Startup.testData.get(\"getDetailsAPI\") + \"\", {\r\n                    method: 'GET',\r\n                    headers: {\r\n                        'cookie': 'SAAS_COMMON_BASE_TOKEN_ID=' + SAAS_TOKEN,\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                })\r\n                .then(async function (response: Response) {\r\n                    console.log(\r\n                        `Response: ${response.status} ${response.statusText}`\r\n                    );\r\n                    return response.json();\r\n                })\r\n                .then(async function (json: any) {\r\n                    // await setStepData(\"UserLang\", json.langCode);\r\n                    // console.log(json.langCode)\r\n                    resolve(json.langCode)\r\n                })\r\n                .catch((err: Error) => console.error(err));\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    static async get_USER_MST_keys() {\r\n        // let langCode = await this.getUserLangCode();\r\n        // console.log(langCode);\r\n        let MST_USER;\r\n        return await this.getUserLangCode().then(function(userLang: string) {\r\n            console.log(\"User Language \" + userLang)\r\n            return new Promise(async function (resolve, reject) {\r\n                fetch(Startup.testData.get(\"languageAPI\") + userLang + '.json', {\r\n                    method: 'GET'\r\n                })\r\n                .then(async function (response: Response) {\r\n                    console.log(\r\n                        `Response: ${response.status} ${response.statusText}`\r\n                    );\r\n                    return response.json();\r\n                })\r\n                .then(async function (json: any) {\r\n                    MST_USER = json;\r\n                    resolve(MST_USER);\r\n                });\r\n            })\r\n        })\r\n    }\r\n\r\n    static async matchKeys() {\r\n        let AutoToMstValue = new Map();\r\n        return await this.get_USER_MST_keys().then(async function (MST_user: any) {\r\n            Startup.automationLMT_Pair.forEach(async function (val: string, key: string) {\r\n                if (val != undefined) {\r\n                    AutoToMstValue.set(key, MST_user[val]);\r\n                }\r\n            })\r\n            return AutoToMstValue;\r\n        })\r\n    }\r\n}"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\Framework\\FrameworkUtilities\\i18nUtil\\readResponse.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 40,
                "column": 38,
                "nodeType": "Program",
                "endLine": 40,
                "endColumn": 38
            },
            {
                "ruleId": "dd-eslint-rules/Startup-automation-component-adoption",
                "severity": 1,
                "message": "component - Startup automation componenet used for getting logins fro DB is not adopted",
                "line": 40,
                "column": 38,
                "nodeType": "Program",
                "endLine": 40,
                "endColumn": 38
            },
            {
                "ruleId": "dd-eslint-rules/Actionbot-automation-component-adoption",
                "severity": 1,
                "message": "component - Actionbot automation componenet not adopted",
                "line": 40,
                "column": 38,
                "nodeType": "Program",
                "endLine": 40,
                "endColumn": 38
            },
            {
                "ruleId": "dd-eslint-rules/i18nUtil-LMT-automation-component-adoption",
                "severity": 1,
                "message": "component - i18nUtil LMT automation componenet not adopted",
                "line": 40,
                "column": 38,
                "nodeType": "Program",
                "endLine": 40,
                "endColumn": 38
            }
        ],
        "errorCount": 1,
        "warningCount": 4,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "// var Request = require(\"request\");\r\n// const logger = require(\"../Logger/logger\")\r\n// // import { logger } from \"../Logger/logger\";\r\n// // import \"request\";\r\n\r\n// class readResponse{\r\n\r\n//     getDetails(){\r\n//         process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = 0;\r\n//         Request.get(\"https://dewdrops-qcvw.zycus.net/icontract/api/a/dd/users/getDetails\", (error, response, body) =>{\r\n//         if(error){\r\n//             logger.info(error);\r\n//             return console.log(error);\r\n            \r\n//         }\r\n//         // logger.info(JSON.parse(body));\r\n//         console.log(\"response of get details API     \"+response.statusCode);\r\n//         console.log(\"Response body of the getDetails API     \"+ body + \"\\n\" + JSON.parse(body));\r\n\r\n//         })\r\n//     }\r\n\r\n//     getlangJson(){\r\n//         process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = 0 ;Number;\r\n//         Request.get(\"https://dewdrops-qcvw.zycus.net/icontract/lmt/translations/iContract/en_US.json\", (error, response, body) =>{\r\n//         if(error){\r\n//             logger.info(error);\r\n//             return console.log(error);\r\n            \r\n//         }\r\n//         // logger.info(JSON.parse(body));\r\n//         console.log(\"response of get details API     \"+response.statusCode);\r\n//         console.log(\"Response body of the getDetails API     \"+ body + \"\\n\" + JSON.parse(body));\r\n\r\n//         })\r\n//     }\r\n\r\n// }\r\n\r\n// module.exports = new readResponse;"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\Framework\\FrameworkUtilities\\Logger\\log4jsproperties.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 29,
                "endColumn": 3
            },
            {
                "ruleId": "dd-eslint-rules/Startup-automation-component-adoption",
                "severity": 1,
                "message": "component - Startup automation componenet used for getting logins fro DB is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 29,
                "endColumn": 3
            },
            {
                "ruleId": "dd-eslint-rules/Actionbot-automation-component-adoption",
                "severity": 1,
                "message": "component - Actionbot automation componenet not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 29,
                "endColumn": 3
            },
            {
                "ruleId": "dd-eslint-rules/i18nUtil-LMT-automation-component-adoption",
                "severity": 1,
                "message": "component - i18nUtil LMT automation componenet not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 29,
                "endColumn": 3
            }
        ],
        "errorCount": 1,
        "warningCount": 4,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "export let appSettings = {\r\n    log4js: {\r\n        traceLogConfig: {\r\n            appenders: {\r\n                fileAppender: {\r\n                    type: 'file',\r\n                    filename: './output/log4js.log'/* ,\r\n                    layout: {\r\n                        type: 'pattern',\r\n                        pattern: '%d - %c:[%p]: %m'\r\n                    } */\r\n                },\r\n                consoleAppender: {\r\n                    type: 'console',\r\n                    layout: {\r\n                        type: 'pattern',\r\n                        pattern: '%d - [%p]: %m'\r\n                    }\r\n                }\r\n            },\r\n            categories: {\r\n                default: {\r\n                    appenders: ['fileAppender', 'consoleAppender'],\r\n                    level: 'info'\r\n                }\r\n            }\r\n        }\r\n    }\r\n};"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\Framework\\FrameworkUtilities\\Logger\\logger.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 10,
                "endColumn": 1
            },
            {
                "ruleId": "dd-eslint-rules/Startup-automation-component-adoption",
                "severity": 1,
                "message": "component - Startup automation componenet used for getting logins fro DB is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 10,
                "endColumn": 1
            },
            {
                "ruleId": "dd-eslint-rules/Actionbot-automation-component-adoption",
                "severity": 1,
                "message": "component - Actionbot automation componenet not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 10,
                "endColumn": 1
            },
            {
                "ruleId": "dd-eslint-rules/i18nUtil-LMT-automation-component-adoption",
                "severity": 1,
                "message": "component - i18nUtil LMT automation componenet not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 10,
                "endColumn": 1
            }
        ],
        "errorCount": 1,
        "warningCount": 4,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import { appSettings } from \"./log4jsproperties\";\r\n\r\nimport { configure, getLogger } from \"log4js\";\r\n\r\nconst { traceLogConfig } = appSettings.log4js;\r\n\r\nconfigure(traceLogConfig);\r\n\r\nexport let logger = getLogger();\r\n"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\Framework\\FrameworkUtilities\\Startup\\Startup.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 16,
                "endColumn": 2
            },
            {
                "ruleId": "dd-eslint-rules/Startup-automation-component-adoption",
                "severity": 1,
                "message": "component - Startup automation componenet used for getting logins fro DB is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 16,
                "endColumn": 2
            },
            {
                "ruleId": "dd-eslint-rules/Actionbot-automation-component-adoption",
                "severity": 1,
                "message": "component - Actionbot automation componenet not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 16,
                "endColumn": 2
            },
            {
                "ruleId": "dd-eslint-rules/i18nUtil-LMT-automation-component-adoption",
                "severity": 1,
                "message": "component - i18nUtil LMT automation componenet not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 16,
                "endColumn": 2
            }
        ],
        "errorCount": 1,
        "warningCount": 4,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "export class Startup {\r\n    static confi_prop: Object;\r\n    static configmap: Map<string, string | number | boolean> = new Map();\r\n    static displayName: string;\r\n    static testData: Map<string, string> = new Map();\r\n    static uiElements: Map<string, string> = new Map();\r\n    static users: Map<string, string> = new Map();\r\n    static lmt: Map<string, Map<string, string>> = new Map();\r\n    static allkeys: Map<string, string> = new Map();\r\n    static lang: string;\r\n    static mst_final: any;\r\n    static automationLMT_Pair: any;\r\n    static commonuiElements : Map<string, string> = new Map();\r\n    static defectMap: Map<any, any> = new Map();  \r\n    static finalScenarioLabel_map: Map<any, any> = new Map();\r\n}"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\Framework\\FrameworkUtilities\\steps_file.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 57,
                "column": 1,
                "nodeType": "Program",
                "endLine": 57,
                "endColumn": 1
            },
            {
                "ruleId": "dd-eslint-rules/Startup-automation-component-adoption",
                "severity": 1,
                "message": "component - Startup automation componenet used for getting logins fro DB is not adopted",
                "line": 57,
                "column": 1,
                "nodeType": "Program",
                "endLine": 57,
                "endColumn": 1
            },
            {
                "ruleId": "dd-eslint-rules/Actionbot-automation-component-adoption",
                "severity": 1,
                "message": "component - Actionbot automation componenet not adopted",
                "line": 57,
                "column": 1,
                "nodeType": "Program",
                "endLine": 57,
                "endColumn": 1
            },
            {
                "ruleId": "dd-eslint-rules/i18nUtil-LMT-automation-component-adoption",
                "severity": 1,
                "message": "component - i18nUtil LMT automation componenet not adopted",
                "line": 57,
                "column": 1,
                "nodeType": "Program",
                "endLine": 57,
                "endColumn": 1
            }
        ],
        "errorCount": 1,
        "warningCount": 4,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "// in this file you can append custom step methods to 'I' object\r\n// const { I } = inject();\r\n// var randomstring = require(\"randomstring\");\r\n// const logger = require(\"./Framework/FrameworkUtilities/Logger/logger\");\r\n// module.exports = function () {\r\n//   return actor({\r\n\r\n//     // Define custom steps here, use 'this' to access default methods of I.\r\n//     // It is recommended to place a general 'login' function here.\r\n//     getRandomText(length) {\r\n//       const I = this;\r\n//       return randomstring.generate(length);\r\n//     },\r\n\r\n//     getElement(elementKey) {\r\n//       const I = this;\r\n//       const element = global.uiElements.get(elementKey);\r\n//       return element;\r\n//     },\r\n\r\n//     getData(key) {\r\n//       logger.info(\"############### key passed \" + key);\r\n//       const I = this;\r\n//       var value;\r\n//       var index = 0;\r\n//       if (key.includes(\"[\") && key.includes(\"]\")) {\r\n//         let startindex = key.indexOf(\"[\");\r\n//         let endtindex = key.indexOf(\"]\");\r\n//         index = key.substring(startindex + 1, endtindex);\r\n//         key = key.substring(0, startindex);\r\n//       }\r\n//       else {\r\n//         logger.info(\"warning : no index in key so it will return 0 index value\");\r\n//       }\r\n      \r\n//       let mapValue = global.testData.get(key);\r\n//       if (typeof mapValue == 'undefined') {\r\n//         logger.info(\"Error : Getting null from testData for given field : \" + key);\r\n//       }\r\n//       else {\r\n//         let arrayVal = mapValue.split(\"||\");\r\n//         if (index < arrayVal.length) {\r\n//           value = arrayVal[index];\r\n//         }\r\n//         else {\r\n//           logger.info(\"warning : index is greater then size returning 0 index value\");\r\n//           value = arrayVal[0];\r\n//         }\r\n//       }\r\n//       logger.info(\"############### value returning \" + value);\r\n//       return value;\r\n//     }\r\n\r\n\r\n//   });\r\n// }\r\n"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\Framework\\Jiralogging\\Jiralogging.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 2,
                "column": 1,
                "nodeType": "Program",
                "endLine": 135,
                "endColumn": 1
            },
            {
                "ruleId": "dd-eslint-rules/Startup-automation-component-adoption",
                "severity": 1,
                "message": "component - Startup automation componenet used for getting logins fro DB is not adopted",
                "line": 2,
                "column": 1,
                "nodeType": "Program",
                "endLine": 135,
                "endColumn": 1
            },
            {
                "ruleId": "dd-eslint-rules/Actionbot-automation-component-adoption",
                "severity": 1,
                "message": "component - Actionbot automation componenet not adopted",
                "line": 2,
                "column": 1,
                "nodeType": "Program",
                "endLine": 135,
                "endColumn": 1
            },
            {
                "ruleId": "dd-eslint-rules/i18nUtil-LMT-automation-component-adoption",
                "severity": 1,
                "message": "component - i18nUtil LMT automation componenet not adopted",
                "line": 2,
                "column": 1,
                "nodeType": "Program",
                "endLine": 135,
                "endColumn": 1
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 24,
                "column": 15,
                "nodeType": "Literal",
                "endLine": 24,
                "endColumn": 64
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath ******",
                "line": 57,
                "column": 18,
                "nodeType": "BinaryExpression",
                "endLine": 57,
                "endColumn": 90
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 57,
                "column": 18,
                "nodeType": "Literal",
                "endLine": 57,
                "endColumn": 68
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 78,
                "column": 14,
                "nodeType": "Literal",
                "endLine": 78,
                "endColumn": 70
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 98,
                "column": 16,
                "nodeType": "Literal",
                "endLine": 98,
                "endColumn": 83
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath ******",
                "line": 118,
                "column": 18,
                "nodeType": "BinaryExpression",
                "endLine": 118,
                "endColumn": 94
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 118,
                "column": 18,
                "nodeType": "Literal",
                "endLine": 118,
                "endColumn": 68
            }
        ],
        "errorCount": 1,
        "warningCount": 11,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "\r\nconst fetch = require(\"node-fetch\");\r\n\r\nvar request = require('request');\r\nexport class Jiralogger {\r\n\r\n  static async logJira(ScenarioName: string, FeatureName: string, errorStack: string, flag: boolean) {\r\n    return new Promise(async function (resolve, reject) {\r\n      if (flag) {\r\n        const bodyData = `{\r\n    \"fields\": {\r\n       \"project\":\r\n       {\r\n          \"key\": \"TSTNG\"\r\n       },\r\n       \"summary\": \"`+ ScenarioName + ` SCENARIO has failed from FEATURE ` + FeatureName + `\",\r\n        \"assignee\": { \"id\": \"5ca5be5f9a000c1180956a33\" },\r\n        \"issuetype\": {\r\n            \"name\": \"Bug\"\r\n        }\r\n   }\r\n} `;\r\n\r\n        fetch('https://pdtzycus.atlassian.net/rest/api/2/issue', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Authorization': `Basic SklSQS1ib3R1c2VyQHp5Y3VzLmNvbTpRbnhXTVRKd0pQc0Q4aGpNMFdoVjlENTM=`,\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: bodyData\r\n        })\r\n          .then(async function (response: any) {\r\n            console.log(\r\n              `Response: ${response.status} ${response.statusText}`\r\n            );\r\n            return response.json();\r\n          })\r\n          .then(async function (text: any) {\r\n            resolve(text)\r\n          })\r\n          .catch(async function (err: any) {\r\n            reject(err)\r\n          });\r\n      }\r\n      else {\r\n        resolve()\r\n      }\r\n    });\r\n  }\r\n\r\n  static async updateIssueLink(testExecutionTicket: any) {\r\n    if (process.env.storyNo) {\r\n      return new Promise(async (resolve, reject) => {\r\n        var options = {\r\n          'method': 'PUT',\r\n          'url': 'https://pdtzycus.atlassian.net/rest/api/2/issue/' + testExecutionTicket,\r\n          'headers': {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'Basic SklSQS1ib3R1c2VyQHp5Y3VzLmNvbTpRbnhXTVRKd0pQc0Q4aGpNMFdoVjlENTM='\r\n          },\r\n          body: JSON.stringify({ \"update\": { \"issuelinks\": [{ \"add\": { \"type\": { \"name\": \"Covers\", \"inward\": \"is covered by\", \"outward\": \"covers\" }, \"outwardIssue\": { \"key\": process.env.storyNo } } }] } })\r\n\r\n        };\r\n        console.log(testExecutionTicket)\r\n        request(options, function (error: any, response: any) {\r\n          if (error) reject(new Error(error));\r\n          resolve(response)\r\n        });\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  static async updateFilter(UserStoryKey: string) {\r\n    var options = {\r\n      'method': 'PUT',\r\n      'url': 'https://pdtzycus.atlassian.net/rest/api/3/filter/50855',\r\n      'headers': {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Basic SklSQS1ib3R1c2VyQHp5Y3VzLmNvbTpRbnhXTVRKd0pQc0Q4aGpNMFdoVjlENTM='\r\n      },\r\n      body: JSON.stringify({ \"jql\": \"issuetype = 'Xray Test' AND labels in (\" + UserStoryKey + \")\", \"name\": \"updateLinkedIssue\", \"description\": \"Lists all the xray tests having labelas the userstory ID\" })\r\n\r\n    };\r\n    request(options, function (error: any, response: any) {\r\n      if (error) throw new Error(error);\r\n      console.log(response.body);\r\n    });\r\n\r\n  }\r\n\r\n  static async getModifiedFilterResult() {\r\n    return new Promise(async (resolve: any, reject: any) => {\r\n      var options = {\r\n        'method': 'GET',\r\n        'url': 'https://pdtzycus.atlassian.net/rest/api/3/search?jql=filter=50855',\r\n        'headers': {\r\n          'Accept': 'application/json',\r\n          'Authorization': 'Basic SklSQS1ib3R1c2VyQHp5Y3VzLmNvbTpRbnhXTVRKd0pQc0Q4aGpNMFdoVjlENTM='\r\n        }\r\n      };\r\n      request(options, async function (error: any, response: any) {\r\n        if (error) throw new Error(error);\r\n        resolve((JSON.parse(response.body))[\"issues\"])\r\n      });\r\n    })\r\n  }\r\n\r\n  static async updateissue(storyNumber: string) {\r\n    await Jiralogger.updateFilter(storyNumber);\r\n    await Jiralogger.getModifiedFilterResult().then(async function (listOfIssue: any) {\r\n      console.log(\"===================\")\r\n      for (let i = 0; i < listOfIssue.length; i++) {\r\n        var options = {\r\n          'method': 'PUT',\r\n          'url': 'https://pdtzycus.atlassian.net/rest/api/2/issue/' + (listOfIssue[i])[\"key\"],\r\n          'headers': {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'Basic SklSQS1ib3R1c2VyQHp5Y3VzLmNvbTpRbnhXTVRKd0pQc0Q4aGpNMFdoVjlENTM=',\r\n          }, body: JSON.stringify({ \"update\": { \"issuelinks\": [{ \"add\": { \"type\": { \"name\": \"Test\", \"inward\": \"is tested by\", \"outward\": \"Tests\" }, \"outwardIssue\": { \"key\": storyNumber } } }] } })\r\n\r\n        };\r\n        request(options, function (error: any, response: any) {\r\n          if (error) throw new Error(error);\r\n          console.log(response.body);\r\n        });\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\n"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\Framework\\PropertiesConfigurator\\PropertiesConfigurator.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 18,
                "endColumn": 1
            },
            {
                "ruleId": "dd-eslint-rules/Actionbot-automation-component-adoption",
                "severity": 1,
                "message": "component - Actionbot automation componenet not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 18,
                "endColumn": 1
            },
            {
                "ruleId": "dd-eslint-rules/i18nUtil-LMT-automation-component-adoption",
                "severity": 1,
                "message": "component - i18nUtil LMT automation componenet not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 18,
                "endColumn": 1
            },
            {
                "ruleId": "unused-imports/no-unused-imports",
                "severity": 1,
                "message": "'logger' is defined but never used.",
                "line": 3,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "unusedVar",
                "endLine": 3,
                "endColumn": 16,
                "fix": {
                    "range": [
                        120,
                        185
                    ],
                    "text": ""
                }
            }
        ],
        "errorCount": 1,
        "warningCount": 4,
        "fixableErrorCount": 0,
        "fixableWarningCount": 1,
        "source": "import { Startup } from \"../FrameworkUtilities/Startup/Startup\";\r\nimport { prop } from \"../FrameworkUtilities/config\";\r\nimport { logger } from \"../FrameworkUtilities/Logger/logger\";\r\n\r\nexport function parseJson() {\r\n  for (const [key, value] of Object.entries(prop)) {\r\n    Startup.configmap.set(key, value);\r\n    //logger.info(Startup.testData);\r\n  }\r\n\r\n  // for (const [key, value] of Startup.configmap.entries()) {\r\n  //   logger.info(`key --> ${key} || value --> ${value}`);\r\n  // }\r\n\r\n}\r\n\r\n\r\n"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\Framework\\Xray_Api\\export_Feature.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 66,
                "endColumn": 1
            },
            {
                "ruleId": "dd-eslint-rules/Actionbot-automation-component-adoption",
                "severity": 1,
                "message": "component - Actionbot automation componenet not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 66,
                "endColumn": 1
            },
            {
                "ruleId": "dd-eslint-rules/i18nUtil-LMT-automation-component-adoption",
                "severity": 1,
                "message": "component - i18nUtil LMT automation componenet not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 66,
                "endColumn": 1
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 16,
                "column": 24,
                "nodeType": "Literal",
                "endLine": 16,
                "endColumn": 93
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 35,
                "column": 24,
                "nodeType": "Literal",
                "endLine": 35,
                "endColumn": 91
            }
        ],
        "errorCount": 1,
        "warningCount": 5,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import { xray_ImportCucumberApiRequest } from \"./xray_ImportFeature_Request\";\r\nimport console from \"console\";\r\nimport { Startup } from \"../../Framework/FrameworkUtilities/Startup/Startup\";\r\nvar request = require('request');\r\nvar fs = require('fs');\r\nlet filter_output: any;\r\nexport class xray_ExportCucumberApiRequest {\r\n\r\n    static async exportCucumberFeatureRequest(fetchParam: string) {\r\n\r\n        await xray_ImportCucumberApiRequest.generateAuthToken().then(async function (authToken) {\r\n\r\n            let finalToken: string = 'Bearer ' + authToken.replace(/(\\\")/gm, \"\")\r\n            var options = {\r\n                'method': 'GET',\r\n                'url': 'https://xray.cloud.xpand-it.com/api/v1/export/cucumber?filter=50995',\r\n                'headers': {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': finalToken\r\n                }\r\n            };\r\n            request(options, function (error: any, response: any) {\r\n                if (error) throw new Error(error);\r\n                console.log(response.body)\r\n\r\n            });\r\n\r\n        })\r\n    }\r\n\r\n    static async fetchFilterResult() {\r\n        return new Promise(async (resolve: any, reject: any) => {\r\n            var options = {\r\n                'method': 'GET',\r\n                'url': 'https://pdtzycus.atlassian.net/rest/api/3/search?jql=filter=50995',\r\n                'headers': {\r\n                    'Accept': 'application/json',\r\n                    'Authorization': 'Basic SklSQS1ib3R1c2VyQHp5Y3VzLmNvbTpRbnhXTVRKd0pQc0Q4aGpNMFdoVjlENTM='\r\n                }\r\n            };\r\n            request(options, async function (error: any, response: any) {\r\n                if (error) throw new Error(error);\r\n                resolve(JSON.parse(response.body))\r\n            });\r\n        })\r\n    }\r\n\r\n    static async process_ScenarioLabel() {\r\n        await xray_ExportCucumberApiRequest.fetchFilterResult().then(async function (json: any) {\r\n            let issues_Data: JSON[] = json[\"issues\"]\r\n            for (let i = 0; i < issues_Data.length; i++) {\r\n                Startup.finalScenarioLabel_map.set((issues_Data[i][\"fields\"])[\"summary\"], issues_Data[i][\"key\"])\r\n            }\r\n            console.log(Startup.finalScenarioLabel_map)\r\n        })\r\n    }\r\n}\r\n\r\n// xray_ExportCucumberApiRequest.process_ScenarioLabel()\r\n\r\n\r\n// get scenario name from the feature file\r\n// (?<= Scenario: )[a - z A - Z \\d]*\r\n\r\n\r\n"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\Framework\\Xray_Api\\xray_ImportFeature_Request.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 2,
                "column": 1,
                "nodeType": "Program",
                "endLine": 67,
                "endColumn": 1
            },
            {
                "ruleId": "dd-eslint-rules/Startup-automation-component-adoption",
                "severity": 1,
                "message": "component - Startup automation componenet used for getting logins fro DB is not adopted",
                "line": 2,
                "column": 1,
                "nodeType": "Program",
                "endLine": 67,
                "endColumn": 1
            },
            {
                "ruleId": "dd-eslint-rules/Actionbot-automation-component-adoption",
                "severity": 1,
                "message": "component - Actionbot automation componenet not adopted",
                "line": 2,
                "column": 1,
                "nodeType": "Program",
                "endLine": 67,
                "endColumn": 1
            },
            {
                "ruleId": "dd-eslint-rules/i18nUtil-LMT-automation-component-adoption",
                "severity": 1,
                "message": "component - i18nUtil LMT automation componenet not adopted",
                "line": 2,
                "column": 1,
                "nodeType": "Program",
                "endLine": 67,
                "endColumn": 1
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath ******",
                "line": 13,
                "column": 24,
                "nodeType": "BinaryExpression",
                "endLine": 13,
                "endColumn": 104
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 13,
                "column": 24,
                "nodeType": "Literal",
                "endLine": 13,
                "endColumn": 91
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 43,
                "column": 24,
                "nodeType": "Literal",
                "endLine": 43,
                "endColumn": 77
            }
        ],
        "errorCount": 1,
        "warningCount": 7,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "\r\nvar request = require('request');\r\nvar fs = require('fs');\r\n\r\nexport class xray_ImportCucumberApiRequest {\r\n\r\n    static async importCucumberFeatureRequest(projectKey: string) {\r\n        await xray_ImportCucumberApiRequest.generateAuthToken().then(async function (authToken) {\r\n\r\n            let finalToken: string = 'Bearer ' + authToken.replace(/(\\\")/gm, \"\")\r\n            var options = {\r\n                'method': 'POST',\r\n                'url': 'https://xray.cloud.xpand-it.com/api/v1/import/feature?projectKey=' + projectKey,\r\n                'headers': {\r\n                    'Content-Type': 'multipart/form-data',\r\n\r\n                    'Authorization': finalToken\r\n\r\n                },\r\n                formData: {\r\n                    'file': {\r\n                        'value': fs.createReadStream('C:/Users/saddam.shaikh/Documents/QCVMREDANDOLD/src/iManage/features/RedStories/DDS-131270_Priority.feature'),\r\n                        'options': {\r\n                            'filename': 'C:/Users/saddam.shaikh/Documents/QCVMREDANDOLD/src/iManage/features/RedStories/DDS-131270_Priority.feature',\r\n                            'contentType': null\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            console.log(options)\r\n            request(options, function (error: any, response: any) {\r\n                if (error) throw new Error(error);\r\n                console.log(JSON.parse(response.body));\r\n            });\r\n        })\r\n    }\r\n\r\n    static async generateAuthToken() {\r\n        let token: string;\r\n        return new Promise<string>(async (resolve, reject) => {\r\n            var options = {\r\n                'method': 'POST',\r\n                'url': 'https://xray.cloud.xpand-it.com/api/v1/authenticate',\r\n                'headers': {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ \"client_id\": \"79279168D5CB4D7284FA990D13227F8A\", \"client_secret\": \"b45f7efeb7639fcc1a38c88e7040e22fcfae4c14f9a4b02123a500803dc7aaac\" })\r\n\r\n            };\r\n            request(options, async function (error: any, response: any) {\r\n                if (error)\r\n                    reject(error);\r\n                else {\r\n                    token = response.body\r\n                    resolve(token);\r\n                }\r\n\r\n            });\r\n        })\r\n\r\n\r\n    }\r\n}\r\n\r\n//xray_ImportCucumberApiRequest.importCucumberFeatureRequest(\"DDS\");\r\n\r\n"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\TMS\\Common\\Common.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 42,
                "endColumn": 5
            },
            {
                "ruleId": "dd-eslint-rules/Startup-automation-component-adoption",
                "severity": 1,
                "message": "component - Startup automation componenet used for getting logins fro DB is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 42,
                "endColumn": 5
            },
            {
                "ruleId": "unused-imports/no-unused-imports",
                "severity": 1,
                "message": "'TMSLmt' is defined but never used.",
                "line": 3,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "unusedVar",
                "endLine": 3,
                "endColumn": 16,
                "fix": {
                    "range": [
                        118,
                        202
                    ],
                    "text": ""
                }
            },
            {
                "ruleId": "unused-imports/no-unused-imports",
                "severity": 1,
                "message": "'CreateReportObj' is defined but never used.",
                "line": 4,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "unusedVar",
                "endLine": 4,
                "endColumn": 25,
                "fix": {
                    "range": [
                        202,
                        296
                    ],
                    "text": ""
                }
            },
            {
                "ruleId": "dd-eslint-rules/z.waitForVisible_Should_NotbeUsed",
                "severity": 1,
                "message": "Z.waitForVisible should not be used in the scrit directly",
                "line": 29,
                "column": 15,
                "nodeType": "MemberExpression",
                "endLine": 29,
                "endColumn": 31
            },
            {
                "ruleId": "dd-eslint-rules/z.waitForClickable_Should_NotbeUsed",
                "severity": 1,
                "message": "Z.waitForClickable should not be used in the scrit directly",
                "line": 30,
                "column": 15,
                "nodeType": "MemberExpression",
                "endLine": 30,
                "endColumn": 33
            }
        ],
        "errorCount": 1,
        "warningCount": 6,
        "fixableErrorCount": 0,
        "fixableWarningCount": 2,
        "source": "import { z } from \"actionbot-wrapper/z\";\r\nimport { logger } from \"../../Framework/FrameworkUtilities/Logger/logger\";\r\nimport { TMSLmt } from \"../../Framework/FrameworkUtilities/i18nUtil/readI18NProp\";\r\nimport { CreateReportObj } from \"../../../src/TMS/implementation/Reports/CreateReportObj\";\r\n\r\nconst { I } = inject();\r\nexport class  Common {\r\n\r\n     static getRandomNumber(length) {\r\n        var result           = '';\r\n        var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        var charactersLength = characters.length;\r\n        for ( var i = 0; i < length; i++ ) {\r\n           result +=  characters.charAt(Math.floor(Math.random() * charactersLength));\r\n        }\r\n        logger.info(result)\r\n        return result+\"_auto\";\r\n     }\r\n     static getRandomNumber1(length) {\r\n      var result           = '';\r\n      var characters       = '0123456789';\r\n      var charactersLength = characters.length;\r\n      for ( var i = 0; i < length; i++ ) {\r\n         result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n      }\r\n      return result;\r\n   }\r\n      static async selectInNextMonth(locator, date) {\r\n        await z.waitForVisible(locator);\r\n        await z.waitForClickable(locator);\r\n        await z.click(locator);\r\n        await z.click(\"show next month\", \".d-picker\");\r\n        await z.click(`//*[text()='${date}']`);\r\n    }\r\n\r\n\r\n//     static async selectPreviousMonthDate(locator: string, date: string) {\r\n//       await z.click(locator);\r\n//       await z.click(await TMSLmt.getElement(OnlineStoreObject.SHOW_PREVIOUS_MONTH), await TMSLmt.getElement(OnlineStoreObject.DATE_PICKER_CONTEXT));\r\n//       await z.click(date, await TMSLmt.getElement(OnlineStoreObject.DATE_PICKER_CONTEXT));\r\n//   }\r\n   }"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\TMS\\implementation\\AuditTrail\\AuditTrailImpl.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 30,
                "endColumn": 67
            },
            {
                "ruleId": "unused-imports/no-unused-imports",
                "severity": 1,
                "message": "'Common' is defined but never used.",
                "line": 2,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "unusedVar",
                "endLine": 2,
                "endColumn": 16,
                "fix": {
                    "range": [
                        25,
                        72
                    ],
                    "text": ""
                }
            },
            {
                "ruleId": "unused-imports/no-unused-imports",
                "severity": 1,
                "message": "'TMSLmt' is defined but never used.",
                "line": 5,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "unusedVar",
                "endLine": 5,
                "endColumn": 16,
                "fix": {
                    "range": [
                        165,
                        254
                    ],
                    "text": ""
                }
            }
        ],
        "errorCount": 1,
        "warningCount": 3,
        "fixableErrorCount": 0,
        "fixableWarningCount": 2,
        "source": "const { I } = inject();\r\nimport { Common } from \"../../Common/Common\";\r\nconst AuditTrailObj = require(\"./AuditTrailObj\");\r\nimport { z } from \"actionbot-wrapper/z\";\r\nimport { TMSLmt } from \"../../../Framework/FrameworkUtilities/i18nUtil/readI18NProp\";\r\n\r\nexport class AuditTrailImpl\r\n{\r\n\r\nstatic async selectValueFromDropDown(dropdownElement: string, selectOption: string)\r\n    {\r\n    // await z.waitForVisible(dropdownElement);\r\n    // await z.waitForClickable(dropdownElement);\r\n    await z.click(dropdownElement);\r\n        if (selectOption !== \"undefined\") \r\n        {\r\n            let xpath = `//*[contains(text(),'${selectOption}')]`;\r\n            // let xpath = `//option,'${selectOption}')]`;\r\n            // await z.scrollIntoView(xpath);\r\n            await z.click(xpath);\r\n            // logger.info(`Selected Value from Drop Down: ${selectOption}`);\r\n        }\r\n        else \r\n        {\r\n            // logger.info(\"Select Option in null....\");\r\n        }\r\n    }\r\n}\r\n//module.exports = new AuditTrailImpl();\r\n//module.exports.AuditTrailImpl=AuditTrailImpl; // for inheritance"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\TMS\\implementation\\AuditTrail\\AuditTrailStepImpl.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 131,
                "endColumn": 1
            },
            {
                "ruleId": "unused-imports/no-unused-imports",
                "severity": 1,
                "message": "'Common' is defined but never used.",
                "line": 2,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "unusedVar",
                "endLine": 2,
                "endColumn": 16,
                "fix": {
                    "range": [
                        25,
                        72
                    ],
                    "text": ""
                }
            },
            {
                "ruleId": "unused-imports/no-unused-imports",
                "severity": 1,
                "message": "'AuditTrailImpl' is defined but never used.",
                "line": 4,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "unusedVar",
                "endLine": 4,
                "endColumn": 24,
                "fix": {
                    "range": [
                        122,
                        174
                    ],
                    "text": ""
                }
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 17,
                "column": 16,
                "nodeType": "Literal",
                "endLine": 17,
                "endColumn": 40
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 29,
                "column": 16,
                "nodeType": "Literal",
                "endLine": 29,
                "endColumn": 40
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 38,
                "column": 16,
                "nodeType": "Literal",
                "endLine": 38,
                "endColumn": 40
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 48,
                "column": 16,
                "nodeType": "Literal",
                "endLine": 48,
                "endColumn": 40
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 125,
                "column": 8,
                "nodeType": "MemberExpression",
                "endLine": 125,
                "endColumn": 13
            }
        ],
        "errorCount": 1,
        "warningCount": 8,
        "fixableErrorCount": 0,
        "fixableWarningCount": 2,
        "source": "const { I } = inject();\r\nimport { Common } from \"../../Common/Common\";\r\nimport { AuditTrailObj } from \"./AuditTrailObj\";\r\nimport { AuditTrailImpl } from \"./AuditTrailImpl\";\r\nimport { z } from \"actionbot-wrapper/z\";\r\nimport { TMSLmt } from \"../../../Framework/FrameworkUtilities/i18nUtil/readI18NProp\";\r\n\r\nGiven(\"Navigate to Audit Trail Page\", async function () {\r\n\tawait z.click(await TMSLmt.getElement(AuditTrailObj.AuditTrailTab));\r\n});\r\n\r\nWhen(\"I click on Users\", async function () {\r\n\tawait z.click(await TMSLmt.getElement(AuditTrailObj.AuditTrail_UsersOption));\r\n});\r\n\r\nThen(\"Users AuditTrail page should be accessible\", async function (){\r\n\tawait z.click(\"//select[@id='action']\");\r\n\tawait z.pressKey(\"ArrowDown\");\r\n\t// await z.click(\"//select[@id='action']/option[text()='User Created']\");\r\n});\r\n\r\n\r\nWhen(\"I click on UserGroup\", async function () {\r\n\tawait z.click(await TMSLmt.getElement(AuditTrailObj.AuditTrail_UserGroupOption));\r\n});\r\n\r\nThen(\"UserGroup AuditTrail page should be accessible\",async function (){\r\n\t// await z.click(await TMSLmt.getElement(AuditTrailObj.AuditTrail_ActionsUGCreated));\r\n\tawait z.click(\"//select[@id='action']\");\r\n\tawait z.pressKey(\"ArrowDown\");\r\n});\r\n\r\nWhen(\"I click on Role Management\", async function() {\r\n\tawait z.click(await TMSLmt.getElement(AuditTrailObj.AuditTrail_RolePage));\r\n});\r\n\r\nThen(\"Role AuditTrail page should be accessible\", async function (){\r\n\tawait z.click(\"//select[@id='action']\");\r\n\tawait z.pressKey(\"ArrowDown\");\r\n\t// await z.click(await TMSLmt.getElement(AuditTrailObj.AuditTrail_ActionsRoleCreated));\r\n});\r\n\r\nWhen(\"I click on Settings\",async function () {\r\n\tawait z.click(await TMSLmt.getElement(AuditTrailObj.AuditTrail_SettingPageOption));\r\n});\r\n\r\nThen(\"Settings AuditTrail page should be accessible\", async function() {\r\n\tawait z.click(\"//select[@id='action']\");\r\n\tawait z.pressKey(\"ArrowDown\");\r\n\t// await z.click(await TMSLmt.getElement(AuditTrailObj.AuditTrail_ActionsUserCreated));\r\n});\r\n\r\n// Audit Trail for Admin Activities\r\n\r\nWhen(\"I search for Admin activity-Users\", async function() {\r\n\tawait z.fillField(await TMSLmt.getElement(AuditTrailObj.AuditTrail_UserPerformedBy),await TMSLmt.getData(\"SearchforAdminAct\"));\r\n\tawait z.pressKey('Enter');\r\n});\r\n\r\nThen(\"I should see records performed by Zycus admin\", async function () {\r\n\tawait z.see(\"Zycus Admin\");\r\n});\r\n\r\nWhen(\"I search for Admin activity-UserGroup\", async function () {\r\n\tawait z.fillField(await TMSLmt.getElement(AuditTrailObj.AuditTrail_UserPerformedBy),await TMSLmt.getData(\"SearchforAdminAct\"));\r\n\tawait z.pressKey('Enter');\r\n});\r\n\r\nThen(\"I should see records performed for UG by Zycus admin\", async function (){\r\n\tawait z.see(\"Zycus Admin\");\r\n});\r\n\r\nWhen(\"I search for Admin activity-Role\", async function () {\r\n\tawait z.fillField(await TMSLmt.getElement(AuditTrailObj.AuditTrail_UserPerformedBy),await TMSLmt.getData(\"SearchforAdminAct\"));\r\n\tawait z.pressKey('Enter');\r\n});\r\n\r\nThen(\"I should see records performed by Zycus admin for Role\", async function () {\r\n\tawait z.see(\"Zycus Admin\");\r\n});\r\n\r\nWhen(\"I search for Admin activity-Settings\", async function () {\r\n\tawait z.fillField(await TMSLmt.getElement(AuditTrailObj.AuditTrail_UserPerformedBy),await TMSLmt.getData(\"SearchforAdminAct\"));\r\n\tawait z.pressKey('Enter');\r\n});\r\n\r\nThen(\"I should see records performed by Zycus admin for Settings\", async function () {\r\n\tawait z.see(\"Zycus Admin\");\r\n});\r\n\r\nWhen(\"I select Role updated option\", async function () {\r\n\tawait z.click(await TMSLmt.getElement(AuditTrailObj.ActionsRoleUpdated));\r\n});\r\n\r\nWhen(\"I select Role Activated option in audit trail\", async function () {\r\n\tawait z.click(await TMSLmt.getElement(AuditTrailObj.ActionsRoleActivated));\r\n});\r\n\r\nWhen(\"I select Role Deactivated option in audit trail\", async function () {\r\n\tawait z.click(await TMSLmt.getElement(AuditTrailObj.ActionsRoleDeactivated));\r\n});\r\n\r\nWhen(\"I select Logo updated option in audit trail\", async function () {\r\n\tawait z.click(await TMSLmt.getElement(AuditTrailObj.ActionLogoUpdated));\r\n});\r\n\r\nWhen(\"I select DeactivateUser option in audit page\",async function () {\r\n\tawait z.click(await TMSLmt.getElement(AuditTrailObj.ActionsUserDeactivatedOption));\r\n});\r\n\r\nWhen(\"I select ActivateUser option in audit page\", async function () {\r\n\tawait z.click(await TMSLmt.getElement(AuditTrailObj.ActionsUserActivatedOption));\r\n});\r\n\r\nWhen(\"I select user updated option for audit\", async function () {\r\n\tawait z.click(await TMSLmt.getElement(AuditTrailObj.ActionsUserUpdated));\r\n\tawait z.click(await TMSLmt.getElement(AuditTrailObj.UserUpdateLink));\r\n});\r\n\r\nWhen(\"I select logo reset option of audit\", async function ()  {\r\n\tawait z.click(await TMSLmt.getElement(AuditTrailObj.ActionLogoReset));\r\n});\r\n\r\nThen(\"logo reset record should be there in audit\", async function ()  {\r\n\tawait I.see(\"Company Logo Reset\");\r\n});\r\n\r\nWhen(\"I select ResetUserPassword option in audit page\", async function ()  {\r\n\tawait z.click(await TMSLmt.getElement(AuditTrailObj.ActionsUserPasswordReset));\r\n});\r\n"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\TMS\\implementation\\Company\\CompanyImpl.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 144,
                "endColumn": 1
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 15,
                "column": 15,
                "nodeType": "MemberExpression",
                "endLine": 15,
                "endColumn": 31
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 36,
                "column": 7,
                "nodeType": "MemberExpression",
                "endLine": 36,
                "endColumn": 23
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 37,
                "column": 7,
                "nodeType": "MemberExpression",
                "endLine": 37,
                "endColumn": 14
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 39,
                "column": 7,
                "nodeType": "MemberExpression",
                "endLine": 39,
                "endColumn": 14
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 41,
                "column": 7,
                "nodeType": "MemberExpression",
                "endLine": 41,
                "endColumn": 14
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 43,
                "column": 7,
                "nodeType": "MemberExpression",
                "endLine": 43,
                "endColumn": 14
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 62,
                "column": 15,
                "nodeType": "MemberExpression",
                "endLine": 62,
                "endColumn": 31
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 71,
                "column": 15,
                "nodeType": "MemberExpression",
                "endLine": 71,
                "endColumn": 31
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 91,
                "column": 23,
                "nodeType": "Literal",
                "endLine": 91,
                "endColumn": 67
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 96,
                "column": 52,
                "nodeType": "Literal",
                "endLine": 96,
                "endColumn": 95
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 103,
                "column": 23,
                "nodeType": "Literal",
                "endLine": 103,
                "endColumn": 56
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 104,
                "column": 23,
                "nodeType": "Literal",
                "endLine": 104,
                "endColumn": 67
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 109,
                "column": 48,
                "nodeType": "Literal",
                "endLine": 109,
                "endColumn": 91
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 118,
                "column": 23,
                "nodeType": "Literal",
                "endLine": 118,
                "endColumn": 54
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 119,
                "column": 23,
                "nodeType": "Literal",
                "endLine": 119,
                "endColumn": 67
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 128,
                "column": 23,
                "nodeType": "Literal",
                "endLine": 128,
                "endColumn": 64
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 131,
                "column": 15,
                "nodeType": "MemberExpression",
                "endLine": 131,
                "endColumn": 31
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 133,
                "column": 15,
                "nodeType": "MemberExpression",
                "endLine": 133,
                "endColumn": 31
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 140,
                "column": 23,
                "nodeType": "Literal",
                "endLine": 140,
                "endColumn": 67
            }
        ],
        "errorCount": 1,
        "warningCount": 20,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "const { I } = inject();\r\nimport { Common } from \"../../Common/Common\";\r\nimport { CompanyObj } from \"./CompanyObj\";\r\nimport { logger } from \"../../../Framework/FrameworkUtilities/Logger/logger\";\r\nimport { z } from \"actionbot-wrapper/z\";\r\nimport { TMSLmt } from \"../../../Framework/FrameworkUtilities/i18nUtil/readI18NProp\";\r\n\r\nvar CompanyName = \"COMPANY\" + Common.getRandomNumber1(6);\r\n\r\n\r\nexport class CompanyImpl {\r\n\r\n    static async NavigateToCompanyCreatePage() {\r\n        await z.click(await TMSLmt.getElement(CompanyObj.CREATE_NEW_COMPANY));\r\n        await I.seeTitleEquals(\"Create New Company - Step 1\");\r\n    }\r\n    static async fillBasicInfo() {\r\n\r\n        await z.fillField(await TMSLmt.getElement(CompanyObj.COMPANY_NAME), CompanyName);\r\n        await z.click(await TMSLmt.getElement(CompanyObj.IS_DELEGATED_COMPANY));\r\n        await z.click(await TMSLmt.getElement(CompanyObj.IS_ZAUTH_COMPANY));\r\n        await z.fillField(await TMSLmt.getElement(CompanyObj.COMPANY_ALIAS), CompanyName);\r\n        let DomainURL = CompanyName + \".zycus.com\";\r\n        await z.fillField(await TMSLmt.getElement(CompanyObj.DOMAIN_URL), DomainURL);\r\n        await z.click(await TMSLmt.getElement(CompanyObj.LOGIN_THROUGH_UNIQUE_ID));\r\n        await z.fillField(await TMSLmt.getElement(CompanyObj.COMPANY_LOCATION), await TMSLmt.getData(\"COMPANY_LOCATION_DATA\") + \"_\" + CompanyName);\r\n        await z.fillField(await TMSLmt.getElement(CompanyObj.COMPANY_ADDRESS1), await TMSLmt.getData(\"COMPANY_ADDRESS1_DATA\") + \"_\" + CompanyName);\r\n        await z.fillField(await TMSLmt.getElement(CompanyObj.COMPANY_ADDRESS2), await TMSLmt.getData(\"COMPANY_ADDRESS2_DATA\") + \"_\" + CompanyName);\r\n        await z.fillField(await TMSLmt.getElement(CompanyObj.COMPANY_CITY), await TMSLmt.getData(\"COMPANY_CITY_DATA\") + \"_\" + CompanyName);\r\n        await z.fillField(await TMSLmt.getElement(CompanyObj.COMPANY_STATE), await TMSLmt.getData(\"COMPANY_STATE_DATA\") + \"_\" + CompanyName);\r\n        await z.fillField(await TMSLmt.getElement(CompanyObj.COMPANY_ZIPCODE), await TMSLmt.getData(\"COMPANY_ZIPCODE_DATA\"));\r\n        await z.selectOption(await TMSLmt.getElement(CompanyObj.COMPANY_COUNTRY), await TMSLmt.getData(\"COMPANY_COUNTRY_DATA\"));\r\n        await z.click(await TMSLmt.getElement(CompanyObj.COMPANY_CONTINUE_NEXT_STEP));\r\n    }\r\n    static async ProductComponentSelection() {\r\nawait I.seeTitleEquals(\"Create New Company - Step 2\");\r\nawait I.click(await TMSLmt.getElement(CompanyObj.COMPANY_ENABLE_RAINBOW));\r\nawait z.acceptPopup();\r\nawait I.click(await TMSLmt.getElement(CompanyObj.COMPANY_ENABLE_CRMS));\r\nawait z.acceptPopup();\r\nawait I.click(await TMSLmt.getElement(CompanyObj.COMPANY_ENABLE_ONEVIEW));\r\nawait z.acceptPopup();\r\nawait I.click(await TMSLmt.getElement(CompanyObj.COMPANY_ENABLE_COMMONWORKFLOW));\r\nawait z.acceptPopup();\r\nawait z.fillField(await TMSLmt.getElement(CompanyObj.COMPANY_TMS_URL), await TMSLmt.getData(\"COMPANY_TMS_URL_DATA\"));\r\nawait z.click(await TMSLmt.getElement(CompanyObj.COMPANY_TMS_ACTIVATE));\r\nawait z.fillField(await TMSLmt.getElement(CompanyObj.COMPANY_SIM_URL), await TMSLmt.getData(\"COMPANY_SIM_URL_DATA\"));\r\nawait z.click(await TMSLmt.getElement(CompanyObj.COMPANY_SIM_ACTIVATE));\r\nawait z.fillField(await TMSLmt.getElement(CompanyObj.COMPANY_FIELD_LIBRARY_URL), await TMSLmt.getData(\"COMPANY_FIELD_LIBRARY_URL_DATA\"));\r\nawait z.click(await TMSLmt.getElement(CompanyObj.COMPANY_FIELD_LIBRARY_ACTIVATE));\r\nawait z.fillField(await TMSLmt.getElement(CompanyObj.COMPANY_EPROC_URL), await TMSLmt.getData(\"COMPANY_EPROC_URL_DATA\"));\r\nawait z.click(await TMSLmt.getElement(CompanyObj.COMPANY_EPROC_ACTIVATE));\r\nawait z.fillField(await TMSLmt.getElement(CompanyObj.COMPANY_IREQUEST_URL), await TMSLmt.getData(\"COMPANY_IREQUEST_URL_DATA\"));\r\nawait z.click(await TMSLmt.getElement(CompanyObj.COMPANY_IREQUEST_ACTIVATE));\r\nawait z.fillField(await TMSLmt.getElement(CompanyObj.COMPANY_LMT_URL), await TMSLmt.getData(\"COMPANY_LMT_URL_DATA\"));\r\nawait z.click(await TMSLmt.getElement(CompanyObj.COMPANY_LMT_ACTIVATE));\r\nawait z.fillField(await TMSLmt.getElement(CompanyObj.COMPANY_SHT_URL), await TMSLmt.getData(\"COMPANY_SHT_URL_DATA\"));\r\nawait z.click(await TMSLmt.getElement(CompanyObj.COMPANY_SHT_ACTIVATE));\r\nawait z.click(await TMSLmt.getElement(CompanyObj.COMPANY_CONTINUE_NEXT_STEP));\r\n    }\r\n    static async fillCompanyAdminDetails() {\r\n        await I.seeTitleEquals(\"Create New Company - Step 3\");\r\n        await z.fillField(await TMSLmt.getElement(CompanyObj.COMPANY_ADMIN_FIRST_NAME), \"CAFN_\" + CompanyName);\r\n        await z.fillField(await TMSLmt.getElement(CompanyObj.COMPANY_ADMIN_LAST_NAME), \"CALN_\" + CompanyName);\r\n        await z.fillField(await TMSLmt.getElement(CompanyObj.COMPANY_ADMIN_DISPLAY_NAME), \"CADN_\" + CompanyName);\r\n        await z.fillField(await TMSLmt.getElement(CompanyObj.COMPANY_ADMIN_EMAIL), \"CA@\" + CompanyName + \".com\");\r\n        await z.click(await TMSLmt.getElement(CompanyObj.COMPANY_CONTINUE_NEXT_STEP));\r\n\r\n    }\r\n    static async fillPerferences() {\r\n        await I.seeTitleEquals(\"Create New Company - Step 4\");\r\nawait z.fillField(await TMSLmt.getElement(CompanyObj.COMPANY_TIMEZONE), await TMSLmt.getData(\"COMPANY_TIMEZONE_DATA\"));\r\nawait z.pressKey(\"ArrowDown\");\r\nawait z.pressKey(\"Enter\");\r\nawait z.selectOption(await TMSLmt.getElement(CompanyObj.COMPANY_NUMBER_FORMAT), await TMSLmt.getData(\"COMPANY_NUMBER_FORMAT_DATA\"));\r\nawait z.selectOption(await TMSLmt.getElement(CompanyObj.COMPANY_DATE_FORMAT), await TMSLmt.getData(\"COMPANY_DATE_FORMAT_DATA\"));\r\nawait z.selectOption(await TMSLmt.getElement(CompanyObj.COMPANY_TIME_FORMAT), await TMSLmt.getData(\"COMPANY_TIME_FORMAT_DATA\"));\r\nawait z.selectOption(await TMSLmt.getElement(CompanyObj.COMPANY_CURRENCY), await TMSLmt.getData(\"COMPANY_CURRENCY_DATA\"));\r\nawait z.selectOption(await TMSLmt.getElement(CompanyObj.COMPANY_LOCALE), await TMSLmt.getData(\"COMPANY_LOCALE_DATA\"));\r\nawait z.selectOption(await TMSLmt.getElement(CompanyObj.COMPANY_DECIMAL_PRECISION), await TMSLmt.getData(\"COMPANY_DECIMAL_PRECISION_DATA\"));\r\nawait z.click(await TMSLmt.getElement(CompanyObj.COMPANY_CONTINUE_NEXT_STEP));\r\n    }\r\n    static async defineCompany() {\r\n        await z.see(\"CA@\" + CompanyName + \".com\");\r\n        await z.see(\"TMS\");\r\n        await z.click(await TMSLmt.getElement(CompanyObj.COMPANY_DEFINE_COMPANY));\r\n    }\r\n    static async VerifyCompanyCreationPopup() {\r\n        await z.see(\"Success\");\r\n        await z.see(CompanyName);\r\n        await z.click(\"//button[@role='button']/span[text()='Ok']\");\r\n    }\r\n    static async searchCompany() {\r\n        await z.fillField(await TMSLmt.getElement(CompanyObj.COMPANY_LISTING_SEARCH_BY_VALUE), CompanyName);\r\n        await z.click(await TMSLmt.getElement(CompanyObj.COMPANY_LISTING_SEARCH_COMPANY_BUTTON));\r\n        var Searchedcompany = await z.grabTextFrom(\".//*[@class='filterGridTblTd fixed-left']\");\r\n        logger.info(\"print \"+Searchedcompany);\r\n        logger.info(\"print \"+CompanyName);\r\n        await z.assertEqual(Searchedcompany,CompanyName);\r\n    }\r\n    static async activateCompany() {\r\n        await this.searchCompany1(await TMSLmt.getData(\"COMPANY_ACTIVE_DEACTIVE_DATA\"));\r\n        await z.click(\".//*[@title='Inactive Company']\")\r\n        await z.click(\"//button[@role='button']/span[text()='Ok']\");\r\n    }\r\n    static async searchCompany1(CompName) {\r\n        await z.fillField(await TMSLmt.getElement(CompanyObj.COMPANY_LISTING_SEARCH_BY_VALUE), CompName);\r\n        await z.click(await TMSLmt.getElement(CompanyObj.COMPANY_LISTING_SEARCH_COMPANY_BUTTON));\r\n        let findcompany = await z.grabTextFrom(\".//*[@class='filterGridTblTd fixed-left']\");\r\n        await z.assertEqual(CompName,findcompany);\r\n    }\r\n    static async verifyCompanyActive() {\r\n        await this.searchCompany1(await TMSLmt.getData(\"COMPANY_ACTIVE_DEACTIVE_DATA\"));\r\n        await z.see(\"Active\");\r\n    }\r\n    static async deactivateCompany() {\r\n        await this.searchCompany1(await TMSLmt.getData(\"COMPANY_ACTIVE_DEACTIVE_DATA\"));\r\n        await z.click(\".//*[@title='Active Company']\")\r\n        await z.click(\"//button[@role='button']/span[text()='Ok']\");\r\n    }\r\n    static async verifyCompanyDeActive() {\r\n        await this.searchCompany1(await TMSLmt.getData(\"COMPANY_ACTIVE_DEACTIVE_DATA\"));\r\n        await z.see(\"Inactive\");\r\n    }\r\n\r\n    static async NavigatetoEditPage() {\r\n        await this.searchCompany1(await TMSLmt.getData(\"COMPANY_EDIT_NAME\"));\r\n        await z.click(\".//*[@title='Edit Company Information']\");\r\n    }\r\n    static async updateCompanyBasicDetails() {\r\n        await I.seeTitleEquals(\"Company Summary\");\r\n        await z.click(`//span[text()=\"Basic Information\"]/following-sibling::label`);\r\n        await I.seeTitleEquals(\"Edit Existing Company\");\r\n        await z.fillField(await TMSLmt.getElement(CompanyObj.COMPANY_CITY), \"Edited City\");\r\n        await z.click(await TMSLmt.getElement(CompanyObj.COMPANY_CONTINUE_NEXT_STEP));\r\n    }\r\n    static async VerifyCompanyUpdatePopup() {\r\n        await z.see(\"Success\");\r\n        await z.see(await TMSLmt.getData(\"COMPANY_EDIT_NAME\"));\r\n        await z.click(\"//button[@role='button']/span[text()='Ok']\");\r\n       //comment \r\n    }\r\n}\r\n"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\TMS\\implementation\\Company\\CompanyStepImpl.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 61,
                "endColumn": 4
            },
            {
                "ruleId": "dd-eslint-rules/i18nUtil-LMT-automation-component-adoption",
                "severity": 1,
                "message": "component - i18nUtil LMT automation componenet not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 61,
                "endColumn": 4
            },
            {
                "ruleId": "unused-imports/no-unused-imports",
                "severity": 1,
                "message": "'Common' is defined but never used.",
                "line": 2,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "unusedVar",
                "endLine": 2,
                "endColumn": 16,
                "fix": {
                    "range": [
                        25,
                        72
                    ],
                    "text": ""
                }
            }
        ],
        "errorCount": 1,
        "warningCount": 3,
        "fixableErrorCount": 0,
        "fixableWarningCount": 1,
        "source": "const { I } = inject();\r\nimport { Common } from \"../../Common/Common\";\r\nimport { CompanyImpl } from \"./CompanyImpl\";\r\nimport { CompanyObj } from \"./CompanyObj\";\r\nimport { z } from \"actionbot-wrapper/z\";\r\n\r\n\r\nGiven (\"User on Create Company Page\", async function() {\r\n    await CompanyImpl.NavigateToCompanyCreatePage();\r\n});\r\n\r\nWhen (\"I Fill Basic Information\", async function() {\r\n    await CompanyImpl.fillBasicInfo();    \r\n});\r\n\r\nWhen (\"I Fill Component Selection & Product Allocation\", async function() {\r\n    await CompanyImpl.ProductComponentSelection();    \r\n});\r\nWhen (\"I Fill Company Admin Details\", async function() {\r\n    await CompanyImpl.fillCompanyAdminDetails();    \r\n});\r\nWhen (\"I Fill Preferences\", async function() {\r\n    await CompanyImpl.fillPerferences();    \r\n});\r\nWhen (\"Define Company\", async function() {\r\n    await CompanyImpl.defineCompany();\r\n});\r\nThen (\"Company Creation Success Popup should be seen\", async function() {\r\n    await CompanyImpl.VerifyCompanyCreationPopup();\r\n});\r\nThen (\"Company is shown on Company Listing Page\", async function() {\r\n    await CompanyImpl.searchCompany();\r\n});\r\nWhen (\"I activate Company\",async function(){\r\n    await CompanyImpl.activateCompany();\r\n});\r\nThen (\"Company should get activate\", async function() {\r\n    await CompanyImpl.verifyCompanyActive();\r\n});\r\nWhen (\"I deactivate Company\",async function(){\r\n    await CompanyImpl.deactivateCompany();\r\n});\r\nThen (\"Company should get deactivate\", async function() {\r\n    await CompanyImpl.verifyCompanyDeActive();\r\n});\r\n\r\nGiven (\"Go to the Edit Company Summary Page\", async function() {\r\n    await CompanyImpl.NavigatetoEditPage();\r\n});\r\n\r\nWhen(\"Update Company Basic Details\", async function(){\r\n    await CompanyImpl.updateCompanyBasicDetails();\r\n});\r\n\r\nWhen(\"Update Company\",async function(){\r\n    await z.click(CompanyObj.COMPANY_UPDATE_COMPANY);\r\n});\r\n\r\nThen(\"Company Popup should be seen\",async function(){\r\n    await CompanyImpl.VerifyCompanyUpdatePopup();\r\n});"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\TMS\\implementation\\DSSO\\DSSOImpl.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 23,
                "endColumn": 2
            },
            {
                "ruleId": "dd-eslint-rules/i18nUtil-LMT-automation-component-adoption",
                "severity": 1,
                "message": "component - i18nUtil LMT automation componenet not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 23,
                "endColumn": 2
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 8,
                "column": 19,
                "nodeType": "Literal",
                "endLine": 8,
                "endColumn": 49
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 9,
                "column": 23,
                "nodeType": "Literal",
                "endLine": 9,
                "endColumn": 53
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 10,
                "column": 19,
                "nodeType": "Literal",
                "endLine": 10,
                "endColumn": 49
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 11,
                "column": 23,
                "nodeType": "Literal",
                "endLine": 11,
                "endColumn": 53
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 12,
                "column": 19,
                "nodeType": "Literal",
                "endLine": 12,
                "endColumn": 47
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 17,
                "column": 23,
                "nodeType": "Literal",
                "endLine": 17,
                "endColumn": 60
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 18,
                "column": 27,
                "nodeType": "Literal",
                "endLine": 18,
                "endColumn": 64
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 19,
                "column": 23,
                "nodeType": "Literal",
                "endLine": 19,
                "endColumn": 60
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 20,
                "column": 27,
                "nodeType": "Literal",
                "endLine": 20,
                "endColumn": 64
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 21,
                "column": 23,
                "nodeType": "Literal",
                "endLine": 21,
                "endColumn": 58
            }
        ],
        "errorCount": 1,
        "warningCount": 12,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "const { I } = inject();\r\nimport { z } from \"actionbot-wrapper/z\";\r\n\r\nexport class  DSSOImpl  {\r\n\r\n    static async LoginThroughADFS(Email,Password){\r\n\r\n    await z.click(\"//input[@id='userNameInput']\")\r\n    await z.fillField(\"//input[@id='userNameInput']\", Email)\r\n    await z.click(\"//input[@id='passwordInput']\")\r\n    await z.fillField(\"//input[@id='passwordInput']\", Password)\r\n    await z.click(\"//span[@id='submitButton']\")\r\n\r\n    }\r\n    static async LoginThroughOkta(Email,Password){\r\n\r\n        await z.click(\"//input[@id='okta-signin-username']\")\r\n        await z.fillField(\"//input[@id='okta-signin-username']\", Email)\r\n        await z.click(\"//input[@id='okta-signin-password']\")\r\n        await z.fillField(\"//input[@id='okta-signin-password']\", Password)\r\n        await z.click(\"//input[@id='okta-signin-submit']\")\r\n    }\r\n}"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\TMS\\implementation\\DSSO\\DSSOStepImpl.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 80,
                "endColumn": 1
            },
            {
                "ruleId": "dd-eslint-rules/i18nUtil-LMT-automation-component-adoption",
                "severity": 1,
                "message": "component - i18nUtil LMT automation componenet not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 80,
                "endColumn": 1
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 8,
                "column": 12,
                "nodeType": "MemberExpression",
                "endLine": 8,
                "endColumn": 26
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 13,
                "column": 12,
                "nodeType": "MemberExpression",
                "endLine": 13,
                "endColumn": 29
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 18,
                "column": 11,
                "nodeType": "MemberExpression",
                "endLine": 18,
                "endColumn": 28
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 31,
                "column": 12,
                "nodeType": "MemberExpression",
                "endLine": 31,
                "endColumn": 29
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 41,
                "column": 56,
                "nodeType": "Literal",
                "endLine": 41,
                "endColumn": 82
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 45,
                "column": 19,
                "nodeType": "MemberExpression",
                "endLine": 45,
                "endColumn": 32
            }
        ],
        "errorCount": 1,
        "warningCount": 8,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "const { I } = inject();\r\nimport { logger } from \"../../../Framework/FrameworkUtilities/Logger/logger\";\r\nimport { DSSOImpl } from \"./DSSOImpl\";\r\nimport { z } from \"actionbot-wrapper/z\";\r\n\r\nGiven (\"User hits {string} DSSO Link\", async function(URL) {\r\n     await z.amOnPage(URL);\r\n     await I.resizeWindow(\"maximize\");\r\n});\r\n\r\nThen (\"User Redirect to ADFS Login Page\", async function() {\r\n     await z.see(\"Zycus ADFS\");\r\n     await I.seeInCurrentUrl(\"adfs.zycus.com\");\r\n});\r\n\r\nThen (\"User Redirect to okta Login Page\", async function() {\r\n    await z.see(\"Okta\");\r\n    await I.seeInCurrentUrl(\"zycus.oktapreview.com\");\r\n});\r\n\r\n\r\nWhen(\"Login thorugh ADFS {string},{string} creds\", async function(Email,Password) {\r\n    await DSSOImpl.LoginThroughADFS(Email,Password);\r\n});\r\n\r\nWhen(\"Login thorugh okta {string},{string} creds\", async function(Email,Password) {\r\n    await DSSOImpl.LoginThroughOkta(Email,Password);\r\n});\r\n\r\nThen (\"Dewdrop Login Successful\", async function() {\r\n     await I.seeInCurrentUrl(\"zcs\");\r\n     await z.seeElement(\"dew-navbar\");\r\n});\r\n\r\n\r\n\r\nWhen(\"Concurrent okta login {string},{string},{string} creds\", async function(Email,Password,URL) {\r\n    await DSSOImpl.LoginThroughOkta(Email,Password);\r\n    let flag=true;\r\n    do{\r\n        let Count= await z.grabNumberOfVisibleElements(\"//span[@class='message']\");\r\n        logger.info(\"Printing .......\"+Count);\r\n          if(Count == 0)\r\n          { \r\n            await I.clearCookie('SAAS_COMMON_BASE_TOKEN_ID');\r\n            await z.amOnPage(URL);\r\n          }\r\n          else \r\n          flag=false;\r\n    }while(flag);\r\n});\r\n\r\nThen (\"zAuth Error Page shown User {string} not Found\", async function(Email) {\r\n    await z.see(\"User not found with loginId \"+Email);\r\n    await z.see(\"Error Code: NR-TMS-C-AUTH018\");\r\n});\r\n\r\nThen (\"zAuth Error Page shown User {string} inactive\", async function(Email) {\r\n    await z.see(\"User with email address \"+Email+\" is not active\");\r\n    await z.see(\"Error Code: NR-TMS-C-AUTH005\");\r\n});\r\n\r\nThen (\"zAuth Error Page shown User {string} Exceed Concurrent\", async function(Email) {\r\n    await z.see(\"Cannot login as you are already logged in from maximum permitted locations. \"+Email);\r\n    await z.see(\"Error Code: NR-TMS-C-AUTH014\");\r\n});\r\n\r\nThen (\"SetupBridge Common Error Page\", async function() {\r\n    await z.see(\"User is Inactive in TMS or User is not present in TMS. Please contact Zycus for assistance.\");\r\n});\r\n\r\nThen (\"Verify zAuth Logout Page\", async function() {\r\n    await z.see(\"Successfully Logged Out of Zycus Portal\");\r\n    await z.see(\"Kindly close the window and reopen it, in order to login to Zycus Portal\");\r\n});\r\n\r\nThen (\"Verify SetupBridge Logout Page\", async function() {\r\n    await z.see(\"Successfully logout out of TMS. Please close the browser\");\r\n});\r\n"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\TMS\\implementation\\Impersonation\\ImpersonationImpl.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 85,
                "endColumn": 2
            },
            {
                "ruleId": "unused-imports/no-unused-imports",
                "severity": 1,
                "message": "'logger' is defined but never used.",
                "line": 3,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "unusedVar",
                "endLine": 3,
                "endColumn": 16,
                "fix": {
                    "range": [
                        103,
                        182
                    ],
                    "text": ""
                }
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 13,
                "column": 15,
                "nodeType": "MemberExpression",
                "endLine": 13,
                "endColumn": 31
            },
            {
                "ruleId": "dd-eslint-rules/z.waitForVisible_Should_NotbeUsed",
                "severity": 1,
                "message": "Z.waitForVisible should not be used in the scrit directly",
                "line": 34,
                "column": 15,
                "nodeType": "MemberExpression",
                "endLine": 34,
                "endColumn": 31
            }
        ],
        "errorCount": 1,
        "warningCount": 4,
        "fixableErrorCount": 0,
        "fixableWarningCount": 1,
        "source": "import { Common } from \"../../Common/Common\";\r\nimport { ImpersonationObj } from \"./ImpersonationObj\";\r\nimport { logger } from \"../../../Framework/FrameworkUtilities/Logger/logger\";\r\nimport { TMSLmt } from \"../../../Framework/FrameworkUtilities/i18nUtil/readI18NProp\";\r\nimport { z } from \"actionbot-wrapper/z\";\r\n\r\nlet varDesc=Common.getRandomNumber(8);\r\n\r\n\r\nconst { I } = inject();\r\nexport class ImpersonationImpl {\r\n    static async VerifyUserOnAcceptImpersonationPage(){\r\n        await I.seeTitleEquals(\"Company Admin Impersonate User Request Page\");\r\n        await z.see(\"User Management > Impersonate User Requests\");\r\n        await z.see(\"Impersonate User Closing Date\");\r\n        }  \r\n        static async NavigatetoMyProfileImpersonatePage(){\r\n        //await z.waitForVisible(await TMSLmt.getElement(ImpersonationObj.DewDropMyProfile),120);\r\n        //await z.seeElement(await TMSLmt.getElement(ImpersonationObj.DewDropMyProfile));   \r\n        await z.click( await TMSLmt.getElement(ImpersonationObj.DewDropMyProfile));\r\n        //await z.waitForVisible(await TMSLmt.getElement(ImpersonationObj.DewDropProfile_Impersonation),120);\r\n        await z.click(await TMSLmt.getElement(ImpersonationObj.DewDropProfile_Impersonation));\r\n        //await z.waitForVisible(await TMSLmt.getElement(ImpersonationObj.Title_Impersonation_DD_page),120);\r\n        await z.seeElement(await TMSLmt.getElement(ImpersonationObj.Title_Impersonation_DD_page));  \r\n        }\r\n    \r\n        static async GiveImpersonateAccessToCA(){\r\n        await z.click(await TMSLmt.getElement(ImpersonationObj.AuthorizeTab));\r\n        await z.seeElement(await TMSLmt.getElement(ImpersonationObj.AuthorizeTab_active));\r\n        await z.click(ImpersonationObj.Radio_button_CA);\r\n        await Common.selectInNextMonth(await TMSLmt.getElement(ImpersonationObj.DatePicker_Impersonation_date),11);\r\n        await z.fillField(await TMSLmt.getElement(ImpersonationObj.Text_Impersonation),varDesc);\r\n        await z.click(await TMSLmt.getElement(ImpersonationObj.Save_btn));\r\n        await z.waitForVisible(await TMSLmt.getElement(ImpersonationObj.Success_alert),120);\r\n        await z.click(await TMSLmt.getElement(ImpersonationObj.Done_btn));\r\n        await z.click(await TMSLmt.getElement(ImpersonationObj.Cancel_btn));\r\n        }\r\n    \r\n        static async AcceptImpersonateRequestAsCA(){\r\n       \r\n       /*     let flag=true;\r\n        do{\r\n            let a= await I.grabNumberOfVisibleElements(\"Auto Description-3063\");\r\n            logger.info(\"Count \"+a)\r\n    \r\n            if(a == 0)\r\n            {\r\n                logger.info (\"If loop\")\r\n                I.wait(5);\r\n                I.click(\"//*[@class='next']\");\r\n            }\r\n            else \r\n            flag=false;\r\n        }while(flag);\r\n        \r\n        logger.info(\"clicked on next button\");\r\n        Common.clicked(`//td[text()='Auto Description-3063']/following-sibling::td/a[text()='Accept Request']`);\r\n        Common.clicked(ImpersonationObj.Accept_btn);\r\n        Common.clicked(ImpersonationObj.Ok_btn);\r\n        */\r\n        await z.fillField(await TMSLmt.getElement(ImpersonationObj.Email_Search),await TMSLmt.getData(\"Impersonate_user_Email\"));\r\n        await z.click(await TMSLmt.getElement(ImpersonationObj.Search_btn));\r\n        await z.click(`//td[text()='${varDesc}']/following-sibling::td/a[text()='Accept Request']`);\r\n        await z.click(await TMSLmt.getElement(ImpersonationObj.Accept_btn));\r\n        await z.click(await TMSLmt.getElement(ImpersonationObj.Ok_btn));\r\n        }\r\n    \r\n        static async VerifyImpersonate_As_UserLogin(){\r\n            //await z.waitForVisible(await TMSLmt.getElement(ImpersonationObj.DewDropMyProfile),120);\r\n            //await z.seeElement(await TMSLmt.getElement(ImpersonationObj.DewDropMyProfile));   \r\n            await z.click(await TMSLmt.getElement(ImpersonationObj.DewDropMyProfile));\r\n            //await z.waitForVisible(await TMSLmt.getElement(ImpersonationObj.DewDropMyProfile_ManageProfile),120);\r\n            await z.click(await TMSLmt.getElement(ImpersonationObj.DewDropMyProfile_ManageProfile));\r\n            await z.see(await TMSLmt.getData(\"Impersonate_user_Email\"));\r\n            await z.click(await TMSLmt.getElement(ImpersonationObj.Cancel_btn));\r\n        }\r\n        static async revokeimpersonaterequest(){\r\n            \r\n            await this.NavigatetoMyProfileImpersonatePage();\r\n            await z.click(await TMSLmt.getElement(ImpersonationObj.ViewImpersonationRequestsTab));\r\n            await z.click(await TMSLmt.getElement(ImpersonationObj.Revoke_btn_First));\r\n        }\r\n\r\n\r\n}"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\TMS\\implementation\\Impersonation\\ImpersonationStepImpl.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 36,
                "endColumn": 4
            }
        ],
        "errorCount": 1,
        "warningCount": 1,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "const { I } = inject();\r\n\r\nimport { ImpersonationObj } from \"./ImpersonationObj\";\r\nimport { ImpersonationImpl } from \"./ImpersonationImpl\";\r\nimport { z } from \"actionbot-wrapper/z\";\r\nimport { TMSLmt } from \"../../../Framework/FrameworkUtilities/i18nUtil/readI18NProp\";\r\n\r\n//let varDesc=Common.getRandomNumber(8);\r\n\r\nWhen(\"Navigate to Impersonation Page\", async function () {\r\n\tawait z.click(await TMSLmt.getElement(ImpersonationObj.ImpersonationTab));\r\n});\r\n\r\nThen(\"Impersonation page should be accessible\", async function () {\r\n    await ImpersonationImpl.VerifyUserOnAcceptImpersonationPage();\r\n});\r\n    \r\nWhen(\"I Select Allow impersonate from user profile\", async function () {\r\n    await ImpersonationImpl.NavigatetoMyProfileImpersonatePage();\r\n});\r\n\r\nWhen(\"I select allow company admin to impersonate me\", async function () {\r\n    await ImpersonationImpl.GiveImpersonateAccessToCA();\r\n});\r\n\r\nWhen(\"I accept the impersonate request\", async function () {\r\n    await ImpersonationImpl.AcceptImpersonateRequestAsCA();\r\n});\r\n\r\nThen(\"I should be login as Impersonate User\", async function () {\r\n    await ImpersonationImpl.VerifyImpersonate_As_UserLogin();\r\n});\r\n\r\nThen(\"Remove impersonate request\", async function() {\r\n    await ImpersonationImpl.revokeimpersonaterequest();\r\n});"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\TMS\\implementation\\ImportAndExport\\UserExportImpl.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 85,
                "endColumn": 68
            },
            {
                "ruleId": "unused-imports/no-unused-imports",
                "severity": 1,
                "message": "'Common' is defined but never used.",
                "line": 2,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "unusedVar",
                "endLine": 2,
                "endColumn": 16,
                "fix": {
                    "range": [
                        25,
                        72
                    ],
                    "text": ""
                }
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 14,
                "column": 9,
                "nodeType": "MemberExpression",
                "endLine": 14,
                "endColumn": 16
            },
            {
                "ruleId": "dd-eslint-rules/hard-coded-wait",
                "severity": 1,
                "message": "User added hard coded wait",
                "line": 16,
                "column": 9,
                "nodeType": "MemberExpression",
                "endLine": 16,
                "endColumn": 15
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 16,
                "column": 9,
                "nodeType": "MemberExpression",
                "endLine": 16,
                "endColumn": 15
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 74,
                "column": 26,
                "nodeType": "Literal",
                "endLine": 74,
                "endColumn": 52
            }
        ],
        "errorCount": 1,
        "warningCount": 6,
        "fixableErrorCount": 0,
        "fixableWarningCount": 1,
        "source": "const { I } = inject();\r\nimport { Common } from \"../../Common/Common\";\r\nimport { UserExportObj } from \"./UserExportObj\";\r\nimport { z } from \"actionbot-wrapper/z\";\r\nimport { TMSLmt } from \"../../../Framework/FrameworkUtilities/i18nUtil/readI18NProp\";\r\n\r\nexport class UserExportImpl\r\n{\r\n   static async selectProduct()\r\n     {  \r\n        var products = UserExportObj.ProductList;\r\n        for (let i = 0; i < products.length; i++) \r\n        {\r\n        I.click(`//div[@class='cust-drop-inner']/div[@class='drop-row']/input[@value='${products[i]}']`);\r\n        }\r\n        I.wait(10);\r\n     }\r\n\r\n   static async ExportUserData()\r\n   {\r\n      await z.click(await TMSLmt.getElement(UserExportObj.ExportUserData));\r\n      await z.click(await TMSLmt.getElement(UserExportObj.UserExpPopUpOK));\r\n   }\r\n\r\n   static async BellIconClick()\r\n   {\r\n      await z.click(await TMSLmt.getElement(UserExportObj.BellIcon));\r\n      await z.click(await TMSLmt.getElement(UserExportObj.BellIconExportTab));\r\n   }\r\n\r\n   static async ExcelDwnloadBulkEditUsers()\r\n   {\r\n      await z.click(await TMSLmt.getElement(UserExportObj.AllUserBulkEditDownloadBtn));\r\n      await z.click(await TMSLmt.getElement(UserExportObj.AllUserBulkEditConfirmationOK));\r\n   }\r\n\r\n   static async SelectStatus()\r\n   {\r\n      await z.click(await TMSLmt.getElement(UserExportObj.FilteredListSelectStatusOption));\r\n      await z.click(await TMSLmt.getElement(UserExportObj.Inactive));\r\n   }\r\n\r\n   static async FillReportingMgr()\r\n   {\r\n      //  await I.fillField(UserExportObj.FilteredListReportingMgrTxtBox,UserExportObj.ReportingManagerValue);\r\n      await z.fillField(await TMSLmt.getElement(UserExportObj.FilteredListReportingMgrTxtBox), await TMSLmt.getData(\"ReportingManagerValue\"));\r\n      await z.click(await TMSLmt.getElement(UserExportObj.RepMgrFieldAfterSelection));\r\n      await z.click(await TMSLmt.getElement(UserExportObj.RepMgrFieldAfterSelection));\r\n   }\r\n\r\n   static async assignProduct()\r\n   {\r\n      await z.click(await TMSLmt.getElement(UserExportObj.ProductDDTxtBox));\r\n      await z.waitForElement(UserExportObj.ProductsDDBox);\r\n      var products = UserExportObj.ProductList;\r\n        for (let i = 0; i < products.length; i++) \r\n         {\r\n            await z.click(`//div[@class='cust-drop-inner']/div[@class='drop-row']/input[@value='${products[i]}']`);\r\n         }\r\n            //   I.wait(10);\r\n            //  await I.click(UserExportObj.ProductDDTxtBox);\r\n      await z.click(await TMSLmt.getElement(UserExportObj.ProductDDTxtBox));\r\n   }\r\n\r\n   static async DwnloadFilteredList()\r\n   {\r\n      await z.click(await TMSLmt.getElement(UserExportObj.FilteredListDwnloadBtn));\r\n      await z.click(await TMSLmt.getElement(UserExportObj.AllUserBulkEditConfirmationOK));\r\n   }\r\n\r\n   static async attachFile()\r\n   {\r\n      await z.click(await TMSLmt.getElement(UserExportObj.UserUploadBrowse));\r\n      await z.attachFile(\"//input[@value='Browse']\", 'UploadUserTemplate.xlsx');\r\n   }\r\n\r\n   static async uploadFile()\r\n   {\r\n    await z.click(await TMSLmt.getElement(UserExportObj.UserUpload));\r\n    await z.click(await TMSLmt.getElement(UserExportObj.exportConfirmation));\r\n   }\r\n}\r\n  \r\n// module.exports = new UserExportImpl();\r\n// module.exports.UserExportImpl=UserExportImpl; // for inheritance"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\TMS\\implementation\\ImportAndExport\\UserExportStepImpl.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 82,
                "endColumn": 4
            },
            {
                "ruleId": "unused-imports/no-unused-imports",
                "severity": 1,
                "message": "'Common' is defined but never used.",
                "line": 2,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "unusedVar",
                "endLine": 2,
                "endColumn": 16,
                "fix": {
                    "range": [
                        25,
                        72
                    ],
                    "text": ""
                }
            }
        ],
        "errorCount": 1,
        "warningCount": 2,
        "fixableErrorCount": 0,
        "fixableWarningCount": 1,
        "source": "const { I } = inject();\r\nimport { Common } from \"../../Common/Common\";\r\nimport { UserExportObj } from \"./UserExportObj\";\r\nimport { UserExportImpl } from \"./UserExportImpl\";\r\nimport { z } from \"actionbot-wrapper/z\";\r\nimport { TMSLmt } from \"../../../Framework/FrameworkUtilities/i18nUtil/readI18NProp\";\r\n\r\nGiven(\"I am on User listing Page\", async function () {\r\n});\r\n\r\nWhen(\"I click on Export User data\", async function () {\r\n    await UserExportImpl.ExportUserData();\r\n});\r\n\r\nWhen(\"I click on Bell icon\", async function(){\r\n    await UserExportImpl.BellIconClick();\r\n});\r\n\r\nThen(\"I should see the export user data under bell icon\", async function() {\r\n    await z.see(\"Successfully\");\r\n});\r\n\r\nWhen(\"I click on Bulk edit of BulkEditOfUsers\", async function() {\r\n    await z.click(await TMSLmt.getElement(UserExportObj.BulkEditUserlink));\r\n});\r\n\r\nWhen(\"I select all data option\",async function () {\r\n    await z.click(await TMSLmt.getElement(UserExportObj.AllDataRadioBtn));\r\n});\r\n\r\nWhen(\"I click on download excel file for BulkEditOfUsers\", async function () {\r\n    await UserExportImpl.ExcelDwnloadBulkEditUsers();\r\n});\r\n\r\nWhen(\"I select Filtered list option\", async function () {\r\n    await z.click(await TMSLmt.getElement(UserExportObj.FilteredDataRadioBtn));\r\n});\r\n\r\nWhen(\"I select status\", async function () {\r\n    await UserExportImpl.SelectStatus();\r\n});\r\n\r\nWhen(\"I enter Reporting manager\", async function () {\r\n    await UserExportImpl.FillReportingMgr();\r\n});\r\n\r\nWhen(\"I select Assigned products\", async function () {\r\n    await UserExportImpl.assignProduct();\r\n});\r\n\r\nWhen(\"I click on download excel file for Filtered list\", async function () {\r\n    await UserExportImpl.DwnloadFilteredList();\r\n});\r\n\r\nWhen(\"I click on Upload Users link\", async function () {\r\n    await z.click(await TMSLmt.getElement(UserExportObj.UploadUsersLink));\r\n});\r\n\r\nWhen(\"I click on Download Excel Template link for UploadUsers\", async function() {\r\n    await z.click(await TMSLmt.getElement(UserExportObj.DownloadExcelForUploadUsers));\r\n});\r\n\r\n//Role Export\r\nWhen(\"I click on Assign roles in bulk option link\", async function() {\r\n    await z.click(await TMSLmt.getElement(UserExportObj.AssignRolesInBulkLink));\r\n});\r\n\r\nWhen(\"I click on Download Dynamic Excel Template\", async function(){\r\n    await z.click(await TMSLmt.getElement(UserExportObj.DownloadDynamicExcelLink));\r\n});\r\n\r\nWhen(\"I click on Download Assignment & Edit Role Sheet\", async function(){\r\n    await z.click(await TMSLmt.getElement(UserExportObj.DownloadAssignmentRoleSheetLink));\r\n});\r\n\r\nWhen(\"I select the file to be uploaded\", async function() {\r\n    await UserExportImpl.attachFile();\r\n});\r\n\r\nWhen(\"I click on upload button\", async function() {\r\n    await UserExportImpl.uploadFile();\r\n});"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\TMS\\implementation\\login\\LoginImpl.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 100,
                "endColumn": 2
            },
            {
                "ruleId": "unused-imports/no-unused-imports",
                "severity": 1,
                "message": "'Common' is defined but never used.",
                "line": 2,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "unusedVar",
                "endLine": 2,
                "endColumn": 16,
                "fix": {
                    "range": [
                        25,
                        72
                    ],
                    "text": ""
                }
            },
            {
                "ruleId": "dd-eslint-rules/z.waitForClickable_Should_NotbeUsed",
                "severity": 1,
                "message": "Z.waitForClickable should not be used in the scrit directly",
                "line": 39,
                "column": 15,
                "nodeType": "MemberExpression",
                "endLine": 39,
                "endColumn": 33
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 53,
                "column": 15,
                "nodeType": "MemberExpression",
                "endLine": 53,
                "endColumn": 31
            },
            {
                "ruleId": "dd-eslint-rules/z.waitForVisible_Should_NotbeUsed",
                "severity": 1,
                "message": "Z.waitForVisible should not be used in the scrit directly",
                "line": 54,
                "column": 15,
                "nodeType": "MemberExpression",
                "endLine": 54,
                "endColumn": 31
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 54,
                "column": 32,
                "nodeType": "Literal",
                "endLine": 54,
                "endColumn": 73
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 63,
                "column": 15,
                "nodeType": "MemberExpression",
                "endLine": 63,
                "endColumn": 31
            },
            {
                "ruleId": "dd-eslint-rules/z.waitForVisible_Should_NotbeUsed",
                "severity": 1,
                "message": "Z.waitForVisible should not be used in the scrit directly",
                "line": 64,
                "column": 15,
                "nodeType": "MemberExpression",
                "endLine": 64,
                "endColumn": 31
            },
            {
                "ruleId": "dd-eslint-rules/z.waitForVisible_Should_NotbeUsed",
                "severity": 1,
                "message": "Z.waitForVisible should not be used in the scrit directly",
                "line": 71,
                "column": 15,
                "nodeType": "MemberExpression",
                "endLine": 71,
                "endColumn": 31
            }
        ],
        "errorCount": 1,
        "warningCount": 9,
        "fixableErrorCount": 0,
        "fixableWarningCount": 1,
        "source": "const { I } = inject();\r\nimport { Common } from \"../../Common/Common\";\r\nimport { Login_TMSObj } from \"./Login_TMSObj\";\r\n//import prop = global.confi_prop;\r\nimport { logger} from \"../../../Framework/FrameworkUtilities/Logger/logger\";\r\nimport { TMSLmt } from \"../../../Framework/FrameworkUtilities/i18nUtil/readI18NProp\";\r\nimport { prop } from \"../../../Framework/FrameworkUtilities/config\";\r\nimport { z } from \"actionbot-wrapper/z\";\r\nimport { CreateUserObj } from \"../Users/CreateUserObj\";\r\n\r\nexport class LoginImpl {\r\n    static async login(userRole:string)\r\n    {\r\n        logger.info(await TMSLmt.getData(\"URL\"));      \r\n        await z.amOnPage(await TMSLmt.getData(\"URL\"));\r\n        logger.info(\"Navigated to log-in page\");\r\n        let username: string = \"\";\r\n        let password: string = \"\";\r\n        logger.info(\"UserRole is ---> \"+userRole)\r\n        if(userRole === \"CA\")\r\n        {\r\n            username = (await TMSLmt.getData(\"CA_EmailAddress\")) as string;\r\n            password = (await TMSLmt.getData(\"CA_Password\")) as string;\r\n        }\r\n        else if(userRole === \"ZA\")\r\n        {   \r\n            username = (await TMSLmt.getData(\"ZA_EmailAddress\")) as string;\r\n            password = (await TMSLmt.getData(\"ZA_Password\")) as string;\r\n        }\r\n        else\r\n        {\r\n            username = (await TMSLmt.getData(\"LA_EmailAddress\")) as string;\r\n            password = (await TMSLmt.getData(\"LA_Password\")) as string;\r\n        }\r\n        await z.fillField(await TMSLmt.getElement(Login_TMSObj.EMAILADDRESS_TEXTBOX), username);\r\n        logger.info(`Entered email address --> ${username}`);\r\n        await z.fillField(await TMSLmt.getElement(Login_TMSObj.PASSWORD_TEXTBOX), password);\r\n        logger.info(`Entered password --> ${password}`);\r\n        await z.waitForClickable(await TMSLmt.getElement(Login_TMSObj.LOGIN_BUTTON));\r\n        await z.click(await TMSLmt.getElement(Login_TMSObj.LOGIN_BUTTON));\r\n        logger.info(\"Clicked on Login button\");\r\n        await this.waitForLoadingSymbolNotDisplayed();  \r\n        logger.info(\"Logged in Successfully\");\r\n\r\n    }\r\n    static async NavigateToCompanyListing()\r\n    {\r\n        await z.click(await TMSLmt.getElement(Login_TMSObj.MENUSOPTIONS));\r\n        await z.moveCursorTo(await TMSLmt.getElement(Login_TMSObj.DD_HOME));\r\n        await z.scrollIntoView(await TMSLmt.getElement(Login_TMSObj.TMS_PRODUCT));\r\n        await z.click(await TMSLmt.getElement(Login_TMSObj.TMS_PRODUCT));\r\n        await z.switchToNextTab();\r\n        await I.seeTitleEquals(\"Company Listings\");\r\n        await z.waitForVisible(\".//*[@title='Edit Company Information']\");\r\n    }\r\n    static async NavigateToUserListing()\r\n    {\r\n        await z.click(await TMSLmt.getElement(Login_TMSObj.MENUSOPTIONS));\r\n        await z.moveCursorTo(await TMSLmt.getElement(Login_TMSObj.DD_HOME));\r\n        await z.scrollIntoView(await TMSLmt.getElement(Login_TMSObj.TMS_PRODUCT));\r\n        await z.click(await TMSLmt.getElement(Login_TMSObj.TMS_PRODUCT));\r\n        await z.switchToNextTab();\r\n        await I.seeTitleEquals(\"List of Users\");\r\n        await z.waitForVisible(await TMSLmt.getElement(CreateUserObj.EditUserBtn));\r\n    }\r\n    static async DewdropsLogout()\r\n    {\r\n        await z.scrollIntoView(await TMSLmt.getElement(Login_TMSObj.USER_ICON));\r\n        await this.clickOnUserIcon();\r\n        await this.clickOnLogoutButton();\r\n        await z.waitForVisible(await TMSLmt.getElement(Login_TMSObj.LOGOUT_CONFIRMATION_POPUP));\r\n        await this.clickOnLogoutConfirmationYesButton();\r\n        await this.waitForLoadingSymbolNotDisplayed();\r\n    }\r\n    static async ClassicLogout()\r\n    {\r\n        await z.click(await TMSLmt.getElement(Login_TMSObj.TMS_LOGOUT));\r\n    }\r\n    static async clickOnUserIcon()\r\n    {\r\n        await z.click(await TMSLmt.getElement(Login_TMSObj.USER_ICON));\r\n        logger.info(\"Clicked on user icon\");\r\n    }\r\n    static async clickOnLogoutConfirmationYesButton()\r\n    {\r\n        await z.click(await TMSLmt.getElement(Login_TMSObj.LOGOUT_CONFIRMATION_YES_BUTTON));\r\n        logger.info(\"Clicked on log out Yes button\");\r\n    }\r\n    static async clickOnLogoutButton()\r\n    {\r\n        await z.click(await TMSLmt.getElement(Login_TMSObj.LOGOUT_BUTTON))\r\n        logger.info(\"Clicked on log out button\");\r\n    }\r\n    static async waitForLoadingSymbolNotDisplayed() {\r\n        await z.waitForInvisible(await TMSLmt.getElement(Login_TMSObj.LOADING_SPINNER), prop.CONDITIONAL_WAIT);\r\n        logger.info(\"Waited for Loading Symbol to go off\");\r\n    }\r\n\r\n\r\n}"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\TMS\\implementation\\login\\LoginStepImpl.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 25,
                "endColumn": 11
            },
            {
                "ruleId": "dd-eslint-rules/Actionbot-automation-component-adoption",
                "severity": 1,
                "message": "component - Actionbot automation componenet not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 25,
                "endColumn": 11
            },
            {
                "ruleId": "unused-imports/no-unused-imports",
                "severity": 1,
                "message": "'Common' is defined but never used.",
                "line": 2,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "unusedVar",
                "endLine": 2,
                "endColumn": 16,
                "fix": {
                    "range": [
                        25,
                        72
                    ],
                    "text": ""
                }
            },
            {
                "ruleId": "unused-imports/no-unused-imports",
                "severity": 1,
                "message": "'Login_TMSObj' is defined but never used.",
                "line": 3,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "unusedVar",
                "endLine": 3,
                "endColumn": 22,
                "fix": {
                    "range": [
                        72,
                        156
                    ],
                    "text": ""
                }
            },
            {
                "ruleId": "unused-imports/no-unused-imports",
                "severity": 1,
                "message": "'logger' is defined but never used.",
                "line": 5,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "unusedVar",
                "endLine": 5,
                "endColumn": 16,
                "fix": {
                    "range": [
                        156,
                        234
                    ],
                    "text": ""
                }
            },
            {
                "ruleId": "unused-imports/no-unused-imports",
                "severity": 1,
                "message": "'TMSLmt' is defined but never used.",
                "line": 6,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "unusedVar",
                "endLine": 6,
                "endColumn": 16,
                "fix": {
                    "range": [
                        234,
                        321
                    ],
                    "text": ""
                }
            },
            {
                "ruleId": "unused-imports/no-unused-imports",
                "severity": 1,
                "message": "'prop' is defined but never used.",
                "line": 7,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "unusedVar",
                "endLine": 7,
                "endColumn": 14,
                "fix": {
                    "range": [
                        321,
                        393
                    ],
                    "text": ""
                }
            }
        ],
        "errorCount": 1,
        "warningCount": 7,
        "fixableErrorCount": 0,
        "fixableWarningCount": 5,
        "source": "const { I } = inject();\r\nimport { Common } from \"../../Common/Common\";\r\nimport { Login_TMSObj } from \"./Login_TMSObj\";\r\n//import prop = global.confi_prop;\r\nimport { logger} from \"../../../Framework/FrameworkUtilities/Logger/logger\";\r\nimport { TMSLmt } from \"../../../Framework/FrameworkUtilities/i18nUtil/readI18NProp\";\r\nimport { prop } from \"../../../Framework/FrameworkUtilities/config\";\r\n\r\nimport { LoginImpl } from \"./LoginImpl\";\r\n\r\nGiven(\"I logged in TMS with user role {string}\", async function (userRole: string) {\r\n        await LoginImpl.login(userRole);    \r\n});\r\nGiven (\"Navigate to Company Listing\",async function(){\r\n        await LoginImpl.NavigateToCompanyListing();\r\n});\r\nGiven (\"Navigate to User Listing\",async function(){\r\n        await LoginImpl.NavigateToUserListing();\r\n});\r\nGiven (\"Dewdrop Logout\", async function() {\r\n        await LoginImpl.DewdropsLogout();\r\n});\r\nGiven (\"User Logout From Classic TMS\",async function(){\r\n        await LoginImpl.ClassicLogout();\r\n});       "
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\TMS\\implementation\\ManageEmailPreference\\ManageEmailPreferenceImpl.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 104,
                "endColumn": 46
            },
            {
                "ruleId": "unused-imports/no-unused-imports",
                "severity": 1,
                "message": "'Common' is defined but never used.",
                "line": 2,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "unusedVar",
                "endLine": 2,
                "endColumn": 16,
                "fix": {
                    "range": [
                        25,
                        72
                    ],
                    "text": ""
                }
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 16,
                "column": 3,
                "nodeType": "MemberExpression",
                "endLine": 16,
                "endColumn": 10
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 20,
                "column": 3,
                "nodeType": "MemberExpression",
                "endLine": 20,
                "endColumn": 10
            },
            {
                "ruleId": "dd-eslint-rules/hard-coded-wait",
                "severity": 1,
                "message": "User added hard coded wait",
                "line": 22,
                "column": 5,
                "nodeType": "MemberExpression",
                "endLine": 22,
                "endColumn": 11
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 22,
                "column": 5,
                "nodeType": "MemberExpression",
                "endLine": 22,
                "endColumn": 11
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 23,
                "column": 2,
                "nodeType": "MemberExpression",
                "endLine": 23,
                "endColumn": 9
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 37,
                "column": 17,
                "nodeType": "Literal",
                "endLine": 37,
                "endColumn": 59
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 39,
                "column": 30,
                "nodeType": "Literal",
                "endLine": 39,
                "endColumn": 51
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 40,
                "column": 32,
                "nodeType": "Literal",
                "endLine": 40,
                "endColumn": 52
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 41,
                "column": 23,
                "nodeType": "Literal",
                "endLine": 41,
                "endColumn": 43
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 48,
                "column": 9,
                "nodeType": "MemberExpression",
                "endLine": 48,
                "endColumn": 26
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 49,
                "column": 9,
                "nodeType": "MemberExpression",
                "endLine": 49,
                "endColumn": 23
            },
            {
                "ruleId": "dd-eslint-rules/z.waitForClickable_Should_NotbeUsed",
                "severity": 1,
                "message": "Z.waitForClickable should not be used in the scrit directly",
                "line": 51,
                "column": 9,
                "nodeType": "MemberExpression",
                "endLine": 51,
                "endColumn": 27
            },
            {
                "ruleId": "dd-eslint-rules/z.waitForClickable_Should_NotbeUsed",
                "severity": 1,
                "message": "Z.waitForClickable should not be used in the scrit directly",
                "line": 54,
                "column": 9,
                "nodeType": "MemberExpression",
                "endLine": 54,
                "endColumn": 27
            }
        ],
        "errorCount": 1,
        "warningCount": 15,
        "fixableErrorCount": 0,
        "fixableWarningCount": 1,
        "source": "const { I } = inject();\r\nimport { Common } from \"../../Common/Common\";\r\nimport { ManageEmailPreferenceObj } from \"./ManageEmailPreferenceObj\";\r\nimport { z } from \"actionbot-wrapper/z\";\r\nimport { TMSLmt } from \"../../../Framework/FrameworkUtilities/i18nUtil/readI18NProp\";\r\nvar status;\r\n\r\n\r\nexport class ManageEmailPreferenceImpl\r\n {\t\r\n\tchecked : any;\r\n    static async manage(a,b)\r\n    {\r\n        if (a.toString == true)\r\n\t{\r\n\t\tI.click(ManageEmailPreferenceObj.NewReqAtBuyerDeskNo);\r\n\t}\r\n\telse\r\n\t{\r\n\t\tI.click(ManageEmailPreferenceObj.NewReqAtBuyerDeskYes);\r\n    }\r\n    I.wait(5);\r\n\tI.click(ManageEmailPreferenceObj.SaveBtn);\r\n\t}\r\n\t\r\n\tstatic async ChangeWindow()\r\n\t{\t\r\n\t\t\r\n\t\t// String winHandleBefore = driver.getWindowHandle();\r\n\t\t// for(String winHandle : driver.getWindowHandles())\r\n\t\t{\r\n\t\t\t//driver.switchTo().window(winHandle);\r\n\t\t}\t\r\n\t}\r\n\r\n\tstatic async NavigateToTMS(){\r\n\t\tawait z.click(\"//div[contains(@class, 'menu-btn mr-3')]\");\r\n        // I.wait(2);\r\n        await z.moveCursorTo(\"//li[@title='Home']\");\r\n        await z.scrollIntoView(\"//li[@title='TMS']\");\r\n        await z.click(\"//li[@title='TMS']\");\r\n        await z.switchToNextTab();\r\n\t\t// I.wait(5);\r\n\t}\r\n\r\n\tstatic async ChangeSetting()\r\n\t{\t\r\n\t\tawait I.switchToNextTab();\r\n\t\tawait I.resizeWindow(\"maximize\");\r\n\t\t// await z.click(await TMSLmt.getElement(ManageEmailPreferenceObj.UMPTab));\r\n\t\tawait z.waitForClickable(await TMSLmt.getElement(ManageEmailPreferenceObj.eProcSettings));\r\n\t\tawait z.click(await TMSLmt.getElement(ManageEmailPreferenceObj.eProcSettings));\r\n\t\t// I.wait(4);\r\n\t\tawait z.waitForClickable(await TMSLmt.getElement(ManageEmailPreferenceObj.Set1));\r\n\r\n\t\t/**\r\n \t\t\t* @type {string | boolean}\r\n \t\t*/\r\n\t\tif ((await TMSLmt.getElement(ManageEmailPreferenceObj.Set1)as any).checked != true)\r\n\t\t{\r\n\t\t\tawait z.click(await TMSLmt.getElement(ManageEmailPreferenceObj.Set1));\r\n\t\t\tstatus=\"true\";\r\n\t\t\t// I.wait(8);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tawait z.click(await TMSLmt.getElement(ManageEmailPreferenceObj.Set1));\r\n\t\t\tstatus=\"false\";\r\n\t\t\t// I.wait(8);\r\n\t\t\t//I.click(ManageEmailPreferenceObj.UserSaveBtn);\r\n\t\t}\r\n\r\n\t\tif((await TMSLmt.getElement(ManageEmailPreferenceObj.Set2)as any).checked !=true)\r\n\t\t{\r\n\t\t\t// I.click(ManageEmailPreferenceObj.Set2);\r\n\t\t\tawait z.click(await TMSLmt.getElement(ManageEmailPreferenceObj.Set2));\r\n\t\t}\r\n\t\telse \r\n\t\t{ \r\n\t\t\tawait z.click(await TMSLmt.getElement(ManageEmailPreferenceObj.Set2)); \r\n\t\t}\r\n\t\tawait z.click(await TMSLmt.getElement(ManageEmailPreferenceObj.UserSaveBtn));\r\n\t}\r\n\r\n\tstatic async verificationResult()\r\n\t{\r\n\t\tif ((await TMSLmt.getElement(ManageEmailPreferenceObj.Set1) as any).checked != status)\r\n\t\t{\r\n\t\t\tconsole.log(\"Failed\");\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tconsole.log(\"Passed\");\r\n\t\t}\r\n\t\t //I.assertEqual((ManageEmailPreferenceObj.Set1),status);\r\n\t}\r\n }\r\n\r\n  \r\n       \r\n\r\n \r\n// module.exports = new MEP();\r\n// module.exports.MEP=MEP; // for inheritance"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\TMS\\implementation\\ManageEmailPreference\\ManageEmailPreferenceStepImpl.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 96,
                "endColumn": 1
            },
            {
                "ruleId": "unused-imports/no-unused-imports",
                "severity": 1,
                "message": "'Common' is defined but never used.",
                "line": 2,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "unusedVar",
                "endLine": 2,
                "endColumn": 16,
                "fix": {
                    "range": [
                        25,
                        72
                    ],
                    "text": ""
                }
            }
        ],
        "errorCount": 1,
        "warningCount": 2,
        "fixableErrorCount": 0,
        "fixableWarningCount": 1,
        "source": "const { I } = inject();\r\nimport { Common } from \"../../Common/Common\";\r\nimport { ManageEmailPreferenceObj } from \"./ManageEmailPreferenceObj\";\r\nimport { ManageEmailPreferenceImpl } from \"./ManageEmailPreferenceImpl\";\r\nimport { z } from \"actionbot-wrapper/z\";\r\nimport { TMSLmt } from \"../../../Framework/FrameworkUtilities/i18nUtil/readI18NProp\";\r\nvar status;\r\nvar CMDSetting;\r\n\r\n/*\r\nGiven(\"I navigate to Master tab\", async function () {\r\n\tI.click(ManageEmailPreferenceObj.MasterTab);\r\n});\r\n\r\nWhen(\"I select Customize\", async function() {\r\n\tI.click(ManageEmailPreferenceObj.CustomizeTab);\r\n});\r\n\r\nWhen(\"I select Email Notification\", async function () {\r\n\tI.click(ManageEmailPreferenceObj.EmailNotificationTab);\r\n});\r\n\r\nWhen(\"I select Delivery Notification\", async function () {\r\n\tI.click(ManageEmailPreferenceObj.DeliveryNotification);\r\n});\r\n\r\nWhen(\"I make necessary changes\", async function() {\r\n\tvar X = (await I.grabValueFrom(ManageEmailPreferenceObj.NewReqAtBuyerDeskYes));\r\n\r\n\tif (X.toString() == ManageEmailPreferenceObj.Value)\r\n\t{\t\r\n\t\tI.click(ManageEmailPreferenceObj.NewReqAtBuyerDeskNo);\r\n\t\tI.wait(5);\r\n\t\tCMDSetting = \"No\";\r\n\t}\r\n\telse\r\n\t{\t\r\n\t\tI.click(ManageEmailPreferenceObj.NewReqAtBuyerDeskYes);\r\n\t\tI.wait(5);\r\n\t\tCMDSetting = \"Yes\";\r\n\t}\r\n});\r\n\r\nWhen(\"I click on Save Button\", async function () {\r\n\tI.wait(10);\r\n\tI.click(ManageEmailPreferenceObj.SaveBtn);\r\n});\r\n*/\r\n\r\n//LocalUser or Local Admin steps for checking user level preference\r\n\r\nWhen(\"I navigate to TMS after Logging\", async function() {\r\n\tawait ManageEmailPreferenceImpl.NavigateToTMS();\r\n});\r\n\r\nWhen(\"I click on Userlevel MEP\", async function () {\r\n\tawait z.click(await TMSLmt.getElement(ManageEmailPreferenceObj.SettingsIcon));\r\n\tawait z.click(await TMSLmt.getElement(ManageEmailPreferenceObj.UMPTab));\r\n});\r\n\r\nWhen(\"I navigate to eProc Settings and make necessary changes\", async function () {\r\n\tawait ManageEmailPreferenceImpl.ChangeSetting();\r\n});\r\n\r\n\r\n/*When(\"I check whether setting is reflected\", async function(){\r\n\tI.click(ManageEmailPreferenceObj.SetToBeChanged);\r\n\tif (CMDSetting == Yes)\r\n\t{\r\n\t\tI.grabNumberOfVisibleElements(ManageEmailPreferenceObj.SetToBeChanged)\r\n\t\t(ManageEmailPreferenceObj.SetToBeChanged).isSelected()\r\n\t\tconsole.log(\"MEP Changes reflected\");\r\n\t}\r\n\telse\r\n\t{\r\n\t\tconsole.log(\"MEP Failed\");\r\n\t}\r\n\t\r\n});\r\n\r\nWhen(/^Dewdrop Logout$/, () => {\r\n\treturn true;\r\n});*/\r\n\r\n\r\n\r\nWhen(\"I click on Save\", async function() {\r\n\tawait z.click(await TMSLmt.getElement(ManageEmailPreferenceObj.UserSaveBtn));\r\n});\r\n\r\nThen(\"changes should be saved\", async function()  {\r\n\tawait ManageEmailPreferenceImpl.verificationResult();\r\n});\r\n\r\n\r\n"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\TMS\\implementation\\MasterItemTab\\MasterItemTabStepImpl.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 31,
                "endColumn": 4
            },
            {
                "ruleId": "unused-imports/no-unused-imports",
                "severity": 1,
                "message": "'Common' is defined but never used.",
                "line": 2,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "unusedVar",
                "endLine": 2,
                "endColumn": 16,
                "fix": {
                    "range": [
                        25,
                        72
                    ],
                    "text": ""
                }
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 12,
                "column": 11,
                "nodeType": "MemberExpression",
                "endLine": 12,
                "endColumn": 27
            }
        ],
        "errorCount": 1,
        "warningCount": 3,
        "fixableErrorCount": 0,
        "fixableWarningCount": 1,
        "source": "const { I } = inject();\r\nimport { Common } from \"../../Common/Common\";\r\nimport {  MasterItemTabObj } from \"./MasterItemTabObj\";\r\nimport { z } from \"actionbot-wrapper/z\";\r\nimport { TMSLmt } from \"../../../Framework/FrameworkUtilities/i18nUtil/readI18NProp\";\r\n\r\nWhen(\"Navigate to Master Data Tab\", async function () {\r\n\tawait z.click(await TMSLmt.getElement(MasterItemTabObj.MasterDataTab));\r\n});\r\n\r\nThen(\"Master Data page should be accessible\", async function () {\r\n    await I.seeTitleEquals(\"Master Data\");\r\n    await z.see(\"Generic Masters\");\r\n});\r\n\r\nWhen(\"Navigate to Items Data Tab\", async function () {\r\n    await z.click(await TMSLmt.getElement(MasterItemTabObj.ItemsTab));\r\n});\r\n\r\nThen(\"Items Data page should be accessible\", async function () {\r\n    //I.seeTitleEquals(\"Zycus Procure-to-Pay\");\r\n});\r\n\r\nWhen(\"Navigate to Workflow Tab\", async function () {\r\n    //I.click(MasterItemTabObj.WorkflowTab);\r\n    await z.see(\"WorkFlow\");\r\n});\r\n\r\nThen(\"Workflow page should be accessible\", async function () {\r\n    //I.seeTitleEquals(\"Workflow Management\");\r\n});"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\TMS\\implementation\\Product\\ProductImpl.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 147,
                "endColumn": 3
            },
            {
                "ruleId": "unused-imports/no-unused-imports",
                "severity": 1,
                "message": "'Common' is defined but never used.",
                "line": 2,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "unusedVar",
                "endLine": 2,
                "endColumn": 16,
                "fix": {
                    "range": [
                        25,
                        72
                    ],
                    "text": ""
                }
            },
            {
                "ruleId": "dd-eslint-rules/z.waitForClickable_Should_NotbeUsed",
                "severity": 1,
                "message": "Z.waitForClickable should not be used in the scrit directly",
                "line": 42,
                "column": 15,
                "nodeType": "MemberExpression",
                "endLine": 42,
                "endColumn": 33
            },
            {
                "ruleId": "dd-eslint-rules/hard-coded-wait",
                "severity": 1,
                "message": "User added hard coded wait",
                "line": 112,
                "column": 9,
                "nodeType": "MemberExpression",
                "endLine": 112,
                "endColumn": 15
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 112,
                "column": 9,
                "nodeType": "MemberExpression",
                "endLine": 112,
                "endColumn": 15
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 113,
                "column": 9,
                "nodeType": "MemberExpression",
                "endLine": 113,
                "endColumn": 22
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 116,
                "column": 16,
                "nodeType": "MemberExpression",
                "endLine": 116,
                "endColumn": 21
            },
            {
                "ruleId": "dd-eslint-rules/hard-coded-wait",
                "severity": 1,
                "message": "User added hard coded wait",
                "line": 118,
                "column": 17,
                "nodeType": "MemberExpression",
                "endLine": 118,
                "endColumn": 23
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 118,
                "column": 17,
                "nodeType": "MemberExpression",
                "endLine": 118,
                "endColumn": 23
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 119,
                "column": 17,
                "nodeType": "MemberExpression",
                "endLine": 119,
                "endColumn": 24
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 120,
                "column": 17,
                "nodeType": "MemberExpression",
                "endLine": 120,
                "endColumn": 22
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 126,
                "column": 17,
                "nodeType": "MemberExpression",
                "endLine": 126,
                "endColumn": 24
            }
        ],
        "errorCount": 1,
        "warningCount": 12,
        "fixableErrorCount": 0,
        "fixableWarningCount": 1,
        "source": "const { I } = inject();\r\nimport { Common } from \"../../Common/Common\";\r\nimport { ProductObj } from \"./ProductObj\";\r\nimport { z } from \"actionbot-wrapper/z\";\r\nimport { TMSLmt } from \"../../../Framework/FrameworkUtilities/i18nUtil/readI18NProp\";\r\n\r\n\r\nvar ProdName = getRandomforProd(3)+ \"_Prodname\";\r\n// var ProdName = \"fow_auto\";\r\nvar ActGroup = getRandomforProd(3)+ \"ActGrp\";\r\nvar ActName = getRandomforProd(3) + \"_act\";\r\n// let a = require (\"faker\");\r\n// console.log(faker.random.number(500))\r\n\r\nexport class ProductImpl\r\n{   \r\n    static async fillProdInfo()\r\n    {  \r\n        await z.fillField(await TMSLmt.getElement(ProductObj.ProdName),ProdName);\r\n        await z.fillField(await TMSLmt.getElement(ProductObj.WhiteListedBrowser), await TMSLmt.getData(\"WhiteListedBrowserVal\"));\r\n        await z.fillField(await TMSLmt.getElement(ProductObj.UnsupportedBrowser), await TMSLmt.getData(\"UnsupportedBrowserVal\"));\r\n        await z.fillField(await TMSLmt.getElement(ProductObj.BlackListedBrowser), await TMSLmt.getData(\"BlackListedBrowserVal\"));\r\n  \r\n        await z.selectOption(await TMSLmt.getElement(ProductObj.DefaultBehaviourDD),\"WHITE_LISTED\"); \r\n        await z.fillField(await TMSLmt.getElement(ProductObj.UnsupportedBrowser), await TMSLmt.getData(\"UnsupportedBrowserVal\"));\r\n        await z.fillField(await TMSLmt.getElement(ProductObj.SupportedBrowserTemp), await TMSLmt.getData(\"SupportedBrowserVal\"));\r\n    }\r\n\r\n    static async addActivityGroup()\r\n    {\r\n        await z.click(await TMSLmt.getElement(ProductObj.AddNewActGroup));\r\n        await z.fillField(await TMSLmt.getElement(ProductObj.AGName),ActGroup);\r\n        await z.click(await TMSLmt.getElement(ProductObj.PopUpSave));\r\n        await z.click(await TMSLmt.getElement(ProductObj.PopUpClose));\r\n    }\r\n\r\n    static async addActivity()\r\n    {\r\n        await z.click(await TMSLmt.getElement(ProductObj.AddNewActivities));\r\n        await z.fillField(await TMSLmt.getElement(ProductObj.ActName),ActName);\r\n        await z.fillField(await TMSLmt.getElement(ProductObj.ActURL),ProductObj.ActURLVal);\r\n        await z.waitForClickable(await TMSLmt.getElement(ProductObj.SaveActBtn));\r\n        await z.click(await TMSLmt.getElement(ProductObj.SaveActBtn));\r\n        await z.click(await TMSLmt.getElement(ProductObj.PopUpCancel_Act));\r\n    }\r\n\r\n    static async verifyProdAdded(comp)\r\n    {       \r\n        await z.click(await TMSLmt.getElement(ProductObj.Company));\r\n        await z.fillField(await TMSLmt.getElement(ProductObj.CompSearch),comp);\r\n        await z.click(await TMSLmt.getElement(ProductObj.GoBtn));\r\n        await z.click(await TMSLmt.getElement(ProductObj.EditComp));\r\n        await z.click(await TMSLmt.getElement(ProductObj.EditProdAllocation)); \r\n    }\r\n\r\n    static async EditProduct()\r\n    {   \r\n        //await z.wait(10);\r\n     \r\n        for(let i= 1;i<=99; i++)\r\n        try {\r\n                await z.see(ProdName);\r\n                await z.click(`//td[text()='${ProdName}']/following-sibling::td/label`);\r\n                // I.click(ProductObj.EditProdInfo);\r\n                await z.click(await TMSLmt.getElement(ProductObj.EditProdInfo));\r\n                // Common.fillfields(ProductObj.BlackListedBrowser,\"Chrome\");\r\n                await z.fillField(await TMSLmt.getElement(ProductObj.BlackListedBrowser),\"Chrome\");\r\n                // I.click(ProductObj.UpdateNSaveBtn);\r\n                // I.click(ProductObj.DoneBtn);\r\n                await z.click(await TMSLmt.getElement(ProductObj.UpdateNSaveBtn));\r\n                await z.click(await TMSLmt.getElement(ProductObj.DoneBtn));\r\n                await z.refreshPage();\r\n            \r\n        } catch (Exception) {\r\n                await (await TMSLmt.getElement(ProductObj.NextPage));\r\n        }\r\n        /*{ \r\n            //if(I.See(ProdName))\r\n            if(!ProdName)\r\n            {   \r\n                //I.click(ProductObj.NextPage);\r\n               I.wait(3);\r\n                I.click(`//td[text()='${ProdName}']/following-sibling::td/label`);\r\n                I.click(ProductObj.EditProdInfo);\r\n                Common.fillfields(ProductObj.BlackListedBrowser,\"Chrome\");\r\n                I.click(ProductObj.UpdateNSaveBtn);\r\n                I.click(ProductObj.DoneBtn);\r\n                I.refreshPage();\r\n                console.log(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\");\r\n            }\r\n            else \r\n            {   \r\n                I.click(ProductObj.NextPage);\r\n            }\r\n            \r\n        }*/\r\n        \r\n    }\r\n\r\n    static async doneEditing()\r\n    {\r\n        await z.click(await TMSLmt.getElement(ProductObj.UpdateNSaveBtn));\r\n        await z.click(await TMSLmt.getElement(ProductObj.DoneBtn));\r\n\t    // I.click(ProductObj.UpdateNSaveBtn);\r\n\t    // I.wait(5);\r\n\t    // I.click(ProductObj.DoneBtn);\r\n        // I.wait(5);\r\n    }\r\n\r\n    static async VerifyChangesReflected()\r\n    {\r\n        I.wait(10);\r\n        I.refreshPage();\r\n        for(let i= 1;i<=99; i++)\r\n        { \r\n            if(I.see(ProdName))\r\n            {\r\n                I.wait(3);\r\n                I.click(`//td[text()='${ProdName}']/following-sibling::td/label`);\r\n                I.see(\"Chrome\");\r\n                //(ProductObj.ToCheck).includes(\"Chrome\");\r\n                break;\r\n            }\r\n            else\r\n            {   \r\n                I.click(ProductObj.NextPage);\r\n            }\r\n            \r\n        }\r\n    }\r\n  \r\n}\r\n\r\n\r\n\r\n// module.exports = new ProdInfo();\r\n// module.exports.ProdInfo=ProdInfo; // for inheritance\r\n\r\nfunction getRandomforProd(length:number) {\r\n    var result           = '';\r\n    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    var charactersLength = characters.length;\r\n    for ( var i = 0; i < length; i++ ) {\r\n       result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    }\r\n    return result+\"_auto\";\r\n }"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\TMS\\implementation\\Product\\ProductStepImpl.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 64,
                "endColumn": 1
            },
            {
                "ruleId": "unused-imports/no-unused-imports",
                "severity": 1,
                "message": "'Common' is defined but never used.",
                "line": 2,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "unusedVar",
                "endLine": 2,
                "endColumn": 16,
                "fix": {
                    "range": [
                        25,
                        72
                    ],
                    "text": ""
                }
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 44,
                "column": 2,
                "nodeType": "MemberExpression",
                "endLine": 44,
                "endColumn": 15
            }
        ],
        "errorCount": 1,
        "warningCount": 3,
        "fixableErrorCount": 0,
        "fixableWarningCount": 1,
        "source": "const { I } = inject();\r\nimport { Common } from \"../../Common/Common\";\r\nimport { ProductImpl } from \"./ProductImpl\";\r\nimport { ProductObj } from \"./ProductObj\";\r\nimport { z } from \"actionbot-wrapper/z\";\r\nimport { TMSLmt } from \"../../../Framework/FrameworkUtilities/i18nUtil/readI18NProp\";\r\n\r\nWhen(\"Navigate to Product Tab\", async function () {\r\n\t// Common.clicked(ProductObj.ProdTab);\r\n\tawait z.click(await TMSLmt.getElement(ProductObj.ProdTab));\r\n});\r\n\r\nWhen(\"I click on Add new Product\",async function () {\r\n\t// Common.clicked(ProductObj.AddNewProd);\r\n\tawait z.click(await TMSLmt.getElement(ProductObj.AddNewProd));\r\n});\r\n\r\nWhen(\"I fill all Product Information\", async function () {\r\n\tawait ProductImpl.fillProdInfo();\r\n});\r\n\r\nWhen(\"I click on Save\", async function () {\r\n\t// Common.clicked(ProductObj.SaveNContinue);\r\n\tawait z.click(await TMSLmt.getElement(ProductObj.SaveNContinue));\r\n});\r\n\r\nWhen(\"I add new Activity group\", async function () {\r\n\tawait ProductImpl.addActivityGroup();\r\n});\r\n\r\nWhen(\"I add Activity\", async function () {\r\n\tawait ProductImpl.addActivity();\r\n});\r\n\r\nWhen(\"I click on Done\", async function () {\r\n\tawait z.click(await TMSLmt.getElement(ProductObj.DoneBtn));\r\n});\r\n\r\nWhen(\"I click on Done at the summary page\", async function (){\r\n\tawait z.click(await TMSLmt.getElement(ProductObj.DoneBtn));\r\n});\r\n\r\nThen(\"product should be able to be assigned to company\",async function (){\r\n\tI.refreshPage();\r\n\tProductImpl.verifyProdAdded((ProductObj.ComptoEdit).toString());\r\n});\r\n\r\nWhen(\"I edit the product Created\", async function() {\r\n\tawait ProductImpl.EditProduct();\r\n});\r\n\r\nWhen(\"I make the required changes\", async function() {\r\n\t// Common.fillfields(ProductObj.BlackListedBrowser,\"Chrome\");\r\n\tawait z.fillField(await TMSLmt.getElement(ProductObj.BlackListedBrowser), \"Chrome\");\r\n});\r\n\r\nWhen(\"I click on Done button after editing\",async function () {\r\n\tawait ProductImpl.doneEditing();\r\n});\r\n\r\nThen(\"changes should be reflected\",async function () {\r\n\tawait ProductImpl.VerifyChangesReflected();\r\n});\r\n"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\TMS\\implementation\\Reports\\CreateReportImpl.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 34,
                "endColumn": 52
            },
            {
                "ruleId": "unused-imports/no-unused-imports",
                "severity": 1,
                "message": "'Common' is defined but never used.",
                "line": 2,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "unusedVar",
                "endLine": 2,
                "endColumn": 16,
                "fix": {
                    "range": [
                        25,
                        72
                    ],
                    "text": ""
                }
            },
            {
                "ruleId": "unused-imports/no-unused-imports",
                "severity": 1,
                "message": "'logger' is defined but never used.",
                "line": 3,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "unusedVar",
                "endLine": 3,
                "endColumn": 16,
                "fix": {
                    "range": [
                        72,
                        151
                    ],
                    "text": ""
                }
            }
        ],
        "errorCount": 1,
        "warningCount": 3,
        "fixableErrorCount": 0,
        "fixableWarningCount": 2,
        "source": "const { I } = inject();\r\nimport { Common } from \"../../Common/Common\";\r\nimport { logger } from \"../../../Framework/FrameworkUtilities/Logger/logger\";\r\nimport { CreateReportObj } from \"./CreateReportObj\";\r\nimport { z } from \"actionbot-wrapper/z\";\r\nimport { TMSLmt } from \"../../../Framework/FrameworkUtilities/i18nUtil/readI18NProp\";\r\n\r\nexport class CreateReportImpl{\r\n\r\n    static async FillReportDetailsStep3(){\r\n    // I.click(CreateReportObj.S3Prod);\r\n    // I.click(CreateReportObj.S3Company);\r\n    // I.click(CreateReportObj.S3DomainUrl);\r\n    // I.click(CreateReportObj.S3Manager);\r\n    // I.click(CreateReportObj.S3UEmailId);\r\n    // I.click(CreateReportObj.S3UserUniqueId);\r\n    await z.click(await TMSLmt.getElement(CreateReportObj.S3Prod));\r\n    await z.click(await TMSLmt.getElement(CreateReportObj.S3Company));\r\n    await z.click(await TMSLmt.getElement(CreateReportObj.S3DomainUrl));\r\n    await z.click(await TMSLmt.getElement(CreateReportObj.S3Manager));\r\n    await z.click(await TMSLmt.getElement(CreateReportObj.S3UEmailId));\r\n    await z.click(await TMSLmt.getElement(CreateReportObj.S3UserUniqueId));\r\n    }\r\n\r\n    static async FillReportDetailsStep6(){\r\n        await z.fillField(await TMSLmt.getElement(CreateReportObj.S6StartDate), await TMSLmt.getData(\"StartDate\"));\r\n        await z.fillField(await TMSLmt.getElement(CreateReportObj.S6EndDate), await TMSLmt.getData(\"EndDate\"));\r\n\r\n    }\r\n\r\n}\r\n\r\n// module.exports = new verify();\r\n// module.exports.verify=verify; // for inheritance"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\TMS\\implementation\\Reports\\CreateReportStepImpl.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 82,
                "endColumn": 4
            },
            {
                "ruleId": "unused-imports/no-unused-imports",
                "severity": 1,
                "message": "'Common' is defined but never used.",
                "line": 2,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "unusedVar",
                "endLine": 2,
                "endColumn": 16,
                "fix": {
                    "range": [
                        25,
                        72
                    ],
                    "text": ""
                }
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 46,
                "column": 11,
                "nodeType": "MemberExpression",
                "endLine": 46,
                "endColumn": 27
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 56,
                "column": 8,
                "nodeType": "MemberExpression",
                "endLine": 56,
                "endColumn": 13
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 64,
                "column": 11,
                "nodeType": "MemberExpression",
                "endLine": 64,
                "endColumn": 16
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 72,
                "column": 8,
                "nodeType": "MemberExpression",
                "endLine": 72,
                "endColumn": 13
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 81,
                "column": 8,
                "nodeType": "MemberExpression",
                "endLine": 81,
                "endColumn": 21
            }
        ],
        "errorCount": 1,
        "warningCount": 7,
        "fixableErrorCount": 0,
        "fixableWarningCount": 1,
        "source": "const { I } = inject();\r\nimport { Common } from \"../../Common/Common\";\r\nimport { CreateReportObj } from \"./CreateReportObj\";\r\nimport {CreateReportImpl} from \"./CreateReportImpl\"\r\nimport { z } from \"actionbot-wrapper/z\";\r\nimport { TMSLmt } from \"../../../Framework/FrameworkUtilities/i18nUtil/readI18NProp\";\r\n\r\n\r\nGiven(\"I navigate to Reports tab\",async function ()  {\r\n    await z.click(await TMSLmt.getElement(CreateReportObj.CreateReportTab));\r\n});\r\n\r\nWhen(\"I select Create New Report option\",async function ()  {\r\n    await z.click(await TMSLmt.getElement(CreateReportObj.CreateRepBtn));\r\n});\r\n\r\nWhen(\"I click on Next button for Step1\", async function() {\r\n    await z.click(await TMSLmt.getElement(CreateReportObj.NextBtn));\r\n});\r\n\r\nWhen(\"I click on Next button for Step2\", async function () {\r\n    await z.click(await TMSLmt.getElement(CreateReportObj.NextBtn));\r\n});\r\n\r\nWhen(\"I fill all the data at Step3\", async function() {\r\n    await CreateReportImpl.FillReportDetailsStep3(); \r\n});\r\n\r\nWhen(\"I click on Next button for Step3\",async function () {\r\n    await z.click(await TMSLmt.getElement(CreateReportObj.NextBtn));\r\n});\r\n\r\nWhen(\"I click on Next button for Step5\", async function() {\r\n    await z.click(await TMSLmt.getElement(CreateReportObj.NextBtn));\r\n});\r\n\r\nWhen(\"I fill all the data at Step6\", async function () {\r\n    await CreateReportImpl.FillReportDetailsStep6();\r\n});\r\n\r\nWhen(\"I click on Run Report\", async function (){\r\n    await z.click(await TMSLmt.getElement(CreateReportObj.RunReport));\r\n});\r\n\r\nThen(\"I should see the report\", async function()  {\r\n    await I.seeTitleEquals(\"Reports\");\r\n\t//I.seeElement(\"//title='Reports'\");\r\n});\r\n\r\n//Access Default Reports\r\nWhen(\"I select-List of users per product in TMS Report option\", async function () {\r\n    await z.click(await TMSLmt.getElement(CreateReportObj.UsersListperProduct));\r\n});\r\n\r\nThen(\"I should see List of users per product report\",async function () {\r\n\tawait I.see(\"List of users per product\");\r\n});\r\n\r\nWhen(\"I select-List of users grouped by role name and role type per product\",async function () {\r\n    await z.click(await TMSLmt.getElement(CreateReportObj.UsersByRole));\r\n});\r\n\r\nThen(\"I should see List of users grouped by role name and role type per product in TMS report\",async function () {\r\n    await I.see(\"List of users grouped by role name and role type per product\");\r\n});\r\n\r\nWhen(\"I select-Matrix report detailing number of users in a role per product in TMS Report option\",async function () {\r\n    await z.click(await TMSLmt.getElement(CreateReportObj.MatrixRep));\r\n});\r\n\r\nThen(\"I should see Matrix report detailing number of users in a role per product report\",async function (){\r\n\tawait I.see(\"Matrix report detailing number of users in a role per product\");\r\n});\r\n\r\nWhen(\"I close report\", async function () {;\r\n    await z.click(await TMSLmt.getElement(CreateReportObj.CloseReport));\r\n    //webDriver.switchTo().alert().dismiss()\r\n});\r\n\r\nThen(\"I close popup\", async function () {\r\n\tawait I.acceptPopup(\"Report is not saved. Click CANCEL to stay on page for saving the report or OK to close the report without saving.\")\r\n});"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\TMS\\implementation\\Role\\CreateRoleImpl.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 317,
                "endColumn": 7
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath ******",
                "line": 81,
                "column": 26,
                "nodeType": "BinaryExpression",
                "endLine": 81,
                "endColumn": 76
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 81,
                "column": 26,
                "nodeType": "Literal",
                "endLine": 81,
                "endColumn": 41
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 102,
                "column": 39,
                "nodeType": "MemberExpression",
                "endLine": 102,
                "endColumn": 53
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath ******",
                "line": 109,
                "column": 29,
                "nodeType": "BinaryExpression",
                "endLine": 109,
                "endColumn": 82
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 109,
                "column": 29,
                "nodeType": "Literal",
                "endLine": 109,
                "endColumn": 44
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 158,
                "column": 39,
                "nodeType": "MemberExpression",
                "endLine": 158,
                "endColumn": 53
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 169,
                "column": 31,
                "nodeType": "Literal",
                "endLine": 169,
                "endColumn": 62
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 183,
                "column": 38,
                "nodeType": "MemberExpression",
                "endLine": 183,
                "endColumn": 52
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath ******",
                "line": 214,
                "column": 25,
                "nodeType": "BinaryExpression",
                "endLine": 214,
                "endColumn": 50
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 214,
                "column": 25,
                "nodeType": "Literal",
                "endLine": 214,
                "endColumn": 40
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath ******",
                "line": 228,
                "column": 26,
                "nodeType": "BinaryExpression",
                "endLine": 228,
                "endColumn": 84
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 228,
                "column": 26,
                "nodeType": "Literal",
                "endLine": 228,
                "endColumn": 41
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 232,
                "column": 42,
                "nodeType": "MemberExpression",
                "endLine": 232,
                "endColumn": 56
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 256,
                "column": 31,
                "nodeType": "Literal",
                "endLine": 256,
                "endColumn": 74
            },
            {
                "ruleId": "dd-eslint-rules/z.waitForClickable_Should_NotbeUsed",
                "severity": 1,
                "message": "Z.waitForClickable should not be used in the scrit directly",
                "line": 261,
                "column": 23,
                "nodeType": "MemberExpression",
                "endLine": 261,
                "endColumn": 41
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 273,
                "column": 46,
                "nodeType": "Literal",
                "endLine": 273,
                "endColumn": 105
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 276,
                "column": 31,
                "nodeType": "Literal",
                "endLine": 276,
                "endColumn": 90
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 285,
                "column": 31,
                "nodeType": "MemberExpression",
                "endLine": 285,
                "endColumn": 45
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 285,
                "column": 46,
                "nodeType": "Literal",
                "endLine": 285,
                "endColumn": 105
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 290,
                "column": 31,
                "nodeType": "Literal",
                "endLine": 290,
                "endColumn": 90
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 294,
                "column": 31,
                "nodeType": "MemberExpression",
                "endLine": 294,
                "endColumn": 45
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 294,
                "column": 46,
                "nodeType": "Literal",
                "endLine": 294,
                "endColumn": 105
            }
        ],
        "errorCount": 1,
        "warningCount": 23,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "const { I } = inject();\r\nimport { Common } from \"../../Common/Common\";\r\nimport { logger } from \"../../../Framework/FrameworkUtilities/Logger/logger\";\r\n// import { CommonComponent } from \"../../commonKeywords/CommonComponent\";\r\nimport { z } from \"actionbot-wrapper/z\";\r\nimport { TMSLmt } from \"../../../Framework/FrameworkUtilities/i18nUtil/readI18NProp\";\r\nimport { CreateRoleObj } from \"./CreateRoleObj\";\r\n\r\nvar existingRoleDesc =\"\";\r\nvar UpdateRoleDes = \"\";\r\nlet a = Common.getRandomNumber1(4);\r\nlet ZARoleName = \"za\" + a.toString();\r\n\r\nvar RoleName = getRandomforRole(5) + \"_automation\";\r\nvar UpdateRoleDes = \"\";\r\n\r\nexport class CreateRoleImpl{\r\n    static async SearchRole(role) \r\n        {\r\n            await z.fillField(await TMSLmt.getElement(CreateRoleObj.SearchRole), role);\r\n            await z.click(await TMSLmt.getElement(CreateRoleObj.GoBtn));\r\n        //     await I.click(CreateRoleObj.GoBtn); \r\n        //     I.wait(2);\r\n        }\r\n        \r\n        static async NavigateTo(xpath) \r\n        {\r\n        //      I.click(xpath);\r\n             await z.click(xpath);\r\n        }\r\n\r\n        static async DeactivateRole() \r\n        {\r\n                // I.click(CreateRoleObj.Deactivate);\r\n                await CreateRoleImpl.SearchRole(RoleName);\r\n                await z.click(await TMSLmt.getElement(CreateRoleObj.Deactivate));\r\n                // I.click(CreateRoleObj.Confirmation);\r\n                await z.click(await TMSLmt.getElement(CreateRoleObj.Confirmation));\r\n        }\r\n\r\n        static async ActivateRole() \r\n        {   \r\n                // I.click(CreateRoleObj.Activate);\r\n                await z.click(await TMSLmt.getElement(CreateRoleObj.Activate));\r\n                // I.wait(2);\r\n                // I.click(CreateRoleObj.Confirmation);\r\n                await z.click(await TMSLmt.getElement(CreateRoleObj.Confirmation));\r\n                // I.wait(2);      \r\n        }\r\n\r\n        static async EditRole()\r\n        {\r\n                // I.click(CreateRoleObj.EditRole);\r\n                await z.click(await TMSLmt.getElement(CreateRoleObj.EditRole));\r\n                // I.wait(5);\r\n                // I.click(CreateRoleObj.EditRoleInfo);\r\n                await z.click(await TMSLmt.getElement(CreateRoleObj.EditRoleInfo));\r\n                // I.wait(5);\r\n        }\r\n\r\n        static async activateRole() {\r\n                await this.SearchRole(await TMSLmt.getData(\"StaticRole_ACTIVATE\"));\r\n                await this.ActivateRole();\r\n                // I.wait(10);\r\n                // I.refreshPage();\r\n        }\r\n        static async verifyRoleActivation() {\r\n                //I.waitForClickable(CreateRoleObj.SearchRole);\r\n                await this.SearchRole(await TMSLmt.getData(\"StaticRole_ACTIVATE\"));\r\n                // I.wait(5);\r\n                 var ExpStatus= await z.grabTextFrom(CreateRoleObj.Deactivate);\r\n                 await z.assertEqual(\"Active\",ExpStatus);\r\n                //reverting back to inactive state\r\n                await this.DeactivateRole();\r\n                // I.wait(10);\r\n                // I.refreshPage();\r\n        }\r\n        static async makeChangestoRoleDesc() {\r\n                this.SearchRole(await TMSLmt.getData(\"StaticRole_Edit\"));\r\n   \r\n                var ER = '//td[text()=\"'+ TMSLmt.getData(\"StaticRole_Edit\") +'\"]/following-sibling::td/following-sibling::td/following-sibling::td/following-sibling::td/label[1]';\r\n                //\"//tr[@class='filterGridTblTd']/td[5]/label[1]\"\r\n                await z.click(ER);\r\n                await z.click(await TMSLmt.getElement(CreateRoleObj.EditRoleInfo));\r\n\r\n\r\n                existingRoleDesc = await z.grabTextFrom(CreateRoleObj.RoleDesc);\r\n                console.log(existingRoleDesc);\r\n    \r\n                UpdateRoleDes = Common.getRandomNumber1(3)+\"_UpdateThroughAutomation\";\r\n                z.fillField(await TMSLmt.getElement(CreateRoleObj.RoleDesc), UpdateRoleDes);\r\n                await z.click(await TMSLmt.getElement(CreateRoleObj.UpdateSave));\r\n                await z.click(await TMSLmt.getElement(CreateRoleObj.DoneBtn));\r\n\r\n        }\r\n\r\n        static async descUpdated() {\r\n                await z.refreshPage();\r\n                await this.SearchRole(await TMSLmt.getData(\"StaticRole_Edit\"));\r\n                // I.wait(3);\r\n                await this.EditRole();\r\n                var UpdatedRoleDesc = I.grabTextFrom(CreateRoleObj.RoleDesc).toString();\r\n                console.log(UpdatedRoleDesc);\r\n                //I.assertEqual(UpdateRoleDes,UpdatedRoleDesc);\r\n        }\r\n\r\n        static async ZAEditRole() {\r\n                await this.SearchRole(await TMSLmt.getData(\"ZA_StaticRole_Edit\"));\r\n                var ZA_ER = '//td[text()=\"'+ TMSLmt.getData(\"ZA_StaticRole_Edit\") +'\"]/following-sibling::td/following-sibling::td/following-sibling::td/following-sibling::td/label[1]';\r\n                // z.click(ZA_ER);\r\n                await z.click(ZA_ER);\r\n                // I.wait(5);\r\n                await z.click(await TMSLmt.getElement(CreateRoleObj.EditRoleInfo));\r\n                // I.click(CreateRoleObj.EditRoleInfo);\r\n                // I.wait(5);     \r\n        }\r\n        static async MakeChangesForZARoleUpdate(){\r\n                await this.ZAEditRole();\r\n                UpdateRoleDes = getRandomforRole(3)+ \"_UpdateThroughAutomation\";\r\n                z.fillField(await TMSLmt.getElement(CreateRoleObj.RoleDesc), UpdateRoleDes);\r\n                await z.click(await TMSLmt.getElement(CreateRoleObj.ZA_UpdateSave));\r\n                // z.wait(2);\r\n                await z.click(await TMSLmt.getElement(CreateRoleObj.DoneBtn));\r\n                // z.wait(3);\r\n        }\r\n\r\n        static async VerificationZARoleUpdation(){\r\n                await this.verifyRoleUpdated();\r\n                var UpdatedRoleDesc = await z.grabTextFrom(CreateRoleObj.RoleDesc);\r\n                z.assertEqual(UpdateRoleDes,UpdatedRoleDesc);\r\n        }\r\n\r\n        static async verifyRoleUpdated() {\r\n                await this.SearchRole(await TMSLmt.getData(\"ZA_StaticRole_Edit\"));\r\n                //z.wait(3);\r\n                await this.EditRole();\r\n        }\r\n\r\n        static async ZAAssignRole(){\r\n                await this.SearchRole(await TMSLmt.getData(\"ZA_StaticRole_Edit\"));\r\n                await z.click(await TMSLmt.getElement(CreateRoleObj.AssignRole));\r\n                var User = z.grabTextFrom(CreateRoleObj.AddUser);\r\n                console.log(User);\r\n                await z.click(await TMSLmt.getElement(CreateRoleObj.AddUser));\r\n                await z.click(await TMSLmt.getElement(CreateRoleObj.SaveBtn3));\r\n        }\r\n\r\n        static async activateZARole() {\r\n                await this.SearchRole(await TMSLmt.getData(\"ZA_StaticRole_ACTIVATE\"));\r\n                await this.ActivateRole();\r\n                // I.wait(10);\r\n                z.refreshPage();\r\n        }\r\n        static async verifyZARoleActivation() {\r\n                //I.waitForClickable(CreateRoleObj.SearchRole);\r\n                await this.SearchRole(await TMSLmt.getData(\"ZA_StaticRole_ACTIVATE\"));\r\n                // I.wait(5);\r\n                 var ExpStatus= await I.grabTextFrom(CreateRoleObj.Deactivate);\r\n                 z.assertEqual(\"Active\",ExpStatus);\r\n                //reverting back to inactive state\r\n                await this.DeactivateRole();\r\n                // I.wait(10);\r\n                z.refreshPage();\r\n        }\r\n\r\n        static async deactivateZARole() {\r\n                await this.SearchRole(await TMSLmt.getData(\"ZA_StaticRole\"));\r\n                // I.wait(5);\r\n                await z.click(\"//label[@title='Active Role']\");\r\n                // I.wait(2);await z.click(await TMSLmt.getElement(CreateRoleObj.DoneBtn));\r\n                await z.click(await TMSLmt.getElement(CreateRoleObj.Confirmation));\r\n                // I.wait(2);\r\n                //this.DeactivateRole;\r\n               // I.wait(5);\r\n                z.refreshPage()\r\n        }\r\n\r\n        static async verifyZARoleDeactivation() {\r\n                //I.waitForClickable(CreateRoleObj.SearchRole);\r\n                // I.wait(5);\r\n                await this.SearchRole(await TMSLmt.getData(\"ZA_StaticRole\"));\r\n\r\n                var ExpStatus= await I.grabTextFrom(CreateRoleObj.Activate);\r\n                await z.assertEqual(\"Inactive\",ExpStatus);\r\n                //reverting back to active state\r\n                await this.ActivateRole();\r\n                // I.wait(10);\r\n                await z.refreshPage();\r\n        }\r\n\r\n        static async searchCompany() {\r\n                // Common.fillfields(CreateRoleObj.CompSearch,CreateRoleObj.CompToBeSearched--TMSLmt.getData(CompToBeSearched));\r\n                await z.fillField(await TMSLmt.getElement(CreateRoleObj.CompSearch), await TMSLmt.getData(\"CompToBeSearched\"));\r\n                // I.wait(2);\r\n                // I.click(CreateRoleObjGoBtn);\r\n                await z.click(await TMSLmt.getElement(CreateRoleObj.GoBtn));\r\n                // I.wait(5);\r\n                // I.click(CreateRoleObj.UserListingIcon);\r\n                await z.click(await TMSLmt.getElement(CreateRoleObj.UserListingIcon));\r\n                // I.wait(5);\r\n        }\r\n\r\n        static async FillRoleDetails() {\r\n                await z.fillField(await TMSLmt.getElement(CreateRoleObj.RoleTitleTxtBox),RoleName);\r\n                await z.fillField(await TMSLmt.getElement(CreateRoleObj.RoleDesc),\"automationScript\");\r\n                // await z.selectOption(\"//select[@id='cmbAssignProduct']\",\"TMS\");\r\n                await z.selectOption(await TMSLmt.getElement(CreateRoleObj.ProductSelection),await TMSLmt.getData(\"RoleForProduct\"));\r\n                await z.click(await TMSLmt.getElement(CreateRoleObj.SaveBtn));\r\n        }\r\n        \r\n        static async NewRoleAdded(){\r\n                z.refreshPage();\r\n                await this.SearchRole(RoleName);\r\n                var a = '//td[text()=\"'+ RoleName +'\"]';\r\n                var RoleAdded = await z.grabTextFrom(a);\r\n                console.log(RoleAdded);\r\n                // I.wait(5);\r\n        }\r\n        \r\n        static async AssignCreatedRole(){\r\n                await z.click(await TMSLmt.getElement(CreateRoleObj.AssignRole));\r\n                await z.click(await TMSLmt.getElement(CreateRoleObj.AddUser));\r\n                await z.click(await TMSLmt.getElement(CreateRoleObj.SaveBtn3));\r\n        }\r\n\r\n        static async MakeChangesForRoleEdit(){\r\n                await this.SearchRole(await TMSLmt.getData(\"StaticRole_Edit\"));\r\n                var ER = '//td[text()=\"'+ (await TMSLmt.getData(\"StaticRole_Edit\")) +'\"]/following-sibling::td/following-sibling::td/following-sibling::td/following-sibling::td/label[1]';\r\n                await z.click(ER);\r\n                await z.click(await TMSLmt.getElement(CreateRoleObj.EditRoleInfo));\r\n            \r\n                existingRoleDesc = await I.grabTextFrom(await TMSLmt.getElement(CreateRoleObj.RoleDesc));\r\n                console.log(existingRoleDesc);\r\n                UpdateRoleDes = getRandomforRole(3)+\"_UpdateThroughAutomation\";\r\n                await z.fillField(await TMSLmt.getElement(CreateRoleObj.RoleDesc), UpdateRoleDes);\r\n                await z.click(await TMSLmt.getElement(CreateRoleObj.UpdateSave));\r\n                await z.click(await TMSLmt.getElement(CreateRoleObj.DoneBtn));\r\n        }\r\n        \r\n        static async VerifyEditRoleDone(){\r\n                z.refreshPage();\r\n                //z.wait(5);\r\n                await this.SearchRole(await TMSLmt.getData(\"StaticRole_Edit\"));\r\n                await this.EditRole();\r\n                let UpdatedRoleDesc = await z.grabTextFrom(await TMSLmt.getElement(CreateRoleObj.RoleDesc));\r\n                // console.log(UpdatedRoleDesc);\r\n                logger.info(UpdatedRoleDesc);\r\n                await z.assertEqual(UpdateRoleDes,UpdatedRoleDesc);\r\n        }\r\n\r\n        static async CheckRoleinAudit(){\r\n                await z.see(RoleName);\r\n        }\r\n                \r\n        static async CheckRoleinAuditInLink(){\r\n                await z.click(\"//span[text()='Role Updated through  UI']\");\r\n                await z.see(UpdateRoleDes);\r\n        }\r\n\r\n        static async RoleShouldDeactivate(){\r\n                await z.waitForClickable(await TMSLmt.getElement(CreateRoleObj.SearchRole));\r\n                await this.SearchRole(await TMSLmt.getData(\"StaticRole\"));\r\n                var ExpStatus= await z.grabTextFrom(CreateRoleObj.Activate);\r\n                //reverting back to active state\r\n                await this.SearchRole(await TMSLmt.getData(\"StaticRole\"));\r\n                await this.ActivateRole();\r\n                z.refreshPage();\r\n        }\r\n\r\n        static async ChangeRoleStatus(){\r\n                await this.SearchRole(await TMSLmt.getData(\"StaticRole\"));\r\n                // I.wait(5);\r\n                var a = await z.grabTextFrom(\"//*[@id='user-role-management-grid']/tbody/tr/td[4]/label\");\r\n                if (a == 'Active')\r\n                {\r\n                await z.click(\"//*[@id='user-role-management-grid']/tbody/tr/td[4]/label\");\r\n                // I.click();\r\n                // I.wait(2);\r\n                await z.click(await TMSLmt.getElement(CreateRoleObj.Confirmation));\r\n                // I.click(CreateRoleObj.Confirmation);\r\n                // I.wait(2);\r\n                z.refreshPage();\r\n                await this.SearchRole(await TMSLmt.getData(\"StaticRole\"));\r\n                // I.wait(5);\r\n                var b = await I.grabTextFrom(\"//*[@id='user-role-management-grid']/tbody/tr/td[4]/label\");\r\n                await z.assertEqual(b, \"Inactive\")\r\n                }\r\n                else\r\n                {\r\n                await z.click(\"//*[@id='user-role-management-grid']/tbody/tr/td[4]/label\");\r\n                await z.click(await TMSLmt.getElement(CreateRoleObj.Confirmation));\r\n                await z.refreshPage();\r\n                await this.SearchRole(await TMSLmt.getData(\"StaticRole\"));\r\n                var b = await I.grabTextFrom(\"//*[@id='user-role-management-grid']/tbody/tr/td[4]/label\");\r\n                await z.assertEqual(b, \"Active\")\r\n                }\r\n        }\r\n                static async AssignStaticRole(){\r\n                await this.SearchRole(await TMSLmt.getData(\"AssingedRoleUser\"));\r\n                await z.click(await TMSLmt.getElement(CreateRoleObj.AssignRole));            \r\n                await z.click(await TMSLmt.getElement(CreateRoleObj.AddUser));\r\n                await z.click(await TMSLmt.getElement(CreateRoleObj.SaveBtn3));\r\n        }\r\n}\r\n\r\n// module.exports = new CreateRole();\r\n// module.exports.CreateRole=CreateRole; // for inheritance \r\n\r\nfunction getRandomforRole(length:number) {\r\n        var result           = '';\r\n        var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        var charactersLength = characters.length;\r\n        for ( var i = 0; i < length; i++ ) {\r\n           result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n        }\r\n        return result+\"_auto\";\r\n     }"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\TMS\\implementation\\Role\\CreateRoleStepImpl.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 174,
                "endColumn": 1
            },
            {
                "ruleId": "unused-imports/no-unused-imports",
                "severity": 1,
                "message": "'Common' is defined but never used.",
                "line": 2,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "unusedVar",
                "endLine": 2,
                "endColumn": 16,
                "fix": {
                    "range": [
                        25,
                        72
                    ],
                    "text": ""
                }
            }
        ],
        "errorCount": 1,
        "warningCount": 2,
        "fixableErrorCount": 0,
        "fixableWarningCount": 1,
        "source": "const { I } = inject();\r\nimport { Common } from \"../../Common/Common\";\r\nimport { CreateRoleObj } from \"./CreateRoleObj\";\r\nimport { CreateRoleImpl } from \"./CreateRoleImpl\";\r\nimport { z } from \"actionbot-wrapper/z\";\r\nimport { TMSLmt } from \"../../../Framework/FrameworkUtilities/i18nUtil/readI18NProp\";\r\n\r\n// var RoleName = getRandomforRole(5) + \"_automation\"\r\n//const RoleName=Common.getRandomNumber(5) + \"auto\";\r\n// var existingRoleDesc =\"\";\r\n// var UpdateRoleDes = \"\";\r\n\r\nGiven(\"Navigate to Role Listing Page\", async function() {\r\n    await CreateRoleImpl.NavigateTo(await TMSLmt.getElement(CreateRoleObj.RoleManagementTab));\r\n});\r\n\r\nWhen(\"I click on Add New Role\", async function() {\r\n    await CreateRoleImpl.NavigateTo(await TMSLmt.getElement(CreateRoleObj.AddNewRoleBtn));\r\n});\r\n\r\nWhen(\"I Fill all the data for role details\", async function (){\r\n    await CreateRoleImpl.FillRoleDetails();\r\n});\r\n\r\nWhen(\"I assign activities\", async function ()  {\r\n    await z.click(await TMSLmt.getElement(CreateRoleObj.selectCheck));\r\n    await z.click(await TMSLmt.getElement(CreateRoleObj.SaveBtn2));\r\n});\r\n\r\nWhen(\"I click on done\", async function() {\r\n    await z.click(await TMSLmt.getElement(CreateRoleObj.DoneBtn));\r\n});\r\n\r\nThen(\"role should be added\",async function () {\r\n    await CreateRoleImpl.NewRoleAdded();\r\n});\r\n\r\nThen(\"I should be able to assign the role to user\",async function (){\r\n    await CreateRoleImpl.AssignCreatedRole();\r\n});\r\n\r\nThen(\"I deactivate Role\", async function()  {\r\n    // await CreateRoleImpl.SearchRole(await TMSLmt.getData(\"StaticRole\"));\r\n    await CreateRoleImpl.DeactivateRole();\r\n    z.refreshPage();\r\n});\r\n\r\nThen(\"Role should be deactivated\", async function () {\r\n    await CreateRoleImpl.RoleShouldDeactivate();\r\n});\r\n\r\nThen(\"I activate static Role\", async function() {\r\n    await CreateRoleImpl.activateRole();\r\n});\r\n\r\nThen(\"Role should be activated\", async function () {\r\n    await CreateRoleImpl.verifyRoleActivation();\r\n});\r\n\r\nThen(\"I should be allowed to assign static role to user\", async function() {\r\n    await CreateRoleImpl.AssignStaticRole();\r\n});\r\n\r\n\r\nWhen(\"I fetch the role\", async function () {\r\n    //CreateRoleImpl.SearchRole(CreateRoleObj.StaticRole);\r\n});\r\n\r\nWhen(\"I make necessary changes\", async function()  {\r\n    await CreateRoleImpl.MakeChangesForRoleEdit();\r\n});\r\n   \r\nThen(\"Role should be updated\", async function() {\r\n    await CreateRoleImpl.VerifyEditRoleDone();\r\n});\r\n\r\n// Zycus Admin - Add New Role\r\n\r\n// When(\"I enter RoleName\",async function () {\r\n//     await z.fillField(await TMSLmt.getElement(CreateRoleObj.RoleTitleTxtBox), RoleName);\r\n// });\r\n\r\n// When(\"I select Roletype\", async function (){\r\n//     await z.click(await TMSLmt.getElement(CreateRoleObj.RLType));\r\n// });\r\n\r\n// When(\"I assign Product\", async function () {\r\n//     // I.click(CreateRoleObj.SelectProd);\r\n//     await z.click(await TMSLmt.getElement(CreateRoleObj.SelectProd));\r\n// });\r\n\r\n// When(\"I enter Role description\", async function () {\r\n//     await z.fillField(await TMSLmt.getElement(CreateRoleObj.RLDesc), \"automationScript\");\r\n// });\r\n\r\n// When(\"I click Save\", async function () {\r\n//     await z.click(await TMSLmt.getElement(CreateRoleObj.SaveContinue));\r\n// });\r\n\r\nWhen(\"ZA level role deactivation\", async function (){\r\n\tawait CreateRoleImpl.deactivateZARole();\r\n});\r\n\r\nThen(\"Role should be deactivated ZA level\", async function () {\r\n    await CreateRoleImpl.verifyZARoleDeactivation();\r\n});\r\n\r\nWhen(\"I activate static Role ZA level\", async function() {\r\n    await CreateRoleImpl.activateZARole();\r\n});\r\n\r\nThen(\"Role should be activated ZA level\", async function () {\r\n    await CreateRoleImpl.verifyZARoleActivation();\r\n});\r\n\r\nWhen(\"I make necessary changes for ZA Role\", async function (){\r\n    await CreateRoleImpl.MakeChangesForZARoleUpdate();\r\n});\r\n\r\nThen(\"Role should be updated for ZA\", async function (){\r\n    CreateRoleImpl.VerificationZARoleUpdation();\r\n});\r\n\r\nGiven(\"I am on Company listing page\",async function (){\r\n    await z.click(await TMSLmt.getElement(CreateRoleObj.Company));\r\n});\r\n\r\nWhen(\"I search the company\",async function () {  \r\n    await CreateRoleImpl.searchCompany();\r\n});\r\n\r\nWhen(\"Navigate to Role Management tab\",async function () {\r\n    await z.click(await TMSLmt.getElement(CreateRoleObj.RoleManagementTab));\r\n    // I.wait(5);\r\n});\r\n\r\nThen(\"I Zycus admin should be allowed to assign static role to user\", async function() {\r\n    await CreateRoleImpl.ZAAssignRole();\r\n});\r\n\r\nThen(\"I should be able to see Add New Role option\", async function () {\r\n\tawait z.see(\"Add New Role\");\r\n});\r\n\r\nThen(\"I should see Step2 of role creation\", async function () {\r\n\tawait z.see(\"Step 2 - Activity Allocation To Role: \");\r\n});\r\n\r\nThen(\"I should see role created in role audit page\", async function () {\r\n    await CreateRoleImpl.CheckRoleinAudit();\r\n});\r\n\r\nThen(\"I should see update record in audit trail\", async function () {\r\n    await CreateRoleImpl.CheckRoleinAuditInLink();\r\n});\r\n\r\nThen(\"I should get the record for activation\",async function () {\r\n    z.see(await TMSLmt.getData(\"StaticRole_ACTIVATE\"));\r\n});\r\n\r\nThen(\"I should get the record for deactivation\", async function (){\r\n\tz.see(await TMSLmt.getData(\"StaticRole\"));\r\n});\r\n\r\nWhen(\"I change role status\", async function () {\r\n    await CreateRoleImpl.ChangeRoleStatus();\r\n});\r\n\r\nThen(\"Role status should be changed\", async function () {\r\n\treturn true;\r\n});\r\n\r\n\r\n"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\TMS\\implementation\\Settings\\DisplayStepImpl.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 54,
                "endColumn": 1
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 19,
                "column": 24,
                "nodeType": "Literal",
                "endLine": 19,
                "endColumn": 51
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 20,
                "column": 19,
                "nodeType": "Literal",
                "endLine": 20,
                "endColumn": 45
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 26,
                "column": 19,
                "nodeType": "Literal",
                "endLine": 26,
                "endColumn": 53
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 27,
                "column": 19,
                "nodeType": "Literal",
                "endLine": 27,
                "endColumn": 40
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 33,
                "column": 7,
                "nodeType": "MemberExpression",
                "endLine": 33,
                "endColumn": 12
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 52,
                "column": 11,
                "nodeType": "MemberExpression",
                "endLine": 52,
                "endColumn": 16
            }
        ],
        "errorCount": 1,
        "warningCount": 7,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "const { I } = inject();\r\nimport { DisplayObj } from \"./DisplayObj\";\r\nimport { z } from \"actionbot-wrapper/z\";\r\nimport { TMSLmt } from \"../../../Framework/FrameworkUtilities/i18nUtil/readI18NProp\";\r\n\r\nGiven (\"Navigate to Display Settings\", async function() {  \r\n    await z.click(await TMSLmt.getElement(DisplayObj.PreferenceTab));\r\n    await z.click(await TMSLmt.getElement(DisplayObj.DisplaySettingsTab));\r\n    await z.see(\"You are here: Company Preferences > Display Settings\");\r\n});\r\n\r\nWhen (\"Changes Company Preferences\",async function(){\r\n    await z.selectOption(await TMSLmt.getElement(DisplayObj.defaultDateFormat_Locator),await TMSLmt.getData(\"DateFormat_value\"));\r\n    await z.selectOption(await TMSLmt.getElement(DisplayObj.defaultLocale_Locator),await TMSLmt.getData(\"Locale_value\"));\r\n    await z.selectOption(await TMSLmt.getElement(DisplayObj.timeFormat_Locator),await TMSLmt.getData(\"TimeFormat_value\"));\r\n});\r\n\r\nWhen (\"Upload New logo\",async function(){\r\n    await z.attachFile(\"//input[@id='importFile']\",'newlogo.png');\r\n    await z.click(\"//input[@id='uploadBtn']\");\r\n    await z.see(\"Logo Uploaded Successfully\");\r\n\r\n});\r\n\r\nWhen(\"Reset Zycus logo\", async function () {\r\n    await z.click(\"//input[@id='chkResetZycusLogo']\");\r\n    await z.click(\"//span[text()='Ok']\")\r\n    await z.see(\"Reset to Zycus Logo Successful !\");\r\n});\r\n\r\nThen (\"Display Settings should get updated\", async function() {\r\n    await z.click(await TMSLmt.getElement(DisplayObj.Save_btn));\r\nawait I.see(\"Display Settings has been updated\");\r\n\r\n});\r\n\r\n\r\nThen(\"Settings should be reflected in AuditTrail page\", async function () {\r\n\tawait z.see(\"Company Logo Updated\");\r\n});\r\n\r\nWhen(\"I click on Reset Logo button\",  async function (){\r\n\tawait z.click(await TMSLmt.getElement(DisplayObj.ResetZycusLogo));\r\n});\r\n\r\n\r\nWhen(\"I confirm for resetting the logo\",  async function () {\r\n\tawait z.click(await TMSLmt.getElement(DisplayObj.ResetZycusLogoConfirmation));\r\n});\r\n\r\nThen(\"zycus logo should be reset\",  async function () {\r\n    await I.see(\"Reset to Zycus Logo Successful !\");\r\n});\r\n"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\TMS\\implementation\\Settings\\SecurityStepImpl.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 61,
                "endColumn": 8
            },
            {
                "ruleId": "unused-imports/no-unused-imports",
                "severity": 1,
                "message": "'Common' is defined but never used.",
                "line": 3,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "unusedVar",
                "endLine": 3,
                "endColumn": 16,
                "fix": {
                    "range": [
                        27,
                        74
                    ],
                    "text": ""
                }
            },
            {
                "ruleId": "unused-imports/no-unused-imports",
                "severity": 1,
                "message": "'logger' is defined but never used.",
                "line": 5,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "unusedVar",
                "endLine": 5,
                "endColumn": 16,
                "fix": {
                    "range": [
                        120,
                        199
                    ],
                    "text": ""
                }
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 11,
                "column": 11,
                "nodeType": "MemberExpression",
                "endLine": 11,
                "endColumn": 16
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 24,
                "column": 7,
                "nodeType": "MemberExpression",
                "endLine": 24,
                "endColumn": 12
            }
        ],
        "errorCount": 1,
        "warningCount": 5,
        "fixableErrorCount": 0,
        "fixableWarningCount": 2,
        "source": "const { I } = inject();\r\n\r\nimport { Common } from \"../../Common/Common\";\r\nimport { SecurityObj } from \"./SecurityObj\";\r\nimport { logger } from \"../../../Framework/FrameworkUtilities/Logger/logger\";\r\nimport { z } from \"actionbot-wrapper/z\";\r\nimport { TMSLmt } from \"../../../Framework/FrameworkUtilities/i18nUtil/readI18NProp\";\r\n\r\nGiven (\"Navigate to Security Policy Page\", async function() {  \r\n    await z.click(await TMSLmt.getElement(SecurityObj.PreferenceTab));\r\n    await I.see(\"You are here: Company Preferences > Security Policy\");\r\n});\r\n\r\nWhen (\"Changes Security Policy\",async function(){\r\n    await z.selectOption(await TMSLmt.getElement(SecurityObj.No_password_hisory_Locator),await TMSLmt.getData(\"No_password_hisory_Value\"));\r\n    await z.selectOption(await TMSLmt.getElement(SecurityObj.View_no_login_Locator),await TMSLmt.getData(\"View_no_login_Value\"));\r\n    \r\n});\r\n\r\n\r\nThen (\"Security Policy should get updated\", async function() {\r\n    await z.fillField(await TMSLmt.getElement(SecurityObj.policyChangeDescription_Locator),SecurityObj.policyChangeDescription_Value);\r\n    await z.click(await TMSLmt.getElement(SecurityObj.Save_btn));\r\nawait I.see(\"Security Policy has been updated\");\r\n\r\n});\r\n\r\nThen (\"Security Policy Save\", async function() {\r\n    await z.click(await TMSLmt.getElement(SecurityObj.Save_btn));\r\n    await z.see(\"Mandatory\");\r\n    });\r\n\r\n    When (\"Verify all the drop down values on Security Policy\",async function(){\r\n        var cars = await TMSLmt.getData(\"PasswordHistoryList\");\r\n        for (let i = 0; i < cars.length; i++) {\r\n            await z.selectOption(await TMSLmt.getElement(SecurityObj.passwordRepetitionLimit),cars[i]);\r\n        }\r\n    \r\n        var cars1 = await TMSLmt.getData(\"NameValuesYesNo\");\r\n        for (let i = 0; i < cars1.length; i++) {\r\n            await z.selectOption(`//*[@name=\"${cars1[i]}\"]`,\"Yes\");\r\n            await z.selectOption(`//*[@name=\"${cars1[i]}\"]`,\"No\");\r\n        }\r\n    \r\n        \r\n    });\r\n    \r\n    Then (\"Security Policy Values should get changed\", async function() {\r\n        var passwordRepetitionLimit_value = await z.grabValueFrom(SecurityObj.passwordRepetitionLimit);\r\n        var cars = await TMSLmt.getData(\"PasswordHistoryList\");\r\n        var Compare_passwordRepetitionLimit = cars[cars.length - 1];\r\n        await z.assertEqual(passwordRepetitionLimit_value.toString(),Compare_passwordRepetitionLimit);\r\n    \r\n        var cars1 = await z.grabValueFrom(\"NameValuesYesNo\");\r\n        for (let i = 0; i < cars1.length; i++) {\r\n            var values = await z.grabTextFrom(`//*[@name=\"${cars1[i]}\"]//option[@selected='selected']`);\r\n            //logger.info(\"printing ....\"+values)\r\n            await z.assertEqual(values.toString(),\"No\");\r\n        }\r\n    \r\n    });"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\TMS\\implementation\\UserGroup\\UserGroupImpl.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 70,
                "endColumn": 52
            },
            {
                "ruleId": "unused-imports/no-unused-imports",
                "severity": 1,
                "message": "'Common' is defined but never used.",
                "line": 2,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "unusedVar",
                "endLine": 2,
                "endColumn": 16,
                "fix": {
                    "range": [
                        25,
                        72
                    ],
                    "text": ""
                }
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath ******",
                "line": 42,
                "column": 16,
                "nodeType": "BinaryExpression",
                "endLine": 42,
                "endColumn": 39
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 42,
                "column": 16,
                "nodeType": "Literal",
                "endLine": 42,
                "endColumn": 31
            }
        ],
        "errorCount": 1,
        "warningCount": 4,
        "fixableErrorCount": 0,
        "fixableWarningCount": 1,
        "source": "const { I } = inject();\r\nimport { Common } from \"../../Common/Common\";\r\nimport {  UserGroupObj } from \"./UserGroupObj\";\r\nimport { z } from \"actionbot-wrapper/z\";\r\nimport { TMSLmt } from \"../../../Framework/FrameworkUtilities/i18nUtil/readI18NProp\";\r\n\r\nvar UGName = getRandomforUG(4) + \"_automation\"\r\nlet desc = getRandomforUG(3) + \"UpdatedDescription\";\r\n\r\nexport class UserGroupImpl{\r\n\r\n    static async EnterReqData(){\r\n        await z.fillField(await TMSLmt.getElement(UserGroupObj.UGName), UGName);\r\n        await z.fillField(await TMSLmt.getElement(UserGroupObj.UGDesc),\"CreatedByBDDAutomation\");\r\n        await z.fillField(await TMSLmt.getElement(UserGroupObj.SearchByName),\"ad\");\r\n        // Common.fillfields(UserGroupObj.UGName,UGName);\r\n        // Common.fillfields(UserGroupObj.UGDesc,\"CreatedByBDDAutomation\");\r\n        // Common.fillfields(UserGroupObj.SearchByName,\"admin\");\r\n        await z.pressKey(\"Enter\");\r\n        await z.click(await TMSLmt.getElement(UserGroupObj.SelectUser));\r\n    }   \r\n    static async SeeUGCreated(){\r\n        await z.see(UGName);\r\n    }\r\n\r\n    static async ChangeUGdesc(){\r\n        await z.fillField(await TMSLmt.getElement(UserGroupObj.UGDesc), desc);\r\n    }   \r\n    \r\n    static async UGUpdated(){\r\n        await z.refreshPage();\r\n        var updatedDesc = await z.grabTextFrom(`//td[text()='${UGName}']/following-sibling::td[1]`);\r\n        await z.assertEqual(desc,updatedDesc);\r\n    }\r\n\r\n    static async AuditUGUpdated(){\r\n        await z.click(await TMSLmt.getElement(UserGroupObj.UGDescUpdateAuditLink));\r\n        await z.see(desc);\r\n    }\r\n\r\n    static async UGCreation(){\r\n        var v= '//td[text()=\"'+ UGName +'\"]';\r\n        var ActValue= await z.grabTextFrom(v);\r\n        await console.log(ActValue);\r\n        await this.VerifyUGCreated(ActValue,UGName);\r\n    }\r\n    static async VerifyUGCreated(a,b)\r\n    {\r\n        if(a==b)\r\n        {\r\n            console.log(\"UserGroup is successfully created\");\r\n        }\r\n        else\r\n        {\r\n            console.log(\"UserGroup Created Failed\");\r\n        }\r\n    }\r\n}\r\nfunction getRandomforUG(length:number) {\r\n    var result           = '';\r\n    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    var charactersLength = characters.length;\r\n    for ( var i = 0; i < length; i++ ) {\r\n       result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    }\r\n    return result+\"_auto\";\r\n }\r\n\r\n// module.exports = new verify();\r\n// module.exports.verify=verify; // for inheritance"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\TMS\\implementation\\UserGroup\\UserGroupStepImpl.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 88,
                "endColumn": 1
            },
            {
                "ruleId": "unused-imports/no-unused-imports",
                "severity": 1,
                "message": "'Common' is defined but never used.",
                "line": 2,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "unusedVar",
                "endLine": 2,
                "endColumn": 16,
                "fix": {
                    "range": [
                        25,
                        72
                    ],
                    "text": ""
                }
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 84,
                "column": 5,
                "nodeType": "MemberExpression",
                "endLine": 84,
                "endColumn": 21
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 85,
                "column": 11,
                "nodeType": "MemberExpression",
                "endLine": 85,
                "endColumn": 27
            }
        ],
        "errorCount": 1,
        "warningCount": 4,
        "fixableErrorCount": 0,
        "fixableWarningCount": 1,
        "source": "const { I } = inject();\r\nimport { Common } from \"../../Common/Common\";\r\nimport { UserGroupObj } from \"./UserGroupObj\";\r\nimport { UserGroupImpl } from \"./UserGroupImpl\";\r\nimport { z } from \"actionbot-wrapper/z\";\r\nimport { TMSLmt } from \"../../../Framework/FrameworkUtilities/i18nUtil/readI18NProp\";\r\n\r\n// var UGName = getRandomforUG(4) + \"_automation\"\r\n// let desc = getRandomforUG(3) + \"UpdatedDescription\";\r\n\r\nGiven(\"Navigate to UserGroup Page\", async function ()  {\r\n    await z.click(await TMSLmt.getElement(UserGroupObj.UserGroupTab));\r\n});\r\n\r\nWhen(\"I click on Add New UserGroup\", async function()  {\r\n    await z.click(await TMSLmt.getElement(UserGroupObj.AddUG));\r\n});\r\n\r\nWhen(\"I enter all the required data\", async function ()  {\r\n    await UserGroupImpl.EnterReqData();\r\n});\r\n\r\nWhen(\"I click on CreateNewGroup\", async function () {\r\n    await z.click(await TMSLmt.getElement(UserGroupObj.CreateBtn));\r\n});\r\n\r\nThen(\"UserGroup should be created\", async function() {\r\n    await UserGroupImpl.UGCreation();\r\n});\r\n\r\nThen(\"I should be able to view create new user group option\",async function () {\r\n\tawait z.seeElement(await TMSLmt.getElement(UserGroupObj.AddUG));\r\n});\r\n\r\nWhen(\"I click on Actions\", async function () {\r\n    await z.click(await TMSLmt.getElement(UserGroupObj.Actions));\r\n});\r\n\r\nWhen(\"I click on Modify\", async function () {\r\n    await z.click(await TMSLmt.getElement(UserGroupObj.Modify));\r\n});\r\n\r\nWhen(\"I can click on View Selected link\", async function() {\r\n    await z.click(await TMSLmt.getElement(UserGroupObj.ViewSelected));\r\n});\r\n\r\nThen(\"I should be able to see users in the UserGroup\", async function() {\r\n    await z.seeElement(await TMSLmt.getElement(UserGroupObj.DeleteiconsViewSel));\r\n});\r\n\r\nThen(\"I should see the Usergroup that was created\", async function() {\r\n    await UserGroupImpl.SeeUGCreated();\r\n});\r\n\r\nWhen(\"I change the usergroup description\",async function () {\r\n    await UserGroupImpl.ChangeUGdesc();\r\n});\r\n\r\nWhen(\"I update the usergroup\", async function () {\r\n    await z.click(await TMSLmt.getElement(UserGroupObj.SaveNClose));\r\n});\r\n\r\nThen(\"Usergroup should be updated\", async function () {\r\n    UserGroupImpl.UGUpdated();\r\n});\r\n\r\nWhen(\"I select Usergroup updated filter\",async function () {\r\n    await z.click(await TMSLmt.getElement(UserGroupObj.AuditUGUpdateFilter));\r\n});\r\n\r\nThen(\"I should see the Usergroup that was updated\",async function () {\r\n    await UserGroupImpl.AuditUGUpdated();\r\n});\r\n\r\nWhen(\"I click on Deactivate\", async function () {\r\n   // UserGroupImpl.deactivateUserGroup();\r\n});\r\n\r\nWhen(\"I select all users on page\", async function ()  {\r\n    await z.click(await TMSLmt.getElement(UserGroupObj.SelectAllUsers));\r\n});\r\n\r\nThen(\"Users in usergroup should be updated\", async function ()  {\r\n    I.seeTitleEquals(\"List of UserGroups\")\r\n    await I.seeTitleEquals(\"List of UserGroups\")\r\n});\r\n\r\n"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\TMS\\implementation\\UserProfile_Classic\\UserProfileImpl.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 36,
                "endColumn": 2
            },
            {
                "ruleId": "unused-imports/no-unused-imports",
                "severity": 1,
                "message": "'logger' is defined but never used.",
                "line": 4,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "unusedVar",
                "endLine": 4,
                "endColumn": 16,
                "fix": {
                    "range": [
                        79,
                        158
                    ],
                    "text": ""
                }
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 12,
                "column": 23,
                "nodeType": "Literal",
                "endLine": 12,
                "endColumn": 66
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 13,
                "column": 23,
                "nodeType": "Literal",
                "endLine": 13,
                "endColumn": 57
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 17,
                "column": 15,
                "nodeType": "MemberExpression",
                "endLine": 17,
                "endColumn": 31
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 22,
                "column": 11,
                "nodeType": "MemberExpression",
                "endLine": 22,
                "endColumn": 30
            }
        ],
        "errorCount": 1,
        "warningCount": 6,
        "fixableErrorCount": 0,
        "fixableWarningCount": 1,
        "source": "const { I } = inject();\r\n\r\nimport { UserProfileObj } from \"./UserProfileObj\";\r\nimport { logger } from \"../../../Framework/FrameworkUtilities/Logger/logger\";\r\nimport { z } from \"actionbot-wrapper/z\";\r\nimport { TMSLmt } from \"../../../Framework/FrameworkUtilities/i18nUtil/readI18NProp\";\r\nlet searchWindow;\r\n\r\nexport class UserProfileImpl {\r\n    static async NavigateToUserProfilePage() {\r\n        searchWindow = await z.grabCurrentWindowHandle();\r\n        await z.click(\"//span[@class='h-settings icon-Settings']\");\r\n        await z.click(\"//a[@class='h-topBand-menu-lnk']\");   \r\n    } \r\n    static async UserCheckProfilePage() {\r\n        await z.switchToNextTab();\r\n        await I.seeTitleEquals(\"User Profile\");\r\n        await z.see(\"User Profile of\");  \r\n   } \r\n   static async UploadProfilepic() {\r\n    await z.click(await TMSLmt.getElement(UserProfileObj.UploadBtn));\r\n    await I.switchToNewWindow();\r\n    await z.attachFile(\"importFile\",'uploadProfilePic1.png');\r\n    await z.click(await TMSLmt.getElement(UserProfileObj.Done_btn));  \r\n    }\r\n    static async UpdateUserProfile() {\r\n        await z.fillField(await TMSLmt.getElement(UserProfileObj.Telephone),await TMSLmt.getData(\"Txt_tele\"));\r\n        await z.fillField(await TMSLmt.getElement(UserProfileObj.AltTelephone),await TMSLmt.getData(\"Txt_AltTele\"));\r\n        await z.fillField(await TMSLmt.getElement(UserProfileObj.Extn),await TMSLmt.getData(\"Txt_tele\"));\r\n        await z.selectOption(await TMSLmt.getElement(UserProfileObj.Locator_defaultDateFormat),await TMSLmt.getData(\"Value_defaultDateFormat\"));\r\n        await z.selectOption(await TMSLmt.getElement(UserProfileObj.Locator_timeFormat),await TMSLmt.getData(\"Value_timeFormat\"));\r\n        await z.selectOption(await TMSLmt.getElement(UserProfileObj.Locator_defaultLocale),await TMSLmt.getData(\"Value_defaultLocale\"));\r\n        await z.click(await TMSLmt.getElement(UserProfileObj.SaveAndCloseBtn));\r\n        await z.switchToWindow(searchWindow);   \r\n        }        \r\n}"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\TMS\\implementation\\UserProfile_Classic\\UserProfileStepImpl.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 26,
                "endColumn": 4
            },
            {
                "ruleId": "dd-eslint-rules/Actionbot-automation-component-adoption",
                "severity": 1,
                "message": "component - Actionbot automation componenet not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 26,
                "endColumn": 4
            },
            {
                "ruleId": "dd-eslint-rules/i18nUtil-LMT-automation-component-adoption",
                "severity": 1,
                "message": "component - i18nUtil LMT automation componenet not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 26,
                "endColumn": 4
            },
            {
                "ruleId": "unused-imports/no-unused-imports",
                "severity": 1,
                "message": "'Common' is defined but never used.",
                "line": 2,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "unusedVar",
                "endLine": 2,
                "endColumn": 16,
                "fix": {
                    "range": [
                        25,
                        128
                    ],
                    "text": ""
                }
            },
            {
                "ruleId": "unused-imports/no-unused-imports",
                "severity": 1,
                "message": "'UserProfileObj' is defined but never used.",
                "line": 4,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "unusedVar",
                "endLine": 4,
                "endColumn": 24,
                "fix": {
                    "range": [
                        128,
                        180
                    ],
                    "text": ""
                }
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 25,
                "column": 10,
                "nodeType": "MemberExpression",
                "endLine": 25,
                "endColumn": 26
            }
        ],
        "errorCount": 1,
        "warningCount": 6,
        "fixableErrorCount": 0,
        "fixableWarningCount": 2,
        "source": "const { I } = inject();\r\nimport { Common } from \"../../Common/Common\";\r\n//import { UserProfileImpl } from \"./UserProfileImpl\";\r\nimport { UserProfileObj } from \"./UserProfileObj\";\r\nimport { UserProfileImpl } from \"./UserProfileImpl\";\r\nlet searchWindow;\r\n\r\nGiven (\"Navigate to User Profile Page\", async function() {  \r\n    await UserProfileImpl.NavigateToUserProfilePage();\r\n});\r\n\r\nThen (\"User Lands on User Profile Page\", async function() {\r\n   await UserProfileImpl.UserCheckProfilePage();\r\n});\r\n\r\nWhen (\"Update Profile file\", async function() {\r\n   await UserProfileImpl.UploadProfilepic();\r\n});\r\n\r\nWhen (\"Update User Details On profile\", async function() {\r\n   await UserProfileImpl.UpdateUserProfile();\r\n});\r\n\r\nThen(\"User Profile data Should be saved\", async function() {\r\n   await I.seeTitleEquals(\"List of Users\");\r\n});"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\TMS\\implementation\\Users\\CreateUserImpl.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 319,
                "endColumn": 1
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 18,
                "column": 11,
                "nodeType": "MemberExpression",
                "endLine": 18,
                "endColumn": 27
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 95,
                "column": 19,
                "nodeType": "Literal",
                "endLine": 95,
                "endColumn": 63
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath ******",
                "line": 102,
                "column": 19,
                "nodeType": "BinaryExpression",
                "endLine": 102,
                "endColumn": 50
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 102,
                "column": 19,
                "nodeType": "Literal",
                "endLine": 102,
                "endColumn": 42
            },
            {
                "ruleId": "dd-eslint-rules/z.waitForVisible_Should_NotbeUsed",
                "severity": 1,
                "message": "Z.waitForVisible should not be used in the scrit directly",
                "line": 107,
                "column": 11,
                "nodeType": "MemberExpression",
                "endLine": 107,
                "endColumn": 27
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 107,
                "column": 28,
                "nodeType": "Literal",
                "endLine": 107,
                "endColumn": 105
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath ******",
                "line": 108,
                "column": 19,
                "nodeType": "BinaryExpression",
                "endLine": 108,
                "endColumn": 50
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 108,
                "column": 19,
                "nodeType": "Literal",
                "endLine": 108,
                "endColumn": 42
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 111,
                "column": 26,
                "nodeType": "Literal",
                "endLine": 111,
                "endColumn": 51
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 112,
                "column": 23,
                "nodeType": "Literal",
                "endLine": 112,
                "endColumn": 51
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 113,
                "column": 19,
                "nodeType": "Literal",
                "endLine": 113,
                "endColumn": 46
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 118,
                "column": 44,
                "nodeType": "Literal",
                "endLine": 118,
                "endColumn": 92
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 124,
                "column": 37,
                "nodeType": "Literal",
                "endLine": 124,
                "endColumn": 120
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 127,
                "column": 19,
                "nodeType": "Literal",
                "endLine": 127,
                "endColumn": 57
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 129,
                "column": 19,
                "nodeType": "Literal",
                "endLine": 129,
                "endColumn": 63
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 131,
                "column": 19,
                "nodeType": "Literal",
                "endLine": 131,
                "endColumn": 63
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 137,
                "column": 37,
                "nodeType": "Literal",
                "endLine": 137,
                "endColumn": 120
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 140,
                "column": 19,
                "nodeType": "Literal",
                "endLine": 140,
                "endColumn": 57
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 142,
                "column": 19,
                "nodeType": "Literal",
                "endLine": 142,
                "endColumn": 63
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 144,
                "column": 19,
                "nodeType": "Literal",
                "endLine": 144,
                "endColumn": 63
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 147,
                "column": 37,
                "nodeType": "Literal",
                "endLine": 147,
                "endColumn": 120
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 153,
                "column": 37,
                "nodeType": "Literal",
                "endLine": 153,
                "endColumn": 120
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 156,
                "column": 19,
                "nodeType": "Literal",
                "endLine": 156,
                "endColumn": 55
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 157,
                "column": 19,
                "nodeType": "Literal",
                "endLine": 157,
                "endColumn": 63
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 160,
                "column": 37,
                "nodeType": "Literal",
                "endLine": 160,
                "endColumn": 120
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 167,
                "column": 19,
                "nodeType": "Literal",
                "endLine": 167,
                "endColumn": 52
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 168,
                "column": 19,
                "nodeType": "Literal",
                "endLine": 168,
                "endColumn": 63
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 172,
                "column": 19,
                "nodeType": "Literal",
                "endLine": 172,
                "endColumn": 63
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 179,
                "column": 19,
                "nodeType": "Literal",
                "endLine": 179,
                "endColumn": 48
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 180,
                "column": 42,
                "nodeType": "Literal",
                "endLine": 180,
                "endColumn": 67
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 184,
                "column": 23,
                "nodeType": "Literal",
                "endLine": 184,
                "endColumn": 45
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 185,
                "column": 19,
                "nodeType": "Literal",
                "endLine": 185,
                "endColumn": 45
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 189,
                "column": 19,
                "nodeType": "Literal",
                "endLine": 189,
                "endColumn": 63
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 194,
                "column": 19,
                "nodeType": "Literal",
                "endLine": 194,
                "endColumn": 60
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 214,
                "column": 19,
                "nodeType": "Literal",
                "endLine": 214,
                "endColumn": 63
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 242,
                "column": 45,
                "nodeType": "Literal",
                "endLine": 242,
                "endColumn": 81
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 246,
                "column": 44,
                "nodeType": "Literal",
                "endLine": 246,
                "endColumn": 80
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 254,
                "column": 15,
                "nodeType": "MemberExpression",
                "endLine": 254,
                "endColumn": 20
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 259,
                "column": 63,
                "nodeType": "Literal",
                "endLine": 259,
                "endColumn": 87
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 260,
                "column": 61,
                "nodeType": "Literal",
                "endLine": 260,
                "endColumn": 83
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 264,
                "column": 45,
                "nodeType": "Literal",
                "endLine": 264,
                "endColumn": 64
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 268,
                "column": 30,
                "nodeType": "MemberExpression",
                "endLine": 268,
                "endColumn": 49
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 268,
                "column": 50,
                "nodeType": "Literal",
                "endLine": 268,
                "endColumn": 74
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 288,
                "column": 36,
                "nodeType": "Literal",
                "endLine": 288,
                "endColumn": 62
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 294,
                "column": 34,
                "nodeType": "Literal",
                "endLine": 294,
                "endColumn": 60
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 300,
                "column": 19,
                "nodeType": "Literal",
                "endLine": 300,
                "endColumn": 63
            },
            {
                "ruleId": "dd-eslint-rules/xpath-locators-inside-the_script",
                "severity": 1,
                "message": "****** xpath/CSS in the script ******",
                "line": 312,
                "column": 33,
                "nodeType": "Literal",
                "endLine": 312,
                "endColumn": 59
            }
        ],
        "errorCount": 1,
        "warningCount": 48,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "const { I } = inject();\r\n\r\nimport { Common } from \"../../Common/Common\";\r\nimport { CreateUserObj } from \"./CreateUserObj\";\r\n//import { assert } from \"../../../../node_modules/\";\r\nimport { logger } from \"../../../Framework/FrameworkUtilities/Logger/logger\";\r\n//import { assert } from \"assert\";\r\nconst idnumber = Common.getRandomNumber1(7);\r\nvar Email;\r\nimport { z } from \"actionbot-wrapper/z\";\r\nimport { TMSLmt } from \"../../../Framework/FrameworkUtilities/i18nUtil/readI18NProp\";\r\n\r\nexport class CreateUserImpl {\r\n\r\n  \r\n  static async NavigateToUserAddPage() {\r\n    await z.click(await TMSLmt.getElement(CreateUserObj.AddNewUser_btn));\r\n    await I.seeTitleEquals(\"Create New User - Step 1\");\r\n  }\r\n  static async EnterBasicDetailsUser() {\r\n    Email =  Common.getRandomNumber(8) + \"@gmail.com\";\r\n    await z.fillField(await TMSLmt.getElement(CreateUserObj.Locator_displayName), await TMSLmt.getData(\"Value_displayName\"));\r\n    await z.fillField(await TMSLmt.getElement(CreateUserObj.Locator_lastName), await TMSLmt.getData(\"Value_lastName\"));\r\n    await z.fillField(await TMSLmt.getElement(CreateUserObj.Locator_firstName), await TMSLmt.getData(\"Value_firstName\"));\r\n    await z.fillField(await TMSLmt.getElement(CreateUserObj.Locator_emailaddress), Email);\r\n    await z.selectOption(await TMSLmt.getElement(CreateUserObj.Designation_Locator), await TMSLmt.getData(\"Designation_Value\"));\r\n    await z.fillField(await TMSLmt.getElement(CreateUserObj.Maneger_Email_Locator), await TMSLmt.getData(\"Maneger_Email_Value\"));\r\n    await z.fillField(await TMSLmt.getElement(CreateUserObj.UserInitials),await TMSLmt.getData(\"UserInitials_Value\"));\r\n    await z.selectOption(await TMSLmt.getElement(CreateUserObj.Salutation_Locator),await TMSLmt.getData(\"Salutation_Value\"));\r\n    \r\n    await this.adduniqueids(\"ERP ID\", idnumber);\r\n    await this.adduniqueids(\"User ID\", idnumber);\r\n    await this.adduniqueids(\"Employee ID\", idnumber);\r\n    await this.adduniqueids(\"Contact Number\", idnumber);\r\n\r\n    await this.selectAutocomplete(await TMSLmt.getElement(CreateUserObj.Org_level1_Locator), await TMSLmt.getData(\"Org_level1_Value\"));\r\n    await this.selectAutocomplete(await TMSLmt.getElement(CreateUserObj.Org_level2_Locator), await TMSLmt.getData(\"Org_level2_Value\"));\r\n    await this.selectAutocomplete(await TMSLmt.getElement(CreateUserObj.Org_costCenter_Locator), await TMSLmt.getData(\"Org_costCenter_Value\"));\r\n    await this.selectAutocomplete(await TMSLmt.getElement(CreateUserObj.Org_Location_Locator), await TMSLmt.getData(\"Org_Location_Value\"));\r\n    await this.selectAutocompletedept(await TMSLmt.getElement(CreateUserObj.Org_dept_Locator), await TMSLmt.getData(\"Org_dept_Value\"));\r\n\r\n    await z.fillField(await TMSLmt.getElement(CreateUserObj.invoiceApprovalLimit), await TMSLmt.getData(\"Limit_Max_value\"));\r\n    await z.fillField(await TMSLmt.getElement(CreateUserObj.requisitionApprovalLimit), await TMSLmt.getData(\"Limit_Max_value\"));\r\n    await z.selectOption(await TMSLmt.getElement(CreateUserObj.approvalCurrency), await TMSLmt.getData(\"approvalCurrency_value\"));\r\n  }\r\n  static async adduniqueids(idtype, value) {\r\n    await z.selectOption(await TMSLmt.getElement(CreateUserObj.uniqueKeyTypexpath), idtype);\r\n    await z.click(await TMSLmt.getElement(CreateUserObj.uniqueKeyTypefieldxpath));\r\n    await z.fillField(await TMSLmt.getElement(CreateUserObj.uniqueKeyTypefieldxpath), value);\r\n    await z.click(await TMSLmt.getElement(CreateUserObj.addbuttonxpath));\r\n  }\r\n  static async selectProduct() {\r\n    var cars = await TMSLmt.getData(\"ProductList\");\r\n    for (let i = 0; i < cars.length; i++) {\r\n      await z.click(`//*[@id=\"${cars[i]}\"]`);\r\n    }\r\n    await z.click(`//*[@id=\"btniRequest\"]`);\r\n  }\r\n\r\n  static async selectRoles() {\r\n    await z.fillField(await TMSLmt.getElement(CreateUserObj.RoleSearchField),await TMSLmt.getData(\"Role_Name\"));\r\n    await z.click(await TMSLmt.getElement(CreateUserObj.RoleSearchBtn));\r\n    await z.click(await TMSLmt.getElement(CreateUserObj.Role_checkbox));\r\n    await z.click(await TMSLmt.getElement(CreateUserObj.Ctn_MainBtn));\r\n    \r\n  }\r\n  static async selectscope() {\r\n    await z.fillField(await TMSLmt.getElement(CreateUserObj.Locator_ScopeNameSearchField),await TMSLmt.getData(\"Value_ScopeNameSearchField\"));\r\n    await z.click(await TMSLmt.getElement(CreateUserObj.Locator_ScopeNameSearchbutton));\r\n    await z.click(await TMSLmt.getElement(CreateUserObj.Locator_ScopeNameSelectcheckbox));\r\n    await z.click(await TMSLmt.getElement(CreateUserObj.Ctn_MainBtn));\r\n    \r\n  }\r\n  static async selectUserPreference() {\r\n    await z.selectOption(await TMSLmt.getElement(CreateUserObj.Locator_numberFormat), await TMSLmt.getData(\"Value_numberFormat\"));\r\n    await z.selectOption(await TMSLmt.getElement(CreateUserObj.Locator_defaultDateFormat), await TMSLmt.getData(\"Value_defaultDateFormat\"));\r\n    await z.selectOption(await TMSLmt.getElement(CreateUserObj.Locator_timeFormat), await TMSLmt.getData(\"Value_timeFormat\"));\r\n    await z.selectOption(await TMSLmt.getElement(CreateUserObj.Locator_defaultCurrency), await TMSLmt.getData(\"Value_defaultCurrency\"));\r\n    await z.selectOption(await TMSLmt.getElement(CreateUserObj.Locator_defaultLocale), await TMSLmt.getData(\"Value_defaultLocale\"));\r\n    await z.selectOption(await TMSLmt.getElement(CreateUserObj.Locator_decimalPrecision), await TMSLmt.getData(\"Value_decimalPrecision\"));\r\n    await z.fillField(await TMSLmt.getElement(CreateUserObj.Locator_ipsource), await TMSLmt.getData(\"Value_ipsource\"));\r\n    await z.click(await TMSLmt.getElement(CreateUserObj.Ctn_MainBtn));\r\n    \r\n  }\r\n\r\n  static async defineUser() {\r\n    await z.see(\"TMS\");\r\n    await z.see(\"LOCAL ADMIN\");\r\n    await z.click(await TMSLmt.getElement(CreateUserObj.Ctn_MainBtn));\r\n    \r\n  }\r\n\r\n  static async popupSuccessUser() {\r\n    await z.see(\"Success\");\r\n    await z.click(\"//button[@role='button']/span[text()='Ok']\");\r\n  }\r\n\r\n\r\n  static async selectAutocomplete(id, value) {\r\n    await z.click(`//input[@id='${id}']`);\r\n    await z.fillField(`//input[@id='${id}']`, value);\r\n    await z.click(\"//*[contains(text(),'\" + value + \"')][1]\");\r\n  }\r\n  static async selectAutocompletedept(id, value) {\r\n    await z.click(`//input[@id='${id}']`);\r\n    await z.fillField(`//input[@id='${id}']`, value);\r\n    await z.waitForVisible(\"//ul[@class='ui-autocomplete ui-front ui-menu ui-widget ui-widget-content']\");\r\n    await z.click(\"//a[contains(text(),'\" + value + \"')][1]\");\r\n  }\r\n  static async searchbyemailaddress(Email) {\r\n    await z.selectOption(\"//*[@id='searchColumn']\", \"Email ID\");\r\n    await z.fillField(\"//*[@id='eventSearchText']\", Email);\r\n    await z.click(\"//*[@name='SearchButton']\");\r\n\r\n  }\r\n  static async Usersearcheble(){\r\n    await this.searchbyemailaddress(Email);\r\n    var SearchEmail = await z.grabTextFrom(\"//td[@class='filterGridTblTd user-email-left']\");\r\n    logger.info(\"printing.... \" + SearchEmail);\r\n    await z.assertEqual(Email, SearchEmail);\r\n  }\r\n  static async markUserInactive(){\r\n    await this.searchbyemailaddress(Email);\r\n    var text = await z.grabTextFrom(\"//tr[@class='filterGridTblTd']/td[@class='filterGridTblTd user-lst-status']/label\");\r\n    await z.assertEqual(\"Active\", text);\r\n    await z.click(`//tr[@class='filterGridTblTd'][td[text()=\"${Email}\"]]//input`);\r\n    await z.click(\"//*[@id='deActivateSelectedUsersID']\");\r\n    await z.see(\"If the current user is a reporting manager to other user then those reportees will not have any reporting manager assigned\");\r\n    await z.click(\"//button[@role='button']/span[text()='Ok']\");\r\n    await z.see(\"1 user has been inactivated\")\r\n    await z.click(\"//button[@role='button']/span[text()='Ok']\");\r\n  }\r\n\r\n  static async deactivateuser(){\r\n    let Email= await TMSLmt.getData(\"EmailActivateDeactivate\");\r\n    await this.searchbyemailaddress(Email);\r\n    var text = await z.grabTextFrom(\"//tr[@class='filterGridTblTd']/td[@class='filterGridTblTd user-lst-status']/label\");\r\n    await z.assertEqual(\"Active\", text);\r\n    await z.click(`//tr[@class='filterGridTblTd'][td[text()=\"${Email}\"]]//input`);\r\n    await z.click(\"//*[@id='deActivateSelectedUsersID']\");\r\n    await z.see(\"If the current user is a reporting manager to other user then those reportees will not have any reporting manager assigned\");\r\n    await z.click(\"//button[@role='button']/span[text()='Ok']\");\r\n    await z.see(\"1 user has been inactivated\")\r\n    await z.click(\"//button[@role='button']/span[text()='Ok']\");\r\n  }\r\n  static async deactivateusercheck(){\r\n    var text = await z.grabTextFrom(\"//tr[@class='filterGridTblTd']/td[@class='filterGridTblTd user-lst-status']/label\");\r\n    await z.assertEqual(\"Inactive\", text);\r\n  }\r\n  static async activateuser(){\r\n    let Email=await TMSLmt.getData(\"EmailActivateDeactivate\");\r\n    await this.searchbyemailaddress(Email);\r\n    var text = await z.grabTextFrom(\"//tr[@class='filterGridTblTd']/td[@class='filterGridTblTd user-lst-status']/label\");\r\n    await z.assertEqual(\"Inactive\", text);\r\n    await z.click(`//tr[@class='filterGridTblTd'][td[text()=\"${Email}\"]]//input`);\r\n    await z.click(\"//*[@id='activateSelectedUsersID']\");\r\n    await z.click(\"//button[@role='button']/span[text()='Ok']\");\r\n  }\r\n  static async activateusercheck(){\r\n    var text = await z.grabTextFrom(\"//tr[@class='filterGridTblTd']/td[@class='filterGridTblTd user-lst-status']/label\");\r\n    await z.assertEqual(\"Active\", text);\r\n  }\r\n  static async resetPassword(){\r\n    let Email=await TMSLmt.getData(\"EmailActivateDeactivate\");\r\n    await this.searchbyemailaddress(Email);\r\n    await z.click(`//tr[@class='filterGridTblTd'][td[text()=\"${Email}\"]]//input`);\r\n    await z.click(\"//*[@id='resetUserPasswordsID']\");\r\n    await z.click(\"//button[@role='button']/span[text()='Ok']\");\r\n  }\r\n  static async resetPasswordcheck(){\r\n    await z.see(\"The password has been reset\");\r\n    await z.click(\"//button[@role='button']/span[text()='Ok']\");\r\n  }\r\n  static async emailEdit(){\r\n    let SearchEmail=await TMSLmt.getData(\"EditEmailaddres\");\r\n    let Email1=await TMSLmt.getData(\"EditEmailaddres1\");\r\n    let Email2=await TMSLmt.getData(\"EditEmailaddres2\");\r\n    await this.searchbyemailaddress(SearchEmail);\r\n    await z.click(\"//*[@title='Edit Email ID']\");\r\n    var oldEmail = await z.grabValueFrom(\"//input[@id='oldEmail']\");\r\n    if (oldEmail === Email1) \r\n    { var newEmail = Email2 }\r\n    else { var newEmail = Email1 }\r\n    await z.fillField(\"//input[@id='email']\", newEmail);\r\n    await z.click(\"//input[@value='Submit']\");\r\n  }\r\n  static async emailEditVerify(){\r\n    await z.see(\"User email edit request is submitted and will be processed once the user stops using Zycus system\");\r\n    await z.click(\"//button[@role='button']/span[text()='Ok']\");\r\n  }\r\n\r\n  static async NavigateCopyUser(){\r\n    await this.searchbyemailaddress(await TMSLmt.getData(\"copyUser\"));\r\n    await z.click(\"//label[@title='Edit User Information']\");\r\n    await z.click(await TMSLmt.getElement(CreateUserObj.CopyUserBtn));\r\n  }\r\n  static async CopyUserFillDetails(){\r\n    Email =  Common.getRandomNumber(8) + \"@gmail.com\";\r\n    await z.fillField(await TMSLmt.getElement(CreateUserObj.FN_Txt), await TMSLmt.getData(\"Value_firstName\"));\r\n    await z.fillField(await TMSLmt.getElement(CreateUserObj.LN_Text), await TMSLmt.getData(\"Value_lastName\"))\r\n    await z.fillField(await TMSLmt.getElement(CreateUserObj.DisplayNameTxt), await TMSLmt.getData(\"Value_displayName\"));\r\n    await z.fillField(await TMSLmt.getElement(CreateUserObj.Email_Txt), Email);\r\n    //Common.fillfields(CreateUserObj.ReportingMgr,)\r\n    //Common.fillfields(CreateUserObj.UserInitials,\"UAut\");\r\n    //Common.fillfields(CreateUserObj.ERPId,\"598932\");\r\n    //Common.fillfields(CreateUserObj.UserId,\"565\");\r\n    //Common.fillfields(CreateUserObj.EmpId,\"74\");\r\n    //Common.fillfields(CreateUserObj.ContactNo,\"84543543549\");\r\n\r\n  }\r\n\r\n  static async CopyUserConfirm(){\r\n    await z.see(\"User \" + Email + \" is successfully created\");\r\n    await z.click(\"//button[@role='button']/span[text()='Ok']\");\r\n    await this.searchbyemailaddress(Email);\r\n  }\r\n\r\n\r\n\r\n  static async EditUserPageSummary(Email) {\r\n    await this.searchbyemailaddress(Email);\r\n    await z.click(await TMSLmt.getElement(CreateUserObj.EditUserBtn));\r\n\r\n  }\r\n  static async UpdateUserBasicDetails() {\r\n    await z.click(await TMSLmt.getElement(CreateUserObj.BasicDetailsEditBtn));\r\n    await z.fillField(await TMSLmt.getElement(CreateUserObj.Locator_displayName), await TMSLmt.getData(\"Display_name_updated\"));\r\n    await z.click(await TMSLmt.getElement(CreateUserObj.Ctn_MainBtn));\r\n  }\r\n\r\n  static async updateUser() {\r\n    await z.click(await TMSLmt.getElement(CreateUserObj.UpdateUserBtn));\r\n  }\r\n  static async DatacheckPage1(){\r\n    var displayname= await z.grabValueFrom(await TMSLmt.getElement(CreateUserObj.Locator_displayName));\r\n    var flag= displayname.includes(await TMSLmt.getData(\"Value_displayName\"));\r\n    logger.info (\"printing ...\"+flag);\r\n    await z.assertEqual(flag,true);\r\n  }\r\n  static async MasterDatacheckPage1(){\r\n    \r\n    var Orglevl = await z.grabAttributeFrom(\"//input[@id='organizationLevel_1']\", \"selectedvaluecode\");\r\n    logger.info(\"Printing....\"+Orglevl);\r\n    await z.assertEqual(Orglevl.toString(),\"OU_1-956\");\r\n\r\n    var Orglev2= await z.grabAttributeFrom(\"//input[@id='organizationLevel_2']\", \"selectedvaluecode\");\r\n    logger.info(\"Printing....\"+Orglev2);\r\n    await z.assertEqual(Orglev2.toString(),\"OU_2-979\");\r\n\r\n  }\r\n  static async CompanyAllProductSeen(){\r\n  var cars = await TMSLmt.getData(\"ProductCompanyList\");\r\n    for (let i = 0; i < cars.length; i++) {\r\n        await I.see(cars[i]);\r\n    }\r\n  }\r\n\r\n  static async checkAssignedProduct(){\r\n    let unassignedcount = await z.grabNumberOfVisibleElements(\"//*[@title='Unassign']\");\r\n    let Assignedcount = await z.grabNumberOfVisibleElements(\"//*[@title='Assign']\");\r\n    logger.info(\"Un.......\" + unassignedcount);\r\n    logger.info(\"As.......\" + Assignedcount);\r\n\r\n    var attrTMS = await z.grabAttributeFrom(\"//*[@id='btnTMS']\", \"value\");\r\n    var flag = attrTMS.includes(\"Unassign\");\r\n    await z.assertEqual(flag, true);\r\n\r\n    var attriRequest = await I.grabAttributeFrom(\"//*[@id='btniRequest']\", \"value\");\r\n    var flag1 = attriRequest.includes(\"Assign\");\r\n    await z.assertEqual(flag1, true);\r\n  }\r\n\r\n  static async RoleList(){\r\n    var cars = await TMSLmt.getData(\"RoleListProduct\");\r\n    for (let i = 0; i < cars.length; i++) {\r\n        await z.fillField(await TMSLmt.getElement(CreateUserObj.RoleSearchField), cars[i]);\r\n        await z.click(await TMSLmt.getElement(CreateUserObj.RoleSearchBtn));\r\n        await z.clearField(await TMSLmt.getElement(CreateUserObj.RoleSearchField));\r\n        await z.see(cars[i]);\r\n    }\r\n  }\r\n  static async RoleAssignedcheck(){\r\n    var cars = await TMSLmt.getData(\"RoleListAssigned\");\r\n    for (let i = 1; i <= cars.length; i++) {\r\n      await z.fillField(await TMSLmt.getElement(CreateUserObj.RoleSearchField), cars[i - 1]);\r\n      await z.click(await TMSLmt.getElement(CreateUserObj.RoleSearchBtn));\r\n      await z.click(`//td[text()=\"${cars[i - 1]}\"]/preceding-sibling::td/input`);\r\n      var a = await z.grabTextFrom(\"//*[@id='basketCountId']\");\r\n      await z.assertEqual(a, i.toString());\r\n    }\r\n    await z.fillField(await TMSLmt.getElement(CreateUserObj.RoleSearchField), cars[1]);\r\n    await z.click(await TMSLmt.getElement(CreateUserObj.RoleSearchBtn));\r\n    await z.click(`//td[text()=\"${cars[1]}\"]/preceding-sibling::td/input`);\r\n    var a = await z.grabTextFrom(\"//*[@id='basketCountId']\");\r\n    await z.assertEqual(a, \"2\");\r\n}\r\n  static async MulitpleScopeAssignedError(){\r\n    await z.fillField(await TMSLmt.getElement(CreateUserObj.Locator_ScopeNameSearchField), \"AutoAdminScope\");\r\n    await z.click(await TMSLmt.getElement(CreateUserObj.Locator_ScopeNameSearchbutton));\r\n    await z.click(\"//tr[@class='sortrow']//th[1]//label/input\");\r\n    await z.click(await TMSLmt.getElement(CreateUserObj.Ctn_MainBtn));\r\n    await z.see(\"You cannot select multiple scopes for same Scope Type\");\r\n\r\n  }\r\n\r\n  static async ScopeAssignCheck(){\r\n    var cars = await TMSLmt.getData(\"ScopeListAssigned\");\r\n    for (let i = 1; i <= cars.length; i++) {\r\n    await z.fillField(await TMSLmt.getElement(CreateUserObj.Locator_ScopeNameSearchField), cars[i-1]);\r\n    await z.click(await TMSLmt.getElement(CreateUserObj.Locator_ScopeNameSearchbutton));\r\n    await z.click(await TMSLmt.getElement(CreateUserObj.Locator_ScopeNameSelectcheckbox));\r\n    var a= await z.grabTextFrom(\"//*[@id='basketCountId']\");\r\n    await z.assertEqual(a,i.toString());\r\n    }\r\n\r\n  }\r\n\r\n}\r\n"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\TMS\\implementation\\Users\\CreateUserStepImpl.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 1,
                "column": 1,
                "nodeType": "Program",
                "endLine": 198,
                "endColumn": 1
            },
            {
                "ruleId": "unused-imports/no-unused-imports",
                "severity": 1,
                "message": "'logger' is defined but never used.",
                "line": 7,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "unusedVar",
                "endLine": 7,
                "endColumn": 16,
                "fix": {
                    "range": [
                        266,
                        345
                    ],
                    "text": ""
                }
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 175,
                "column": 11,
                "nodeType": "MemberExpression",
                "endLine": 175,
                "endColumn": 27
            }
        ],
        "errorCount": 1,
        "warningCount": 3,
        "fixableErrorCount": 0,
        "fixableWarningCount": 1,
        "source": "const { I } = inject();\r\n//const assert = require(\"assert\");\r\nimport { Common } from \"../../Common/Common\";\r\nimport { CreateUserObj } from \"./CreateUserObj\";\r\nimport { CreateUserImpl } from \"./CreateUserImpl\";\r\n//import { assert } from \"../../../../node_modules/\";\r\nimport { logger } from \"../../../Framework/FrameworkUtilities/Logger/logger\";\r\nimport { z } from \"actionbot-wrapper/z\";\r\nimport { TMSLmt } from \"../../../Framework/FrameworkUtilities/i18nUtil/readI18NProp\";\r\n//Copy User User email\r\nvar Email = Common.getRandomNumber(8) + \"@gmail.com\";\r\n\r\nGiven(\"User on Create User Page\", async function () {\r\n    await CreateUserImpl.NavigateToUserAddPage();\r\n});\r\nWhen(\"I Fill all the data and Create User 1\", async function () {\r\n    await CreateUserImpl.EnterBasicDetailsUser();\r\n    await z.click(await TMSLmt.getElement(CreateUserObj.Ctn_MainBtn));\r\n});\r\n\r\nWhen(\"I Fill all the data and Create User 2\", async function () {\r\n    await CreateUserImpl.selectProduct();\r\n    await z.click(await TMSLmt.getElement(CreateUserObj.Ctn_MainBtn));\r\n});\r\n\r\nWhen(\"I Fill all the data and Create User 3\", async function () {\r\n    await CreateUserImpl.selectRoles();\r\n});\r\n\r\nWhen(\"I Fill all the data and Create User 4\", async function () {\r\n    await CreateUserImpl.selectscope();\r\n});\r\n\r\nWhen(\"I Fill all the data and Create User 5\", async function () {\r\n    await CreateUserImpl.selectUserPreference();\r\n});\r\n\r\n\r\nWhen(\"Define User\", async function () {\r\n    await CreateUserImpl.defineUser();\r\n});\r\n\r\n\r\nThen(\"Popup should be seen\", async function () {\r\n    await CreateUserImpl.popupSuccessUser();\r\n});\r\n\r\n\r\nThen(\"User is shown on User Listing Page\", async function () {\r\n    await CreateUserImpl.Usersearcheble();\r\n});\r\n\r\nThen(\"Mark User Inactive\", async function () {\r\n    await CreateUserImpl.markUserInactive();\r\n});\r\n\r\nWhen(\"I deactivate User\", async function () {\r\n    await CreateUserImpl.deactivateuser();\r\n});\r\n\r\nThen(\"User should get deactivate\", async function () {\r\n    await CreateUserImpl.deactivateusercheck();\r\n    \r\n});\r\n\r\nWhen(\"I activate User\", async function () {\r\n    await CreateUserImpl.activateuser();\r\n    \r\n});\r\n\r\nThen(\"User should get activate\", async function () {\r\n    await CreateUserImpl.activateusercheck();\r\n    \r\n});\r\n\r\nWhen(\"Reset User Password\", async function () {\r\n    await CreateUserImpl.resetPassword();\r\n});\r\n\r\nThen(\"Verify User Password\", async function () {\r\n    await CreateUserImpl.resetPasswordcheck();\r\n    \r\n});\r\n\r\nWhen(\"I Edited the Email Address\", async function () {\r\n    await CreateUserImpl.emailEdit();\r\n    \r\n});\r\n\r\nThen(\"Verify the Edited Email address\", async function () {\r\n    await CreateUserImpl.emailEditVerify();\r\n    \r\n});\r\n\r\nWhen(\"I click on CopyUser\", async function () {\r\n    await CreateUserImpl.NavigateCopyUser();\r\n});\r\n\r\nWhen(\"I enter the details\", async function () {\r\n    await CreateUserImpl.CopyUserFillDetails();\r\n});\r\n\r\nWhen(\"I click on submit button\", async function () {\r\n    await z.click(await TMSLmt.getElement(CreateUserObj.SubmitBtn));\r\n    await z.click(await TMSLmt.getElement(CreateUserObj.DefineBtn));\r\n});\r\n\r\nThen(\"New User should be created\", async function () {\r\n    await CreateUserImpl.CopyUserConfirm();\r\n    \r\n});\r\n\r\n//Edit Users \r\nGiven(\"Go to the Edit User Summary Page\", async function () {\r\n    await CreateUserImpl.EditUserPageSummary(await TMSLmt.getData(\"UpdateUser\"));\r\n});\r\nWhen(\"Update User Basic Details\", async function () {\r\n    await CreateUserImpl.UpdateUserBasicDetails();\r\n});\r\nWhen(\"Update User\", async function () {\r\n    await CreateUserImpl.updateUser();\r\n});\r\n//Popup is used\r\n\r\n\r\n//For Audits\r\nThen(\"deactivated record should be visible in audit\", async function () {\r\n\tawait z.see(await TMSLmt.getData(\"EmailActivateDeactivate\"));\r\n});\r\n\r\nThen(\"Activated record should be visible in audit\", async function () {\r\n\tawait z.see(await TMSLmt.getData(\"EmailActivateDeactivate\"));\r\n});\r\n\r\nThen(\"I should see records of user updated in audit\", async function () {\r\n\tawait z.see(await TMSLmt.getData(\"Display_name_updated\"));\r\n});\r\n\r\nThen(\"ResetUserPassword record should be visible in audit\",async function ()  {\r\n\tawait z.see(await TMSLmt.getData(\"EmailActivateDeactivate\"));\r\n});\r\n//L2\r\nWhen(\"User able to fill data on page 1\", async function () {\r\n    await z.fillField(await TMSLmt.getElement(CreateUserObj.Locator_displayName), await TMSLmt.getData(\"Value_displayName\"));\r\n});\r\nThen(\"Data should be seen on page 1\", async function () {\r\n    await CreateUserImpl.DatacheckPage1();\r\n});\r\n\r\nWhen(\"User able to fill Master Data\", async function () {\r\n    await CreateUserImpl.selectAutocomplete(await TMSLmt.getElement(CreateUserObj.Org_level2_Locator), await TMSLmt.getData(\"Org_level2_Value\"));\r\n});\r\n\r\nThen(\"Master data should be seen on page 1\", async function () {\r\n    await CreateUserImpl.MasterDatacheckPage1();\r\n});\r\n\r\nWhen(\"Try to Navigate to Page 2\", async function () {\r\n    await z.click(await TMSLmt.getElement(CreateUserObj.Ctn_MainBtn));\r\n});\r\nThen(\"Proper Error should be seen on page 1\", async function () {\r\n    await z.see(\"Mandatory.\");\r\n});\r\nThen(\"All product should be seen\", async function () {\r\n    await CreateUserImpl.CompanyAllProductSeen();\r\n});\r\n\r\nThen(\"Product Should get assign and unassigned\", async function () {\r\n    await CreateUserImpl.selectProduct();\r\n    await CreateUserImpl.checkAssignedProduct();\r\n    \r\n});\r\n\r\nThen(\"User lands on step 3 page role page\", async function () {\r\n    await I.seeTitleEquals(\"Create New User - Step 3\");\r\n    await z.see(\"Assign Roles\");\r\n});\r\n\r\nThen(\"Role should be seen for all product\", async function () {\r\n    await CreateUserImpl.RoleList();\r\n    \r\n});\r\n\r\nThen(\"Role should be assigned or unassigned\", async function () {\r\n    await CreateUserImpl.RoleAssignedcheck();\r\n});\r\n\r\nThen(\"Error should be shown Multiple same scope type is assigned\", async function () {\r\n    await CreateUserImpl.MulitpleScopeAssignedError();\r\n    \r\n});\r\n\r\nThen(\"Assign Multiple Scope to Users\", async function () {\r\n    await CreateUserImpl.ScopeAssignCheck();\r\n    \r\n});\r\n\r\n"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\TMS\\implementation\\ZycusAdmin\\ZA_AccessTabsImpl.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 2,
                "column": 1,
                "nodeType": "Program",
                "endLine": 20,
                "endColumn": 1
            },
            {
                "ruleId": "dd-eslint-rules/i18nUtil-LMT-automation-component-adoption",
                "severity": 1,
                "message": "component - i18nUtil LMT automation componenet not adopted",
                "line": 2,
                "column": 1,
                "nodeType": "Program",
                "endLine": 20,
                "endColumn": 1
            },
            {
                "ruleId": "unused-imports/no-unused-imports",
                "severity": 1,
                "message": "'Common' is defined but never used.",
                "line": 3,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "unusedVar",
                "endLine": 3,
                "endColumn": 16,
                "fix": {
                    "range": [
                        27,
                        74
                    ],
                    "text": ""
                }
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 12,
                "column": 13,
                "nodeType": "MemberExpression",
                "endLine": 12,
                "endColumn": 20
            }
        ],
        "errorCount": 1,
        "warningCount": 4,
        "fixableErrorCount": 0,
        "fixableWarningCount": 1,
        "source": "\r\nconst { I } = inject();\r\nimport { Common } from \"../../Common/Common\";\r\nimport { ZA_AccessTabsObj } from \"./ZA_AccessTabsObj\";\r\nimport { z } from \"actionbot-wrapper/z\";\r\n\r\nexport class ZA_AccessTabsImpl{\r\n\r\n    static async SearchCompany(comp) \r\n        {\r\n            z.fillField(ZA_AccessTabsObj.CompSearch,comp);\r\n            I.click(ZA_AccessTabsObj.GoBtn); \r\n        }\r\n    \r\n}\r\n\r\n// module.exports = new SearchComp();\r\n// module.exports.SearchComp=SearchComp; // for inheritance\r\n\r\n"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\TMS\\implementation\\ZycusAdmin\\ZA_AccessTabsStepImpl.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 2,
                "column": 1,
                "nodeType": "Program",
                "endLine": 88,
                "endColumn": 1
            },
            {
                "ruleId": "unused-imports/no-unused-imports",
                "severity": 1,
                "message": "'Common' is defined but never used.",
                "line": 3,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "unusedVar",
                "endLine": 3,
                "endColumn": 16,
                "fix": {
                    "range": [
                        27,
                        74
                    ],
                    "text": ""
                }
            },
            {
                "ruleId": "unused-imports/no-unused-imports",
                "severity": 1,
                "message": "'ZA_AccessTabsImpl' is defined but never used.",
                "line": 4,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "unusedVar",
                "endLine": 4,
                "endColumn": 27,
                "fix": {
                    "range": [
                        74,
                        132
                    ],
                    "text": ""
                }
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 24,
                "column": 11,
                "nodeType": "MemberExpression",
                "endLine": 24,
                "endColumn": 27
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 33,
                "column": 8,
                "nodeType": "MemberExpression",
                "endLine": 33,
                "endColumn": 24
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 46,
                "column": 8,
                "nodeType": "MemberExpression",
                "endLine": 46,
                "endColumn": 24
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 55,
                "column": 8,
                "nodeType": "MemberExpression",
                "endLine": 55,
                "endColumn": 24
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 64,
                "column": 8,
                "nodeType": "MemberExpression",
                "endLine": 64,
                "endColumn": 24
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 73,
                "column": 8,
                "nodeType": "MemberExpression",
                "endLine": 73,
                "endColumn": 20
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 85,
                "column": 2,
                "nodeType": "MemberExpression",
                "endLine": 85,
                "endColumn": 18
            }
        ],
        "errorCount": 1,
        "warningCount": 10,
        "fixableErrorCount": 0,
        "fixableWarningCount": 2,
        "source": "\r\nconst { I } = inject();\r\nimport { Common } from \"../../Common/Common\";\r\nimport { ZA_AccessTabsImpl } from \"./ZA_AccessTabsImpl\";\r\nimport { ZA_AccessTabsObj } from \"./ZA_AccessTabsObj\";\r\nimport { z } from \"actionbot-wrapper/z\";\r\nimport { TMSLmt } from \"../../../Framework/FrameworkUtilities/i18nUtil/readI18NProp\";\r\n\r\nGiven(\"I navigate to Company tab\",async function () {\r\n\tawait z.click(await TMSLmt.getElement(ZA_AccessTabsObj.CompTab));\r\n});\r\n\r\nWhen(\"I search for Company\", async function (){\r\n    z.fillField(ZA_AccessTabsObj.CompSearch,\"ZCS\");\r\n    // I.click(ZA_AccessTabsObj.GoBtn);\r\n\tawait z.click(await TMSLmt.getElement(ZA_AccessTabsObj.GoBtn));\r\n});\r\n\r\nThen(\"results should be fetched\",async function (){\r\n\tawait z.seeElement(await TMSLmt.getElement(ZA_AccessTabsObj.SearchRes));\r\n});\r\n\r\nThen(\"CompanyListing page should be accessible\", async function ()  {\r\n    await I.seeTitleEquals(\"Company Listings\");\r\n});\r\n\r\nGiven(\"I navigate to Products tab\",async function () {\r\n\t// I.click(ZA_AccessTabsObj.ProdTab);\r\n\tawait z.click(await TMSLmt.getElement(ZA_AccessTabsObj.ProdTab));\r\n});\r\n\r\nThen(\"ProductListing page should be accessible\",async function (){\r\n\tawait I.seeTitleEquals(\"Product Listings\");\r\n});\r\n\r\nGiven(\"I navigate to Administrator tab\", async function (){\r\n\t// I.click(ZA_AccessTabsObj.AdministratorTab);\r\n\tawait z.click(await TMSLmt.getElement(ZA_AccessTabsObj.AdministratorTab));\r\n});\r\n\r\nWhen(\"I click on Live session\",async function () {\r\n\tawait z.click(await TMSLmt.getElement(ZA_AccessTabsObj.LiveSession));\r\n});\r\n\r\nThen(\"Live sessions page should be accessible\",async function () {\r\n\tawait I.seeTitleEquals(\"Live Session\");\r\n});\r\n\r\nWhen(\"I click on Apply Settings\", async function() {\r\n\tawait z.click(await TMSLmt.getElement(ZA_AccessTabsObj.ApplySettings));\r\n\t// I.click(ZA_AccessTabsObj.ApplySettings);\r\n});\r\n\r\nThen(\"Apply Settings page should be accessible\",async function () {\r\n\tawait I.seeTitleEquals(\"Apply Settings\");\r\n});\r\n\r\nWhen(\"I click on Impersonate User requests\",async function (){\r\n\t// I.click(ZA_AccessTabsObj.ImpersonateUS);\r\n\tawait z.click(await TMSLmt.getElement(ZA_AccessTabsObj.ImpersonateUS));\r\n});\r\n\r\nThen(\"Impersonate User requests page should be accessible\",async function ()  {\r\n\tawait I.seeTitleEquals(\"Zycus Tech Support Impersonate User Request Page\");\r\n});\r\n\r\nGiven(\"I navigate to Role tab\",async function () {\r\n\t// I.click(ZA_AccessTabsObj.RoleMgmt);\r\n\tawait z.click(await TMSLmt.getElement(ZA_AccessTabsObj.RoleMgmt));\r\n});\r\n\r\nThen(\"Role Listing page should be accessible\", async function () {\r\n\tawait I.seeInTitle(\"Role Listings\");\r\n});\r\n\r\nGiven(\"I navigate to Master Data tab\", async function () {\r\n\tawait z.click(await TMSLmt.getElement(ZA_AccessTabsObj.MastersTab));\r\n});\r\n\r\nWhen(\"I click on Masters\", async function () {\r\n\tawait z.click(await TMSLmt.getElement(ZA_AccessTabsObj.Masters));\r\n});\r\n\r\nThen(\"Masters page should be accessible\", async function () {\r\n\tI.seeTitleEquals(\"Master Data\");\r\n});\r\n\r\n"
    },
    {
        "filePath": "D:\\Automation UI TS\\Json Migration QCVM\\dd-ui-automation\\src\\TMS\\implementation\\ZycusAdmin\\ZA_Access_AllReportsStepImpl.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/require-await",
                "message": "Definition for rule '@typescript-eslint/require-await' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 2,
                "severity": 2,
                "nodeType": null
            },
            {
                "ruleId": "dd-eslint-rules/dd-cc-zycus-automation-component-adoption",
                "severity": 1,
                "message": "component - dd-cc-zycus-automation is not adopted",
                "line": 2,
                "column": 1,
                "nodeType": "Program",
                "endLine": 53,
                "endColumn": 1
            },
            {
                "ruleId": "unused-imports/no-unused-imports",
                "severity": 1,
                "message": "'Common' is defined but never used.",
                "line": 3,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "unusedVar",
                "endLine": 3,
                "endColumn": 16,
                "fix": {
                    "range": [
                        27,
                        135
                    ],
                    "text": ""
                }
            },
            {
                "ruleId": "dd-eslint-rules/I.actions-removal",
                "severity": 1,
                "message": "user still using the I actions",
                "line": 42,
                "column": 11,
                "nodeType": "MemberExpression",
                "endLine": 42,
                "endColumn": 16
            }
        ],
        "errorCount": 1,
        "warningCount": 3,
        "fixableErrorCount": 0,
        "fixableWarningCount": 1,
        "source": "\r\nconst { I } = inject();\r\nimport { Common } from \"../../Common/Common\";\r\n//const ZA_AccessTabsImpl = require(\"./ZA_AccessTabsImpl\");\r\nimport { ZA_Access_AllReportsObj } from \"./ZA_Access_AllReportsObj\";\r\nimport { z } from \"actionbot-wrapper/z\";\r\nimport { TMSLmt } from \"../../../Framework/FrameworkUtilities/i18nUtil/readI18NProp\";\r\n\r\n\r\nWhen(\"I select-List of Custom Roles per product across all companies in TMS Report option\", async function () {\r\n\t// I.click(ZA_Access_AllReportsObj.CustomRolesPerProducts_AllCompanies);\r\n\tawait z.click(await TMSLmt.getElement(ZA_Access_AllReportsObj.CustomRolesPerProducts_AllCompanies));\r\n});\r\n\r\nThen(\"I should see List of Custom Roles per product across all companies in TMS report\", async function ()  {\r\n\tawait z.see(\"List of Custom Roles per product across all companies in TMS\");\r\n});\r\n\r\nWhen(\"I select-List of users per product across all companies in TMS Report option\", async function ()  {\r\n\t// I.click(ZA_Access_AllReportsObj.UsersRolesPerProducts_AllCompanies);\r\n\tawait z.click(await TMSLmt.getElement(ZA_Access_AllReportsObj.UsersRolesPerProducts_AllCompanies));\r\n});\r\n\r\nThen(\"I should see List of users per product across all companies in TMS report\", async function ()  {\r\n\tawait z.see (\"List of users per product across all companies in TMS\");\r\n});\r\n\r\nWhen(\"I select-List of users with role information for all companies in TMS Report option\", async function ()  {\r\n\tawait z.click(await TMSLmt.getElement(ZA_Access_AllReportsObj.UsersListWithRoles));\r\n});\r\n\r\nThen(\"I should see List of users with role information for all companies in TMS TMS report\", async function () {\r\n    await z.see(\"List of users with role information for all companies in TMS\");\r\n});\r\n\r\nWhen(\"I select-No. of Tenants Assigned to a Product Report option\", async function()  {\r\n\t// I.click(ZA_Access_AllReportsObj.NoOfTenantsToProduct);\r\n\tawait z.click(await TMSLmt.getElement(ZA_Access_AllReportsObj.NoOfTenantsToProduct));\r\n});\r\n\r\nThen(\"I should see No. of Tenants Assigned to a Product report\",async function ()  {\r\n    await I.see(\"No. of Tenants Assigned to a Product\");\r\n});\r\n\r\nWhen(\"I select-Product Assigned Per Tenant Report option\", async function()  {\r\n\t// I.click(ZA_Access_AllReportsObj.ProdPerTenant);\r\n\tawait z.click(await TMSLmt.getElement(ZA_Access_AllReportsObj.ProdPerTenant));\r\n});\r\n\r\nThen(\"I should see Product Assigned Per Tenant report\", async function () {\r\n    await z.see(\"Product Assigned Per Tenant\");\r\n});\r\n"
    }
]