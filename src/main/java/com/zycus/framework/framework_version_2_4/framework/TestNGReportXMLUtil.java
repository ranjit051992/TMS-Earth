package com.zycus.framework.framework_version_2_4.framework;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 * 
 * @author aryasindhu.sahu
 *
 */
public class TestNGReportXMLUtil
{

	private static Logger					logger					= Logger.getLogger(TestNGReportXMLUtil.class);

	private static final String				TEST_SUITE				= "suite";

	private static final String				TEST					= "test";

	private static final String				TEST_CLASS				= "class";

	private static final String				TEST_METHOD				= "test-method";

	/**
	 * File name of the xml file which contains all the test results.
	 */
	private static String					testNGReportFileName	= "output/reports/testNG/testng-results.xml";

	private static int						totalNoOfTestCases		= 0;
	private static int						failedNoOfTestCases		= 0;

	/**
	 * No of failed Test Methods deleted beacuse of duplicacy. This field is
	 * required to update the report xml file.
	 */
	private static int						deletedNodeCount		= 0;

	private static DocumentBuilderFactory	docFactory				= null;
	private static DocumentBuilder			docBuilder				= null;
	private static Document					document				= null;

	/**
	 * Removes duplicate <test-method> entries generated by Retrying Failed Test
	 * Cases from the testng-reports.xml
	 */
	public static void removeDuplicateMethods()
	{
		try
		{
			// Load The XML Report File
			loadXMLReportFile();

			// Get the Root Node i.e. :
			Element rootElement = document.getDocumentElement();
			totalNoOfTestCases = Integer.parseInt(rootElement.getAttribute("total"));
			failedNoOfTestCases = Integer.parseInt(rootElement.getAttribute("failed"));

			NodeList suites = document.getElementsByTagName(TEST_SUITE);
			for (int index = 0; index < suites.getLength(); index++)
			{
				// <suite>
				Node suite = suites.item(index);
				// group, test, test, etc..
				NodeList suiteChildren = suite.getChildNodes();

				for (int suiteChildrenIndex = 0; suiteChildrenIndex < suiteChildren.getLength(); suiteChildrenIndex++)
				{
					// group or test
					Node testNode = suiteChildren.item(suiteChildrenIndex);

					if (testNode.getNodeType() == Node.ELEMENT_NODE)
					{
						String suiteChildName = testNode.getNodeName();
						if (TEST.equalsIgnoreCase(suiteChildName))
						{
							// Now we have the <test> Node i.e. : suiteChild
							// Get the classname of the testMethod

							NodeList classNodeList = testNode.getChildNodes();
							for (int i = 0; i < classNodeList.getLength(); i++)
							{
								Node classNode = classNodeList.item(i);
								if (classNode.getNodeType() == Node.ELEMENT_NODE)
								{
									String nodeTagName = classNode.getNodeName();
									// if node is <class>
									if (TEST_CLASS.equalsIgnoreCase(nodeTagName))
									{
										// Make Map<String, Integer> to hold
										// TestMethod Names and its count of
										// occurances
										Map<String, Integer> initialTestMethodNameAndCount = new HashMap<String, Integer>();

										// Loop over classNode's children for
										// <test-method>
										NodeList testMethodNodeList = classNode.getChildNodes();
										for (int testMethodIndex = 0; testMethodIndex < testMethodNodeList.getLength(); testMethodIndex++)
										{
											Node testMethodNode = testMethodNodeList.item(testMethodIndex);
											if (testMethodNode.getNodeType() == Node.ELEMENT_NODE)
											{
												String testMethodTagName = testMethodNode.getNodeName();
												// if node is <test-method>
												if (TEST_METHOD.equalsIgnoreCase(testMethodTagName))
												{
													NamedNodeMap testMethodAttributes = testMethodNode.getAttributes();
													Node testMethodNameAttribute = testMethodAttributes.getNamedItem("name");
													String testMethodNameAttributeValue = testMethodNameAttribute.getTextContent();
													int count = 1;
													if (initialTestMethodNameAndCount.get(testMethodNameAttributeValue) != null)
													{
														count = initialTestMethodNameAndCount.get(testMethodNameAttributeValue);
														count++;
													}
													initialTestMethodNameAndCount.put(testMethodNameAttributeValue, count);
												}
											}
										}

										////////////////////////////////

										// Loop over classNode's children for
										// <test-method>
										for (int testMethodIndex = 0; testMethodIndex < testMethodNodeList.getLength(); testMethodIndex++)
										{
											Node testMethodNode = testMethodNodeList.item(testMethodIndex);
											if (testMethodNode.getNodeType() == Node.ELEMENT_NODE)
											{
												String testMethodTagName = testMethodNode.getNodeName();
												// if node is <test-method>
												if (TEST_METHOD.equalsIgnoreCase(testMethodTagName))
												{
													NamedNodeMap testMethodAttributes = testMethodNode.getAttributes();
													Node testMethodStatus = testMethodAttributes.getNamedItem("status");
													String status = testMethodStatus.getTextContent();
													Node testMethodNameAttribute = testMethodAttributes.getNamedItem("name");
													String testMethodName = testMethodNameAttribute.getTextContent();
													if ("FAIL".equalsIgnoreCase(status))
													{
														if (initialTestMethodNameAndCount.get(testMethodName) > 1)
														{
															// Delete the
															// current
															// <test-method>
															// node
															classNode.removeChild(testMethodNode);
															// Decrement the
															// count value for
															// current method
															// name
															int count = initialTestMethodNameAndCount.get(testMethodName);
															count--;
															initialTestMethodNameAndCount.put(testMethodName, count);

															// increment
															// deletedNodeCount
															// value
															deletedNodeCount++;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}

				// Update total and failed count of the Report XML File.
				updateTestResultCount();

				// write output to output file
				writeToFile();
			}
		}
		catch (SAXException e)
		{
			logger.info("Error Occured while Modifying Report XML File.", e);
		}
		catch (IOException e)
		{
			logger.info("Error Occured while Modifying Report XML File.", e);
		}
		catch (ParserConfigurationException e)
		{
			logger.info("Error Occured while Modifying Report XML File.", e);
		}
		catch (TransformerException e)
		{
			logger.info("Error Occured while Modifying Report XML File.", e);
		}
	}

	/**
	 * Updates the counts of total and failed fields in <testng-results> tag on
	 * the top of testng-results.xml
	 */
	private static void updateTestResultCount()
	{
		Node rootNode = document.getElementsByTagName("testng-results").item(0);
		NamedNodeMap attributes = rootNode.getAttributes();
		Node totalNodeAttr = attributes.getNamedItem("total");
		Node failedNodeAttr = attributes.getNamedItem("failed");
		totalNodeAttr.setTextContent(String.valueOf(totalNoOfTestCases - deletedNodeCount));
		failedNodeAttr.setTextContent(String.valueOf(failedNoOfTestCases - deletedNodeCount));
	}

	private static void loadXMLReportFile() throws SAXException, IOException, ParserConfigurationException
	{
		docFactory = DocumentBuilderFactory.newInstance();
		docBuilder = docFactory.newDocumentBuilder();
		document = docBuilder.parse(testNGReportFileName);
	}

	private static void writeToFile() throws TransformerException
	{
		if (Integer.parseInt(ConfigProperty.getConfig("RETRY_LIMIT")) > 0)
		{
			String resultXMLFilePath = ConfigProperty.getConfig("testNG_Output_Directory") + "/testng-results-new.xml";
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource source = new DOMSource(document);
			File resultXMLFile = new File(resultXMLFilePath);
			logger.info("Creating File : \"" + resultXMLFile.getAbsolutePath() + "\" to Store Test Reports without duplicate tests.");
			StreamResult result = new StreamResult(resultXMLFile.getPath());
			transformer.transform(source, result);
		}
	}

	public static void main(String[] args)
	{
		removeDuplicateMethods();
	}

}
