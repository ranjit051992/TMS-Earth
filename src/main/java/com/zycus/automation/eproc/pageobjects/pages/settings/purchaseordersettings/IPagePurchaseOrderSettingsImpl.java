package com.zycus.automation.eproc.pageobjects.pages.settings.purchaseordersettings;

import org.apache.log4j.Logger;
import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.Select;

import com.zycus.automation.constants.IConstants;
import com.zycus.automation.eproc.pageobjects.popups.defaultconfirmation.PopUpDefaultConfirmation;
import com.zycus.automation.exception.ActionBotException;
import com.zycus.automation.exception.FactoryMethodException;
import com.zycus.automation.utilities.actionbot.ActionBot;
import com.zycus.automation.utilities.screenshot.ScreenShot;

public class IPagePurchaseOrderSettingsImpl implements IPagePurchaseOrderSetting, IConstants
{

	static Logger logger = Logger.getLogger(IPagePurchaseOrderSettingsImpl.class);

	@Override
	public boolean clickAllowchangingDeliveryTermsOnBPORelease_No(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, ALLOW_TO_CHANGE_DELIVERY_TERMS_ON_RELEASE_OF_BPO_NO);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on to Allow change delivery terms on BPO release no ");

		return ActionBot.isElementSelected(driver, ALLOW_TO_CHANGE_DELIVERY_TERMS_ON_RELEASE_OF_BPO_NO);
	}

	@Override
	public boolean clickAllowchangingDeliveryTermsOnBPORelease_Yes(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, ALLOW_TO_CHANGE_DELIVERY_TERMS_ON_RELEASE_OF_BPO_YES);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on to Allow change delivery terms on BPO release yes ");

		return ActionBot.isElementSelected(driver, ALLOW_TO_CHANGE_DELIVERY_TERMS_ON_RELEASE_OF_BPO_YES);
	}

	@Override
	public boolean clickOnAllowChangingPaymentTermsOnRelease_No(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, ALLOW_CHANGING_PAYMENT_TERMS_ON_RELEASE_NO);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on allow changing payment terms on release no");

		return ActionBot.isElementSelected(driver, ALLOW_CHANGING_PAYMENT_TERMS_ON_RELEASE_NO);
	}

	@Override
	public boolean clickOnAllowChangingPaymentTermsOnRelease_Yes(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, ALLOW_CHANGING_PAYMENT_TERMS_ON_RELEASE_YES);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on allow changing payment terms on release yes");

		return ActionBot.isElementSelected(driver, ALLOW_CHANGING_PAYMENT_TERMS_ON_RELEASE_YES);
	}

	@Override
	public boolean clickOnAllowEditingAutoGeneratedPONumber_No(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, ALLOW_EDITING_AUTO_GENERATED_PO_NUMBER_NO);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on allow Editing Auto generated PO number No");

		return ActionBot.isElementSelected(driver, ALLOW_EDITING_AUTO_GENERATED_PO_NUMBER_NO);
	}

	@Override
	public boolean clickOnAllowEditingAutoGeneratedPONumber_Yes(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, ALLOW_EDITING_AUTO_GENERATED_PO_NUMBER_YES);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on allow Editing Auto generated PO number Yes");

		return ActionBot.isElementSelected(driver, ALLOW_EDITING_AUTO_GENERATED_PO_NUMBER_YES);
	}

	@Override
	public boolean clickOnAllowEmailingPOToOtherThanSupplierPOContact_No(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, ALLOW_EMAILING_PO_TO_OTHER_THAN_SUPPLIERS_PO_CONTACT_NO);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on allow emailing PO to other supplier PO contact No");

		return ActionBot.isElementSelected(driver, ALLOW_EMAILING_PO_TO_OTHER_THAN_SUPPLIERS_PO_CONTACT_NO);
	}

	@Override
	public boolean clickOnAllowEmailingPOToOtherThanSupplierPOContact_Yes(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, ALLOW_EMAILING_PO_TO_OTHER_THAN_SUPPLIERS_PO_CONTACT_YES);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on allow emailing PO to other supplier PO contact Yes");

		return ActionBot.isElementSelected(driver, ALLOW_EMAILING_PO_TO_OTHER_THAN_SUPPLIERS_PO_CONTACT_YES);
	}

	@Override
	public boolean clickOnAllowEmailingPOToUsersOutsideCompany_No(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, ALLOW_EMAILING_PO_TO_USERS_OUTSIDE_COMPANY_NO);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on allow emailing PO to users outside company No");

		return ActionBot.isElementSelected(driver, ALLOW_EMAILING_PO_TO_USERS_OUTSIDE_COMPANY_NO);
	}

	@Override
	public boolean clickOnAllowEmailingPOToUsersOutsideCompany_Yes(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, ALLOW_EMAILING_PO_TO_USERS_OUTSIDE_COMPANY_YES);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on allow emailing PO to users outside company Yes");

		return ActionBot.isElementSelected(driver, ALLOW_EMAILING_PO_TO_USERS_OUTSIDE_COMPANY_YES);
	}

	@Override
	public boolean clickOnAllowManualOrdersReleasedWithoutDeliveryDate_No(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, ALLOW_MANUAL_ORDERS_RELEASED_WITHOUT_DELIVERY_DATE_NO);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on Allow manual orders to be released without delivery date No");

		return ActionBot.isElementSelected(driver, ALLOW_MANUAL_ORDERS_RELEASED_WITHOUT_DELIVERY_DATE_NO);
	}

	@Override
	public boolean clickOnAllowManualOrdersReleasedWithoutDeliveryDate_Yes(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, ALLOW_MANUAL_ORDERS_RELEASED_WITHOUT_DELIVERY_DATE_YES);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on Allow manual orders to be released without delivery date Yes");

		return ActionBot.isElementSelected(driver, ALLOW_MANUAL_ORDERS_RELEASED_WITHOUT_DELIVERY_DATE_YES);
	}

	@Override
	public boolean isPOAmmendingLimitationOnItemUnitPricePresent(WebDriver driver, String testCaseName) throws ActionBotException
	{
		if (ActionBot.isElementPresent(driver, EPROC_PURCHASE_ORDER_ITEM_PRICE_TOLERANCE_val))
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	@Override
	public boolean clickOnAllowModificationOfItemClassificationCode_Yes(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, ALLOW_MODIFICATION_OF_ITEM_CLASSIFICATION_CODE_YES);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on Allow modification of item classification code yes");

		return ActionBot.isElementSelected(driver, ALLOW_MODIFICATION_OF_ITEM_CLASSIFICATION_CODE_YES);
	}

	@Override
	public boolean isPOAmmendingLimitationOnItemQuantityPresent(WebDriver driver, String testCaseName) throws ActionBotException
	{
		if (ActionBot.isElementPresent(driver, EPROC_PURCHASE_ORDER_ITEM_QUANTITY_TOLERANCE_val))
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	@Override
	public boolean clickOnAllowToChangeDefaultSupplierCurrencyOnPO_Yes(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, ALLOW_TO_CHANGE_DEFAULT_SUPPLIER_CURRENCY_ON_PO_YES);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on allow to change default supplier currency on PO Yes");

		return ActionBot.isElementSelected(driver, ALLOW_TO_CHANGE_DEFAULT_SUPPLIER_CURRENCY_ON_PO_YES);
	}

	@Override
	public boolean clickOnAllowToChangeDefaultSupplierDeliveryTermsOnPO_No(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, ALLOW_TO_CHANGE_DEFAULT_SUPPLIER_DELIVERY_TERMS_ON_PO_NO);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on allow to change default supplier delivery terms on PO No");

		return ActionBot.isElementSelected(driver, ALLOW_TO_CHANGE_DEFAULT_SUPPLIER_DELIVERY_TERMS_ON_PO_NO);
	}

	@Override
	public boolean clickOnAllowToChangeDefaultSupplierDeliveryTermsOnPO_Yes(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, ALLOW_TO_CHANGE_DEFAULT_SUPPLIER_DELIVERY_TERMS_ON_PO_YES);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on allow to change default supplier delivery terms on PO Yes");

		return ActionBot.isElementSelected(driver, ALLOW_TO_CHANGE_DEFAULT_SUPPLIER_DELIVERY_TERMS_ON_PO_YES);
	}

	@Override
	public boolean clickOnAllowToChangeDefaultSupplierPaymentTermsOnPO_No(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, ALLOW_TO_CHANGE_DEFAULT_SUPPLIER_PAYMENT_TERMS_ON_PO_NO);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on allow to change default supplier payment terms on PO No");

		return ActionBot.isElementSelected(driver, ALLOW_TO_CHANGE_DEFAULT_SUPPLIER_PAYMENT_TERMS_ON_PO_NO);
	}

	@Override
	public boolean clickOnAllowToChangeDefaultSupplierPaymentTermsOnPO_Yes(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, ALLOW_TO_CHANGE_DEFAULT_SUPPLIER_PAYMENT_TERMS_ON_PO_YES);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on allow to change default supplier payment terms on PO Yes");

		return ActionBot.isElementSelected(driver, ALLOW_TO_CHANGE_DEFAULT_SUPPLIER_PAYMENT_TERMS_ON_PO_YES);
	}

	@Override
	public boolean clickOnAutoGenerateLineItemNumbersOnPO_No(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, AUTO_GENERATE_LINE_ITEM_NUMBERS_ON_PO_NO);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on Auto generate line item numbers on PO no");

		return ActionBot.isElementSelected(driver, AUTO_GENERATE_LINE_ITEM_NUMBERS_ON_PO_NO);
	}

	@Override
	public boolean clickOnAutoGenerateLineItemNumbersOnPO_Yes(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, AUTO_GENERATE_LINE_ITEM_NUMBERS_ON_PO_YES);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on Auto generate line item numbers on PO yes");

		return ActionBot.isElementSelected(driver, AUTO_GENERATE_LINE_ITEM_NUMBERS_ON_PO_YES);
	}

	@Override
	public boolean clickOnAutomaticallyGeneratePO_No(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, AUTOMATICALLY_GENERATE_ORDER_NO);
		ActionBot.defaultSleep();
		try
		{
			PopUpDefaultConfirmation.clickOnOkButton(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		ScreenShot.screenshot(driver, testCaseName, "After clicking on automatically generate PO no");
		return ActionBot.isElementSelected(driver, AUTOMATICALLY_GENERATE_ORDER_NO);
	}

	@Override
	public boolean clickOnAutomaticallyGeneratePO_Yes(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, AUTOMATICALLY_GENERATE_ORDER_YES);
		try
		{
			PopUpDefaultConfirmation.clickOnOkButton(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		ScreenShot.screenshot(driver, testCaseName, "After clicking on automatically generate PO yes");
		return ActionBot.isElementSelected(driver, AUTOMATICALLY_GENERATE_ORDER_YES);
	}

	@Override
	public boolean clickOnBPOAmountIncreasedUptoLarger(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, BLANKET_ORDER_AMOUNT_INCREASED_UPTO_LARGER);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on BPO amount increased upto larger");

		return ActionBot.isElementSelected(driver, BLANKET_ORDER_AMOUNT_INCREASED_UPTO_LARGER);
	}

	@Override
	public boolean clickOnBPOAmountIncreasedUptoSmaller(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, BLANKET_ORDER_AMOUNT_INCREASED_UPTO_SMALLER);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on BPO amount increased upto smaller");

		return ActionBot.isElementSelected(driver, BLANKET_ORDER_AMOUNT_INCREASED_UPTO_SMALLER);
	}

	@Override
	public boolean clickOnCancelButton(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, PO_SETTINGS_CANCEL_BUTTON);
		ActionBot.defaultSleep();
		ScreenShot.screenshot(driver, testCaseName, "After clicking on Cancel button");

		return true;
	}

	@Override
	public boolean clickOnHoldInvoiceDifferentPaymentTerm_No(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, EPROC_PURCHASE_ORDER_RELEASE_HOLD_INVOICE_DIFFERENT_PAYMENT_TERM_NO);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on Hold invoice different payment term yes");

		return ActionBot.isElementSelected(driver, EPROC_PURCHASE_ORDER_RELEASE_HOLD_INVOICE_DIFFERENT_PAYMENT_TERM_NO);
	}

	@Override
	public boolean clickOnHoldInvoiceDifferentPaymentTerm_Yes(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, EPROC_PURCHASE_ORDER_RELEASE_HOLD_INVOICE_DIFFERENT_PAYMENT_TERM_YES);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on Hold invoice different payment term yes");

		return ActionBot.isElementSelected(driver, EPROC_PURCHASE_ORDER_RELEASE_HOLD_INVOICE_DIFFERENT_PAYMENT_TERM_YES);
	}

	@Override
	public boolean clickOnReleaseOrdersImmediately_No(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, RELEASE_ORDERS_IMMEADIATELY_NO);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on Release orders immediately Yes");

		return ActionBot.isElementSelected(driver, RELEASE_ORDERS_IMMEADIATELY_NO);
	}

	@Override
	public boolean clickOnReleaseOrdersImmediately_Yes(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, RELEASE_ORDERS_IMMEADIATELY_YES);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on Release orders immediately Yes");

		return ActionBot.isElementSelected(driver, RELEASE_ORDERS_IMMEADIATELY_YES);
	}

	@Override
	public boolean clickOnRequiredPOApprovalWhenPOTotalExceedsLarger(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, REQUIRED_PO_APPROVAL_WHEN_PO_TOTAL_EXCEEDS_LARGER);
		ScreenShot.screenshot(driver, testCaseName, "Required PO approval when PO total Exceeds Larger option is selected");
		return ActionBot.isElementSelected(driver, REQUIRED_PO_APPROVAL_WHEN_PO_TOTAL_EXCEEDS_LARGER);
	}

	@Override
	public boolean clickOnRequiredPOApprovalWhenPOTotalExceedsSmaller(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, REQUIRED_PO_APPROVAL_WHEN_PO_TOTAL_EXCEEDS_SMALLER);
		ScreenShot.screenshot(driver, testCaseName, "Required PO approval when PO total Exceeds Smaller option is selected");
		return ActionBot.isElementSelected(driver, REQUIRED_PO_APPROVAL_WHEN_PO_TOTAL_EXCEEDS_SMALLER);
	}

	@Override
	public boolean isRequiredPOApprovalWhenPOTotalExceedsCertainAmountOrPercentagePresent(WebDriver driver, String testCaseName) throws ActionBotException
	{
		if (ActionBot.isElementPresent(driver, REQUIRED_PO_APPROVAL_WHEN_PO_TOTAL_EXCEEDS_UNIT_PRICE_AMOUNT))
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	@Override
	public boolean clickOnWeekdayForAutomaticReleasePO(WebDriver driver, String testCaseName, int index) throws ActionBotException
	{
		ActionBot.click(driver, By.xpath(".//*[@id='weekDays']/label[" + index + "]/input[@class='chk weekDaysChk']"));
		ScreenShot.screenshot(driver, testCaseName, "After selecting particular week day to release PO");
		return ActionBot.isElementSelected(driver, By.xpath(".//*[@id='weekDays']/label[" + index + "]/input[@class='chk weekDaysChk']"));

	}

	@Override
	public boolean clickOnSaveButton(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, PO_SETTINGS_SAVE_BUTTON);
		ActionBot.defaultSleep();
		ScreenShot.screenshot(driver, testCaseName, "After clicking on Save button");

		return ActionBot.isElementPresent(driver, PO_SETTINGS_SAVE_SUCCESSFUL_MSG);
	}

	@Override
	public boolean clickOnSupplierForPODeliveryViaEmailAll(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, SUPPLIER_FOR_PO_DELIVERY_VIA_EMAIL_ALL);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on Supplier for PO delivery via email All");

		return ActionBot.isElementSelected(driver, SUPPLIER_FOR_PO_DELIVERY_VIA_EMAIL_ALL);
	}

	@Override
	public boolean clickSupplierForPODeliveryViaEmailNone(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, SUPPLIER_FOR_PO_DELIVERY_VIA_EMAIL_NONE);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on Supplier for PO delivery via email None");

		return ActionBot.isElementSelected(driver, SUPPLIER_FOR_PO_DELIVERY_VIA_EMAIL_NONE);
	}

	@Override
	public boolean clickSupplierForPODeliveryViaEmailSelect(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, SUPPLIER_FOR_PO_DELIVERY_VIA_EMAIL_SELECT);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on Supplier for PO delivery via email Select");

		return ActionBot.isElementSelected(driver, SUPPLIER_FOR_PO_DELIVERY_VIA_EMAIL_SELECT);
	}

	@Override
	public Integer fillBPOExceedsPerAmount(WebDriver driver, String testCaseName, int exceedPerAmount) throws ActionBotException
	{
		String exceeds_perAmount = Integer.toString(exceedPerAmount);
		ActionBot.sendKeys(driver, BLANKET_PO_TOTAL_EXCEEDS_AMOUNT, exceeds_perAmount);
		ScreenShot.screenshot(driver, testCaseName, "AFTER CHANGING BLANKET_PO_TOTAL_EXCEEDS_PER AMOUNT");

		exceeds_perAmount = ActionBot.findElement(driver, BLANKET_PO_TOTAL_EXCEEDS_AMOUNT).getAttribute("value").trim();
		logger.info("Changed BPO total exceeds per amount : " + exceeds_perAmount);

		return Integer.parseInt(exceeds_perAmount);
	}

	@Override
	public Integer fillBPOIncreaseValidityWithoutApproval(WebDriver driver, String testCaseName, int increaseValidity) throws ActionBotException
	{
		String increase_Validity = Integer.toString(increaseValidity);
		ActionBot.sendKeys(driver, EPROC_PURCHASE_ORDER_INCREASE_VALIDITY_WITHOUT_APPROVAL, increase_Validity);
		ScreenShot.screenshot(driver, testCaseName, "AFTER CHANGING PO increase validity without approval");

		increase_Validity = ActionBot.findElement(driver, EPROC_PURCHASE_ORDER_INCREASE_VALIDITY_WITHOUT_APPROVAL).getAttribute("value").trim();
		logger.info("Changed PO increase validity without approval : " + increase_Validity);

		return Integer.parseInt(increase_Validity);
	}

	@Override
	public Integer fillBPOTotalExceedsPer(WebDriver driver, String testCaseName, int exceedsPer) throws ActionBotException
	{
		String exceeds_per = Integer.toString(exceedsPer);
		ActionBot.sendKeys(driver, BLANKET_PO_TOTAL_EXCEEDS_PER, exceeds_per);
		ScreenShot.screenshot(driver, testCaseName, "AFTER CHANGING BLANKET_PO_TOTAL_EXCEEDS_PER");

		exceeds_per = ActionBot.findElement(driver, BLANKET_PO_TOTAL_EXCEEDS_PER).getAttribute("value").trim();
		logger.info("Changed BPO total exceeds per : " + exceeds_per);

		return Integer.parseInt(exceeds_per);
	}

	@Override
	public String fillDefaultBuyerForAutoPO(WebDriver driver, String testCaseName, String buyerName) throws ActionBotException
	{
		WebElement element = ActionBot.findElement(driver, PURCHASE_ORDER_DEFAULT_BUYER_FOR_AUTO_PO);
		element.sendKeys(buyerName);
		ActionBot.defaultSleep();
		element.sendKeys(Keys.ARROW_DOWN);
		element.sendKeys(Keys.ENTER);
		ScreenShot.screenshot(driver, testCaseName, "After selecting Default buyer for auto PO");

		String defaultBuyerName = ActionBot.findElement(driver, PURCHASE_ORDER_DEFAULT_BUYER_FOR_AUTO_PO).getAttribute("value");
		logger.info("Changed Default buyer name : " + defaultBuyerName);

		return defaultBuyerName;

	}

	@Override
	public String fillDefaultPurchseTermsAndConditions(WebDriver driver, String testCaseName, String purchaseTermsAndConditions) throws ActionBotException
	{
		ActionBot.sendKeys(driver, EPROC_PURCHASE_ORDER_TERMS_AND_CONDITIONS, purchaseTermsAndConditions);
		ScreenShot.screenshot(driver, testCaseName, "After chaging Default purchase terms and conditions");

		String defaultPurchaseTermsAndConditions = ActionBot.findElement(driver, EPROC_PURCHASE_ORDER_TERMS_AND_CONDITIONS).getAttribute("value");
		logger.info("Changed Default purchase terms and conditions : " + defaultPurchaseTermsAndConditions);
		return defaultPurchaseTermsAndConditions;
	}

	@Override
	public Integer fillPOAmendingLimiationOnItemQuantity(WebDriver driver, String testCaseName, int limitedItemQuantity) throws ActionBotException
	{
		String limitedItem_Quantity = Integer.toString(limitedItemQuantity);

		ActionBot.sendKeys(driver, EPROC_PURCHASE_ORDER_ITEM_QUANTITY_TOLERANCE_val, limitedItem_Quantity);
		ScreenShot.screenshot(driver, testCaseName, "After changing PO item quantity tolerance value");

		limitedItem_Quantity = ActionBot.getTextWithInElement(driver, EPROC_PURCHASE_ORDER_ITEM_QUANTITY_TOLERANCE_val);
		logger.info("PO item quantity tolerance value : " + limitedItem_Quantity);

		return Integer.parseInt(limitedItem_Quantity);
	}

	@Override
	public Integer fillPOAmendingLimiationOnItemUnitPrice(WebDriver driver, String testCaseName, int limitedItemUnitPrice) throws ActionBotException
	{
		String limitedItem_UnitPrice = Integer.toString(limitedItemUnitPrice);

		ActionBot.sendKeys(driver, EPROC_PURCHASE_ORDER_ITEM_PRICE_TOLERANCE_val, limitedItem_UnitPrice);
		ScreenShot.screenshot(driver, testCaseName, "After changing PO item price tolerance value");

		limitedItem_UnitPrice = ActionBot.getTextWithInElement(driver, EPROC_PURCHASE_ORDER_ITEM_PRICE_TOLERANCE_val);
		logger.info("PO item price tolerance value : " + limitedItem_UnitPrice);

		return Integer.parseInt(limitedItem_UnitPrice);
	}

	@Override
	public String fillPOAutoMailingList(WebDriver driver, String testCaseName, String mailingName) throws ActionBotException
	{
		ActionBot.sendKeys(driver, EPROC_PURCHASE_ORDER_AUTO_MAILING_LIST, mailingName);
		ScreenShot.screenshot(driver, testCaseName, "After filling PO auto mailing list");

		String poAutoMailingList = ActionBot.findElement(driver, EPROC_PURCHASE_ORDER_AUTO_MAILING_LIST).getAttribute("value");
		logger.info("PO Auto mailing list : " + poAutoMailingList);

		return poAutoMailingList;
	}

	@Override
	public Integer fillPODeliveryDateInterval(WebDriver driver, String testCaseName, int poDeliveryDateInterval) throws ActionBotException
	{
		String poDeliveryDate_Interval = Integer.toString(poDeliveryDateInterval);
		ActionBot.sendKeys(driver, EPROC_PURCHASE_ORDER_DELV_DATE_INTERVAL, poDeliveryDate_Interval);
		ScreenShot.screenshot(driver, testCaseName, "After filling PO delivery date interval");

		poDeliveryDate_Interval = ActionBot.findElement(driver, EPROC_PURCHASE_ORDER_DELV_DATE_INTERVAL).getAttribute("value");
		logger.info("PO Delivery Date interval : " + poDeliveryDate_Interval);

		return Integer.parseInt(poDeliveryDate_Interval);
	}

	@Override
	public String fillPOName(WebDriver driver, String testCaseName, String poName) throws ActionBotException
	{
		String poNameForAutoPO;

		ActionBot.sendKeys(driver, EPROC_PURCHASE_ORDER_AUTO_NAME_FORMAT, poName);
		ScreenShot.screenshot(driver, testCaseName, "After changing PO Name format");

		poNameForAutoPO = ActionBot.getTextWithInElement(driver, EPROC_PURCHASE_ORDER_AUTO_NAME_FORMAT);
		logger.info("Changed PO Name format : " + poNameForAutoPO);

		return poNameForAutoPO;
	}

	@Override
	public String fillPONumberFormat(WebDriver driver, String testCaseName, String poNumberFormat) throws ActionBotException
	{
		String poNumber_format;
		ActionBot.sendKeys(driver, EPROC_PURCHASE_ORDER_FORMAT, poNumberFormat);
		ScreenShot.screenshot(driver, testCaseName, "After changing PO number format");

		poNumber_format = ActionBot.getTextWithInElement(driver, EPROC_PURCHASE_ORDER_FORMAT);
		logger.info("Changed PO number format : " + poNumber_format);

		return poNumber_format;
	}

	@Override
	public Integer fillReleasePOAutomaticParkValue(WebDriver driver, String testCaseName, int parkValue) throws ActionBotException
	{
		String park_value = Integer.toString(parkValue);
		ActionBot.sendKeys(driver, EPROC_PURCHASE_ORDER_AUTOMATIC_PARK_VALUE_control_DAYS, park_value);
		ScreenShot.screenshot(driver, testCaseName, "After changing Purchase order automatic park value");

		park_value = ActionBot.findElement(driver, EPROC_PURCHASE_ORDER_AUTOMATIC_PARK_VALUE_control_DAYS).getAttribute("value");
		logger.info("Purchase order automatic park value : " + park_value);

		return Integer.parseInt(park_value);
	}

	@Override
	public Integer fillRequiredPOApprovalWhenPOTotalExceedsUnitPricePer(WebDriver driver, String testCaseName, int exceedUnitPricePer) throws ActionBotException
	{
		String exceedUnitPrice_per = Integer.toString(exceedUnitPricePer);
		ActionBot.sendKeys(driver, REQUIRED_PO_APPROVAL_WHEN_PO_TOTAL_EXCEEDS_UNIT_PRICE_PER, exceedUnitPrice_per);
		ScreenShot.screenshot(driver, testCaseName, "After filling Exceeded Unit Price per");

		exceedUnitPrice_per = ActionBot.findElement(driver, REQUIRED_PO_APPROVAL_WHEN_PO_TOTAL_EXCEEDS_UNIT_PRICE_PER).getAttribute("value");
		logger.info("Exceeded Unit price per : " + exceedUnitPrice_per);
		return Integer.parseInt(exceedUnitPrice_per);
	}

	@Override
	public Integer fillRequiredPOApprovalWhenPOTotalExceedsUnitPricePerAmount(WebDriver driver, String testCaseName, int exceedUnitPricePerAmount) throws ActionBotException
	{
		String exceedUnitPrice_perAmount = Integer.toString(exceedUnitPricePerAmount);
		ActionBot.sendKeys(driver, REQUIRED_PO_APPROVAL_WHEN_PO_TOTAL_EXCEEDS_UNIT_PRICE_AMOUNT, exceedUnitPrice_perAmount);
		ScreenShot.screenshot(driver, testCaseName, "After filling Exceeded Unit Price per Amount");

		exceedUnitPrice_perAmount = ActionBot.findElement(driver, REQUIRED_PO_APPROVAL_WHEN_PO_TOTAL_EXCEEDS_UNIT_PRICE_AMOUNT).getAttribute("value");
		logger.info("Exceeded Unit price per : " + exceedUnitPrice_perAmount);
		return Integer.parseInt(exceedUnitPrice_perAmount);
	}

	@Override
	public Integer fillSequenceNumberEndsAt(WebDriver driver, String testCaseName, int sequenceNoEndsAt) throws ActionBotException
	{
		String sequenceNo_EndsAt = Integer.toString(sequenceNoEndsAt);

		ActionBot.sendKeys(driver, EPROC_PURCHASE_ORDER_SEQUENCE_NO_ENDS_AT, sequenceNo_EndsAt);
		ScreenShot.screenshot(driver, testCaseName, "After changing sequence number ends at");

		sequenceNo_EndsAt = ActionBot.getTextWithInElement(driver, EPROC_PURCHASE_ORDER_SEQUENCE_NO_ENDS_AT);
		logger.info("Changed sequence number ends at : " + sequenceNo_EndsAt);

		return Integer.parseInt(sequenceNo_EndsAt);
	}

	@Override
	public Integer fillSequenceNumberStartsAt(WebDriver driver, String testCaseName, int sequenceNoStartsAt) throws ActionBotException
	{
		String sequenceNo_StartsAt = Integer.toString(sequenceNoStartsAt);

		ActionBot.sendKeys(driver, EPROC_PURCHASE_ORDER_SEQUENCE_NO_STARTS_AT, sequenceNo_StartsAt);
		ScreenShot.screenshot(driver, testCaseName, "After changing sequence number starts at");

		sequenceNo_StartsAt = ActionBot.getTextWithInElement(driver, EPROC_PURCHASE_ORDER_SEQUENCE_NO_STARTS_AT);
		logger.info("Changed sequence number starts at : " + sequenceNo_StartsAt);

		return Integer.parseInt(sequenceNo_StartsAt);
	}

	@Override
	public String fillSupplierEmail(WebDriver driver, String testCaseName, String supplierEmail) throws ActionBotException
	{
		WebElement element = ActionBot.findElement(driver, SUPPLIER_FOR_PO_DELIVERY_VIA_EMAIL_SUPPLIER_EMAIL);
		element.sendKeys(supplierEmail);
		ActionBot.defaultSleep();
		element.sendKeys(Keys.ARROW_DOWN);
		element.sendKeys(Keys.RETURN);
		ScreenShot.screenshot(driver, testCaseName, "After filling Supplier email");

		String supplier_email = ActionBot.getTextWithInElement(driver, SELECTED_SUPPLIER_EMAIL);
		logger.info("Supplier Email : " + supplier_email);

		return supplier_email;
	}

	@Override
	public String getAllowchangingDeliveryTermsOnBPORelease_option(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ScreenShot.screenshot(driver, testCaseName, "Allow changing delivery terms on BPO release selected option");
		if (ActionBot.isElementSelected(driver, ALLOW_TO_CHANGE_DELIVERY_TERMS_ON_RELEASE_OF_BPO_YES))
		{
			return YES;
		}
		else
		{
			return NO;
		}
	}

	@Override
	public String getAllowChangingPaymentTermsOnRelease_option(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ScreenShot.screenshot(driver, testCaseName, "Allow changing payment terms on release selected option");
		if (ActionBot.isElementSelected(driver, ALLOW_CHANGING_PAYMENT_TERMS_ON_RELEASE_YES))
		{
			return YES;
		}
		else
		{
			return NO;
		}
	}

	@Override
	public String getAllowEditingAutoGeneratedPONumber_Option(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ScreenShot.screenshot(driver, testCaseName, "Allow Editing Auto generated PO number");
		if (ActionBot.isElementSelected(driver, ALLOW_EDITING_AUTO_GENERATED_PO_NUMBER_YES))
		{
			return YES;
		}
		else
		{
			return NO;
		}
	}

	@Override
	public String getAllowEmailingPOToOtherThanSupplierPOContact_Option(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ScreenShot.screenshot(driver, testCaseName, "Allow emailing PO to other supplier PO contact");
		if (ActionBot.isElementSelected(driver, ALLOW_EMAILING_PO_TO_OTHER_THAN_SUPPLIERS_PO_CONTACT_YES))
		{
			return YES;
		}
		else
		{
			return NO;
		}
	}

	@Override
	public String getAllowEmailingPOToUsersOutsideCompany_Option(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ScreenShot.screenshot(driver, testCaseName, "Allow emailing PO to users outside company");
		if (ActionBot.isElementSelected(driver, ALLOW_EMAILING_PO_TO_USERS_OUTSIDE_COMPANY_YES))
		{
			return YES;
		}
		else
		{
			return NO;
		}
	}

	@Override
	public String getAllowManualOrdersReleasedWithoutDeliveryDate_Option(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ScreenShot.screenshot(driver, testCaseName, "Allow manual orders to be released without delivery date selected option");
		if (ActionBot.isElementSelected(driver, ALLOW_MANUAL_ORDERS_RELEASED_WITHOUT_DELIVERY_DATE_YES))
		{
			return YES;
		}
		else
		{
			return NO;
		}
	}

	@Override
	public String getAllowModificationOfItemClassificationCode_Option(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ScreenShot.screenshot(driver, testCaseName, "Allow modification of item classification code selected option");
		if (ActionBot.isElementSelected(driver, ALLOW_MODIFICATION_OF_ITEM_CLASSIFICATION_CODE_YES))
		{
			return YES;
		}
		else
		{
			return NO;
		}
	}

	@Override
	public String getAllowToChangeDefaultSupplierCurrencyOnPO_Option(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ScreenShot.screenshot(driver, testCaseName, "Allow to change default supplier currency on PO");
		if (ActionBot.isElementSelected(driver, ALLOW_TO_CHANGE_DEFAULT_SUPPLIER_CURRENCY_ON_PO_YES))
		{
			return YES;
		}
		else
		{
			return NO;
		}
	}

	@Override
	public String getAllowToChangeDefaultSupplierDeliveryTermsOnPO_Option(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ScreenShot.screenshot(driver, testCaseName, "Allow to change default supplier delivery terms on PO");
		if (ActionBot.isElementSelected(driver, ALLOW_TO_CHANGE_DEFAULT_SUPPLIER_DELIVERY_TERMS_ON_PO_YES))
		{
			return YES;
		}
		else
		{
			return NO;
		}
	}

	@Override
	public String getAllowToChangeDefaultSupplierPaymentTermsOnPO_Option(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ScreenShot.screenshot(driver, testCaseName, "Allow to change default supplier payment terms on PO");
		if (ActionBot.isElementSelected(driver, ALLOW_TO_CHANGE_DEFAULT_SUPPLIER_PAYMENT_TERMS_ON_PO_YES))
		{
			return YES;
		}
		else
		{
			return NO;
		}
	}

	@Override
	public String getAutoGenerateLineItemNumbersOnPO_Option(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ScreenShot.screenshot(driver, testCaseName, "Auto generate line item numbers on PO selected option");
		if (ActionBot.isElementSelected(driver, AUTO_GENERATE_LINE_ITEM_NUMBERS_ON_PO_YES))
		{
			return YES;
		}
		else
		{
			return NO;
		}

	}

	@Override
	public String getAutomaticallyGeneratePO_option(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ScreenShot.screenshot(driver, testCaseName, "Automatically generate PO");
		if (ActionBot.isElementSelected(driver, AUTOMATICALLY_GENERATE_ORDER_YES))
		{
			return YES;
		}
		else
		{
			return NO;
		}
	}

	@Override
	public String getBPOAmountIncreasedUpto_Option(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ScreenShot.screenshot(driver, testCaseName, "After clicking on BPO amount increased upto");
		if (ActionBot.isElementSelected(driver, BLANKET_ORDER_AMOUNT_INCREASED_UPTO_SMALLER))
		{
			return SMALLER;
		}
		else
		{
			return LARGER;
		}
	}

	@Override
	public Integer getBPOExceedsPer(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ScreenShot.screenshot(driver, testCaseName, "BLANKET_PO_TOTAL_EXCEEDS_PER");

		String exceeds_per = ActionBot.findElement(driver, BLANKET_PO_TOTAL_EXCEEDS_PER).getAttribute("value").trim();
		logger.info("Changed BPO total exceeds per : " + exceeds_per);

		return Integer.parseInt(exceeds_per);
	}

	@Override
	public Integer getBPOExceedsPerAmount(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ScreenShot.screenshot(driver, testCaseName, "BLANKET_PO_TOTAL_EXCEEDS_PER AMOUNT");

		String exceeds_perAmount = ActionBot.findElement(driver, BLANKET_PO_TOTAL_EXCEEDS_AMOUNT).getAttribute("value").trim();
		logger.info("Changed BPO total exceeds per amount : " + exceeds_perAmount);

		return Integer.parseInt(exceeds_perAmount);
	}

	@Override
	public Integer getBPOIncreaseValidityWithoutApproval(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ScreenShot.screenshot(driver, testCaseName, "PO increase validity without approval");

		String increase_Validity = ActionBot.findElement(driver, EPROC_PURCHASE_ORDER_INCREASE_VALIDITY_WITHOUT_APPROVAL).getAttribute("value").trim();
		logger.info("PO increase validity without approval : " + increase_Validity);

		return Integer.parseInt(increase_Validity);
	}

	@Override
	public String getDefaultBuyerForAutoPO(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ScreenShot.screenshot(driver, testCaseName, "Default buyer for auto PO");

		String defaultBuyerName = ActionBot.findElement(driver, PURCHASE_ORDER_DEFAULT_BUYER_FOR_AUTO_PO).getAttribute("value");
		logger.info("Default buyer name : " + defaultBuyerName);

		return defaultBuyerName;
	}

	@Override
	public String getDefaultPurchseTermsAndConditions(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ScreenShot.screenshot(driver, testCaseName, "Default purchase terms and conditions");

		String defaultPurchaseTermsAndConditions = ActionBot.findElement(driver, EPROC_PURCHASE_ORDER_TERMS_AND_CONDITIONS).getAttribute("value");
		logger.info("Default purchase terms and conditions : " + defaultPurchaseTermsAndConditions);
		return defaultPurchaseTermsAndConditions;
	}

	@Override
	public String getDisplayLimitationOfPurchaseOrder(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ScreenShot.screenshot(driver, testCaseName, "Display limiation of PO");

		Select select = new Select(ActionBot.findElement(driver, DISPLAY_OF_PURCHASE_ORDER));
		String display_Limitation = select.getFirstSelectedOption().getText().trim();
		logger.info("Display of Purchase Orders should be limited to:" + display_Limitation);

		return display_Limitation;
	}

	@Override
	public String getHoldInvoiceDifferentPaymentTerm_option(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ScreenShot.screenshot(driver, testCaseName, "Hold invoice different payment terms selected option");
		if (ActionBot.isElementSelected(driver, EPROC_PURCHASE_ORDER_RELEASE_HOLD_INVOICE_DIFFERENT_PAYMENT_TERM_YES))
		{
			return YES;
		}
		else
		{
			return NO;
		}
	}

	@Override
	public Integer getPOAmendingLimiationOnItemQuantity(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ScreenShot.screenshot(driver, testCaseName, "PO item quantity tolerance value");

		String limitedItem_Quantity = ActionBot.getTextWithInElement(driver, EPROC_PURCHASE_ORDER_ITEM_QUANTITY_TOLERANCE_val);
		logger.info("PO item quantity tolerance value : " + limitedItem_Quantity);

		return Integer.parseInt(limitedItem_Quantity);
	}

	@Override
	public Integer getPOAmendingLimiationOnItemUnitPrice(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ScreenShot.screenshot(driver, testCaseName, "PO item price tolerance value");

		String limitedItem_UnitPrice = ActionBot.getTextWithInElement(driver, EPROC_PURCHASE_ORDER_ITEM_PRICE_TOLERANCE_val);
		logger.info("PO item price tolerance value : " + limitedItem_UnitPrice);

		return Integer.parseInt(limitedItem_UnitPrice);
	}

	@Override
	public String getPOAutoMailingList(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ScreenShot.screenshot(driver, testCaseName, "After filling PO auto mailing list");

		String poAutoMailingList = ActionBot.findElement(driver, EPROC_PURCHASE_ORDER_AUTO_MAILING_LIST).getAttribute("value");
		logger.info("PO Auto mailing list : " + poAutoMailingList);

		return poAutoMailingList;
	}

	@Override
	public Integer getPODeliveryDateInterval(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ScreenShot.screenshot(driver, testCaseName, "PO delivery date interval");

		String poDeliveryDate_Interval = ActionBot.findElement(driver, EPROC_PURCHASE_ORDER_DELV_DATE_INTERVAL).getAttribute("value");
		logger.info("PO Delivery Date interval : " + poDeliveryDate_Interval);

		return Integer.parseInt(poDeliveryDate_Interval);
	}

	@Override
	public String getPOName(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ScreenShot.screenshot(driver, testCaseName, "After changing PO Name format");

		String poNameForAutoPO = ActionBot.getTextWithInElement(driver, EPROC_PURCHASE_ORDER_AUTO_NAME_FORMAT);
		logger.info("PO Name format : " + poNameForAutoPO);

		return poNameForAutoPO;
	}

	@Override
	public String getPONumberFormat(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ScreenShot.screenshot(driver, testCaseName, "PO number format");
		String poNumber_format = ActionBot.getTextWithInElement(driver, EPROC_PURCHASE_ORDER_FORMAT);
		logger.info("PO number format : " + poNumber_format);

		return poNumber_format;
	}

	@Override
	public String getReleaseOrdersImmediately_Option(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ScreenShot.screenshot(driver, testCaseName, "Release orders immediately selected option");
		if (ActionBot.isElementSelected(driver, RELEASE_ORDERS_IMMEADIATELY_YES))
		{
			return YES;
		}
		else
		{
			return NO;
		}
	}

	@Override
	public Integer getReleasePOAutomaticParkValue(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ScreenShot.screenshot(driver, testCaseName, "After changing Purchase order automatic park value");

		String park_value = ActionBot.findElement(driver, EPROC_PURCHASE_ORDER_AUTOMATIC_PARK_VALUE_control_DAYS).getAttribute("value");
		logger.info("Purchase order automatic park value : " + park_value);

		return Integer.parseInt(park_value);
	}

	@Override
	public String getRequiredPOApprovalWhenPOTotalExceedsOption(WebDriver driver, String testCaseName) throws ActionBotException
	{
		if (ActionBot.isElementSelected(driver, REQUIRED_PO_APPROVAL_WHEN_PO_TOTAL_EXCEEDS_SMALLER))
		{
			return SMALLER;
		}
		else
		{
			return LARGER;
		}
	}

	@Override
	public Integer getRequiredPOApprovalWhenPOTotalExceedsUnitPricePer(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ScreenShot.screenshot(driver, testCaseName, "Exceeded Unit Price per");

		String exceedUnitPricePer = ActionBot.findElement(driver, REQUIRED_PO_APPROVAL_WHEN_PO_TOTAL_EXCEEDS_UNIT_PRICE_PER).getAttribute("value");
		logger.info("Exceeded Unit price per : " + exceedUnitPricePer);
		return Integer.parseInt(exceedUnitPricePer);
	}

	@Override
	public Integer getRequiredPOApprovalWhenPOTotalExceedsUnitPricePerAmount(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ScreenShot.screenshot(driver, testCaseName, "Exceeded Unit Price per Amount");

		String exceedUnitPricePerAmount = ActionBot.findElement(driver, REQUIRED_PO_APPROVAL_WHEN_PO_TOTAL_EXCEEDS_UNIT_PRICE_AMOUNT).getAttribute("value");
		logger.info("Exceeded Unit price per Amount : " + exceedUnitPricePerAmount);
		return Integer.parseInt(exceedUnitPricePerAmount);
	}

	@Override
	public String getSelectedDefaultDeliveryTerms(WebDriver driver, String testCaseName) throws ActionBotException
	{
		Select select = new Select(ActionBot.findElement(driver, EPROC_PURCHASE_ORDER_DEFAULT_DELIVERY_TERM));
		ScreenShot.screenshot(driver, testCaseName, "After selecting default delivery term for PO");

		String defaultDeliveryTerm = select.getFirstSelectedOption().getText().trim();
		logger.info("Selected defualt delivery term : " + defaultDeliveryTerm);
		return defaultDeliveryTerm;
	}

	@Override
	public String getSelectedLevelToUsePONumberFormat(WebDriver driver, String testCaseName) throws ActionBotException
	{
		Select select = new Select(ActionBot.findElement(driver, EPROC_PURCHASE_ORDER_NUMBER_FORMAT_LEVEL));
		ScreenShot.screenshot(driver, testCaseName, "After selecting level to use PO number format");

		String poNumberFormat_Level = select.getFirstSelectedOption().getText().trim();
		logger.info("Level to use PO number format" + poNumberFormat_Level);
		return poNumberFormat_Level;
	}

	@Override
	public String getSelectedReleasePOAutomaticParkTypeOption(WebDriver driver, String testCaseName) throws ActionBotException
	{
		Select select = new Select(ActionBot.findElement(driver, EPROC_PURCHASE_ORDER_AUTOMATIC_PARK_TYPE));

		ScreenShot.screenshot(driver, testCaseName, "Selected Purchase order automatic Park type");

		String park_type = select.getFirstSelectedOption().getText().trim();
		logger.info("Selected Purchase order automatic park type : " + park_type);

		return park_type;
	}

	@Override
	public Integer getSequenceNumberEndsAt(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ScreenShot.screenshot(driver, testCaseName, "Sequence number ends at");

		String sequenceNo_EndsAt = ActionBot.getTextWithInElement(driver, EPROC_PURCHASE_ORDER_SEQUENCE_NO_ENDS_AT);
		logger.info("Sequence number ends at : " + sequenceNo_EndsAt);

		return Integer.parseInt(sequenceNo_EndsAt);
	}

	@Override
	public Integer getSequenceNumberStartsAt(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ScreenShot.screenshot(driver, testCaseName, "After changing sequence number starts at");

		String sequenceNo_StartsAt = ActionBot.getTextWithInElement(driver, EPROC_PURCHASE_ORDER_SEQUENCE_NO_STARTS_AT);
		logger.info("Changed sequence number starts at : " + sequenceNo_StartsAt);

		return Integer.parseInt(sequenceNo_StartsAt);
	}

	@Override
	public String getSupplierEmail(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ScreenShot.screenshot(driver, testCaseName, "Supplier email");

		String supplier_email = ActionBot.getTextWithInElement(driver, SELECTED_SUPPLIER_EMAIL);
		logger.info("Supplier Email : " + supplier_email);

		return supplier_email;
	}

	@Override
	public String getSupplierForPODeliveryViaOption(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ScreenShot.screenshot(driver, testCaseName, "Supplier for PO delivery via Option");
		if (ActionBot.isElementSelected(driver, SUPPLIER_FOR_PO_DELIVERY_VIA_EMAIL_ALL))
		{
			return ALL;
		}
		else if (ActionBot.isElementSelected(driver, SUPPLIER_FOR_PO_DELIVERY_VIA_EMAIL_NONE))
		{
			return NONE;
		}
		else
		{
			return SELECT;
		}
	}

	@Override
	public boolean isEditableSupplierDeliveryTerms(WebDriver driver, String testCaseName) throws ActionBotException
	{
		if (ActionBot.isElementPresent(driver, ALLOW_TO_CHANGE_DEFAULT_SUPPLIER_DELIVERY_TERMS_ON_PO_YES))
		{
			boolean enabled = ActionBot.findElement(driver, ALLOW_TO_CHANGE_DEFAULT_SUPPLIER_DELIVERY_TERMS_ON_PO_YES).isEnabled();
			return enabled;
		}
		return false;
	}

	@Override
	public boolean isEditableSupplierPaymentTerms(WebDriver driver, String testCaseName) throws ActionBotException
	{
		if (ActionBot.isElementPresent(driver, ALLOW_TO_CHANGE_DEFAULT_SUPPLIER_PAYMENT_TERMS_ON_PO_YES))
		{
			boolean enabled = ActionBot.findElement(driver, ALLOW_TO_CHANGE_DEFAULT_SUPPLIER_PAYMENT_TERMS_ON_PO_YES).isEnabled();
			return enabled;
		}
		return false;
	}

	@Override
	public String selectDefaultDeliveryTerms(WebDriver driver, String testCaseName, String deliveryTermToBeSelected) throws ActionBotException
	{
		Select select = new Select(ActionBot.findElement(driver, EPROC_PURCHASE_ORDER_DEFAULT_DELIVERY_TERM));
		select.selectByVisibleText(deliveryTermToBeSelected);
		ScreenShot.screenshot(driver, testCaseName, "After selecting default delivery term for PO");

		String defaultDeliveryTerm = select.getFirstSelectedOption().getText().trim();
		logger.info("Selected defualt delivery term : " + defaultDeliveryTerm);
		return defaultDeliveryTerm;
	}

	@Override
	public String selectDisplayLimitationOfPurchaseOrder(WebDriver driver, String testCaseName, String displayLimitation) throws ActionBotException
	{
		String display_Limitation;

		Select select = new Select(ActionBot.findElement(driver, DISPLAY_OF_PURCHASE_ORDER));
		select.selectByVisibleText(displayLimitation);

		ScreenShot.screenshot(driver, testCaseName, "After selecting display limiation of PO");

		display_Limitation = select.getFirstSelectedOption().getText().trim();
		logger.info("Display of Purchase Orders should be limited to:" + display_Limitation);

		return display_Limitation;
	}

	@Override
	public String selectLevelToUsePONumberFormat(WebDriver driver, String testCaseName, String poNumberFormatLevel) throws ActionBotException
	{
		Select select = new Select(ActionBot.findElement(driver, EPROC_PURCHASE_ORDER_NUMBER_FORMAT_LEVEL));
		select.selectByVisibleText(poNumberFormatLevel);
		ScreenShot.screenshot(driver, testCaseName, "After selecting level to use PO number format");

		String poNumberFormat_Level = select.getFirstSelectedOption().getText().trim();
		logger.info("Level to use PO number format" + poNumberFormat_Level);
		return poNumberFormat_Level;

	}

	@Override
	public String selectReleasePOAutomaticParkType(WebDriver driver, String testCaseName, String parkType) throws ActionBotException
	{
		Select select = new Select(ActionBot.findElement(driver, EPROC_PURCHASE_ORDER_AUTOMATIC_PARK_TYPE));
		select.selectByVisibleText(parkType);
		ScreenShot.screenshot(driver, testCaseName, "After selecting Purchase order automatic Park type");

		String park_type = select.getFirstSelectedOption().getText().trim();
		logger.info("Selected Purchase order automatic park type : " + park_type);

		return park_type;

	}

	@Override
	public boolean clickOnAllowModificationOfItemClassificationCode_No(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, ALLOW_MODIFICATION_OF_ITEM_CLASSIFICATION_CODE_NO);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on Allow modification of item classification code No");

		return ActionBot.isElementSelected(driver, ALLOW_MODIFICATION_OF_ITEM_CLASSIFICATION_CODE_NO);
	}

	@Override
	public boolean clickOnAllowToChangeDefaultSupplierCurrencyOnPO_No(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, ALLOW_TO_CHANGE_DEFAULT_SUPPLIER_CURRENCY_ON_PO_NO);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on allow to change default supplier currency on PO No");

		return ActionBot.isElementSelected(driver, ALLOW_TO_CHANGE_DEFAULT_SUPPLIER_CURRENCY_ON_PO_NO);
	}

	@Override
	public void clickOnSendPOToSupplierForRetrospectivePurchase_YES(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ScreenShot.screenshot(driver, testCaseName, "Before clicking on YES for restrospective purchase");
		ActionBot.click(driver, SEND_PO_TO_SUPPLIER_FOR_RETROSPECTIVE_PURCHASE_ALWAYS);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on YES for restrospective purchase");

	}

	@Override
	public void clickOnSendPOToSupplierForRetrospectivePurchase_NO(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ScreenShot.screenshot(driver, testCaseName, "Before clicking on NO for restrospective purchase");
		ActionBot.click(driver, SEND_PO_TO_SUPPLIER_FOR_RETROSPECTIVE_PURCHASE_NEVER);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on NO for restrospective purchase");

	}

	@Override
	public void clickOnSendPOToSupplierForRetrospectivePurchase_USER_DECIDE(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ScreenShot.screenshot(driver, testCaseName, "Before clicking on USER DECIDE for restrospective purchase");
		ActionBot.click(driver, SEND_PO_TO_SUPPLIER_FOR_RETROSPECTIVE_PURCHASE_USER_DECIDE);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on USER DECIDE for restrospective purchase");

	}

	@Override
	public void clickOnBPOAuthTypeReleaseOrder(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ScreenShot.screenshot(driver, testCaseName, "Before clicking on BPO_AUTH_TYPE_RELEASE_ORDER for BPO");
		ActionBot.click(driver, RADIO_BUTTON_BPO_AUTH_TYPE_RELEASE_ORDER);
		ActionBot.defaultSleep();
		ScreenShot.screenshot(driver, testCaseName, "After clicking on BPO_AUTH_TYPE_RELEASE_ORDER for BPO");
	}

	@Override
	public void clickOnBPOAuthTypeDirectInvoicicng(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ScreenShot.screenshot(driver, testCaseName, "Before clicking on BPO_AUTH_TYPE_DIRECT_INVOICING for BPO");
		ActionBot.click(driver, RADIO_BUTTON_BPO_AUTH_TYPE_DIRECT_INVOICING);
		ActionBot.defaultSleep();
		ScreenShot.screenshot(driver, testCaseName, "After clicking on BPO_AUTH_TYPE_DIRECT_INVOICING for BPO");
	}

	@Override
	public void clickOnBPOAuthTypeLetUserDecide(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ScreenShot.screenshot(driver, testCaseName, "Before clicking on BPO_AUTH_TYPE_LET_USER_DECIDE for BPO");
		ActionBot.click(driver, RADIO_BUTTON_BPO_AUTH_TYPE_LET_USER_DECIDE);
		ActionBot.defaultSleep();
		ScreenShot.screenshot(driver, testCaseName, "After clicking on BPO_AUTH_TYPE_LET_USER_DECIDE for BPO");
	}

	@Override
	public void clickOnSendBPOWithReleaseOrderYes(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, RADIO_BUTTON_SEND_BPO_WITH_RELEASE_ORDER_YES);
	}

	@Override
	public void clickOnSendBPOWithReleaseOrderNo(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, RADIO_BUTTON_SEND_BPO_WITH_RELEASE_ORDER_NO);
	}

}
