/**
 * 
 */
package com.zycus.automation.eproc.pageobjects.pages.settings.purchaseordersettings;

import org.apache.log4j.Logger;
import org.openqa.selenium.WebDriver;

import com.zycus.automation.eproc.pageobjects.pages.FactoryPage;
import com.zycus.automation.exception.ActionBotException;
import com.zycus.automation.exception.FactoryMethodException;

/**
 * @author ankita.sawant
 *
 */
public class PagePurchaseOrderSetting
{

	static Logger logger = Logger.getLogger(PagePurchaseOrderSetting.class);

	public static boolean clickAllowchangingDeliveryTermsOnBPORelease_No(WebDriver driver, String testCaseName) throws ActionBotException
	{
		boolean result = false;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.clickAllowchangingDeliveryTermsOnBPORelease_No(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickAllowchangingDeliveryTermsOnBPORelease_No " + e, e);
		}
		return result;
	}

	public static boolean clickAllowchangingDeliveryTermsOnBPORelease_Yes(WebDriver driver, String testCaseName) throws ActionBotException
	{
		boolean result = false;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.clickAllowchangingDeliveryTermsOnBPORelease_Yes(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickAllowchangingDeliveryTermsOnBPORelease_Yes " + e, e);
		}
		return result;
	}

	public static boolean clickOnAllowChangingPaymentTermsOnRelease_No(WebDriver driver, String testCaseName) throws ActionBotException
	{
		boolean result = false;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.clickOnAllowChangingPaymentTermsOnRelease_No(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickOnAllowChangingPaymentTermsOnRelease_No " + e, e);
		}
		return result;
	}

	public static boolean clickOnAllowChangingPaymentTermsOnRelease_Yes(WebDriver driver, String testCaseName) throws ActionBotException
	{
		boolean result = false;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.clickOnAllowChangingPaymentTermsOnRelease_Yes(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickOnAllowChangingPaymentTermsOnRelease_Yes " + e, e);
		}
		return result;
	}

	public static boolean clickOnAllowEditingAutoGeneratedPONumber_No(WebDriver driver, String testCaseName) throws ActionBotException
	{
		boolean result = false;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.clickOnAllowEditingAutoGeneratedPONumber_No(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickOnAllowEditingAutoGeneratedPONumber_No " + e, e);
		}
		return result;
	}

	public static boolean clickOnAllowEditingAutoGeneratedPONumber_Yes(WebDriver driver, String testCaseName) throws ActionBotException
	{
		boolean result = false;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.clickOnAllowEditingAutoGeneratedPONumber_Yes(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickOnAllowEditingAutoGeneratedPONumber_Yes " + e, e);
		}
		return result;
	}

	public static boolean clickOnAllowEmailingPOToOtherThanSupplierPOContact_No(WebDriver driver, String testCaseName) throws ActionBotException
	{
		boolean result = false;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.clickOnAllowEmailingPOToOtherThanSupplierPOContact_No(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickOnAllowEmailingPOToOtherThanSupplierPOContact_No " + e, e);
		}
		return result;
	}

	public static boolean clickOnAllowEmailingPOToOtherThanSupplierPOContact_Yes(WebDriver driver, String testCaseName) throws ActionBotException
	{
		boolean result = false;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.clickOnAllowEmailingPOToOtherThanSupplierPOContact_Yes(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickOnAllowEmailingPOToOtherThanSupplierPOContact_Yes " + e, e);
		}
		return result;
	}

	public static boolean clickOnAllowEmailingPOToUsersOutsideCompany_No(WebDriver driver, String testCaseName) throws ActionBotException
	{
		boolean result = false;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.clickOnAllowEmailingPOToUsersOutsideCompany_No(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickOnAllowEmailingPOToUsersOutsideCompany_No " + e, e);
		}
		return result;
	}

	public static boolean clickOnAllowEmailingPOToUsersOutsideCompany_Yes(WebDriver driver, String testCaseName) throws ActionBotException
	{
		boolean result = false;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.clickOnAllowEmailingPOToUsersOutsideCompany_Yes(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickOnAllowEmailingPOToUsersOutsideCompany_Yes " + e, e);
		}
		return result;
	}

	public static boolean clickOnAllowManualOrdersReleasedWithoutDeliveryDate_No(WebDriver driver, String testCaseName) throws ActionBotException
	{
		boolean result = false;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.clickOnAllowManualOrdersReleasedWithoutDeliveryDate_No(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickOnAllowManualOrdersReleasedWithoutDeliveryDate_No " + e, e);
		}
		return result;
	}

	public static boolean clickOnAllowManualOrdersReleasedWithoutDeliveryDate_Yes(WebDriver driver, String testCaseName) throws ActionBotException
	{
		boolean result = false;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.clickOnAllowManualOrdersReleasedWithoutDeliveryDate_Yes(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickOnAllowManualOrdersReleasedWithoutDeliveryDate_Yes " + e, e);
		}
		return result;
	}

	public static boolean isPOAmmendingLimitationOnItemUnitPricePresent(WebDriver driver, String testCaseName) throws ActionBotException
	{
		boolean result = false;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.isPOAmmendingLimitationOnItemUnitPricePresent(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory method Exception in method isPOAmmendingLimitationOnItemUnitPricePresent" + e, e);

		}
		return result;
	}

	public static boolean clickOnAllowModificationOfItemClassificationCode_Yes(WebDriver driver, String testCaseName) throws ActionBotException
	{
		boolean result = false;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.clickOnAllowModificationOfItemClassificationCode_Yes(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickOnAllowModificationOfItemClassificationCode_Yes " + e, e);
		}
		return result;
	}

	public static boolean isPOAmmendingLimitationOnItemQuantityPresent(WebDriver driver, String testCaseName) throws ActionBotException
	{
		boolean result = false;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.isPOAmmendingLimitationOnItemQuantityPresent(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory method Exception in method isPOAmmendingLimitationOnItemQuantityPresent" + e, e);

		}
		return result;
	}

	public static boolean clickOnAllowToChangeDefaultSupplierCurrencyOnPO_Yes(WebDriver driver, String testCaseName) throws ActionBotException
	{
		boolean result = false;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.clickOnAllowToChangeDefaultSupplierCurrencyOnPO_Yes(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickOnAllowToChangeDefaultSupplierCurrencyOnPO_Yes " + e, e);
		}
		return result;
	}

	public static boolean clickOnAllowToChangeDefaultSupplierDeliveryTermsOnPO_No(WebDriver driver, String testCaseName) throws ActionBotException
	{
		boolean result = false;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.clickOnAllowToChangeDefaultSupplierDeliveryTermsOnPO_No(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickOnAllowToChangeDefaultSupplierDeliveryTermsOnPO_No " + e, e);
		}
		return result;
	}

	public static boolean clickOnAllowToChangeDefaultSupplierDeliveryTermsOnPO_Yes(WebDriver driver, String testCaseName) throws ActionBotException
	{
		boolean result = false;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.clickOnAllowToChangeDefaultSupplierDeliveryTermsOnPO_Yes(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickOnAllowToChangeDefaultSupplierDeliveryTermsOnPO_Yes " + e, e);
		}
		return result;
	}

	public static boolean clickOnAllowToChangeDefaultSupplierPaymentTermsOnPO_No(WebDriver driver, String testCaseName) throws ActionBotException
	{
		boolean result = false;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.clickOnAllowToChangeDefaultSupplierPaymentTermsOnPO_No(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickOnAllowToChangeDefaultSupplierPaymentTermsOnPO_No " + e, e);
		}
		return result;
	}

	public static boolean clickOnAllowToChangeDefaultSupplierPaymentTermsOnPO_Yes(WebDriver driver, String testCaseName) throws ActionBotException
	{
		boolean result = false;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.clickOnAllowToChangeDefaultSupplierPaymentTermsOnPO_Yes(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickOnAllowToChangeDefaultSupplierPaymentTermsOnPO_Yes " + e, e);
		}
		return result;
	}

	public static boolean clickOnAutoGenerateLineItemNumbersOnPO_No(WebDriver driver, String testCaseName) throws ActionBotException
	{
		boolean result = false;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.clickOnAutoGenerateLineItemNumbersOnPO_No(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickOnAutoGenerateLineItemNumbersOnPO_No " + e, e);
		}
		return result;
	}

	public static boolean clickOnAutoGenerateLineItemNumbersOnPO_Yes(WebDriver driver, String testCaseName) throws ActionBotException
	{
		boolean result = false;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.clickOnAutoGenerateLineItemNumbersOnPO_Yes(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickOnAutoGenerateLineItemNumbersOnPO_Yes " + e, e);
		}
		return result;
	}

	public static boolean clickOnAutomaticallyGeneratePO_No(WebDriver driver, String testCaseName) throws ActionBotException
	{
		boolean result = false;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.clickOnAutomaticallyGeneratePO_No(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickOnAutomaticallyGeneratePO_No " + e, e);
		}
		return result;
	}

	public static boolean clickOnAutomaticallyGeneratePO_Yes(WebDriver driver, String testCaseName) throws ActionBotException
	{
		boolean result = false;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.clickOnAutomaticallyGeneratePO_Yes(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickOnAutomaticallyGeneratePO_Yes " + e, e);
		}
		return result;
	}

	public static boolean clickOnBPOAmountIncreasedUptoLarger(WebDriver driver, String testCaseName) throws ActionBotException
	{
		boolean result = false;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.clickOnBPOAmountIncreasedUptoLarger(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickOnBPOAmountIncreasedUptoLarger " + e, e);
		}
		return result;
	}

	public static boolean clickOnBPOAmountIncreasedUptoSmaller(WebDriver driver, String testCaseName) throws ActionBotException
	{
		boolean result = false;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.clickOnBPOAmountIncreasedUptoSmaller(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickOnBPOAmountIncreasedUptoSmaller " + e, e);
		}
		return result;
	}

	public static boolean clickOnCancelButton(WebDriver driver, String testCaseName) throws ActionBotException
	{
		boolean result = false;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.clickOnCancelButton(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickOnCancelButton " + e, e);
		}
		return result;
	}

	public static boolean clickOnHoldInvoiceDifferentPaymentTerm_No(WebDriver driver, String testCaseName) throws ActionBotException
	{
		boolean result = false;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.clickOnHoldInvoiceDifferentPaymentTerm_No(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickOnHoldInvoiceDifferentPaymentTerm_No " + e, e);
		}
		return result;
	}

	public static boolean clickOnHoldInvoiceDifferentPaymentTerm_Yes(WebDriver driver, String testCaseName) throws ActionBotException
	{
		boolean result = false;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.clickOnHoldInvoiceDifferentPaymentTerm_Yes(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickOnHoldInvoiceDifferentPaymentTerm_Yes " + e, e);
		}
		return result;
	}

	public static boolean clickOnReleaseOrdersImmediately_No(WebDriver driver, String testCaseName) throws ActionBotException
	{
		boolean result = false;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.clickOnReleaseOrdersImmediately_No(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickOnReleaseOrdersImmediately_No " + e, e);
		}
		return result;
	}

	public static boolean clickOnReleaseOrdersImmediately_Yes(WebDriver driver, String testCaseName) throws ActionBotException
	{
		boolean result = false;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.clickOnReleaseOrdersImmediately_Yes(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickOnReleaseOrdersImmediately_Yes " + e, e);
		}
		return result;
	}

	public static boolean clickOnRequiredPOApprovalWhenPOTotalExceedsLarger(WebDriver driver, String testCaseName) throws ActionBotException
	{
		boolean result = false;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.clickOnRequiredPOApprovalWhenPOTotalExceedsLarger(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickOnRequiredPOApprovalWhenPOTotalExceedsLarger " + e, e);
		}
		return result;
	}

	public static boolean clickOnRequiredPOApprovalWhenPOTotalExceedsSmaller(WebDriver driver, String testCaseName) throws ActionBotException
	{
		boolean result = false;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.clickOnRequiredPOApprovalWhenPOTotalExceedsSmaller(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickOnRequiredPOApprovalWhenPOTotalExceedsSmaller " + e, e);
		}
		return result;
	}

	public static boolean isRequiredPOApprovalWhenPOTotalExceedsCertainAmountOrPercentagePresent(WebDriver driver, String testCaseName) throws ActionBotException
	{
		boolean result = false;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.isRequiredPOApprovalWhenPOTotalExceedsCertainAmountOrPercentagePresent(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method isRequiredPOApprovalWhenPOTotalExceedsCertainAmountOrPercentagePresent " + e, e);
		}
		return result;
	}

	public static boolean clickOnWeekdayForAutomaticReleasePO(WebDriver driver, String testCaseName, int index) throws ActionBotException
	{
		boolean result = false;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.clickOnWeekdayForAutomaticReleasePO(driver, testCaseName, index);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickOnWeekdayForAutomaticReleasePO " + e, e);
		}
		return result;
	}

	public static boolean clickOnSaveButton(WebDriver driver, String testCaseName) throws ActionBotException
	{
		boolean result = false;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.clickOnSaveButton(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickOnSaveButton " + e, e);
		}
		return result;
	}

	public static boolean clickOnSupplierForPODeliveryViaEmailAll(WebDriver driver, String testCaseName) throws ActionBotException
	{
		boolean result = false;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.clickOnSupplierForPODeliveryViaEmailAll(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickOnSupplierForPODeliveryViaEmailAll " + e, e);
		}
		return result;
	}

	public static boolean clickSupplierForPODeliveryViaEmailNone(WebDriver driver, String testCaseName) throws ActionBotException
	{
		boolean result = false;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.clickSupplierForPODeliveryViaEmailNone(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickSupplierForPODeliveryViaEmailNone " + e, e);
		}
		return result;
	}

	public static boolean clickSupplierForPODeliveryViaEmailSelect(WebDriver driver, String testCaseName) throws ActionBotException
	{
		boolean result = false;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.clickSupplierForPODeliveryViaEmailSelect(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickSupplierForPODeliveryViaEmailSelect " + e, e);
		}
		return result;
	}

	public static Integer fillBPOExceedsPerAmount(WebDriver driver, String testCaseName, int exceedPerAmount) throws ActionBotException
	{
		int result = 0;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.fillBPOExceedsPerAmount(driver, testCaseName, exceedPerAmount);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method fillBPOExceedsPerAmount " + e, e);
		}
		return result;
	}

	public static Integer fillBPOIncreaseValidityWithoutApproval(WebDriver driver, String testCaseName, int increaseValidity) throws ActionBotException
	{
		int result = 0;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.fillBPOIncreaseValidityWithoutApproval(driver, testCaseName, increaseValidity);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method fillBPOIncreaseValidityWithoutApproval " + e, e);
		}
		return result;
	}

	public static Integer fillBPOTotalExceedsPer(WebDriver driver, String testCaseName, int exceedsPer) throws ActionBotException
	{
		int result = 0;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.fillBPOTotalExceedsPer(driver, testCaseName, exceedsPer);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method fillBPOTotalExceedsPer " + e, e);
		}
		return result;
	}

	public static String fillDefaultBuyerForAutoPO(WebDriver driver, String testCaseName, String buyerName) throws ActionBotException
	{
		String result = null;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.fillDefaultBuyerForAutoPO(driver, testCaseName, buyerName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method fillDefaultBuyerForAutoPO " + e, e);
		}
		return result;
	}

	public static String fillDefaultPurchseTermsAndConditions(WebDriver driver, String testCaseName, String purchaseTermsAndConditions) throws ActionBotException
	{
		String result = null;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.fillDefaultPurchseTermsAndConditions(driver, testCaseName, purchaseTermsAndConditions);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method fillDefaultPurchseTermsAndConditions " + e, e);
		}
		return result;
	}

	public static Integer fillPOAmendingLimiationOnItemQuantity(WebDriver driver, String testCaseName, int limitedItemQuantity) throws ActionBotException
	{
		int result = 0;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.fillPOAmendingLimiationOnItemQuantity(driver, testCaseName, limitedItemQuantity);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method fillPOAmendingLimiationOnItemQuantity " + e, e);
		}
		return result;
	}

	public static Integer fillPOAmendingLimiationOnItemUnitPrice(WebDriver driver, String testCaseName, int limitedItemUnitPrice) throws ActionBotException
	{
		int result = 0;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.fillPOAmendingLimiationOnItemUnitPrice(driver, testCaseName, limitedItemUnitPrice);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method fillPOAmendingLimiationOnItemUnitPrice " + e, e);
		}
		return result;
	}

	public static String fillPOAutoMailingList(WebDriver driver, String testCaseName, String mailingName) throws ActionBotException
	{
		String result = null;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.fillPOAutoMailingList(driver, testCaseName, mailingName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method getPODeliveryDateInterval " + e, e);
		}
		return result;
	}

	public static Integer fillPODeliveryDateInterval(WebDriver driver, String testCaseName, int poDeliveryDateInterval) throws ActionBotException
	{
		int result = 0;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.fillPODeliveryDateInterval(driver, testCaseName, poDeliveryDateInterval);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method fillPODeliveryDateInterval " + e, e);
		}
		return result;
	}

	public static String fillPOName(WebDriver driver, String testCaseName, String poName) throws ActionBotException
	{
		String result = null;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.fillPOName(driver, testCaseName, poName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method fillPOName " + e, e);
		}
		return result;
	}

	public static String fillPONumberFormat(WebDriver driver, String testCaseName, String poNumberFormat) throws ActionBotException
	{
		String result = null;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.fillPONumberFormat(driver, testCaseName, poNumberFormat);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method fillPONumberFormat " + e, e);
		}
		return result;
	}

	public static Integer fillReleasePOAutomaticParkValue(WebDriver driver, String testCaseName, int parkValue) throws ActionBotException
	{
		int result = 0;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.fillReleasePOAutomaticParkValue(driver, testCaseName, parkValue);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method fillReleasePOAutomaticParkValue " + e, e);
		}
		return result;
	}

	public static Integer fillRequiredPOApprovalWhenPOTotalExceedsUnitPricePer(WebDriver driver, String testCaseName, int exceedUnitPricePer) throws ActionBotException
	{
		int result = 0;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.fillRequiredPOApprovalWhenPOTotalExceedsUnitPricePer(driver, testCaseName, exceedUnitPricePer);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method fillRequiredPOApprovalWhenPOTotalExceedsUnitPricePer " + e, e);
		}
		return result;
	}

	public static Integer fillRequiredPOApprovalWhenPOTotalExceedsUnitPricePerAmount(WebDriver driver, String testCaseName, int exceedUnitPricePerAmount) throws ActionBotException
	{
		int result = 0;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.fillRequiredPOApprovalWhenPOTotalExceedsUnitPricePerAmount(driver, testCaseName, exceedUnitPricePerAmount);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method fillRequiredPOApprovalWhenPOTotalExceedsUnitPricePerAmount " + e, e);
		}
		return result;
	}

	public static Integer fillSequenceNumberEndsAt(WebDriver driver, String testCaseName, int sequenceNoEndsAt) throws ActionBotException
	{
		int result = 0;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.fillSequenceNumberEndsAt(driver, testCaseName, sequenceNoEndsAt);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method fillSequenceNumberEndsAt " + e, e);
		}
		return result;
	}

	public static Integer fillSequenceNumberStartsAt(WebDriver driver, String testCaseName, int sequenceNoStartsAt) throws ActionBotException
	{
		int result = 0;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.fillSequenceNumberStartsAt(driver, testCaseName, sequenceNoStartsAt);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method fillSequenceNumberStartsAt " + e, e);
		}
		return result;
	}

	public static String fillSupplierEmail(WebDriver driver, String testCaseName, String supplierEmail) throws ActionBotException
	{
		String result = null;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.fillSupplierEmail(driver, testCaseName, supplierEmail);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method fillSupplierEmail " + e, e);
		}
		return result;
	}

	public static String getAllowchangingDeliveryTermsOnBPORelease_option(WebDriver driver, String testCaseName) throws ActionBotException
	{
		String result = null;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.getAllowchangingDeliveryTermsOnBPORelease_option(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method getAllowchangingDeliveryTermsOnBPORelease_option " + e, e);
		}
		return result;
	}

	public static String getAllowChangingPaymentTermsOnRelease_option(WebDriver driver, String testCaseName) throws ActionBotException
	{
		String result = null;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.getAllowChangingPaymentTermsOnRelease_option(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method getAllowChangingPaymentTermsOnRelease_option " + e, e);
		}
		return result;
	}

	public static String getAllowEditingAutoGeneratedPONumber_Option(WebDriver driver, String testCaseName) throws ActionBotException
	{
		String result = null;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.getAllowEditingAutoGeneratedPONumber_Option(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method getAllowEditingAutoGeneratedPONumber_Option " + e, e);
		}
		return result;
	}

	public static String getAllowEmailingPOToOtherThanSupplierPOContact_Option(WebDriver driver, String testCaseName) throws ActionBotException
	{
		String result = null;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.getAllowEmailingPOToOtherThanSupplierPOContact_Option(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method getAllowEmailingPOToOtherThanSupplierPOContact_Option " + e, e);
		}
		return result;
	}

	public static String getAllowEmailingPOToUsersOutsideCompany_Option(WebDriver driver, String testCaseName) throws ActionBotException
	{
		String result = null;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.getAllowEmailingPOToUsersOutsideCompany_Option(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method getAllowEmailingPOToUsersOutsideCompany_Option " + e, e);
		}
		return result;
	}

	public static String getAllowManualOrdersReleasedWithoutDeliveryDate_Option(WebDriver driver, String testCaseName) throws ActionBotException
	{
		String result = null;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.getAllowManualOrdersReleasedWithoutDeliveryDate_Option(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method getAllowManualOrdersReleasedWithoutDeliveryDate_Option " + e, e);
		}
		return result;
	}

	public static String getAllowModificationOfItemClassificationCode_Option(WebDriver driver, String testCaseName) throws ActionBotException
	{
		String result = null;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.getAllowModificationOfItemClassificationCode_Option(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method getAllowModificationOfItemClassificationCode_Option " + e, e);
		}
		return result;
	}

	public static String getAllowToChangeDefaultSupplierCurrencyOnPO_Option(WebDriver driver, String testCaseName) throws ActionBotException
	{
		String result = null;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.getAllowToChangeDefaultSupplierCurrencyOnPO_Option(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method getAllowToChangeDefaultSupplierCurrencyOnPO_Option " + e, e);
		}
		return result;
	}

	public static String getAllowToChangeDefaultSupplierDeliveryTermsOnPO_Option(WebDriver driver, String testCaseName) throws ActionBotException
	{
		String result = null;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.getAllowToChangeDefaultSupplierDeliveryTermsOnPO_Option(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method getAllowToChangeDefaultSupplierDeliveryTermsOnPO_Option " + e, e);
		}
		return result;
	}

	public static String getAllowToChangeDefaultSupplierPaymentTermsOnPO_Option(WebDriver driver, String testCaseName) throws ActionBotException
	{
		String result = null;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.getAllowToChangeDefaultSupplierPaymentTermsOnPO_Option(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method getAllowToChangeDefaultSupplierPaymentTermsOnPO_Option " + e, e);
		}
		return result;
	}

	public static String getAutoGenerateLineItemNumbersOnPO_Option(WebDriver driver, String testCaseName) throws ActionBotException
	{
		String result = null;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.getAutoGenerateLineItemNumbersOnPO_Option(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method getAutoGenerateLineItemNumbersOnPO_Option " + e, e);
		}
		return result;
	}

	public static String getAutomaticallyGeneratePO_option(WebDriver driver, String testCaseName) throws ActionBotException
	{
		String result = null;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.getAutomaticallyGeneratePO_option(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method getAutomaticallyGeneratePO_option " + e, e);
		}
		return result;
	}

	public static String getBPOAmountIncreasedUpto_Option(WebDriver driver, String testCaseName) throws ActionBotException
	{
		String result = null;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.getBPOAmountIncreasedUpto_Option(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method getBPOAmountIncreasedUpto_Option " + e, e);
		}
		return result;
	}

	public static Integer getBPOExceedsPer(WebDriver driver, String testCaseName) throws ActionBotException
	{
		int result = 0;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.getBPOExceedsPer(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method getBPOExceedsPer " + e, e);
		}
		return result;
	}

	public static Integer getBPOExceedsPerAmount(WebDriver driver, String testCaseName) throws ActionBotException
	{
		int result = 0;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.getBPOExceedsPerAmount(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method getBPOExceedsPerAmount " + e, e);
		}
		return result;
	}

	public static Integer getBPOIncreaseValidityWithoutApproval(WebDriver driver, String testCaseName) throws ActionBotException
	{
		int result = 0;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.getBPOIncreaseValidityWithoutApproval(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method getBPOIncreaseValidityWithoutApproval " + e, e);
		}
		return result;
	}

	public static String getDefaultBuyerForAutoPO(WebDriver driver, String testCaseName) throws ActionBotException
	{
		String result = null;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.getDefaultBuyerForAutoPO(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method getDefaultBuyerForAutoPO " + e, e);
		}
		return result;
	}

	public static String getDefaultPurchseTermsAndConditions(WebDriver driver, String testCaseName) throws ActionBotException
	{
		String result = null;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.getDefaultPurchseTermsAndConditions(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method getDefaultPurchseTermsAndConditions " + e, e);
		}
		return result;
	}

	public static String getDisplayLimitationOfPurchaseOrder(WebDriver driver, String testCaseName) throws ActionBotException
	{
		String result = null;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.getDisplayLimitationOfPurchaseOrder(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method getDisplayLimitationOfPurchaseOrder " + e, e);
		}
		return result;
	}

	public static String getHoldInvoiceDifferentPaymentTerm_option(WebDriver driver, String testCaseName) throws ActionBotException
	{
		String result = null;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.getHoldInvoiceDifferentPaymentTerm_option(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method getHoldInvoiceDifferentPaymentTerm_option " + e, e);
		}
		return result;
	}

	public static Integer getPOAmendingLimiationOnItemQuantity(WebDriver driver, String testCaseName) throws ActionBotException
	{
		int result = 0;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.getPOAmendingLimiationOnItemQuantity(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method getPOAmendingLimiationOnItemQuantity " + e, e);
		}
		return result;
	}

	public static Integer getPOAmendingLimiationOnItemUnitPrice(WebDriver driver, String testCaseName) throws ActionBotException
	{
		int result = 0;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.getPOAmendingLimiationOnItemUnitPrice(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method getPOAmendingLimiationOnItemUnitPrice " + e, e);
		}
		return result;
	}

	public static String getPOAutoMailingList(WebDriver driver, String testCaseName) throws ActionBotException
	{
		String result = null;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.getPOAutoMailingList(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method getPOAutoMailingList " + e, e);
		}
		return result;
	}

	public static Integer getPODeliveryDateInterval(WebDriver driver, String testCaseName) throws ActionBotException
	{
		int result = 0;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.getPODeliveryDateInterval(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method getPODeliveryDateInterval " + e, e);
		}
		return result;
	}

	public static String getPOName(WebDriver driver, String testCaseName) throws ActionBotException
	{
		String result = null;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.getPOName(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method getPOName " + e, e);
		}
		return result;
	}

	public static String getPONumberFormat(WebDriver driver, String testCaseName) throws ActionBotException
	{
		String result = null;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.getPONumberFormat(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method getPONumberFormat " + e, e);
		}
		return result;
	}

	public static String getReleaseOrdersImmediately_Option(WebDriver driver, String testCaseName) throws ActionBotException
	{
		String result = null;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.getReleaseOrdersImmediately_Option(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method getReleaseOrdersImmediately_Option " + e, e);
		}
		return result;
	}

	public static Integer getReleasePOAutomaticParkValue(WebDriver driver, String testCaseName) throws ActionBotException
	{
		int result = 0;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.getReleasePOAutomaticParkValue(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method getReleasePOAutomaticParkValue " + e, e);
		}
		return result;
	}

	public static String getRequiredPOApprovalWhenPOTotalExceedsOption(WebDriver driver, String testCaseName) throws ActionBotException
	{
		String result = null;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.getRequiredPOApprovalWhenPOTotalExceedsOption(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method getRequiredPOApprovalWhenPOTotalExceedsOption " + e, e);
		}
		return result;
	}

	public static Integer getRequiredPOApprovalWhenPOTotalExceedsUnitPricePer(WebDriver driver, String testCaseName) throws ActionBotException
	{
		int result = 0;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.getRequiredPOApprovalWhenPOTotalExceedsUnitPricePer(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method getRequiredPOApprovalWhenPOTotalExceedsUnitPricePer " + e, e);
		}
		return result;
	}

	public static Integer getRequiredPOApprovalWhenPOTotalExceedsUnitPricePerAmount(WebDriver driver, String testCaseName) throws ActionBotException
	{
		int result = 0;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.getRequiredPOApprovalWhenPOTotalExceedsUnitPricePerAmount(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method getRequiredPOApprovalWhenPOTotalExceedsUnitPricePerAmount " + e, e);
		}
		return result;
	}

	public static String getSelectedDefaultDeliveryTerms(WebDriver driver, String testCaseName) throws ActionBotException
	{
		String result = null;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.getSelectedDefaultDeliveryTerms(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method getSelectedDefaultDeliveryTerms " + e, e);
		}
		return result;
	}

	public static String getSelectedLevelToUsePONumberFormat(WebDriver driver, String testCaseName) throws ActionBotException
	{
		String result = null;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.getSelectedLevelToUsePONumberFormat(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method getSelectedLevelToUsePONumberFormat " + e, e);
		}
		return result;
	}

	public static String getSelectedReleasePOAutomaticParkTypeOption(WebDriver driver, String testCaseName) throws ActionBotException
	{
		String result = null;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.getSelectedReleasePOAutomaticParkTypeOption(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method getSelectedReleasePOAutomaticParkTypeOption " + e, e);
		}
		return result;
	}

	public static Integer getSequenceNumberEndsAt(WebDriver driver, String testCaseName) throws ActionBotException
	{
		int result = 0;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.getSequenceNumberEndsAt(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method getSequenceNumberEndsAt " + e, e);
		}
		return result;
	}

	public static Integer getSequenceNumberStartsAt(WebDriver driver, String testCaseName) throws ActionBotException
	{
		int result = 0;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.getSequenceNumberStartsAt(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method getSequenceNumberStartsAt " + e, e);
		}
		return result;
	}

	public static String getSupplierEmail(WebDriver driver, String testCaseName) throws ActionBotException
	{
		String result = null;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.getSupplierEmail(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method getSupplierEmail " + e, e);
		}
		return result;
	}

	public static String getSupplierForPODeliveryViaOption(WebDriver driver, String testCaseName) throws ActionBotException
	{
		String result = null;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.getSupplierForPODeliveryViaOption(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method getSupplierForPODeliveryViaOption " + e, e);
		}
		return result;
	}

	public static boolean isEditableSupplierDeliveryTerms(WebDriver driver, String testCaseName) throws ActionBotException
	{
		boolean result = false;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.isEditableSupplierDeliveryTerms(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method isEditableSupplierDeliveryTerms " + e, e);
		}
		return result;
	}

	public static boolean isEditableSupplierPaymentTerms(WebDriver driver, String testCaseName) throws ActionBotException
	{
		boolean result = false;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.isEditableSupplierPaymentTerms(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method isEditableSupplierPaymentTerms " + e, e);
		}
		return result;
	}

	public static String selectDefaultDeliveryTerms(WebDriver driver, String testCaseName, String deliveryTermToBeSelected) throws ActionBotException
	{
		String result = null;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.selectDefaultDeliveryTerms(driver, testCaseName, deliveryTermToBeSelected);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method selectDefaultDeliveryTerms " + e, e);
		}
		return result;
	}

	public static String selectDisplayLimitationOfPurchaseOrder(WebDriver driver, String testCaseName, String displayLimitation) throws ActionBotException
	{
		String result = null;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.selectDisplayLimitationOfPurchaseOrder(driver, testCaseName, displayLimitation);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method selectDisplayLimitationOfPurchaseOrder " + e, e);
		}
		return result;
	}

	public static String selectLevelToUsePONumberFormat(WebDriver driver, String testCaseName, String poNumberFormatLevel) throws ActionBotException
	{
		String result = null;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.selectLevelToUsePONumberFormat(driver, testCaseName, poNumberFormatLevel);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method selectLevelToUsePONumberFormat " + e, e);
		}
		return result;
	}

	public static String selectReleasePOAutomaticParkType(WebDriver driver, String testCaseName, String parkType) throws ActionBotException
	{
		String result = null;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.selectReleasePOAutomaticParkType(driver, testCaseName, parkType);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method selectReleasePOAutomaticParkType " + e, e);
		}
		return result;
	}

	public static boolean clickOnAllowModificationOfItemClassificationCode_No(WebDriver driver, String testCaseName) throws ActionBotException
	{
		boolean result = false;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.clickOnAllowModificationOfItemClassificationCode_No(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickOnAllowModificationOfItemClassificationCode_No " + e, e);
		}
		return result;
	}

	public static boolean clickOnAllowToChangeDefaultSupplierCurrencyOnPO_No(WebDriver driver, String testCaseName) throws ActionBotException
	{
		boolean result = false;
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			result = purchaseOrderSettings.clickOnAllowToChangeDefaultSupplierCurrencyOnPO_No(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickOnAllowToChangeDefaultSupplierCurrencyOnPO_No " + e, e);
		}
		return result;
	}

	public static void clickOnSendPOToSupplierForRetrospectivePurchase_YES(WebDriver driver, String testCaseName) throws ActionBotException
	{
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			purchaseOrderSettings.clickOnSendPOToSupplierForRetrospectivePurchase_YES(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickOnSendPOToSupplierForRetrospectivePurchase_YES " + e, e);
		}
	}

	public static void clickOnSendPOToSupplierForRetrospectivePurchase_NO(WebDriver driver, String testCaseName) throws ActionBotException
	{
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			purchaseOrderSettings.clickOnSendPOToSupplierForRetrospectivePurchase_NO(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickOnSendPOToSupplierForRetrospectivePurchase_NO " + e, e);
		}
	}

	public static void clickOnSendPOToSupplierForRetrospectivePurchase_USER_DECIDE(WebDriver driver, String testCaseName) throws ActionBotException
	{
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			purchaseOrderSettings.clickOnSendPOToSupplierForRetrospectivePurchase_USER_DECIDE(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickOnSendPOToSupplierForRetrospectivePurchase_USER_DECIDE " + e, e);
		}
	}

	public static void clickOnBPOAuthTypeReleaseOrder(WebDriver driver, String testCaseName) throws ActionBotException
	{
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			purchaseOrderSettings.clickOnBPOAuthTypeReleaseOrder(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickOnBPOAuthTypeReleaseOrder " + e, e);
		}
	}

	public static void clickOnBPOAuthTypeDirectInvoicicng(WebDriver driver, String testCaseName) throws ActionBotException
	{
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			purchaseOrderSettings.clickOnBPOAuthTypeDirectInvoicicng(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickOnBPOAuthTypeDirectInvoicicng " + e, e);
		}
	}

	public static void clickOnBPOAuthTypeLetUserDecide(WebDriver driver, String testCaseName) throws ActionBotException
	{
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			purchaseOrderSettings.clickOnBPOAuthTypeLetUserDecide(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickOnBPOAuthTypeLetUserDecide " + e, e);
		}
	}

	public static void clickOnSendBPOWithReleaseOrderYes(WebDriver driver, String testCaseName) throws ActionBotException
	{
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			purchaseOrderSettings.clickOnSendBPOWithReleaseOrderYes(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickOnSendBPOWithReleaseOrderYes " + e, e);
		}
	}

	public static void clickOnSendBPOWithReleaseOrderNo(WebDriver driver, String testCaseName) throws ActionBotException
	{
		try
		{
			IPagePurchaseOrderSettingsImpl purchaseOrderSettings = FactoryPage.getInstanceOfIPagePurchaseOrderSetting();
			purchaseOrderSettings.clickOnSendBPOWithReleaseOrderNo(driver, testCaseName);
		}
		catch (FactoryMethodException e)
		{
			logger.error("Factory Method Exception in method clickOnSendBPOWithReleaseOrderNo " + e, e);
		}
	}
}
