package com.zycus.automation.eproc.pageobjects.pages.settings.cusomizesettings;

import org.openqa.selenium.WebDriver;

import com.zycus.automation.exception.ActionBotException;
import com.zycus.automation.utilities.actionbot.ActionBot;
import com.zycus.automation.utilities.screenshot.ScreenShot;

public class IPageCustomizeSettingsImpl implements IPageCustomizeSettings
{

	@Override
	public void clickOnAllowEditAutogeneratedSettingsNo(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, ALLOW_EDITING_AUTO_GENERATED_PO_NUMBER_NO);

	}

	@Override
	public void clickOnAllowEditAutogeneratedSettingsYes(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, ALLOW_EDITING_AUTO_GENERATED_PO_NUMBER_YES);

	}

	@Override
	public void clickOnApprovalWorkflowLink(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, APPROVAL_WORKFLOW_LINK);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on APPROVAL_WORKFLOW_LINK");

	}

	@Override
	public void clickOnBuyersDeskLink(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, BUYERS_DESK_LINK);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on BUYERS_DESK_LINK");
	}

	@Override
	public void clickOnCatalogLink(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, CATALOG_LINK);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on CATALOG_LINK");
	}

	@Override
	public void clickOnCentralReceivingLink(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, CENTRAL_RECEIVING_LINK);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on CENTRAL_RECEIVING_LINK");

	}

	@Override
	public void clickOnCostBookingLink(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, COST_BOOKING_LINK);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on COST BOOKING LINK");
	}

	@Override
	public void clickOnDeliverySettingsLink(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, DELIVERY_SETTINGS_LINK);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on DELIVERY_SETTINGS_LINK");
	}

	@Override
	public void clickOnDesktopReceivingLink(WebDriver driver, String testCaseName) throws ActionBotException
	{

		ActionBot.click(driver, DESKTOP_RECEIVING_LINK);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on DESKTOP_RECEIVING_LINK");

		ActionBot.click(driver, COST_BOOKING_LINK);
		// ScreenShot.screenshot(driver, testCaseName, "After clicking on COST
		// BOOKING LINK");

	}

	@Override
	public void clickOnDocumentInformationLink(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, DOCUMENT_INFORMATION_LINK);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on DOCUMENT_INFORMATION_LINK");

	}

	@Override
	public void clickOnEformLink(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, EFORM_LINK);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on EFORM_LINK");
	}

	@Override
	public void clickOnGeneralSettingsLink(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, GENERAL_SETTINGS_LINK);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on GENERAL_SETTINGS_LINK");
	}

	@Override
	public void clickOnIntegrationLink(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, INTEGRATION_LINK);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on INTEGRATION_LINK");
	}

	@Override
	public void clickOnInvoicesLink(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, INVOICES_LINK);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on INVOICES_LINK");
	}

	@Override
	public void clickOnMasterDataLink(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, MASTER_DATA_LINK);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on MASTER_DATA_LINK");
	}

	@Override
	public void clickOnMatchingLink(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, MATCHING_LINK);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on MATCHING_LINK");

	}

	@Override
	public void clickOnOtherNotificationsLink(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, OTHER_NOTIFICATIONS_LINK);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on OTHER_NOTIFICATIONS_LINK");

	}

	@Override
	public void clickOnPaymentsLink(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, PAYMENTS_LINK);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on PAYMENTS_LINK");

	}

	@Override
	public void clickOnPCardLink(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, P_CARD_LINK);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on P_CARD_LINK");
	}

	// Project Customize link
	@Override
	public void clickOnProjectCustomizeLink(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, PROJECT_CUSTOMIZE_LINK);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on PROJECT_CUSTOMIZE_LINK");

	}

	@Override
	public void clickOnPurchaseOrderLink(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, PURCHASE_ORDER_LINK);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on PURCHASE_ORDER_LINK");
	}

	@Override
	public void clickOnReceiptsLink(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, RECEIPTS_LINK);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on RECEIPTS_LINK");
	}

	@Override
	public void clickOnReceivingGeneralSettingsLink(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, RECEIVING_GENERAL_SETTINGS_LINK);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on RECEIVING_GENERAL_SETTINGS_LINK");

	}

	@Override
	public void clickOnRequisitionLink(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, REQUISITION_LINK);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on requisition link");
	}

	@Override
	public void clickOnSaveButtom(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, PO_SETTINGS_SAVE_BUTTON);

	}

	@Override
	public void clickOnSupplierNetworkLink(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, SUPPLIER_NETWORK_LINK);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on SUPPLIER_NETWORK_LINK");
	}

	@Override
	public void clickOnSupplierOnBoardingLink(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, SUPPLIER_ON_BOARDING_LINK);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on SUPPLIER_ON_BOARDING_LINK");
	}

	@Override
	public void clickOnToleranceLink(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, TOLERANCE_LINK);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on TOLERANCE_LINK");

	}

	@Override
	public void clickOnWorkflowLink(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, WORKFLOW_LINK);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on WORKFLOW_LINK");
	}

	@Override
	public boolean isAllowEditingAutogeneratedPoNoYes(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.findElement(driver, ALLOW_EDITING_AUTO_GENERATED_PO_NUMBER_YES);
		String temp = ActionBot.findElement(driver, ALLOW_EDITING_AUTO_GENERATED_PO_NUMBER_YES).getAttribute("value");
		if (temp.equalsIgnoreCase(temp))
		{
			return true;
		}
		return false;
	}

	@Override
	public boolean isAllowUserToChangeLevelToUsePoNoFormat(WebDriver driver, String testCaseName, String text) throws ActionBotException
	{
		if (ActionBot.isElementDisplayed(driver, EPROC_PURCHASE_ORDER_NUMBER_FORMAT_LEVEL))
		{
			boolean editablepoFormat = ActionBot.findElement(driver, EPROC_PURCHASE_ORDER_NUMBER_FORMAT_LEVEL).isEnabled();
			return editablepoFormat;
		}
		return false;
	}

	@Override
	public boolean isAllowUserToChangePoNoFormat(WebDriver driver, String testCaseName) throws ActionBotException
	{
		if (ActionBot.isElementDisplayed(driver, EPROC_PURCHASE_ORDER_FORMAT))
		{
			boolean editablepoNoFormat = ActionBot.findElement(driver, EPROC_PURCHASE_ORDER_FORMAT).isEnabled();
			return editablepoNoFormat;
		}
		return false;
	}

	@Override
	public boolean isAllowUserToChangePoSeqEndAtFormat(WebDriver driver, String testCaseName) throws ActionBotException
	{
		if (ActionBot.isElementDisplayed(driver, EPROC_PURCHASE_ORDER_SEQUENCE_NO_STARTS_AT))
		{
			boolean editablepoNoSeqFormat = ActionBot.findElement(driver, EPROC_PURCHASE_ORDER_SEQUENCE_NO_STARTS_AT).isEnabled();
			return editablepoNoSeqFormat;
		}
		return false;
	}

	@Override
	public boolean isAllowUserToChangePoSeqStartAtFormat(WebDriver driver, String testCaseName) throws ActionBotException
	{
		if (ActionBot.isElementDisplayed(driver, EPROC_PURCHASE_ORDER_SEQUENCE_NO_ENDS_AT))
		{
			boolean editablepoNoSeqFormat = ActionBot.findElement(driver, EPROC_PURCHASE_ORDER_SEQUENCE_NO_ENDS_AT).isEnabled();
			return editablepoNoSeqFormat;
		}
		return false;
	}

	@Override
	public boolean isReplyToAddressFieldPresent(WebDriver driver, String testCaseName, String to) throws ActionBotException
	{
		if (ActionBot.isElementPresent(driver, REPLY_TO_ADDRESS_FIELDS))
		{
			ActionBot.sendKeys(driver, REPLY_TO_ADDRESS_FIELDS, to);
			return true;
		}
		return false;
	}

	@Override
	public void clickOnBackLink(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, LINK_BACK_TO_CUSTOMIZE_MAIN_PAGE);

	}

	@Override
	public void clickOnReqiuredByDateYes(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.waitForElementToBeDisplayed(driver, REQUIRED_BY_DATE_YES, 60);
		ActionBot.click(driver, REQUIRED_BY_DATE_YES);
	}

	@Override
	public void clickOnReqiuredByDateNo(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.waitForElementToBeDisplayed(driver, REQUIRED_BY_DATE_NO, 60);
		ActionBot.click(driver, REQUIRED_BY_DATE_NO);
	}

	@Override
	public void clickOnCustomizeLinkMasterData(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, LINK_CUSTOMIZE_MASTER_DATA);
	}

	@Override
	public void clickOnGLRulesMap(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.waitForElementToBeDisplayed(driver, LINK_GL_RULES_MAP_MASTERS_PAGE, 6);
		ActionBot.click(driver, LINK_GL_RULES_MAP_MASTERS_PAGE);

	}

	@Override
	public void clickOnControlLink(WebDriver driver, String testCaseName) throws ActionBotException
	{
		ActionBot.click(driver, CONTROL_LINK);
		ScreenShot.screenshot(driver, testCaseName, "After clicking on COST BOOKING LINK");
	}

}
