package com.zycus.automation.eproc.testcase.regression.purchaseorder;

import static org.junit.Assert.assertTrue;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.exec.util.StringUtils;
import org.apache.log4j.Logger;
import org.junit.Assert;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.testng.annotations.Test;

import com.zycus.automation.bo.AccountingItemSummary;
import com.zycus.automation.bo.AddApprover;
import com.zycus.automation.bo.ApprovalAllRequests;
import com.zycus.automation.bo.BPO;
import com.zycus.automation.bo.Budget;
import com.zycus.automation.bo.BudgetAudit;
import com.zycus.automation.bo.BudgetLine;
import com.zycus.automation.bo.BudgetLineSetting;
import com.zycus.automation.bo.CatelogItem;
import com.zycus.automation.bo.CostBookingItemSummary;
import com.zycus.automation.bo.CostBookingRequisitionSummary;
import com.zycus.automation.bo.CostCenterSplitInfo;
import com.zycus.automation.bo.CustomDate;
import com.zycus.automation.bo.DeliveryItemSummary;
import com.zycus.automation.bo.DeliveryRequisitionSummary;
import com.zycus.automation.bo.GuidedItem;
import com.zycus.automation.bo.Invoice;
import com.zycus.automation.bo.Item;
import com.zycus.automation.bo.MappedTestCase;
import com.zycus.automation.bo.PCard;
import com.zycus.automation.bo.PEform;
import com.zycus.automation.bo.PoStatusFilter;
import com.zycus.automation.bo.Project;
import com.zycus.automation.bo.PurchaseOrder;
import com.zycus.automation.bo.PurchaseOrderSettings;
import com.zycus.automation.bo.Receipt;
import com.zycus.automation.bo.Requisition;
import com.zycus.automation.bo.StandardPO;
import com.zycus.automation.bo.SystemTenantConfiguration;
import com.zycus.automation.bo.UpdateAllLinesApplyTax;
import com.zycus.automation.bo.User;
import com.zycus.automation.bo.UserSettings;
import com.zycus.automation.boutils.MappedTestCaseUtil;
import com.zycus.automation.boutilshelper.UserUtilHelper;
import com.zycus.automation.boutilshelper.UserUtilHelper.Enum_UserList;
import com.zycus.automation.constants.IConstants;
import com.zycus.automation.datacreation.ObjectCreation;
import com.zycus.automation.eproc.businessflow.allrequestsapprovalflow.FlowAllRequestsApproval;
import com.zycus.automation.eproc.businessflow.bpoflow.FlowBPO;
import com.zycus.automation.eproc.businessflow.budget.FlowCreateBudget;
import com.zycus.automation.eproc.businessflow.budgetlisting.FlowBudgetListing;
import com.zycus.automation.eproc.businessflow.buyersdesk.FlowBuyersDesk;
import com.zycus.automation.eproc.businessflow.buyersdesklistingflow.FlowBuyersDeskListing;
import com.zycus.automation.eproc.businessflow.combineflow.CombineFlowImpl;
import com.zycus.automation.eproc.businessflow.convertedpurchaseorder.FlowConvertedPurchaseOrder;
import com.zycus.automation.eproc.businessflow.createpcardflow.FlowCreatePCard;
import com.zycus.automation.eproc.businessflow.flipinvoice.FlowFlipInvoice;
import com.zycus.automation.eproc.businessflow.myrequisitionsflow.FlowMyRequisitions;
import com.zycus.automation.eproc.businessflow.peformflow.FlowPEform;
import com.zycus.automation.eproc.businessflow.poinvoicelistingflow.FlowPOInvoiceListing;
import com.zycus.automation.eproc.businessflow.polistingflow.FlowPoListing;
import com.zycus.automation.eproc.businessflow.projectFlow.FlowProject;
import com.zycus.automation.eproc.businessflow.projectssettingsflow.FlowProjectsSettings;
import com.zycus.automation.eproc.businessflow.purchaseordersetting.FlowPurchaseOrderSetting;
import com.zycus.automation.eproc.businessflow.readyforapporvalflow.FlowReadyForApproval;
import com.zycus.automation.eproc.businessflow.receiptflow.FlowReceipt;
import com.zycus.automation.eproc.businessflow.requisitionflow.FlowRequisition;
import com.zycus.automation.eproc.businessflow.searchlistingpageflow.FlowSearchListing;
import com.zycus.automation.eproc.businessflow.shoppingcartflow.FlowShoppingCart;
import com.zycus.automation.eproc.businessflow.standardpoflow.FlowStandardPo;
import com.zycus.automation.eproc.businessflow.standardposummaryflow.FlowSelectingDifferentCompanyInPOSummary;
import com.zycus.automation.eproc.businessflow.systemtenantconfigurationflow.FlowSystemTenantConfiguration;
import com.zycus.automation.eproc.businessflow.usermanagementflow.FlowUserManagement;
import com.zycus.automation.eproc.businessflow.viewpoflow.FlowViewPO;
import com.zycus.automation.eproc.pageobjects.modals.POFreeTextItemSummaryItem.IModalPOFreeTextItemSummaryItem;
import com.zycus.automation.eproc.pageobjects.modals.POFreeTextItemSummaryItem.ModalPOFreeTextItemSummaryItem;
import com.zycus.automation.eproc.pageobjects.modals.POfreeTextItemSummaryCostAllocation.ModalPOFreeTextItemSummaryCostAllocation;
import com.zycus.automation.eproc.pageobjects.modals.PurchaseOrderSummaryDelivery.IModalPOSummaryDelivery;
import com.zycus.automation.eproc.pageobjects.modals.PurchaseOrderSummaryDelivery.IModalPOSummaryDeliveryImpl;
import com.zycus.automation.eproc.pageobjects.modals.PurchaseOrderSummaryDelivery.ModalPOSummaryDelivery;
import com.zycus.automation.eproc.pageobjects.modals.UpdateAllLinesPO.ModalUpdateAllLinesPO;
import com.zycus.automation.eproc.pageobjects.modals.buyersdesklistingactions.ModalBuersDeskListingActions;
import com.zycus.automation.eproc.pageobjects.modals.changeCurrencyPurchaseOrder.ModalChangeCurrencyPO;
import com.zycus.automation.eproc.pageobjects.modals.checkoutGuidedItemDetails.ModalGuidedItemDetails;
import com.zycus.automation.eproc.pageobjects.modals.checkoutRequisitionSummaryCommon.ModelRequisitionSummaryCommon;
import com.zycus.automation.eproc.pageobjects.modals.checkoutRequisitionSummaryDelivery.ModelRequisitionSummaryDelivery;
import com.zycus.automation.eproc.pageobjects.modals.closepo.ModalClosePO;
import com.zycus.automation.eproc.pageobjects.modals.createfieldofceform.ModalCreateFieldOfCEform;
import com.zycus.automation.eproc.pageobjects.modals.createsectionofceform.ModalCreateSectionOfCEform;
import com.zycus.automation.eproc.pageobjects.modals.discountstandardpo.ModalDiscountPO;
import com.zycus.automation.eproc.pageobjects.modals.emailpo.ModalEmailPODocument;
import com.zycus.automation.eproc.pageobjects.modals.fieldpropertiesofceform.ModalFieldPropertiesOfCEform;
import com.zycus.automation.eproc.pageobjects.modals.itemDetailsPO.IModalItemDetails;
import com.zycus.automation.eproc.pageobjects.modals.itemSummaryAccounting.ModalItemSummaryAccounting;
import com.zycus.automation.eproc.pageobjects.modals.itemSummaryDelivery.ModalItemSummaryDelivery;
import com.zycus.automation.eproc.pageobjects.modals.itemSummaryItem.ModalItemSummaryItem;
import com.zycus.automation.eproc.pageobjects.modals.itemSummaryTax.ModalItemSummaryTax;
import com.zycus.automation.eproc.pageobjects.modals.itemdetails.ModalItemDetails;
import com.zycus.automation.eproc.pageobjects.modals.itemsummarycostallocation.ModalItemSummaryCostAllocation;
import com.zycus.automation.eproc.pageobjects.modals.itemsummarycostbooking.ModalItemSummaryCostBooking;
import com.zycus.automation.eproc.pageobjects.modals.poItemView.ModalItemPoview;
import com.zycus.automation.eproc.pageobjects.modals.poactions.ModalPOActions;
import com.zycus.automation.eproc.pageobjects.modals.poattachment.ModalPOAttachment;
import com.zycus.automation.eproc.pageobjects.modals.polistingactions.ModalPOListingActions;
import com.zycus.automation.eproc.pageobjects.modals.purchaseorderitemsummarycostallocation.ModalPOItemSummaryCostAllocation;
import com.zycus.automation.eproc.pageobjects.modals.purchaseordersummarybilling.ModalPurchaseOrderSummaryBilling;
import com.zycus.automation.eproc.pageobjects.modals.purchaseordersummarycostbooking.IModalPOSummaryCostBooking;
import com.zycus.automation.eproc.pageobjects.modals.purchaseordersummarycostbooking.ModalPOSummaryCostBooking;
import com.zycus.automation.eproc.pageobjects.modals.selectbuofceform.ModalSelectBUOfCEform;
import com.zycus.automation.eproc.pageobjects.modals.uploadItemViaFile.ModalUploadItemViaFile;
import com.zycus.automation.eproc.pageobjects.modals.viewpoactions.ModalViewPOActions;
import com.zycus.automation.eproc.pageobjects.pages.BuyersDesk.PageBuyersDesk;
import com.zycus.automation.eproc.pageobjects.pages.ConvertedPurchaseOrder.PageConvertedPurchaseOrder;
import com.zycus.automation.eproc.pageobjects.pages.ammendedPOorders.PageAmmendedPO;
import com.zycus.automation.eproc.pageobjects.pages.approval.PageAllRequestsApproval;
import com.zycus.automation.eproc.pageobjects.pages.buyersdesklisting.PageBuyersDeskListing;
import com.zycus.automation.eproc.pageobjects.pages.ceformlisting.PageCEformListing;
import com.zycus.automation.eproc.pageobjects.pages.createbudget.PageCreateBudget;
import com.zycus.automation.eproc.pageobjects.pages.createceform.PageCreateCEform;
import com.zycus.automation.eproc.pageobjects.pages.createpeform.PageCreatePEform;
import com.zycus.automation.eproc.pageobjects.pages.createreceipt.PageCreateReceipt;
import com.zycus.automation.eproc.pageobjects.pages.myrequisition.PageMyRequisition;
import com.zycus.automation.eproc.pageobjects.pages.po.PagePO;
import com.zycus.automation.eproc.pageobjects.pages.poinvoicelisting.PagePOInvoiceListing;
import com.zycus.automation.eproc.pageobjects.pages.previewpo.PagePreviewPOPage;
import com.zycus.automation.eproc.pageobjects.pages.purchaseOrderDetails.PagePurchaseOrderDetails;
import com.zycus.automation.eproc.pageobjects.pages.purchaseorder.PagePurchaseOrder;
import com.zycus.automation.eproc.pageobjects.pages.purchaseorderlisting.IPagePurchaseOrderListing;
import com.zycus.automation.eproc.pageobjects.pages.purchaseorderlisting.PagePurchaseOrderListing;
import com.zycus.automation.eproc.pageobjects.pages.purchaseordertobegenerated.PagePurchaseOrderToBeGenerated;
import com.zycus.automation.eproc.pageobjects.pages.receiptlisting.PageReceiptListing;
import com.zycus.automation.eproc.pageobjects.pages.requisitionCheckOut.PageRequisitionCheckOut;
import com.zycus.automation.eproc.pageobjects.pages.searchlisting.IPageSearchListing;
import com.zycus.automation.eproc.pageobjects.pages.searchlisting.PageSearchListing;
import com.zycus.automation.eproc.pageobjects.pages.settings.budgetsettings.PageBudgetSettings;
import com.zycus.automation.eproc.pageobjects.pages.settings.buyersdesksettings.PageBuyersDeskSettings;
import com.zycus.automation.eproc.pageobjects.pages.settings.costbookingsettings.PageCostBookingSettings;
import com.zycus.automation.eproc.pageobjects.pages.settings.costcentermasterdatasettings.PageCostCenterSettings;
import com.zycus.automation.eproc.pageobjects.pages.settings.cusomizesettings.PageCustomizeSettings;
import com.zycus.automation.eproc.pageobjects.pages.settings.masterdatasettings.PageMasterDataSettings;
import com.zycus.automation.eproc.pageobjects.pages.settings.projectsmasterdatasettings.PageProjectsMasterDataSettings;
import com.zycus.automation.eproc.pageobjects.pages.settings.projectssettings.PageProjectsSettings;
import com.zycus.automation.eproc.pageobjects.pages.settings.purchaseordersettings.PagePurchaseOrderSetting;
import com.zycus.automation.eproc.pageobjects.pages.settings.taxratesmasterdatasettings.PageTaxRatesMasterDataSettings;
import com.zycus.automation.eproc.pageobjects.pages.settings.usermanagement.PageUserManagement;
import com.zycus.automation.eproc.pageobjects.pages.settings.usersettings.PageUserSettings;
import com.zycus.automation.eproc.pageobjects.pages.standardpo.IPageStandardPO;
import com.zycus.automation.eproc.pageobjects.pages.standardpo.PageStandardPO;
import com.zycus.automation.eproc.pageobjects.pages.viewpurchaseorder.PageViewPurchaseOrder;
import com.zycus.automation.eproc.pageobjects.pages.viewrequisition.PageRequisitionView;
import com.zycus.automation.eproc.pageobjects.popups.alertAmmendedPO.PopUpAlertAmmendedPO;
import com.zycus.automation.eproc.pageobjects.popups.alertSubmitPO.PopUpAlertSubmitPO;
import com.zycus.automation.eproc.pageobjects.popups.defaultconfirmation.PopUpDefaultConfirmation;
import com.zycus.automation.eproc.pageobjects.popups.deleteconfirmation.PopUpDeleteConfirmation;
import com.zycus.automation.eproc.pageobjects.tabs.checkoutTabRequisitionSummary.TabCheckoutReqSummary;
import com.zycus.automation.eproc.pageobjects.tabs.mainpageheaderleveltabs.MainPageHeaderLevelTab;
import com.zycus.automation.eproc.pageobjects.tabs.poSummary.TabPOSummary;
import com.zycus.automation.eproc.testdata.IConstantsData;
import com.zycus.automation.services.CommonServices;
import com.zycus.automation.services.LoginLogoutServices;
import com.zycus.automation.utilities.actionbot.ActionBot;
import com.zycus.automation.utilities.common.CommonUtilities;
import com.zycus.automation.utilities.screenshot.ScreenShot;
import com.zycus.eInvoice.automation.scripts.bo.PaymentBatch;
import com.zycus.eInvoice.automation.scripts.businessflow.paymentbatch.FlowPaymentBatch;
import com.zycus.eInvoice.automation.scripts.pageobjects.pages.paymentBatch.pagePaymentBatchListing;
import com.zycus.framework.framework_version_2_4.bo.TestCase;
import com.zycus.framework.framework_version_2_4.framework.ConfigProperty;
import com.zycus.framework.framework_version_2_4.framework.DriverSelector;
import com.zycus.framework.framework_version_2_4.framework.TestDataProvider;
import com.zycus.framework.framework_version_2_4.listener.CustomRetryListener;

public class PurchaseOrderTestCase extends TestDataProvider
{
	static Logger logger = Logger.getLogger(CommonServices.class);

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Verify that I should be able to "preview"
	 * the generated PO document by clicking the 'Preview PO' action on the PO
	 * view screen when PO is in released state.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_22609(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		User user = null;
		StandardPO standardPO = new StandardPO();
		boolean flag = false;
		String poNoOnPreviewPOPage = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase, mappedTestCases);
			user = LoginLogoutServices.login(driver, testCase);

			{
				// RTC_22610 : testcase to be mapped
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_22610"));
			}

			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			// search po
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);

			// view po5
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);

			// to preview the PO
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			ModalViewPOActions.clickOnPreviewPoLink(driver, testCaseName);

			String winHandlerBefore = driver.getWindowHandle();
			logger.info("winHandlerBefore :" + winHandlerBefore);
			Set<String> winHandler = driver.getWindowHandles();
			for (String handler : winHandler)
			{
				driver.switchTo().window(handler);
			}

			driver.manage().window().maximize();
			poNoOnPreviewPOPage = PagePreviewPOPage.getPreviewPoNo(driver, testCaseName);
			logger.info("driver title : " + driver.getTitle());
			flag = standardPO.getPoNumber().equalsIgnoreCase(poNoOnPreviewPOPage);
			driver.switchTo().window(winHandlerBefore);
			mappedTestCases.get(0).setTestResult(flag);
			Assert.assertTrue("PO Number on Preview PO Page is wrong", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Verify that The 'Email PO' link should
	 * open a modal window titled 'Email PO document'
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_22613(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		String expectedTitle = IConstantsData.MODAL_WINDOW_TITLE_TEXT;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			MainPageHeaderLevelTab.clickOnPOTab(driver);

			// click On released Filter
			FlowPoListing.filterAllReleasedPO(driver, testCaseName);
			PagePurchaseOrderListing.clickOnHeaderPoNo(driver, testCaseName);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);

			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnLinkEmailPo(driver, testCaseName);

			String actualTitle = ModalEmailPODocument.getModalWindowTitle(driver, testCaseName);
			// verify Modal title
			Assert.assertEquals("titled Email PO document are not equal", expectedTitle, actualTitle);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Verify that I should be provided a
	 * type-ahead list of supplier contacts that appears as soon as I focus on
	 * the field.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_22614(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;

		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// go to setup->customize
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);

			// click on cost booking link
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);

			// PagePurchaseOrderSetting.clickOnAllowEmailingPOToUsersOutsideCompany_Yes(driver,
			// testCaseName);

			PagePurchaseOrderSetting.clickOnSaveButton(driver, testCaseName);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			FlowPoListing.filterAllReleasedPO(driver, testCaseName);

			PagePurchaseOrderListing.clickOnHeaderPoNo(driver, testCaseName);
			ActionBot.defaultSleep();
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnLinkEmailPo(driver, testCaseName);
			String to = CommonServices.getTestData(IConstantsData.TO_FIELD_VALUE_FOR_SENDING_PO_EMAIL);
			// fill email field
			String toMailId = ModalEmailPODocument.fillEmailToField(driver, testCaseName, to);
			String addMailId = ModalEmailPODocument.getAddedMailid(driver, testCaseName);
			Assert.assertEquals("Type-aheade list not presents", toMailId, addMailId);
			ModalEmailPODocument.clickOnCancelButton(driver, testCaseName);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Verify that I should also be able to add
	 * other valid email addresses (depending on setting) in email PO.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_22616(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;

		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// go to setup->customize
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);

			// click on cost booking link
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);

			// PagePurchaseOrderSetting.clickOnAllowEmailingPOToUsersOutsideCompany_Yes(driver,
			// testCaseName);

			PagePurchaseOrderSetting.clickOnSaveButton(driver, testCaseName);

			MainPageHeaderLevelTab.clickOnPOTab(driver);

			FlowPoListing.filterAllReleasedPO(driver, testCaseName);
			PagePurchaseOrderListing.clickOnHeaderPoNo(driver, testCaseName);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnLinkEmailPo(driver, testCaseName);
			String to = CommonServices.getTestData(IConstantsData.Email_OUTSIDE_COMPANY);
			// fill email field
			String toMailId = ModalEmailPODocument.fillOtherEmailToField(driver, testCaseName, to);
			ActionBot.defaultSleep();
			ModalEmailPODocument.clickOnAddExternalEmailLink(driver, testCaseName);
			String addMailId = ModalEmailPODocument.getAddedMailid(driver, testCaseName);
			Assert.assertEquals("Unable to add mail id", toMailId, addMailId);
			ModalEmailPODocument.clickOnCancelButton(driver, testCaseName);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Verify that I should be able to remove a
	 * recipient from email PO modal.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_22617(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		StandardPO standardPO = new StandardPO();
		User user = null;
		String to = CommonServices.getTestData(IConstantsData.TO_FIELD_VALUE_FOR_SENDING_PO_EMAIL);
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);

			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);

			PageViewPurchaseOrder.clickOnLinkEmailPo(driver, testCaseName);
			// fill recipient field
			ModalEmailPODocument.fillEmailToField(driver, testCaseName, to);
			ActionBot.defaultSleep();
			ModalEmailPODocument.fillEmailMessageField(driver, testCaseName, IConstantsData.EMAIL_MESSAGE);
			ActionBot.defaultSleep();
			// click on cancel and check
			boolean bln = ModalEmailPODocument.isCancelRecipientPresent(driver, testCaseName);
			Assert.assertTrue("recipent is not removed", !bln);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Verify that I should be able to mark if I
	 * should receive a copy of the email ([x] Send me a copy) in email PO
	 * modal.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_22618(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		StandardPO standardPO = new StandardPO();
		boolean flag;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);

			String to = CommonServices.getTestData(IConstantsData.TO_FIELD_VALUE_FOR_SENDING_PO_EMAIL);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);

			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);

			PageViewPurchaseOrder.clickOnLinkEmailPo(driver, testCaseName);
			// fill recipient field
			ModalEmailPODocument.fillEmailToField(driver, testCaseName, to);
			ActionBot.defaultSleep();
			ModalEmailPODocument.fillEmailMessageField(driver, testCaseName, IConstantsData.EMAIL_MESSAGE);
			// verify whether checkBox is selected or not
			flag = ModalEmailPODocument.isCheckboxSelected(driver, testCaseName);
			Assert.assertTrue("Not able to select checkbox", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Verify that File name of the attached PO
	 * document should be shown in email and it should be downloadable
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_22620(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		StandardPO standardPO = new StandardPO();
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);

			// get po Name
			String poNo = PageViewPurchaseOrder.getViewPONo(driver, testCaseName);

			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);

			PageViewPurchaseOrder.clickOnLinkEmailPo(driver, testCaseName);

			String attachmentLinktext = ModalEmailPODocument.getAttachmentLinkText(driver, testCaseName);
			boolean flag = attachmentLinktext.toLowerCase().contains(poNo.toLowerCase());
			Assert.assertTrue("File name is not shown", flag);
			flag = ModalEmailPODocument.isAbleToclickOnAttachmentPo(driver, testCaseName);
			Assert.assertTrue("File is not downloadable", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Verify that File name of the attached PO
	 * document should be able to click download.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_22621(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			MainPageHeaderLevelTab.clickOnPOTab(driver);

			// click On released Filter
			FlowPoListing.filterAllReleasedPO(driver, testCaseName);
			// click On Po Name
			PagePurchaseOrderListing.clickOnHeaderPoNo(driver, testCaseName);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);

			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);

			PageViewPurchaseOrder.clickOnLinkEmailPo(driver, testCaseName);

			boolean flag = ModalEmailPODocument.isAbleToclickOnAttachmentPo(driver, testCaseName);
			Assert.assertTrue("Not able to click on document", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Verifiy Settings:Allow emailing PO to
	 * users outside the company: yes :: allows the PO document to be mailed to
	 * a free-text email address.
	 * 
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_22712(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;

		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// go to setup->customize
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);

			// click on cost booking link
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);

			// PagePurchaseOrderSetting.clickOnAllowEmailingPOToUsersOutsideCompany_Yes(driver,
			// testCaseName);

			PagePurchaseOrderSetting.clickOnSaveButton(driver, testCaseName);

			MainPageHeaderLevelTab.clickOnPOTab(driver);

			FlowPoListing.filterAllReleasedPO(driver, testCaseName);
			PagePurchaseOrderListing.clickOnHeaderPoNo(driver, testCaseName);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnLinkEmailPo(driver, testCaseName);
			String to = CommonServices.getTestData(IConstantsData.Email_OUTSIDE_COMPANY);
			// fill email field
			String toMailId = ModalEmailPODocument.fillEmailToField(driver, testCaseName, to);
			String addMailId = ModalEmailPODocument.getAddedMailid(driver, testCaseName);
			Assert.assertEquals("Unable to add mail id", toMailId, addMailId);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}

	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 21945 - Gross total mismatch
	 * in view mode of PO.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_22860(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		boolean flag = false;
		StandardPO standardPO = new StandardPO();
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			// click On Po Name
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			String viewPageGrossTotal = PageViewPurchaseOrder.getGrossTotal(driver, testCaseName);
			logger.info("Gross total at veiw PO : " + viewPageGrossTotal);
			ActionBot.scroll(driver, "-600");
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnPreviewPoLink(driver, testCaseName);

			String winHandlerBefore = driver.getWindowHandle();
			Set<String> winHandler = driver.getWindowHandles();
			for (String handler : winHandler)
			{
				driver.switchTo().window(handler);
			}

			driver.manage().window().maximize();
			String previewPageGrossTotal = PagePreviewPOPage.getPreviewGrossTotal(driver, testCaseName);
			logger.info("Driver title : " + driver.getTitle());
			logger.info("Gross total at Preview PO : " + previewPageGrossTotal);
			flag = viewPageGrossTotal.equalsIgnoreCase(previewPageGrossTotal);
			Assert.assertTrue("Gross Total Mismatch", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>User should be able to click on
	 * Requisition Number while viewing a PO, which should open Req View in
	 * another window. (Check view in IE and mozilla)
	 * 
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_23537(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();

		User user = null;
		boolean flag = false;
		String status;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase, mappedTestCases);
			user = LoginLogoutServices.login(driver, testCase);

			{
				// RTC_22610 : testcase to be mapped
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_23535"));

			}
			// click On PoTab
			Requisition requisition = ObjectCreation.getRequisition(driver);
			Item item = ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);

			requisition.setItems(item);
			CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);
			// convert To Po
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			FlowBuyersDesk.convertToPo(driver, testCaseName);
			List<PurchaseOrder> purchaseOrders = FlowBuyersDesk.submitAllSuggestedPosForProcessing(driver, testCaseName);
			FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);

			status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			if (status.equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL))
			{
				// to approve the PO
				ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, purchaseOrders.get(0).getPoNo(),
					IConstantsData.PURCHASE_ORDER, IConstantsData.APPROVE);
				FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

				// search po
				FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			}

			flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.RELEASED);
			Assert.assertTrue("Po is not in released state", flag);
			// view po
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			String mainWindowReqNo = PageViewPurchaseOrder.getViewPageReqNo(driver, testCaseName);

			PageViewPurchaseOrder.clickOnViewPageReqNo(driver, testCaseName);

			String winHandlerBefore = driver.getWindowHandle();
			Set<String> winHandler = driver.getWindowHandles();
			for (String handler : winHandler)
			{
				driver.switchTo().window(handler);
			}
			driver.manage().window().maximize();
			String newWindowReqNo = PageViewPurchaseOrder.getNewWindowReqNo(driver, testCaseName);
			flag = mainWindowReqNo.equalsIgnoreCase(newWindowReqNo);
			driver.switchTo().window(winHandlerBefore);
			mappedTestCases.get(0).setTestResult(flag);
			Assert.assertTrue("REQ Number on Preview PO Page is wrong", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Verify following details should be
	 * displayed as in view PO's created from requisition:PO no;Supplier
	 * name;BU,Released date;Delivery date,PO status,PO total <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_24204(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		User user = new User();
		String status;
		boolean flag;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase, mappedTestCases);
			user = LoginLogoutServices.login(driver, testCase);

			{
				// : testcase to be mapped
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_24212"));//0
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_24205"));//1
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_24206"));//2
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_24207"));//3
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_24208"));//4
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_24209"));//5
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_24211"));//6
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_24213"));//7
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_24214"));//8
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_24215"));//9
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_24216"));//10
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_24217"));//11
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_24218"));//12

			}

			Requisition requisition = ObjectCreation.getRequisition(driver);

			Item item = ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);

			requisition.setItems(item);

			CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			PageBuyersDeskListing.searchRequisitionNameInFilter(driver, testCaseName, requisition.getReqName());
			PageBuyersDeskListing.clickOnFirstActionButton(driver, testCaseName);
			PageBuyersDeskListing.clickOnConvertToPOFromAction(driver, testCaseName);

			ActionBot.defaultSleep();
			PagePurchaseOrderToBeGenerated.ClikOnPurchaseOrderToBeGeneratedCheckBox(driver, testCaseName, 0);

			PagePurchaseOrderToBeGenerated.clickOnSubmitPoForProcessing(driver, testCaseName);
			// Purchase Order Object Creation
			// For first Item
			PurchaseOrder purchaseOrder1 = FlowConvertedPurchaseOrder.getPurchaseOrderinfo(driver, testCaseName, 1);
			FlowPoListing.searchPo(driver, testCaseName, purchaseOrder1.getPoNo(), IConstantsData.SEARCH_BY_PO_NO);

			status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			if (status.equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL))
			{
				// to approve the PO
				ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, purchaseOrder1.getPoNo(),
					IConstantsData.PURCHASE_ORDER, IConstantsData.APPROVE);
				FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);
			}
			FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			ActionBot.defaultSleep();
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			ScreenShot.screenshot(driver, testCaseName, "before fetching details");
			// For first Item
			PurchaseOrder purchaseOrder3 = FlowConvertedPurchaseOrder.getReqViewPurchaseOrderinfo(driver, testCaseName, 1);
			// Compare PoNo
			logger.info("PO1 NO : " + purchaseOrder1.getPoNo() + " PO3 NO :" + purchaseOrder3.getPoNo());
			flag = purchaseOrder1.getPoNo().equalsIgnoreCase(purchaseOrder3.getPoNo());
			mappedTestCases.get(0).setTestResult(flag);

			Assert.assertTrue("Pono are Not Equal", flag);

			// compare Suppliername
			logger.info("PO1 supplier name :" + purchaseOrder1.getSupplierName() + " PO3 supplier name :" + purchaseOrder3.getSupplierName());
			flag = purchaseOrder1.getSupplierName().equalsIgnoreCase(purchaseOrder3.getSupplierName());
			mappedTestCases.get(1).setTestResult(flag);
			Assert.assertTrue("Suppliername are not equal", flag);

			// Compare BUName
			logger.info("PO1 BU name :" + purchaseOrder1.getBUName() + " PO3 BU name :" + purchaseOrder3.getBUName());
			flag = purchaseOrder1.getBUName().equalsIgnoreCase(purchaseOrder3.getBUName());
			mappedTestCases.get(2).setTestResult(flag);
			Assert.assertTrue("BUName are Unequal", flag);

			// Compare Delivery Date
			logger.info("PO1 Delivery date :" + purchaseOrder1.getDeliveryDate() + " PO3 delivery date :" + purchaseOrder3.getDeliveryDate());
			flag = purchaseOrder1.getDeliveryDate().equalsIgnoreCase(purchaseOrder3.getDeliveryDate());
			mappedTestCases.get(3).setTestResult(flag);
			mappedTestCases.get(4).setTestResult(flag);
			Assert.assertTrue("Delivery Date Unequal", flag);

			// Comapare Po Total
			logger.info("PO1 po total :" + purchaseOrder1.getPoTotal() + "PO3 po total :" + purchaseOrder3.getPoTotal());
			flag = purchaseOrder1.getPoTotal().equalsIgnoreCase(purchaseOrder3.getPoTotal());
			mappedTestCases.get(5).setTestResult(flag);

			Assert.assertTrue("PoTotal are Unequal", flag);
			/*
			 * // Comapare Status mappedTestCases.get(0).setTestResult(
			 * purchaseOrder1.getStatus().equalsIgnoreCase(purchaseOrder3.
			 * getStatus())); Assert.assertTrue("Status are unequal",
			 * purchaseOrder1.getStatus().equalsIgnoreCase(purchaseOrder3.
			 * getStatus()));
			 */
			// Comapare Req No
			logger.info("PO1 requisition no :" + purchaseOrder1.getReqNo() + " PO3 requisition no :" + purchaseOrder3.getReqNo());
			flag = purchaseOrder1.getReqNo().equalsIgnoreCase(purchaseOrder3.getReqNo());
			mappedTestCases.get(6).setTestResult(flag);
			Assert.assertTrue("Req No are Unequal", flag);
			// Comapare Item Name
			logger.info("PO1 item name :" + purchaseOrder1.getItemName() + " PO3 item name :" + purchaseOrder3.getItemName());
			flag = purchaseOrder1.getItemName().equalsIgnoreCase(purchaseOrder3.getItemName());
			mappedTestCases.get(7).setTestResult(flag);
			Assert.assertTrue("ItemName are Unequal", flag);

			// Comapare Qty
			logger.info("PO1 quantity :" + purchaseOrder1.getQty() + " PO3 quantity :" + purchaseOrder3.getQty());
			flag = purchaseOrder1.getQty().equalsIgnoreCase(purchaseOrder3.getQty());
			mappedTestCases.get(8).setTestResult(flag);
			mappedTestCases.get(9).setTestResult(flag);
			Assert.assertTrue("Qty are unequal", flag);

			// Comapare Unit Price
			logger.info("PO1 unit price :" + purchaseOrder1.getUnitPrice() + " PO3 unit price :" + purchaseOrder3.getUnitPrice());
			flag = purchaseOrder1.getUnitPrice().equalsIgnoreCase(purchaseOrder3.getUnitPrice());
			mappedTestCases.get(10).setTestResult(flag);
			Assert.assertTrue("Unit Price are Unequal", flag);

			// Comapre Total Price
			logger.info("PO1 total price :" + purchaseOrder1.getTotalPrice() + " PO3 total price :" + purchaseOrder3.getTotalPrice());
			flag = purchaseOrder1.getTotalPrice().equalsIgnoreCase(purchaseOrder3.getTotalPrice());
			mappedTestCases.get(11).setTestResult(flag);
			mappedTestCases.get(12).setTestResult(flag);
			Assert.assertTrue("Total Price are Unequal", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 200286 - Accounting info
	 * getting lost when opened a flip PO for amendment. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_134424(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		User user = null;
		String status;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase, mappedTestCases);
			user = LoginLogoutServices.login(driver, testCase);
			{
				// RTC_275924 : testcase to be mapped
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_134375"));
			}
			Requisition requisition = ObjectCreation.getRequisition(driver);

			Item item = ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);

			/*
			 * CatelogItem catelogItem2 = new CatelogItem();
			 * catelogItem2.setItemName(CommonServices.getTestData(
			 * IConstantsData.SEARCH_FOR)); catelogItem2.setQuantity(quantity);
			 * 
			 * item.getCatelogItems().add(catelogItem2);
			 */
			requisition.setItems(item);

			/*
			 * DeliveryRequisitionSummary deliveryRequisitionSummary = new
			 * DeliveryRequisitionSummary();
			 * deliveryRequisitionSummary.setMyAddressOption(true);
			 * deliveryRequisitionSummary.setMyAddress_Name("");
			 * deliveryRequisitionSummary.setMyAddress_city("");
			 * 
			 * requisition.setDeliveryRequisitionSummary(
			 * deliveryRequisitionSummary);
			 */

			CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			// click on first ReqNo link
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			FlowBuyersDesk.convertToPo(driver, testCaseName);
			List<PurchaseOrder> purchaseOrders = FlowBuyersDesk.submitAllSuggestedPosForProcessing(driver, testCaseName);
			// Fill Req Change Comment
			//PageBuyersDesk.fillReqChangeComment(driver, testCaseName, IConstantsData.REC_CHANGE_COMM);

			//PageBuyersDesk.clickOnConvertToPo(driver, testCaseName);

			//PagePurchaseOrderToBeGenerated.ClikOnPurchaseOrderToBeGeneratedCheckBox(driver, testCaseName, 0);

			// PagePurchaseOrderToBeGenerated.ClikOnPurchaseOrderToBeGeneratedCheckBox(driver,
			// testCaseName, 1);

			//PagePurchaseOrderToBeGenerated.clickOnSubmitPoForProcessing(driver, testCaseName);
			// Purchase Order Object Creation
			// For first Item
			//PurchaseOrder purchaseOrder1 = FlowConvertedPurchaseOrder.getPurchaseOrderinfo(driver, testCaseName, 1);
			// For Second Item
			// PurchaseOrder purchaseOrder2 =
			// FlowConvertedPurchaseOrder.getPurchaseOrderinfo(driver,
			// testCaseName, 3);
			// Click on Release
			// PageConvertedPurchaseOrder.clickOnReleaselink(driver,
			// testCaseName, 1);
			// Click on Release
			// PageConvertedPurchaseOrder.clickOnReleaselink(driver,
			// testCaseName, 3);
			FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);

			status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			if (status.equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL))
			{
				// to approve the PO
				ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, purchaseOrders.get(0).getPoNo(),
					IConstantsData.PURCHASE_ORDER, IConstantsData.APPROVE);
				FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);
				FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			}
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			ActionBot.scroll(driver, "500");
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			ModalPOItemSummaryCostAllocation.clickOnCostBookingTab(driver, testCaseName);
			boolean flag = ModalPOItemSummaryCostAllocation.isGLAccountFieldFilled(driver);
			mappedTestCases.get(0).setTestResult(flag);
			Assert.assertTrue(flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 215521 - Error 500 thrown on
	 * clicking Preview PO. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_224283(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		boolean flag;
		String poNoOnPreviewPOPage = null;
		User user = null;
		String status;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			Requisition requisition = ObjectCreation.getRequisition(driver);

			Item item = ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);

			requisition.setItems(item);

			requisition = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			// click on first ReqNo link
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			FlowBuyersDesk.convertToPo(driver, testCaseName);
			List<PurchaseOrder> purchaseOrders = FlowBuyersDesk.submitAllSuggestedPosForProcessing(driver, testCaseName);

			FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);

			status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			if (status.equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL))
			{
				// to approve the PO
				ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, purchaseOrders.get(0).getPoNo(),
					IConstantsData.PURCHASE_ORDER, IConstantsData.APPROVE);
				FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

				FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			}

			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			ModalViewPOActions.clickOnPreviewPoLink(driver, testCaseName);

			String winHandlerBefore = driver.getWindowHandle();
			Set<String> winHandler = driver.getWindowHandles();
			for (String handler : winHandler)
			{
				driver.switchTo().window(handler);
			}

			driver.manage().window().maximize();
			poNoOnPreviewPOPage = PagePreviewPOPage.getPreviewPoNo(driver, testCaseName);
			logger.info("Driver title :" + driver.getTitle());
			flag = purchaseOrders.get(0).getPoNo().equalsIgnoreCase(poNoOnPreviewPOPage);
			driver.switchTo().window(winHandlerBefore);
			Assert.assertTrue("PO Number on Preview PO Page is wrong", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Verify that User should be able to search
	 * PO based on PO No.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_24227(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		User user = new User();
		boolean flag = false;
		StandardPO standardPO = new StandardPO();

		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase, mappedTestCases);
			user = LoginLogoutServices.login(driver, testCase);

			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_38191"));
			}
			// click On PoTab
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.GUIDED_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			ActionBot.defaultSleep();
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			mappedTestCases.get(0).setTestResult(flag);
			Assert.assertTrue("Error while searching PO", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}

	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Verify that User should be able to search
	 * PO based on Buyer.
	 * 
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_24229(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		boolean flag = false;
		StandardPO standardPO = new StandardPO();

		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.GUIDED_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getBuyer(), IConstantsData.SEARCH_BY_BUYER);
			Assert.assertTrue("Error while searching PO Based On Buyer", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}

	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 199674 - Accounting shown
	 * blank even though its present.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_134415(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		boolean flag = false;
		try
		{

			CommonServices.startTestCase(driver, testCase);
			driver = DriverSelector.getDriver(testCase);
			user = LoginLogoutServices.login(driver, testCase);

			// click On PoTab
			StandardPO standardPO = new StandardPO();
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO.setNextAction(IConstantsData.NONE);
			FlowStandardPo.createStandardPo(driver, testCaseName, standardPO);
			PageStandardPO.clickOnExpandAll(driver);
			flag = PageStandardPO.isAccountingDetailsPresentAftersItemExpand(driver);
			Assert.assertTrue("Accounting details not displayed", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}

	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 201109 - Base currency not
	 * getting changed even after changing company to the one with different
	 * base currency.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_134384(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();

		User user = null;
		String orderDescription = CommonServices.getTestData(IConstantsData.ORDER_DESCRIPTION);
		String supplierName = CommonServices.getTestData(IConstantsData.SUPPLIER_NAME);
		String bu = CommonServices.getTestData(IConstantsData.Other_BusinessUnit);
		String company = CommonServices.getTestData(IConstantsData.Other_Company_Name);
		String location = CommonServices.getTestData(IConstantsData.Other_Location);
		boolean flag;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			PagePO.clickOnStandardPO(driver, testCaseName);
			PageStandardPO.enterOrderDescription(driver, orderDescription);
			PageStandardPO.enterSupplierName(driver, supplierName);
			String getCurrency = PageStandardPO.getCurrencyType(driver, testCaseName);
			// fill reqByDate
			PurchaseOrder purchaseOrder = new PurchaseOrder();
			purchaseOrder.setCustomDate(CommonUtilities.getRequiredBy());

			PageStandardPO.fillRequiredByDate(driver, testCaseName, purchaseOrder.getCustomDate().getDay(), purchaseOrder.getCustomDate().getMonth(),
				purchaseOrder.getCustomDate().getYear());
			PageStandardPO.clickOnEdit(driver);
			// click on billing po Summary
			//TabPOSummary.clickOnBillingPOSummary(driver);
			ModalPurchaseOrderSummaryBilling.fillCompany(driver, testCaseName, company);
			ModalPurchaseOrderSummaryBilling.fillBusinessUnit(driver, testCaseName, bu);
			ModalPurchaseOrderSummaryBilling.fillLocation(driver, testCaseName, location);
			TabPOSummary.clickOnCostBookingPOSummary(driver);
			String costCenterBudgetAndProject = CommonServices.getTestData(IConstantsData.OTHER_COMPANY_CC_OTHER_COMPANY_PROJECT_OTHER_COMPANY_BUDGET);
			String costCenter, budget, project;
			String temp[] = StringUtils.split(costCenterBudgetAndProject.trim(), ",");
			costCenter = temp[0].trim();
			budget = temp[2].trim();
			project = temp[1].trim();
			ModalPOSummaryCostBooking.fillInCostCenterField(driver, testCaseName, costCenter);
			ModalPOSummaryCostBooking.fillInProjectField(driver, testCaseName, project);
			ModalPOSummaryCostBooking.fillInBudgetField(driver, testCaseName, budget);
			ModalPOSummaryCostBooking.clickOnSave(driver, testCaseName);
			// click On yes confirmation popup
			PopUpDefaultConfirmation.clickOnConfirmYesButton(driver, testCaseName);
			ActionBot.defaultSleep();
			String changedcurrency = PageStandardPO.getCompanyDefaultCurrency(driver, testCaseName);
			flag = getCurrency.equalsIgnoreCase(changedcurrency);
			Assert.assertTrue("Currency is not changed by company with different base currency", !flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}

	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Create reciept for PO>>Verify that User
	 * should also see Requisition number for that item.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_25029(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		boolean flag;
		String status;
		new StandardPO();
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			// click On PoTab
			Requisition requisition = ObjectCreation.getRequisition(driver);

			Item item = ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);

			requisition.setItems(item);
			CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);
			// convert To Po
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			FlowBuyersDesk.convertToPo(driver, testCaseName);
			List<PurchaseOrder> purchaseOrders = FlowBuyersDesk.submitAllSuggestedPosForProcessing(driver, testCaseName);
			FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);

			status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			if (status.equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL))
			{
				// to approve the PO
				ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, purchaseOrders.get(0).getPoNo(),
					IConstantsData.PURCHASE_ORDER, IConstantsData.APPROVE);
				FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

				// search po
				FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			}

			flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.RELEASED);
			Assert.assertTrue("PO is not in released state", flag);
			// view po
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			String viewPageReqNo = PageViewPurchaseOrder.getViewPageReqNo(driver, testCaseName);
			FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnPoActionsLink(driver, testCaseName);
			ModalPOActions.clickOnCreateReceiptFromActions(driver, testCaseName);
			flag = PageViewPurchaseOrder.getCreateReceiptReqNo(driver, testCaseName).toLowerCase().contains(viewPageReqNo.toLowerCase());
			Assert.assertTrue("CreateReceipt ReqNo is wrong ", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Verify on loading a draft PO; the latest
	 * value of 'Assign cost to project' should be reflected in the PO <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_275920(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);

			// naviagtes to tms and selects never
			FlowPurchaseOrderSetting.changeCostBookingSettingFromTMS(driver, testCaseName, IConstantsData.Radio_Never);

			// Get the latest value
			String radioButtonClickedValue = PageProjectsSettings.getAssignProjectToPurchaseCost(driver);

			// click on Po
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			// filterall Draft Po
			FlowPoListing.filterAllDraftPO(driver, testCaseName);
			PagePurchaseOrderListing.clickOnHeaderPoNo(driver, testCaseName);
			// click on First Draftlink
			PagePurchaseOrderListing.clickOnDraftPOLink(driver, testCaseName, 1);

			// Click on Edit link of Purchase Order Page
			PagePurchaseOrder.clickOnEditLink(driver, testCaseName);

			// go to cost booking tab
			TabPOSummary.clickOnCostBookingPOSummary(driver);

			// compare with radio buttons value
			if (radioButtonClickedValue.equals("PROJECT_NEVER"))
			{
				// No should be clicked
				boolean isNoSelected = PageProjectsSettings.isNoSelected(driver, testCaseName);
				Assert.assertTrue(isNoSelected);
			}
			else if (radioButtonClickedValue.equals("PROJECT_ALWAYS"))
			{
				// Yes should be clicked
				boolean isYesSelected = PageProjectsSettings.isYesSelected(driver, testCaseName);
				Assert.assertTrue(isYesSelected);
			}
			else if (radioButtonClickedValue.equals("PROJECT_USER_DECIDE"))
			{
				// lets user decide radio btn should be clicked
				boolean assignProjectSettingEnabledOrDisabled = PageProjectsSettings.assignProjectSettingEnabledOrDisabled(driver, testCaseName);
				Assert.assertTrue(assignProjectSettingEnabledOrDisabled);

			}
			// Click on cancel btn after all assertions are passed
			ModalPOSummaryCostBooking.clickOnCancel(driver, testCaseName);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Verify on loading a draft PO; the latest
	 * value of 'Assign cost to project' should be reflected in the PO [Check
	 * when the recent setting is Let user decide]
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_275921(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);

			// navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);

			ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");
			// get value of radio button clicked
			FlowProjectsSettings.getProjectsSettings(driver, testCaseName);

			// Click on Let USer Decide
			PageProjectsSettings.clickOnLetUsersDecide(driver);
			// Click On Save
			PageProjectsSettings.clickOnSave(driver);
			ActionBot.defaultLowSleep();
			// Get the latest value
			String radioButtonClickedValue = PageProjectsSettings.getAssignProjectToPurchaseCost(driver);

			// navigates to EPROC
			driver.get(ConfigProperty.getConfig("Product_URL"));
			ActionBot.waitForPageLoad(driver);

			ScreenShot.screenshot(driver, testCaseName, "After navigating to EPROC Page");

			// click on Po
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			ActionBot.defaultMediumSleep();
			// filterall Draft Po
			FlowPoListing.filterAllDraftPO(driver, testCaseName);
			PagePurchaseOrderListing.clickOnHeaderPoNo(driver, testCaseName);
			// click on First Draftlink
			PagePurchaseOrderListing.clickOnDraftPOLink(driver, testCaseName, 1);

			// Click on Edit link of Purchase Order Page
			PagePurchaseOrder.clickOnEditLink(driver, testCaseName);

			// go to cost booking tab
			TabPOSummary.clickOnCostBookingPOSummary(driver);

			// compare with radio buttons value
			// compare with radio buttons value
			/*
			 * if (radioButtonClickedValue.equals("PROJECT_NEVER")) { //No
			 * should be clicked boolean isNoSelected =
			 * PageProjectsSettings.isNoSelected(driver, testCaseName);
			 * Assert.assertTrue(isNoSelected); } else if
			 * (radioButtonClickedValue.equals("PROJECT_ALWAYS")) { //Yes should
			 * be clicked boolean isYesSelected =
			 * PageProjectsSettings.isYesSelected(driver, testCaseName);
			 * Assert.assertTrue(isYesSelected); } else
			 */
			if (radioButtonClickedValue.equals("PROJECT_USER_DECIDE"))
			{
				// lets user decide radio btn should be clicked
				boolean assignProjectSettingEnabledOrDisabled = PageProjectsSettings.assignProjectSettingEnabledOrDisabled(driver, testCaseName);
				Assert.assertTrue(assignProjectSettingEnabledOrDisabled);

			}

			// Click on cancel btn after all assertions are passed
			ModalPOSummaryCostBooking.clickOnCancel(driver, testCaseName);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Verify on copying a PO; 'Assign cost to
	 * project' setting should be reflected as per the latest setting <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_275923(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		{
			// RTC_275924 : testcase to be mapped
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_275924"));

		}

		CommonServices.startTestCase(driver, testCase, mappedTestCases);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);

			// navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);

			ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");
			// get value of radio button clicked
			String radioButtonClickedValue = FlowProjectsSettings.getProjectsSettings(driver, testCaseName);

			// navigates to EPROC
			driver.get(ConfigProperty.getConfig("Product_URL"));
			ActionBot.waitForPageLoad(driver);

			ScreenShot.screenshot(driver, testCaseName, "After navigating to EPROC Page");

			// go to PO tab
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			ActionBot.defaultMediumSleep();

			// filter all released PO
			FlowPoListing.filterAllReleasedPO(driver, testCaseName);
			PagePurchaseOrderListing.clickOnHeaderPoNo(driver, testCaseName);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			// click on copy link
			ActionBot.defaultSleep();

			PageStandardPO.clickOnEdit(driver);
			ActionBot.defaultSleep();
			// go to cost booking tab
			TabPOSummary.clickOnCostBookingPOSummary(driver);

			// compare with radio buttons value
			if (radioButtonClickedValue.equals("PROJECT_NEVER"))
			{
				// No should be clicked
				boolean isNoSelected = PageProjectsSettings.isNoSelected(driver, testCaseName);
				mappedTestCases.get(0).setTestResult(isNoSelected);
				Assert.assertTrue(isNoSelected);
			}
			else if (radioButtonClickedValue.equals("PROJECT_ALWAYS"))
			{
				// Yes should be clicked
				boolean isYesSelected = PageProjectsSettings.isYesSelected(driver, testCaseName);
				mappedTestCases.get(0).setTestResult(isYesSelected);
				Assert.assertTrue(isYesSelected);
			}
			else if (radioButtonClickedValue.equals("PROJECT_USER_DECIDE"))
			{
				// lets user decide radio btn should be clicked
				boolean assignProjectSettingEnabledOrDisabled = PageProjectsSettings.assignProjectSettingEnabledOrDisabled(driver, testCaseName);
				mappedTestCases.get(0).setTestResult(assignProjectSettingEnabledOrDisabled);
				Assert.assertTrue(assignProjectSettingEnabledOrDisabled);

				// Test Case id 275924 merged with 275923

			}

			// Click on cancel btn after all assertions are passed
			ModalPOSummaryCostBooking.clickOnCancel(driver, testCaseName);

			// Get radio button value of assign project to purchase cost
			// boolean isAssign =
			// PagePurchaseOrderSummaryCostBooking.isAssignProjectToPurchaseCost(driver,
			// testCaseName);

			// Assert.assertFalse("Assign project to purchase cost is TRUE",
			// isAssign);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Copy PO: Verify On copying a PO if 'Assign
	 * cost to project' setting (Customize) is Always; the setting should be
	 * disabled in Billing and Delivery info>>Costing tab with value YES
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_275925(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		StandardPO standardPO = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			// navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);

			ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");
			// get value of radio button clicked
			FlowProjectsSettings.getProjectsSettings(driver, testCaseName);

			// Click on Always
			PageProjectsSettings.clickOnAlways(driver);
			// Click On Save
			PageProjectsSettings.clickOnSave(driver);

			// navigates to EPROC
			driver.get(ConfigProperty.getConfig("Product_URL"));
			ActionBot.waitForPageLoad(driver);

			ScreenShot.screenshot(driver, testCaseName, "After navigating to EPROC Page");

			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createStandardPo(driver, testCaseName, standardPO);

			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);

			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ActionBot.defaultSleep();
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			// Click on Edit link of Purchase Order Page
			PagePurchaseOrder.clickOnEditLink(driver, testCaseName);

			// go to cost booking tab
			TabPOSummary.clickOnCostBookingPOSummary(driver);

			// compare with radio buttons value
			ActionBot.defaultSleep();
			Boolean bn2 = ModalPOSummaryCostBooking.isElementYesSelected(driver, testCaseName);
			Assert.assertTrue("Element Always is not selected", bn2);

			// Click on cancel btn after all assertions are passed
			ModalPOSummaryCostBooking.clickOnCancel(driver, testCaseName);

			// Get radio button value of assign project to purchase cost
			// boolean isAssign =
			// PagePurchaseOrderSummaryCostBooking.isAssignProjectToPurchaseCost(driver,
			// testCaseName);

			// Assert.assertFalse("Assign project to purchase cost is TRUE",
			// isAssign);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * Copy PO: Verify On copying a PO if 'Assign cost to project' setting
	 * (Customize) is Never; the setting should be disabled in Billing and
	 * Delivery info>>Costing tab with value No
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_275926(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		{
			// RTC_275927 : testcase to be mapped
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_275927"));

		}
		CommonServices.startTestCase(driver, testCase, mappedTestCases);
		User user = null;
		StandardPO standardPO = new StandardPO();
		try
		{
			user = LoginLogoutServices.login(driver, testCase);

			// navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);

			//			ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");
			// get value of radio button clicked
			FlowProjectsSettings.getProjectsSettings(driver, testCaseName);

			// Click on Always
			PageProjectsSettings.clickOnAlways(driver);
			// Click On Save
			PageProjectsSettings.clickOnSave(driver);

			// navigates to EPROC
			driver.get(ConfigProperty.getConfig("Product_URL"));
			ActionBot.waitForPageLoad(driver);

			//			ScreenShot.screenshot(driver, testCaseName, "After navigating to EPROC Page");
			ActionBot.defaultSleep();

			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			ActionBot.defaultMediumSleep();
			// click on Po
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);

			// navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);

			//			ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");
			// get value of radio button clicked
			FlowProjectsSettings.getProjectsSettings(driver, testCaseName);

			// Click on Always
			PageProjectsSettings.clickOnNever(driver);
			// Click On Save
			PageProjectsSettings.clickOnSave(driver);

			// navigates to EPROC
			driver.get(ConfigProperty.getConfig("Product_URL"));
			ActionBot.waitForPageLoad(driver);

			//		ScreenShot.screenshot(driver, testCaseName, "After navigating to EPROC Page");
			ActionBot.defaultSleep();

			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ActionBot.defaultSleep();
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			// Click on Edit link of Purchase Order Page
			PagePurchaseOrder.clickOnEditLink(driver, testCaseName);
			// go to cost booking tab
			TabPOSummary.clickOnCostBookingPOSummary(driver);
			// compare with radio buttons value
			Boolean bn = ModalPOSummaryCostBooking.isElementNoSelected(driver, testCaseName);

			Assert.assertTrue("Element No is not selected", bn);

			// Click on cancel btn after all assertions are passed
			ModalPOSummaryCostBooking.clickOnCancel(driver, testCaseName);

			// navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);

			//		ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");
			// get value of radio button clicked
			FlowProjectsSettings.getProjectsSettings(driver, testCaseName);

			// Click on Always
			PageProjectsSettings.clickOnLetUsersDecide(driver);
			// Click On Save
			PageProjectsSettings.clickOnSave(driver);

			// navigates to EPROC
			driver.get(ConfigProperty.getConfig("Product_URL"));
			ActionBot.waitForPageLoad(driver);

			ScreenShot.screenshot(driver, testCaseName, "After navigating to EPROC Page");
			ActionBot.defaultSleep();

			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ActionBot.defaultSleep();
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			// Click on Edit link of Purchase Order Page
			PagePurchaseOrder.clickOnEditLink(driver, testCaseName);

			// go to cost booking tab
			TabPOSummary.clickOnCostBookingPOSummary(driver);

			// compare with radio buttons value
			Boolean bn1 = ModalPOSummaryCostBooking.isElementAssignProjectToPurchaseCostDisabled(driver, testCaseName);
			mappedTestCases.get(0).setTestResult(!bn1);
			Assert.assertFalse("Element Let User decide is not selected", bn1);
			// Click on cancel btn after all assertions are passed
			ModalPOSummaryCostBooking.clickOnCancel(driver, testCaseName);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Copy PO: Verify On copying a PO in case of
	 * 'Let the user decide' the default value of 'Assign cost to project'
	 * setting should be YES
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_275928(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);

			// navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);

			//			ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");
			//open customized page for masterdata
			FlowProjectsSettings.getProjectsSettings(driver, testCaseName);

			// Click on Let User Decide
			PageProjectsSettings.clickOnLetUsersDecide(driver);
			// Click On Save
			PageProjectsSettings.clickOnSave(driver);

			// navigates to EPROC
			driver.get(ConfigProperty.getConfig("Product_URL"));
			ActionBot.waitForPageLoad(driver);

			//			ScreenShot.screenshot(driver, testCaseName, "After navigating to EPROC Page");

			//			String xpathOfFirstPoLink="(.//*[@id='polisting']//td[contains(@class,'purchaseOrderNumber')]/a[contains(@href,'viewPurchaseOrder')])[1]";
			//			ActionBot.waitForElementToBeEnable(driver, By.xpath(xpathOfFirstPoLink), 6);
			// click on Po
			MainPageHeaderLevelTab.clickOnPOTab(driver);

			String xpathOfFirstPoLink = "(.//*[@id='polisting']//td[contains(@class,'purchaseOrderNumber')]/a[contains(@href,'viewPurchaseOrder')])[1]";
			ActionBot.waitForElementToBeEnable(driver, By.xpath(xpathOfFirstPoLink), 6);
			FlowPoListing.filterAllReleasedPO(driver, testCaseName);
			ActionBot.defaultMediumSleep();

			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			//ActionBot.defaultSleep();
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			ActionBot.defaultSleep();

			// Click on Edit link of Purchase Order Page
			PagePurchaseOrder.clickOnEditLink(driver, testCaseName);

			// go to cost booking tab
			TabPOSummary.clickOnCostBookingPOSummary(driver);

			// Check Whether radio Bottom value is by default yes
			Boolean bn = ModalPOSummaryCostBooking.isElementYesSelected(driver, testCaseName);
			Assert.assertTrue("Element Yes is not selected", bn);

			// Click on cancel btn after all assertions are passed
			TabPOSummary.clickOnCostBookingPOSummary(driver);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Copy PO: Verify On copying a PO if 'Assign
	 * cost to project' setting (Customize) is Always; Project autocomplete
	 * field should be displayed in Costing tab within Billing and delivery info
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_275929(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		StandardPO standardPO = new StandardPO();
		try
		{
			user = LoginLogoutServices.login(driver, testCase);

			// navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);

			ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");
			// get value of radio button clicked
			FlowProjectsSettings.getProjectsSettings(driver, testCaseName);

			// Click on Always
			PageProjectsSettings.clickOnAlways(driver);
			// Click On Save
			PageProjectsSettings.clickOnSave(driver);

			// navigates to EPROC
			driver.get(ConfigProperty.getConfig("Product_URL"));
			ActionBot.waitForPageLoad(driver);

			ScreenShot.screenshot(driver, testCaseName, "After navigating to EPROC Page");
			ActionBot.defaultSleep();

			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			ActionBot.defaultMediumSleep();

			MainPageHeaderLevelTab.clickOnPOTab(driver);
			ActionBot.defaultMediumSleep();
			//			String xpathOfFirstPoLink="(.//*[@id='polisting']//td[contains(@class,'purchaseOrderNumber')]/a[contains(@href,'viewPurchaseOrder')])[1]";
			//			ActionBot.waitForElementToBeEnable(driver, By.xpath(xpathOfFirstPoLink), 6);

			FlowPoListing.filterAllReleasedPO(driver, testCaseName);
			ActionBot.defaultMediumSleep();
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			//			ActionBot.defaultSleep();
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			ActionBot.defaultSleep();
			// Click on Edit link of Purchase Order Page
			PagePurchaseOrder.clickOnEditLink(driver, testCaseName);

			// go to cost booking tab
			TabPOSummary.clickOnCostBookingPOSummary(driver);
			// Check Whether Field is Displayed/not
			Boolean bn = ModalPOSummaryCostBooking.isFieldProjectDisplayed(driver, testCaseName);
			Assert.assertTrue("Field is Not displayed", bn);
			// Click on cancel btn after all assertions are passed
			ModalPOSummaryCostBooking.clickOnCancel(driver, testCaseName);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Copy PO: Verify On copying a PO in case of
	 * 'Let user decide' if 'Assign cost to project' setting is YES; Project
	 * autocomplete field should be displayed in Costing tab within Billing and
	 * delivery info
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_275930(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		StandardPO standardPO = new StandardPO();
		try
		{
			user = LoginLogoutServices.login(driver, testCase);

			// navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);

			ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");
			// get value of radio button clicked
			FlowProjectsSettings.getProjectsSettings(driver, testCaseName);

			//
			//			
			//
			//			// go to setup->customize
			//			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			//
			//			// click on cost booking link
			//			PageCustomizeSettings.clickOnCostBookingLink(driver, testCaseName);

			// click on cost Projects Link
			//		PageCostBookingSettings.clickOnProjects(driver);
			// Click on LetUsersDecide
			PageProjectsSettings.clickOnLetUsersDecide(driver);
			PageProjectsSettings.clickOnSave(driver);

			// navigates to EPROC
			driver.get(ConfigProperty.getConfig("Product_URL"));
			ActionBot.waitForPageLoad(driver);

			ScreenShot.screenshot(driver, testCaseName, "After navigating to EPROC Page");
			ActionBot.defaultSleep();

			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			ActionBot.defaultMediumSleep();
			// search po
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			//	ActionBot.defaultSleep();
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			ActionBot.defaultSleep();
			// Click on Edit link of Purchase Order Page
			PagePurchaseOrder.clickOnEditLink(driver, testCaseName);

			// go to cost booking tab
			TabPOSummary.clickOnCostBookingPOSummary(driver);
			// Check Whether Field is Displayed/not
			Boolean bn = ModalPOSummaryCostBooking.isFieldProjectDisplayed(driver, testCaseName);
			Assert.assertTrue("Field is not displayed", bn);

			// Click on cancel btn after all assertions are passed
			ModalPOSummaryCostBooking.clickOnCancel(driver, testCaseName);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Copy PO: Verify On copying a PO Project
	 * autocomplete field in Costing tab within Billing and delivery info should
	 * display valid active projects <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_275931(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		StandardPO standardPO = new StandardPO();
		try
		{
			user = LoginLogoutServices.login(driver, testCase);

			// navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);

			ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");
			//open customized page for masterdata
			FlowProjectsSettings.getProjectsSettings(driver, testCaseName);
			//			// go to setup->customize
			//			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			//
			//			// click on cost booking link
			//			PageCustomizeSettings.clickOnCostBookingLink(driver, testCaseName);
			//
			//			// click on cost Projects Link
			//			PageCostBookingSettings.clickOnProjects(driver);
			// Click on Always
			PageProjectsSettings.clickOnAlways(driver);
			// Click On Save
			PageProjectsSettings.clickOnSave(driver);
			// navigates to EPROC
			driver.get(ConfigProperty.getConfig("Product_URL"));
			ActionBot.waitForPageLoad(driver);

			ScreenShot.screenshot(driver, testCaseName, "After navigating to EPROC Page");
			// click on Po
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			// search po
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			ActionBot.defaultLowSleep();
			// Click on Edit link of Purchase Order Page
			PagePurchaseOrder.clickOnEditLink(driver, testCaseName);

			// go to cost booking tab
			TabPOSummary.clickOnCostBookingPOSummary(driver);
			// get the projectcode and project name
			String projectName = ModalPOSummaryCostBooking.getProjectCodeAndProjectName(driver, testCaseName);
			Assert.assertNotNull("Not null", projectName);
			// click on save
			ModalPOSummaryCostBooking.clickOnCancel(driver, testCaseName);
			// click on set up tab
			//			MainPageHeaderLevelTab.clickOnSetUpTab(driver);
			//			// click on master sub tab
			//			MainPageHeaderLevelTab.clickOnMasterSubTab(driver);
			//			// click on project link
			//			PageMasterDataSettings.clickOnProjectsLink(driver, testCaseName);
			//			// get the search value
			//			ActionBot.defaultLowSleep();
			//			PageProjectsMasterDataSettings.getSearch(driver, testCaseName, projectName);
			//			// click on Go bottom
			//			PageProjectsMasterDataSettings.clickOnGo(driver, testCaseName);
			//			// verify Project name As per setting
			//			boolean bn = projectName.equalsIgnoreCase(PageProjectsMasterDataSettings.getProjectName(driver, testCaseName));
			//			Assert.assertTrue("project name doesnot matches", bn);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Copy PO: Verify On copying a PO if 'Assign
	 * cost to project' setting (Customize) is Never; Project autocomplete field
	 * should NOT be displayed in Costing tab within Billing and delivery info
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_275935(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		StandardPO standardPO = new StandardPO();
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);

			// navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);

			ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");
			//open customized page for masterdata
			FlowProjectsSettings.getProjectsSettings(driver, testCaseName);
			//			// go to setup->customize
			//			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			//
			//			// click on cost booking link
			//			PageCustomizeSettings.clickOnCostBookingLink(driver, testCaseName);
			//
			//			// click on cost Projects Link
			//			PageCostBookingSettings.clickOnProjects(driver);
			// Click on Always
			PageProjectsSettings.clickOnNever(driver);
			// Click On Save
			PageProjectsSettings.clickOnSave(driver);

			// navigates to EPROC
			driver.get(ConfigProperty.getConfig("Product_URL"));
			ActionBot.waitForPageLoad(driver);

			ScreenShot.screenshot(driver, testCaseName, "After navigating to EPROC Page");

			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			// search po
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ActionBot.defaultSleep();
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);

			// Click on Edit link of Purchase Order Page
			PagePurchaseOrder.clickOnEditLink(driver, testCaseName);

			// go to cost booking tab
			TabPOSummary.clickOnCostBookingPOSummary(driver);

			// Check Whether Field is Displayed/not
			Boolean bn = ModalPOSummaryCostBooking.isFieldProjectDisplayed(driver, testCaseName);

			Assert.assertFalse("Field is displayed", bn);
			// Click on cancel btn after all assertions are passed
			ModalPOSummaryCostBooking.clickOnCancel(driver, testCaseName);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}

	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Copy PO: Verify On copying a PO in case of
	 * 'Let user decide' if 'Assign cost to project' setting is NO; Project
	 * autocomplete field should NOT be displayed in Costing tab within Billing
	 * and delivery info
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_275936(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		StandardPO standardPO = new StandardPO();
		try
		{
			user = LoginLogoutServices.login(driver, testCase);

			// navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);

			ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");
			FlowProjectsSettings.getProjectsSettings(driver, testCaseName);
			//
			//			// go to setup->customize
			//			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			//
			//			// click on cost booking link
			//			PageCustomizeSettings.clickOnCostBookingLink(driver, testCaseName);
			//
			//			// click on cost Projects Link
			//			PageCostBookingSettings.clickOnProjects(driver);
			// Click on Always
			PageProjectsSettings.clickOnLetUsersDecide(driver);
			// Click On Save
			PageProjectsSettings.clickOnSave(driver);

			// navigates to EPROC
			driver.get(ConfigProperty.getConfig("Product_URL"));
			ActionBot.waitForPageLoad(driver);

			ScreenShot.screenshot(driver, testCaseName, "After navigating to EPROC Page");

			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			// search po
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);

			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ActionBot.defaultSleep();
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);

			// Click on Edit link of Purchase Order Page
			PagePurchaseOrder.clickOnEditLink(driver, testCaseName);

			// go to cost booking tab
			TabPOSummary.clickOnCostBookingPOSummary(driver);
			ModalPOSummaryCostBooking.clickOnNoRadioBttn(driver, testCaseName);

			// Check Whether Field is Displayed/not
			Boolean bn = ModalPOSummaryCostBooking.isAutocompleteFieldOfProjectDisplayed(driver, testCaseName);
			Assert.assertFalse("Field is displayed", bn);
			// Click on cancel btn after all assertions are passed
			ModalPOSummaryCostBooking.clickOnCancel(driver, testCaseName);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}

	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Copy PO: Verify if 'Assign cost to
	 * project' setting is Always/YES; Project field should be displayed as a
	 * label below cost center field in Cost booking section within an item
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_275937(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		StandardPO standardPO = new StandardPO();
		User user = null;
		boolean flag;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			// navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);

			ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");

			//			// go to setup->customize
			//			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			//			// click on cost booking link
			//			PageCustomizeSettings.clickOnCostBookingLink(driver, testCaseName);
			//
			//			// click on cost Projects Link
			//			PageCostBookingSettings.clickOnProjects(driver);

			FlowProjectsSettings.getProjectsSettings(driver, testCaseName);
			// Click on Always
			PageProjectsSettings.clickOnAlways(driver);
			// Click On Save
			PageProjectsSettings.clickOnSave(driver);

			// navigates to EPROC
			driver.get(ConfigProperty.getConfig("Product_URL"));
			ActionBot.waitForPageLoad(driver);

			// click on Po
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);

			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			// Click oN model item Summary CostBooking
			ModalItemSummaryCostBooking.clickOnCostBooking(driver);
			// get the project Field name
			String projectName = ModalItemSummaryCostBooking.getItemlevelProjectdetails(driver);
			// verify project name
			flag = projectName.toLowerCase().contains(standardPO.getCostBookingRequisitionSummary().getProject().split("\\:")[1].toLowerCase());
			Assert.assertTrue("It is not Label", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}

	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Copy PO: Verify on expanding items grid in
	 * PO; fields in cost booking section should be displayed in the following
	 * order: Cost center; Project; Budget
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_275939(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		String addItemsToPOfield = CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING);
		StandardPO standardPO = new StandardPO();
		try
		{
			user = LoginLogoutServices.login(driver, testCase);

			// navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);
			ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");
			FlowProjectsSettings.getProjectsSettings(driver, testCaseName);

			//			// go to setup->customize
			//			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			//
			//			// click on cost booking link
			//			PageCustomizeSettings.clickOnCostBookingLink(driver, testCaseName);
			//
			//			// click on cost Projects Link
			//			PageCostBookingSettings.clickOnProjects(driver);
			// Click on Always
			PageProjectsSettings.clickOnAlways(driver);
			// Click On Save
			PageProjectsSettings.clickOnSave(driver);

			// navigates to EPROC
			driver.get(ConfigProperty.getConfig("Product_URL"));
			ActionBot.waitForPageLoad(driver);

			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ActionBot.defaultSleep();
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);

			// click on Add Item SummaryEdit link
			PagePurchaseOrder.clickOnEditLink(driver, testCaseName);
			// click on cost booking Summary
			TabPOSummary.clickOnCostBookingPOSummary(driver);

			String costCenterAndBudget = CommonServices.getTestData(IConstantsData.CC_PROJECT_BUDGET);
			String temp[] = costCenterAndBudget.split(",");
			String costCenterField = temp[0];
			String projectField = temp[1];
			String budgetField = temp[2];
			// FIll the Cost Center Field
			String str1 = ModalPOSummaryCostBooking.fillInCostCenterField(driver, testCaseName, costCenterField);
			// FIll the Project Field
			String str2 = ModalPOSummaryCostBooking.fillInProjectField(driver, testCaseName, projectField);
			// FIll the Budget Field
			String str3 = ModalPOSummaryCostBooking.fillInBudgetField(driver, testCaseName, budgetField);
			/// click obn Save
			ModalPOSummaryCostBooking.clickOnSave(driver, testCaseName);
			// click on expand all
			PageStandardPO.clickOnExpandAll(driver);
			String id = PageStandardPO.getItemId(driver, addItemsToPOfield);
			// verify costcenter Item
			boolean bn = str1.equalsIgnoreCase(PageStandardPO.getCostCenterInItem(driver, id));
			Assert.assertTrue("Text Not Matching", bn);
			// verify project Item
			boolean bl = str2.equalsIgnoreCase(PageStandardPO.getProjectInItem(driver, id));
			Assert.assertTrue("Text Not Matching", bl);
			// verify Budget Item
			boolean bln = str3.equalsIgnoreCase(PageStandardPO.getBudgetInItem(driver, id));
			Assert.assertTrue("Text Not Matching", bln);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}

	}

	/**
	 * 
	 * <b>Author: amitkumar.dash </b> <b><br>
	 * <font color="blue">Method :(/b> <br>
	 * </font><b><font color="green">Note :(/b> </font><b><br>
	 * <font color="red">Assertion :(/b> </font><b><br>
	 * @param testCase </font><b><br>
	 * @param addItemsToPOfield </font><b><br>
	 * @param id </font><b><br>
	 * @param index </font><b><br>
	 * @param projectField </font><b><br>
	 * @param budgetField </font><b><br>
	 * @param costCenterField </font><b><br>
	 * @throws Exception </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_275940(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		StandardPO standardPO = new StandardPO();
		String addItemsToPOfield = CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING);

		try
		{
			user = LoginLogoutServices.login(driver, testCase);

			// navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);
			ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");

			// go to setup->customize->cost booking->project
			FlowProjectsSettings.getProjectsSettings(driver, testCaseName);
			//			// go to setup->customize
			//			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			//
			//			// click on cost booking link
			//			PageCustomizeSettings.clickOnCostBookingLink(driver, testCaseName);
			//
			//			// click on cost Projects Link
			//			PageCostBookingSettings.clickOnProjects(driver);
			// Click on Always
			PageProjectsSettings.clickOnAlways(driver);
			// Click On Save
			PageProjectsSettings.clickOnSave(driver);

			// navigates to EPROC
			driver.get(ConfigProperty.getConfig("Product_URL"));
			ActionBot.waitForPageLoad(driver);

			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);

			// search po
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ActionBot.defaultSleep();
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			PagePurchaseOrder.clickOnEditLink(driver, testCaseName);
			ModalPOSummaryCostBooking.clickOnCancel(driver, testCaseName);
			String costCenterAndBudget = CommonServices.getTestData(IConstantsData.CC_PROJECT_BUDGET);
			String temp[] = costCenterAndBudget.split(",");
			String costCenterField = temp[0];
			String projectField = temp[1];
			String budgetField = temp[2];

			// FIll the Cost Center Field
			String str1 = ModalPOSummaryCostBooking.fillInCostCenterField(driver, testCaseName, costCenterField);
			// FIll the Project Field
			String str2 = ModalPOSummaryCostBooking.fillInProjectField(driver, testCaseName, projectField);
			ModalPOSummaryCostBooking.fillInBudgetField(driver, testCaseName, budgetField);
			/// click obn Save
			ModalPOSummaryCostBooking.clickOnSave(driver, testCaseName);
			// click on expand all

			PageStandardPO.clickOnExpandAll(driver);
			// verify costcenter Item
			String id = PageStandardPO.getItemId(driver, addItemsToPOfield);
			boolean bn = str1.equalsIgnoreCase(PageStandardPO.getCostCenterInItem(driver, id));
			Assert.assertTrue("Text Not Matching", bn);
			boolean bln = str2.equalsIgnoreCase(PageStandardPO.getBudgetInItem(driver, id));
			Assert.assertTrue("Text Not Matching", bln);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}

	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</bCopy PO: Verify On copying a PO Project
	 * autocomplete field should be displayed in the following format:
	 * %PROJ_CODE%: %PROJ_NAME%
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_275941(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		StandardPO standardPO = new StandardPO();
		try
		{
			user = LoginLogoutServices.login(driver, testCase);

			// navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);
			ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");
			FlowProjectsSettings.getProjectsSettings(driver, testCaseName);

			//			// go to setup->customize
			//			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName); // click
			//																					// on
			//																					// cost
			//																					// booking
			//																					// link
			//			PageCustomizeSettings.clickOnCostBookingLink(driver, testCaseName);
			//			// click on cost Projects Link
			//			PageCostBookingSettings.clickOnProjects(driver);
			// Click on Always
			PageProjectsSettings.clickOnAlways(driver);
			// Click On Save
			PageProjectsSettings.clickOnSave(driver);

			// navigates to EPROC
			driver.get(ConfigProperty.getConfig("Product_URL"));
			ActionBot.waitForPageLoad(driver);

			// click on Po
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			// search po
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ActionBot.defaultSleep();
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			ActionBot.defaultSleep();
			PurchaseOrder purchaseOrder = new PurchaseOrder();
			purchaseOrder.setCustomDate(CommonUtilities.getRequiredBy());

			PageStandardPO.fillRequiredByDate(driver, testCaseName, purchaseOrder.getCustomDate().getDay(), purchaseOrder.getCustomDate().getMonth(),
				purchaseOrder.getCustomDate().getYear());
			// Click on Edit link of Purchase Order Page
			PagePurchaseOrder.clickOnEditLink(driver, testCaseName);
			// go to cost booking tab
			TabPOSummary.clickOnCostBookingPOSummary(driver);
			// Check Whether Autocomplet field Is displayed or not
			ModalPOSummaryCostBooking.isAutocompleteFieldOfProjectDisplayed(driver, testCaseName);
			// get The Project code and projectname
			String projectName = ModalPOSummaryCostBooking.getProjectCodeAndProjectName(driver, testCaseName);
			// click on save
			ModalPOSummaryCostBooking.clickOnSave(driver, testCaseName);
			// Click on save
			MainPageHeaderLevelTab.clickOnSetUpTab(driver);
			// click on masterset up tabe
			MainPageHeaderLevelTab.clickOnMasterSubTab(driver);
			// clck on projectLink
			PageMasterDataSettings.clickOnProjectsLink(driver, testCaseName);

			PageProjectsMasterDataSettings.getSearch(driver, testCaseName, projectName);
			PageProjectsMasterDataSettings.clickOnGo(driver, testCaseName);
			boolean bn = projectName.equals(PageProjectsMasterDataSettings.getProjectName(driver, testCaseName));
			Assert.assertTrue("project name doesnot matches", bn);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}

	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</bCopy PO: Verify User should be able to
	 * select projects and tasks in Project autocomplete field in costing tab
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_275946(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		StandardPO standardPO = new StandardPO();
		String projectField = CommonServices.getTestData(IConstantsData.TASK_NAME);

		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			// navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);
			ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");
			FlowProjectsSettings.getProjectsSettings(driver, testCaseName);

			//			// go to setup->customize
			//			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			//
			//			// click on cost booking link
			//			PageCustomizeSettings.clickOnCostBookingLink(driver, testCaseName);
			//			// click on cost Projects Link
			//			PageCostBookingSettings.clickOnProjects(driver);
			// Click on Always
			PageProjectsSettings.clickOnAlways(driver);
			// Click On Save
			PageProjectsSettings.clickOnSave(driver);

			// navigates to EPROC
			driver.get(ConfigProperty.getConfig("Product_URL"));
			ActionBot.waitForPageLoad(driver);

			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			// search po
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ActionBot.defaultSleep();
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			// Click on Edit link of Purchase Order Page
			// Select requirerd
			ActionBot.defaultSleep();
			PurchaseOrder purchaseOrder = new PurchaseOrder();
			purchaseOrder.setCustomDate(CommonUtilities.getRequiredBy());

			PageStandardPO.fillRequiredByDate(driver, testCaseName, purchaseOrder.getCustomDate().getDay(), purchaseOrder.getCustomDate().getMonth(),
				purchaseOrder.getCustomDate().getYear());
			PagePurchaseOrder.clickOnEditLink(driver, testCaseName);
			// go to cost booking tab
			TabPOSummary.clickOnCostBookingPOSummary(driver);
			// ActionBot.defaultSleep();
			// clear project field
			String costCenterBudgetAndProject = CommonServices.getTestData(IConstantsData.CC_PROJECT_BUDGET);
			String project;
			String temp[] = StringUtils.split(costCenterBudgetAndProject.trim(), ",");
			temp[0].trim();
			temp[1].trim();
			project = temp[2].trim();
			ModalPOSummaryCostBooking.clearandfillInProjectField(driver, testCaseName, projectField);
			ModalPOSummaryCostBooking.fillInBudgetField(driver, testCaseName, project);
			ModalPOSummaryCostBooking.clickOnSave(driver, testCaseName);

			// click on submitPO
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			ActionBot.defaultSleep();
			ActionBot.scroll(driver);
			PagePurchaseOrderDetails.clickOnCostBookingLink(driver);
			String newTaskName = PagePurchaseOrderDetails.getProjectTaskName(driver);
			Assert.assertNotEquals("Task name are not Equal", projectField, newTaskName);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}

	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</bCopy PO: Verify an info icon should be
	 * present beside Project field in costing tab with the following fields
	 * displayed in a tooltip: Project Code; Project Name; Project Manager &
	 * Duration (From_Date to To_Date)
	 * 
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_275947(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		StandardPO standardPO = new StandardPO();
		String projectField = CommonServices.getTestData(IConstantsData.FILL_PROJECT_NAME);
		String SearchItem = CommonServices.getTestData(IConstantsData.FILL_PROJECT_NAME);
		String budgetField = CommonServices.getTestData(IConstantsData.budget);
		try
		{
			user = LoginLogoutServices.login(driver, testCase);

			// navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);
			ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");
			FlowProjectsSettings.getProjectsSettings(driver, testCaseName);
			//			// go to setup->customize
			//			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			//			// click on cost booking link
			//			PageCustomizeSettings.clickOnCostBookingLink(driver, testCaseName);
			//			// click on cost Projects Link
			//			PageCostBookingSettings.clickOnProjects(driver);
			// Click on Always
			PageProjectsSettings.clickOnAlways(driver);
			// Click On Save
			PageProjectsSettings.clickOnSave(driver);

			// navigates to EPROC
			driver.get(ConfigProperty.getConfig("Product_URL"));
			ActionBot.waitForPageLoad(driver);

			// click on Po
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			// search po
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ActionBot.defaultSleep();
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			ActionBot.defaultSleep();
			PurchaseOrder purchaseOrder = new PurchaseOrder();
			purchaseOrder.setCustomDate(CommonUtilities.getRequiredBy());

			PageStandardPO.fillRequiredByDate(driver, testCaseName, purchaseOrder.getCustomDate().getDay(), purchaseOrder.getCustomDate().getMonth(),
				purchaseOrder.getCustomDate().getYear());
			// Click on Edit link of Purchase Order Page
			PagePurchaseOrder.clickOnEditLink(driver, testCaseName);
			// go to cost booking tab
			TabPOSummary.clickOnCostBookingPOSummary(driver);
			// fill and get projectAutocomplet data
			ModalPOSummaryCostBooking.clearandfillInProjectField(driver, testCaseName, projectField);
			ModalPOSummaryCostBooking.fillInBudgetField(driver, testCaseName, budgetField);
			// get element text
			String projectCodeInfo = ModalPOSummaryCostBooking.getProjectCodeInfo(driver, testCaseName);
			String prjectnameinfo = ModalPOSummaryCostBooking.getProjectNameInfo(driver, testCaseName);
			String projectmanagerinfo = ModalPOSummaryCostBooking.getProjecmanagerInfo(driver, testCaseName);
			// String projectduration =
			// ModalPOSummaryCostBooking.getProjecduration(driver,
			// testCaseName);
			// click on setup
			MainPageHeaderLevelTab.clickOnSetUpTab(driver);
			// click on master set up tabe
			MainPageHeaderLevelTab.clickOnMasterSubTab(driver);
			// clck on projectLink
			PageMasterDataSettings.clickOnProjectsLink(driver, testCaseName);
			// fill searchBox
			PageProjectsMasterDataSettings.fillProjectSearchBox(driver, testCaseName, SearchItem);
			// CLICK ON GO
			PageProjectsMasterDataSettings.clickOnGo(driver, testCaseName);
			// verify project code
			Assert.assertEquals("project Code doesnot matches", projectCodeInfo, PageProjectsMasterDataSettings.getProjectCode(driver, testCaseName));

			// verify project name
			boolean bln = prjectnameinfo.equals(PageProjectsMasterDataSettings.getProjectName(driver, testCaseName));
			Assert.assertTrue("project Name doesnot matches", bln);
			// Click on Edit
			PageProjectsMasterDataSettings.clickOnEdit(driver, testCaseName);
			// verify projectmanager name
			boolean bln1 = projectmanagerinfo.equals(PageProjectsMasterDataSettings.getProjectManagername(driver, testCaseName));
			Assert.assertTrue("project manager name doesnot matches", bln1);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}

	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</bCopy PO: Verify Project tooltip info icon
	 * should not be displayed if no project is selected in project field
	 * 
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_275948(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;

		try
		{
			user = LoginLogoutServices.login(driver, testCase);

			// navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);
			ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");
			FlowProjectsSettings.getProjectsSettings(driver, testCaseName);

			//			// go to setup->customize
			//			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			//			// click on cost booking link
			//			PageCustomizeSettings.clickOnCostBookingLink(driver, testCaseName);
			//			// click on cost Projects Link
			//			PageCostBookingSettings.clickOnProjects(driver);
			// Click on Always
			PageProjectsSettings.clickOnAlways(driver);
			// Click On Save
			PageProjectsSettings.clickOnSave(driver);

			// navigates to EPROC
			driver.get(ConfigProperty.getConfig("Product_URL"));
			ActionBot.waitForPageLoad(driver);

			// click on Po
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			// Filter all Inprogresspo
			FlowPoListing.filterAllReleasedPO(driver, testCaseName);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ActionBot.defaultSleep();
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			// click on Edit
			// Click on Edit link of Purchase Order Page
			PagePurchaseOrder.clickOnEditLink(driver, testCaseName);
			// go to cost booking tab
			TabPOSummary.clickOnCostBookingPOSummary(driver);
			ActionBot.defaultSleep();
			// clear project field
			ModalPOSummaryCostBooking.clearAndclickOnProject(driver, testCaseName);
			// ModalPOSummaryCostBooking.clickOnProjectField(driver,
			// testCaseName);
			// check whether info tooltil is displayed or not
			Assert.assertFalse("InfoIcon is displayed", ModalPOSummaryCostBooking.isInfoIconDisplayed(driver, testCaseName));
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}

	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</bCopy PO: Verify an info icon should be
	 * present beside Project field in costing tab with the following fields
	 * displayed in a tooltip: Project Code; Project Name; Project Manager &
	 * Duration (From_Date to To_Date) [Check tooltip when any of the field is
	 * empty]
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_275949(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		String projectField = CommonServices.getTestData(IConstantsData.FILLPROJECTFIELD_WITHOUTMANAGERFIELD);
		String budgetField = CommonServices.getTestData(IConstantsData.budget);
		StandardPO standardpo = new StandardPO();
		try
		{
			user = LoginLogoutServices.login(driver, testCase);

			// navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);
			ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");
			FlowProjectsSettings.getProjectsSettings(driver, testCaseName);

			//			// go to setup->customize
			//			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			//			// click on cost booking link
			//			PageCustomizeSettings.clickOnCostBookingLink(driver, testCaseName);
			//			// click on cost Projects Link
			//			PageCostBookingSettings.clickOnProjects(driver);
			// Click on Always
			PageProjectsSettings.clickOnAlways(driver);
			// Click On Save
			PageProjectsSettings.clickOnSave(driver);

			// navigates to EPROC
			driver.get(ConfigProperty.getConfig("Product_URL"));
			ActionBot.waitForPageLoad(driver);

			// click on Po
			standardpo = ObjectCreation.getStandardPoCreation("catalogItem");
			standardpo.setNextAction(IConstantsData.SUBMIT_PO_FOR_PROCESSING);
			FlowStandardPo.createStandardPo(driver, testCaseName, standardpo);
			// Filter all Inprogresspo
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			FlowPoListing.filterAllInProgressPO(driver, testCaseName);
			// click on Edit
			// Click on Edit link of Purchase Order Page
			PagePurchaseOrder.clickOnEditLink(driver, testCaseName);
			// go to cost booking tab
			TabPOSummary.clickOnCostBookingPOSummary(driver);
			ActionBot.defaultSleep();
			// clear project field
			ModalPOSummaryCostBooking.clearandfillInProjectField(driver, testCaseName, projectField);
			ModalPOSummaryCostBooking.fillInBudgetField(driver, testCaseName, budgetField);
			String projectmanagerfield = ModalPOSummaryCostBooking.getProjecmanagerInfoField(driver, testCaseName);

			boolean bln = projectmanagerfield.equalsIgnoreCase("-");
			Assert.assertTrue("'-' Not Present", bln);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}

	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Copy PO: Verify info icon tooltip beside
	 * project field in costing tab to indicate whether the type selected in
	 * project or task
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_275954(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		CommonServices.getTestData(IConstantsData.FILL_PROJECT_NAME);
		StandardPO standardPO = new StandardPO();
		try
		{
			user = LoginLogoutServices.login(driver, testCase);

			// navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);
			ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");
			FlowProjectsSettings.getProjectsSettings(driver, testCaseName);

			//			// go to setup->customize
			//			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			//			// click on cost booking link
			//			PageCustomizeSettings.clickOnCostBookingLink(driver, testCaseName);
			//			// click on cost Projects Link
			//			PageCostBookingSettings.clickOnProjects(driver);
			// Click on Always
			PageProjectsSettings.clickOnAlways(driver);
			// Click On Save
			PageProjectsSettings.clickOnSave(driver);

			// navigates to EPROC
			driver.get(ConfigProperty.getConfig("Product_URL"));
			ActionBot.waitForPageLoad(driver);

			// click on Po
			ActionBot.defaultSleep();
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			// Filter all Inprogresspo
			FlowPoListing.filterAllReleasedPO(driver, testCaseName);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			// click on Edit
			// Click on Edit link of Purchase Order Page
			PagePurchaseOrder.clickOnEditLink(driver, testCaseName);
			// go to cost booking tab
			TabPOSummary.clickOnCostBookingPOSummary(driver);
			ActionBot.defaultSleep();

			// clear project fieldanf fill Project Field
			// ModalPOSummaryCostBooking.clearandfillInProjectField(driver,
			// testCaseName, projectField);
			ActionBot.defaultSleep();
			// check project field is displayed/not
			boolean bln = ModalPOSummaryCostBooking.isProjectInfoIconDisplayed(driver, testCaseName);
			Assert.assertTrue("project Icon is not displayed", bln);
			// check task filed is displayed or not
			ActionBot.defaultSleep();
			/*
			 * boolean bln1 =
			 * ModalPOSummaryCostBooking.isTaskInfoIconDisplayed(driver,
			 * testCaseName); Assert.assertFalse("Task Icon is displayed",
			 * bln1);
			 */

			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}

	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Copy PO: Verify when no project/task is
	 * selected; the info icon indicating whether the type selected in project
	 * or task should not be displayed
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_275955(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);
			ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");
			FlowProjectsSettings.getProjectsSettings(driver, testCaseName);

			//			// go to setup->customize
			//			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			//			// click on cost booking link
			//			PageCustomizeSettings.clickOnCostBookingLink(driver, testCaseName);
			//			// click on cost Projects Link
			//			PageCostBookingSettings.clickOnProjects(driver);
			// Click on Always
			PageProjectsSettings.clickOnAlways(driver);
			// Click On Save
			PageProjectsSettings.clickOnSave(driver);

			// navigates to EPROC
			driver.get(ConfigProperty.getConfig("Product_URL"));
			ActionBot.waitForPageLoad(driver);

			// click on Po
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			// Filter all Inprogresspo
			FlowPoListing.filterAllInProgressPO(driver, testCaseName);
			// click on Edit
			// Click on Edit link of Purchase Order Page
			PagePurchaseOrder.clickOnEditLink(driver, testCaseName);
			// go to cost booking tab
			TabPOSummary.clickOnCostBookingPOSummary(driver);
			ActionBot.defaultSleep();
			// clear project field and click Project Field
			ModalPOSummaryCostBooking.clearAndclickOnProject(driver, testCaseName);

			boolean bln = ModalPOSummaryCostBooking.isProjectInfoIconDisplayed(driver, testCaseName);
			Assert.assertFalse("Project info Icon is displayed", bln);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}

	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Copy PO: Verify on copying a PO if company
	 * of the PO is changed; User should be able to select valid (based on
	 * validity date range) & active projects for the Company in Projects field
	 * 
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_275958(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);

			user.getUserSettings();
			// get company name
			String companies = CommonServices.getTestData(IConstantsData.Other_Company_Name);

			// navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);
			ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");
			FlowProjectsSettings.getProjectsSettings(driver, testCaseName);

			//			// go to setup->customize
			//			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			//			// click on cost booking link
			//			PageCustomizeSettings.clickOnCostBookingLink(driver, testCaseName);
			//			// click on cost Projects Link
			//			PageCostBookingSettings.clickOnProjects(driver);
			// Click on Always
			PageProjectsSettings.clickOnAlways(driver);
			// Click On Save
			PageProjectsSettings.clickOnSave(driver);

			// navigates to EPROC
			driver.get(ConfigProperty.getConfig("Product_URL"));
			ActionBot.waitForPageLoad(driver);

			// click on Po
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			// Filter all Inprogresspo
			FlowPoListing.filterAllInProgressPO(driver, testCaseName);
			// click on Edit
			// Click on Edit link of Purchase Order Page
			PagePurchaseOrder.clickOnEditLink(driver, testCaseName);
			// go to Billing tab
			TabPOSummary.clickOnBillingPOSummary(driver);
			// set diff company
			FlowSelectingDifferentCompanyInPOSummary.selectDifferentCompanies(driver, testCaseName);

			ModalPOSummaryCostBooking.clickOnCancel(driver, testCaseName);
			ActionBot.defaultSleep();
			Map<String, String> CPB_MAP = ObjectCreation.getCostCenterProjectAndBudget();

			String projectField = CPB_MAP.get("project");

			ModalPOSummaryCostBooking.fillInProjectField(driver, testCaseName, projectField);
			boolean bn = ModalPOSummaryCostBooking.isAutocompleteFieldOfProjectDisplayed(driver, testCaseName);
			ModalPOSummaryCostBooking.clickOnSave(driver, testCaseName);
			Assert.assertTrue("Autocomplete project field is displayed", !bn);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}

	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Copy PO: Verify on copying a PO if company
	 * of the PO is changed; Projects field should get reset
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_275959(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		String projectField = CommonServices.getTestData(IConstantsData.FILL_PROJECT_NAME);
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			UserSettings userSettings = user.getUserSettings();
			// get company name
			String companies = userSettings.getCompanyName();

			// navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);
			ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");
			//go to setup->customize->cost booking->project
			FlowProjectsSettings.getProjectsSettings(driver, testCaseName);

			//			// go to setup->customize
			//			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			//			// click on cost booking link
			//			PageCustomizeSettings.clickOnCostBookingLink(driver, testCaseName);
			//			// click on cost Projects Link
			//			PageCostBookingSettings.clickOnProjects(driver);
			// Click on Always
			PageProjectsSettings.clickOnAlways(driver);
			// Click On Save
			PageProjectsSettings.clickOnSave(driver);

			// navigates to EPROC
			driver.get(ConfigProperty.getConfig("Product_URL"));
			ActionBot.waitForPageLoad(driver);

			// click on Po
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			// Filter all Inprogresspo
			FlowPoListing.filterAllInProgressPO(driver, testCaseName);
			// click on Edit
			// Click on Edit link of Purchase Order Page
			PagePurchaseOrder.clickOnEditLink(driver, testCaseName);
			// go to Costing Tab And select a project
			TabPOSummary.clickOnCostBookingPOSummary(driver);
			// select project
			ModalPOSummaryCostBooking.clearandfillInProjectField(driver, testCaseName, projectField);

			TabPOSummary.clickOnBillingPOSummary(driver);
			// set diff company
			FlowSelectingDifferentCompanyInPOSummary.selectDifferentCompanies(driver, testCaseName);
			ActionBot.defaultSleep();
			TabPOSummary.clickOnCostBookingPOSummary(driver);
			ActionBot.defaultSleep();
			Assert.assertTrue("Field is Not Reset", ModalPOSummaryCostBooking.isFieldReset(driver, testCaseName));

			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}

	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Copy PO: Check working of Projects in Copy
	 * PO in Mozilla Firefox
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_275972(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		StandardPO standardPO = new StandardPO();
		String projectField = CommonServices.getTestData(IConstantsData.FILL_PROJECT_NAME);
		try
		{
			user = LoginLogoutServices.login(driver, testCase);

			// navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);
			ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");
			//go to setup->customize->cost booking->project
			FlowProjectsSettings.getProjectsSettings(driver, testCaseName);

			//			// go to setup->customize
			//			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			//
			//			// click on cost booking link
			//			PageCustomizeSettings.clickOnCostBookingLink(driver, testCaseName);
			//			// click on cost Projects Link
			//			PageCostBookingSettings.clickOnProjects(driver);
			// Click on Always
			PageProjectsSettings.clickOnAlways(driver);
			// Click On Save
			PageProjectsSettings.clickOnSave(driver);

			// navigates to EPROC
			driver.get(ConfigProperty.getConfig("Product_URL"));
			ActionBot.waitForPageLoad(driver);

			// click on Po
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			// search po
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			PagePurchaseOrder.clickOnEditLink(driver, testCaseName);
			ModalPOSummaryCostBooking.getProjectCodeAndProjectName(driver, testCaseName);
			ModalPOSummaryCostBooking.clickOnCancel(driver, testCaseName);
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PagePurchaseOrderDetails.clickOnCostBookingLink(driver);
			boolean taskName = projectField.equalsIgnoreCase(PagePurchaseOrderDetails.getProjectTaskName(driver));
			Assert.assertTrue("Project And Task Name are unequal", taskName);
			// test case 275969 maped with 275970,275971,275972,275973
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}

	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>PO View>>Item details modal: Verify the
	 * new item details modal should be displayed properly on clicking on the
	 * catalog item in PO View
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_282652(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		boolean flag;
		Requisition requisition = null;
		Item item = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab

			item = ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);
			requisition = ObjectCreation.getRequisition(driver);
			requisition.setItems(item);

			requisition = CombineFlowImpl.reqToPO(driver, testCaseName, requisition);
			FlowPoListing.searchPo(driver, testCaseName, requisition.getReqNo(), IConstantsData.SEARCH_BY_ORDER_DESCRIPTION);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			ActionBot.scroll(driver, "400");

			PageViewPurchaseOrder.clickOnItemName(driver, testCaseName);
			String itemTitle = com.zycus.automation.eproc.pageobjects.modals.itemdetails.ModalItemDetails.getItemTitle(driver, testCaseName,
				requisition.getItems().getCatelogItems().get(0).getItemID());

			flag = itemTitle.equalsIgnoreCase(requisition.getItems().getCatelogItems().get(0).getItemName());
			Assert.assertTrue("Modal item details is not open", flag);
			//			//	PageSearchListing.clickCloseOnItemPopUp(driver, testCaseName);
			//			WebElement ele = ActionBot.findElement(driver, By.xpath(""));
			//			ele.sendKeys(Keys.ESCAPE);

			/*
			 * //click on catalog Item boolean catalogItem =
			 * ModalItemPoview.checkIsCatalogItemSame(driver, 1); //verify Item
			 * in modal Assert.assertTrue(catalogItem);
			 */

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}

	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>PO View>>Item details modal: Verify on
	 * clicking on the catalog item in PO View; the following actions should NOT
	 * be present in item details modal: Add to cart; Add to basket; Add to
	 * favorites
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_282653(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();

		User user = null;
		boolean flag;
		StandardPO standardPO = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);

			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.RELEASED);
			Assert.assertTrue("PO is not in released state", flag);

			// click on po link
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			ActionBot.scroll(driver, "450");
			// click on catalog Item
			ModalItemPoview.clickOnCatalogItem(driver, 1);
			// check AddtoCart Present or not
			boolean isAddToCartpresent = ModalItemPoview.isAddtoCart(driver);
			Assert.assertFalse("Add to cart option is present", isAddToCartpresent);
			// check Add to Basket Present
			boolean isAddBasketpresent = ModalItemPoview.isAddtoBasket(driver);
			Assert.assertFalse("Add to basket option is present", isAddBasketpresent);

			boolean isAddFavorites = ModalItemPoview.isAddtoFavorites(driver);
			Assert.assertFalse("Add to favorutes option is present", isAddFavorites);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}

	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>PO View>>Item details modal: Verify Item
	 * details modal with maximum characters in the following fields: Short
	 * Description; Supplier Part Id; Price; Item image; Quantity box; UOM;
	 * Description; Manufacturer; Category; SPSC Code; Supplier; Delivery Lead
	 * Time (days); Contract No; Specification Name; Specification Key;
	 * Specification Value; Attachment files and web links
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_282654(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		Requisition requisition = null;
		boolean flag;
		String status;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			Item item = ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);
			item.getCatelogItems().get(0).setItemName(CommonServices.getTestData(IConstantsData.MAX_CHARACTER_ITEMNAME));

			FlowShoppingCart.emptyShoppingCart(driver, testCaseName);
			FlowSearchListing.searchItem(driver, testCaseName, item.getCatelogItems().get(0).getItemName());
			List<WebElement> itemNames = PageSearchListing.getItemName(driver, testCaseName);
			String itemId = PageSearchListing.getItemId(driver, testCaseName, itemNames.get(0).getText().trim());
			PageSearchListing.clickOnItemName(driver, testCaseName, itemId);

			String itemDescription = ModalItemDetails.getItemDesc(driver, testCaseName, itemId);
			String itemCategory = ModalItemDetails.getItemCategory(driver, testCaseName, itemId);
			String itemSpscCode = ModalItemDetails.getItemSpscCode(driver, testCaseName, itemId);
			String leadTime = ModalItemDetails.getItemDeliveryLeadTime(driver, testCaseName, itemId);
			String supplierContact = ModalItemDetails.getItemSupplierContact(driver, testCaseName, itemId);
			String supplierName = ModalItemDetails.getItemSupplierName(driver, testCaseName, itemId);
			ModalItemDetails.clickOnCloseItemDetailsMdoal(driver, testCaseName, itemId);
			ActionBot.defaultSleep();
			PageSearchListing.addToCart(driver, testCaseName, itemId);
			PopUpDefaultConfirmation.clickOnConfirmYesButton(driver, testCaseName);
			ActionBot.waitTillPopUpIsPresent(driver, IPageSearchListing.ITEM_ADDED_TO_CART_SUCCESS_MESSAGE);
			requisition = ObjectCreation.getRequisition(driver);
			item.getCatelogItems().get(0).setItemID(itemId);

			requisition.setItems(item);
			// to checkout
			PageSearchListing.clickOnCheckOutButton(driver, testCaseName);
			// to fill checkout form and submit
			FlowRequisition.fillcheckoutForm(driver, testCaseName, requisition, item);
			requisition.setItems(item);
			// to check/modify workflow
			ActionBot.scroll(driver, "400");
			// to perform next action
			if (requisition.getNextAction().equalsIgnoreCase(IConstantsData.SUBMIT_REQ))
			{
				FlowRequisition.submitReq(driver, testCaseName, false);
			}
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			Assert.assertTrue("Error while searching requisition at my requisition", requisition.isResult());

			ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, requisition.getReqNo(), IConstantsData.REQUISITION,
				IConstantsData.APPROVE);

			approvalAllRequests = FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

			requisition = FlowBuyersDeskListing.searchAtBuyersDeskListing(driver, testCaseName, requisition);
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			FlowBuyersDesk.convertToPo(driver, testCaseName);
			List<PurchaseOrder> purchaseOrders = FlowBuyersDesk.submitAllSuggestedPosForProcessing(driver, testCaseName);

			FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			if (status.equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL))
			{
				approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, purchaseOrders.get(0).getPoNo(), IConstantsData.PURCHASE_ORDER,
					IConstantsData.APPROVE);
				FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);
				FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			}

			flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.RELEASED);
			Assert.assertTrue("PO is not in released state", flag);

			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			ActionBot.scroll(driver, "450");
			PageViewPurchaseOrder.clickOnItemName(driver, testCaseName);

			flag = ModalItemDetails.getItemTitle(driver, testCaseName, itemId).equalsIgnoreCase(item.getCatelogItems().get(0).getItemName());
			Assert.assertTrue("Item name is not same", flag);
			flag = ModalItemDetails.getItemDesc(driver, testCaseName, itemId).equalsIgnoreCase(itemDescription);
			Assert.assertTrue("Item name is not same", flag);
			flag = ModalItemDetails.getItemCategory(driver, testCaseName, itemId).equalsIgnoreCase(itemCategory);
			Assert.assertTrue("Item category is not same", flag);
			flag = ModalItemDetails.getItemSpscCode(driver, testCaseName, itemId).equalsIgnoreCase(itemSpscCode);
			Assert.assertTrue("Item SPSC code is not same", flag);
			flag = ModalItemDetails.getItemSupplierContact(driver, testCaseName, itemId).equalsIgnoreCase(supplierContact);
			Assert.assertTrue("Item supplier contact is not same", flag);
			flag = ModalItemDetails.getItemSupplierName(driver, testCaseName, itemId).equalsIgnoreCase(supplierName);
			Assert.assertTrue("Item supplier name is not same", flag);
			flag = ModalItemDetails.getItemDeliveryLeadTime(driver, testCaseName, itemId).equalsIgnoreCase(leadTime);
			Assert.assertTrue("Delivery lead time is not same", flag);

			//			//FlowRequisition.createRequisition(driver, testCaseName, requisition);
			//			StandardPO standardpo = ObjectCreation.getStandardPoCreation("catalogItem");
			//			standardpo.getItems().getCatelogItems().get(0).setItemName(IConstantsData.MAX_CHARACTER_ITEMNAME);
			//			FlowStandardPo.createStandardPo(driver, testCaseName, standardpo);
			//			standardpo.setNextAction(IConstantsData.SUBMIT_PO_FOR_PROCESSING);
			//
			//			// click on catalog item link
			//			Assert.assertTrue(ModalItemPoview.isMaxCharItemNameDisplayedProperly(driver, 1));

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}

	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>PO View>>Item details modal: Verify Item
	 * details modal with special characters in the following fields: Short
	 * Description; Supplier Part Id; Price; Item image; Quantity box; UOM;
	 * Description; Manufacturer; Category; SPSC Code; Supplier; Delivery Lead
	 * Time (days); Contract No; Specification Name; Specification Key;
	 * Specification Value; Attachment files and web links
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_282655(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;

		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			MainPageHeaderLevelTab.clickOnPOTab(driver);

			StandardPO standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.GUIDED_ITEM);
			String itemNameBefore = CommonServices.getTestData(IConstantsData.SPECIAL_CHARACTER_ITEMNAME);
			standardpo.getItems().getGuidedItems().get(0).setShortDescription(itemNameBefore);
			standardpo.setNextAction(IConstantsData.SUBMIT_PO_FOR_PROCESSING);
			FlowStandardPo.createStandardPo(driver, testCaseName, standardpo);
			FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			String itemNameAfter = PageViewPurchaseOrder.getItemName(driver, testCaseName);
			//PageViewPurchaseOrder.clickOnItemName(driver, testCaseName);
			// click on catalog item link
			Assert.assertTrue(itemNameAfter.equalsIgnoreCase(itemNameBefore));

			//			StandardPO standardpo = ObjectCreation.getStandardPoCreation("catalogItem");
			//			standardpo.getItems().getCatelogItems().get(0).setItemName(IConstantsData.SPECIAL_CHARACTER_ITEMNAME);
			//			FlowStandardPo.createStandardPo(driver, testCaseName, standardpo);
			//			standardpo.setNextAction(IConstantsData.SUBMIT_PO_FOR_PROCESSING);
			//			// click on catalog item link
			//			Assert.assertTrue(ModalItemPoview.isSpecialCharItemNameDisplayedProperly(driver, 1));

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}

	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>PO View>>Item details modal: Verify Item
	 * details modal with multilingual characters in the following fields: Short
	 * Description; Supplier Part Id; Price; Item image; Quantity box; UOM;
	 * Description; Manufacturer; Category; SPSC Code; Supplier; Delivery Lead
	 * Time (days); Contract No; Specification Name; Specification Key;
	 * Specification Value; Attachment files and web links
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_282657(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		Requisition requisition = null;
		boolean flag;
		String status;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			//MainPageHeaderLevelTab.clickOnPOTab(driver);

			//			StandardPO standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.GUIDED_ITEM);
			//			String itemNameBefore=CommonServices.getTestData(IConstantsData.MULTILINGUAL_CHARACTER_ITEMNAME);
			//			standardpo.getItems().getGuidedItems().get(0).setShortDescription(itemNameBefore);
			//			standardpo.setNextAction(IConstantsData.SUBMIT_PO_FOR_PROCESSING);
			//			FlowStandardPo.createStandardPo(driver, testCaseName, standardpo);
			//			FlowPoListing.searchPo(driver, testCaseName,standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			//			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			////			ActionBot.scroll(driver,"600");
			////			String itemNameAfter = PageViewPurchaseOrder.getItemName(driver, testCaseName);
			//			//PageViewPurchaseOrder.clickOnItemName(driver, testCaseName);
			//			// click on catalog item link
			//		//	Assert.assertTrue(itemNameAfter.contains(itemNameBefore));
			//			boolean flag = ModalItemPoview.isMultiLingualCharItemNameDisplayedProperly(driver, 1);
			//			Assert.assertTrue(flag);

			//			StandardPO standardpo = ObjectCreation.getStandardPoCreation("catalogItem");
			//			standardpo.getItems().getCatelogItems().get(0).setItemName(CommonServices.getTestData(IConstantsData.MULTILINGUAL_CHARACTER_ITEMNAME));
			//			standardpo.setNextAction(IConstantsData.SUBMIT_PO_FOR_PROCESSING);//SUBMIT_PO_FOR_PROCESSING
			//			FlowStandardPo.createStandardPo(driver, testCaseName, standardpo);
			//			FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			//			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			//			ActionBot.defaultSleep();
			//			PageViewPurchaseOrder.clickOnFirstItemName(driver, testCaseName);
			//			// click on catalog item link
			//			boolean flag = ModalItemPoview.isMultiLingualCharItemNameDisplayedProperly(driver, 1);
			//			Assert.assertTrue(flag);
			//			
			Item item = ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);
			item.getCatelogItems().get(0).setItemName(CommonServices.getTestData(IConstantsData.MULTILINGUAL_CHARACTER_ITEMNAME));

			FlowShoppingCart.emptyShoppingCart(driver, testCaseName);
			FlowSearchListing.searchItem(driver, testCaseName, item.getCatelogItems().get(0).getItemName());
			List<WebElement> itemNames = PageSearchListing.getItemName(driver, testCaseName);
			String itemId = PageSearchListing.getItemId(driver, testCaseName, itemNames.get(0).getText().trim());
			PageSearchListing.clickOnItemName(driver, testCaseName, itemId);

			String itemDescription = ModalItemDetails.getItemDesc(driver, testCaseName, itemId);
			String itemCategory = ModalItemDetails.getItemCategory(driver, testCaseName, itemId);
			String itemSpscCode = ModalItemDetails.getItemSpscCode(driver, testCaseName, itemId);
			String leadTime = ModalItemDetails.getItemDeliveryLeadTime(driver, testCaseName, itemId);
			String supplierContact = ModalItemDetails.getItemSupplierContact(driver, testCaseName, itemId);
			String supplierName = ModalItemDetails.getItemSupplierName(driver, testCaseName, itemId);
			ModalItemDetails.clickOnCloseItemDetailsMdoal(driver, testCaseName, itemId);
			ActionBot.defaultSleep();
			PageSearchListing.addToCart(driver, testCaseName, itemId);
			PopUpDefaultConfirmation.clickOnConfirmYesButton(driver, testCaseName);
			ActionBot.waitTillPopUpIsPresent(driver, IPageSearchListing.ITEM_ADDED_TO_CART_SUCCESS_MESSAGE);
			requisition = ObjectCreation.getRequisition(driver);
			item.getCatelogItems().get(0).setItemID(itemId);

			requisition.setItems(item);
			// to checkout
			PageSearchListing.clickOnCheckOutButton(driver, testCaseName);
			// to fill checkout form and submit
			FlowRequisition.fillcheckoutForm(driver, testCaseName, requisition, item);
			requisition.setItems(item);
			// to check/modify workflow
			ActionBot.scroll(driver, "400");
			// to perform next action
			if (requisition.getNextAction().equalsIgnoreCase(IConstantsData.SUBMIT_REQ))
			{
				FlowRequisition.submitReq(driver, testCaseName, false);
			}
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			Assert.assertTrue("Error while searching requisition at my requisition", requisition.isResult());

			ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, requisition.getReqNo(), IConstantsData.REQUISITION,
				IConstantsData.APPROVE);

			approvalAllRequests = FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

			requisition = FlowBuyersDeskListing.searchAtBuyersDeskListing(driver, testCaseName, requisition);
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			FlowBuyersDesk.convertToPo(driver, testCaseName);
			List<PurchaseOrder> purchaseOrders = FlowBuyersDesk.submitAllSuggestedPosForProcessing(driver, testCaseName);

			FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			if (status.equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL))
			{
				approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, purchaseOrders.get(0).getPoNo(), IConstantsData.PURCHASE_ORDER,
					IConstantsData.APPROVE);
				FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);
				FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			}

			flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.RELEASED);
			Assert.assertTrue("PO is not in released state", flag);

			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			ActionBot.scroll(driver, "450");
			PageViewPurchaseOrder.clickOnItemName(driver, testCaseName);

			flag = ModalItemDetails.getItemDesc(driver, testCaseName, itemId).equalsIgnoreCase(itemDescription);
			Assert.assertTrue("Item name is not same", flag);

			flag = ModalItemDetails.getItemCategory(driver, testCaseName, itemId).equalsIgnoreCase(itemCategory);
			Assert.assertTrue("Item category is not same", flag);

			flag = ModalItemDetails.getItemSpscCode(driver, testCaseName, itemId).equalsIgnoreCase(itemSpscCode);
			Assert.assertTrue("Item SPSC code is not same", flag);

			flag = ModalItemDetails.getItemSupplierContact(driver, testCaseName, itemId).equalsIgnoreCase(supplierContact);
			Assert.assertTrue("Item supplier contact is not same", flag);

			flag = ModalItemDetails.getItemSupplierName(driver, testCaseName, itemId).equalsIgnoreCase(supplierName);
			Assert.assertTrue("Item supplier name is not same", flag);

			flag = ModalItemDetails.getItemDeliveryLeadTime(driver, testCaseName, itemId).equalsIgnoreCase(leadTime);
			Assert.assertTrue("Delivery lead time is not same", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}

	}

	//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Verify that Buyer should be allowed to set
	 * a Configuration Setting for Allowing users to change default supplier
	 * payment terms on the PO
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_31330(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;

		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click on setup and customixe
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			// click On purchase order link
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);
			boolean radiobtnEnabled = PagePurchaseOrderSetting.isEditableSupplierPaymentTerms(driver, testCaseName);
			Assert.assertTrue("Unable to set a Configuration Setting for ssupplierPaymentTerms ", radiobtnEnabled);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Verify that Buyer should be allowed to set
	 * a Configuration Setting for Allowing users to change default supplier
	 * delivery terms on the PO
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_31331(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;

		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click on setup and customixe
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			// click On purchase order link
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);
			boolean radiobtnEnabled = PagePurchaseOrderSetting.isEditableSupplierDeliveryTerms(driver, testCaseName);
			Assert.assertTrue("Unable to set a Configuration Setting for supplierDeliveryTerms ", radiobtnEnabled);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Verify that the default supplier currency
	 * on the PO should show as Label if the corresponding Configuration Setting
	 * is set to NO
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_31335(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;

		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click on setup and customixe
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			// click On purchase order link
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);
			PagePurchaseOrderSetting.clickOnAllowToChangeDefaultSupplierCurrencyOnPO_No(driver, testCaseName);
			PagePurchaseOrderSetting.clickOnSaveButton(driver, testCaseName);
			// click On Po tab
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			// clickOn Standard Po
			PagePO.clickOnStandardPO(driver, testCaseName);

			boolean currencyDisplayedAsLabel = PageStandardPO.isSupplierCurrencydisplayedAslabel(driver);
			Assert.assertTrue("Default currency is not displayed As label ", currencyDisplayedAsLabel);
			ActionBot.defaultSleep();
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			// click On purchase order link
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);
			PagePurchaseOrderSetting.clickOnAllowToChangeDefaultSupplierCurrencyOnPO_Yes(driver, testCaseName);
			PagePurchaseOrderSetting.clickOnSaveButton(driver, testCaseName);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Verify the default supplier payment terms
	 * on the PO should show as Label if the corresponding Configuration Setting
	 * is set to NO
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_31336(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		StandardPO standardPO = new StandardPO();
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click on setup and customixe
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			// click On purchase order link
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);
			PagePurchaseOrderSetting.clickOnAllowToChangeDefaultSupplierPaymentTermsOnPO_No(driver, testCaseName);
			PagePurchaseOrderSetting.clickOnSaveButton(driver, testCaseName);
			// click On Po tab
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			// clickOn Standard Po
			PagePO.clickOnStandardPO(driver, testCaseName);
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			FlowStandardPo.fillStandardPoCreationForm(driver, testCaseName, standardPO);
			boolean paymentDisplayedAsLabel = PageStandardPO.isSupplierPaymentTermsdisplayedAslabel(driver);
			Assert.assertTrue("Default payment terms is not displayed As label ", paymentDisplayedAsLabel);
			ActionBot.defaultSleep();
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			// click On purchase order link
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);
			PagePurchaseOrderSetting.clickOnAllowToChangeDefaultSupplierPaymentTermsOnPO_Yes(driver, testCaseName);
			PagePurchaseOrderSetting.clickOnSaveButton(driver, testCaseName);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Verify that the default supplier delivery
	 * terms on the PO should show as Label if the corresponding Configuration
	 * Setting is set to NO
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_31337(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		StandardPO standardPO = new StandardPO();
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click on setup and customize
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			// click On purchase order link
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);
			PagePurchaseOrderSetting.clickOnAllowToChangeDefaultSupplierDeliveryTermsOnPO_No(driver, testCaseName);
			PagePurchaseOrderSetting.clickOnSaveButton(driver, testCaseName);
			// click On Po tab
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			// clickOn Standard Po
			PagePO.clickOnStandardPO(driver, testCaseName);
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			FlowStandardPo.fillStandardPoCreationForm(driver, testCaseName, standardPO);
			boolean DeliverytermsDisplayedAsLabel = PageStandardPO.isSupplierDeliveryTermsdisplayedAslabel(driver);
			Assert.assertTrue("Default delivery terms is not displayed As label ", DeliverytermsDisplayedAsLabel);
			ActionBot.defaultSleep();
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			// click On purchase order link
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);
			PagePurchaseOrderSetting.clickOnAllowToChangeDefaultSupplierDeliveryTermsOnPO_Yes(driver, testCaseName);
			PagePurchaseOrderSetting.clickOnSaveButton(driver, testCaseName);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>PO >> User should be able to Sort PO
	 * listing by PO #, PO Date and Amount.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_38192(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		StandardPO standardPO = new StandardPO();
		new Item();
		boolean flag = false;
		String status;

		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createStandardPo(driver, testCaseName, standardPO);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			// sort po
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("Error while searching PO", flag);

			//--------------Type Filter--------------
			FlowPoListing.applyTypeFilter(driver, testCaseName, IConstantsData.STANDARD_PO_TYPE);
			if (!ActionBot.findElements(driver, IPagePurchaseOrderListing.FIRST_PO_LINK).isEmpty())
			{
				status = PagePurchaseOrderListing.getFirstPOType(driver, testCaseName);
				flag = status.contains(IConstantsData.STANDARD_PO_TYPE);
				Assert.assertTrue("Could not apply STANDARD filter under Type Filter", flag);
			}
			PagePurchaseOrderListing.clickOnClearFilter(driver, testCaseName, 4);
			ActionBot.defaultSleep();
			FlowPoListing.applyTypeFilter(driver, testCaseName, IConstantsData.RELEASE_PO_TYPE);
			if (!ActionBot.findElements(driver, IPagePurchaseOrderListing.FIRST_PO_LINK).isEmpty())
			{
				status = PagePurchaseOrderListing.getFirstPOType(driver, testCaseName);
				flag = status.contains(IConstantsData.RELEASE_PO_TYPE);
				Assert.assertTrue("Could not apply RELEASE filter under Type Filter", flag);
			}
			PagePurchaseOrderListing.clickOnClearFilter(driver, testCaseName, 4);
			ActionBot.defaultSleep();
			FlowPoListing.applyTypeFilter(driver, testCaseName, IConstantsData.BLANKET_PO_TYPE);
			if (!ActionBot.findElements(driver, IPagePurchaseOrderListing.FIRST_PO_LINK).isEmpty())
			{
				status = PagePurchaseOrderListing.getFirstPOType(driver, testCaseName);
				flag = status.contains(IConstantsData.BLANKET_PO_TYPE);
				Assert.assertTrue("Could not apply BLANKET filter under Type Filter", flag);
			}
			PagePurchaseOrderListing.clickOnClearFilter(driver, testCaseName, 4);
			ActionBot.defaultSleep();
			//--------------Date Filter--------------
			PagePurchaseOrderListing.clickOnDateFilterStatus(driver, testCaseName);
			ActionBot.click(driver, IPagePurchaseOrderListing.PO_DATE_FILTER_BUTTON);
			PagePurchaseOrderListing.clickOnClearFilter(driver, testCaseName, 7);
			ActionBot.defaultSleep();
			//--------------Amount Filter--------------
			PagePurchaseOrderListing.clickOnAmountFilterLink(driver, testCaseName);
			if (ActionBot.isElementDisplayed(driver, IPagePurchaseOrderListing.CHECKBOX_AMOUNT_FILTER_INR_CURRENCY))
			{
				PagePurchaseOrderListing.clickOnINRCurrencyFilter(driver, testCaseName);
				ActionBot.click(driver, IPagePurchaseOrderListing.BUTTON_AMOUNT_FILTER);
				ActionBot.defaultSleep();
				if (!ActionBot.findElements(driver, IPagePurchaseOrderListing.FIRST_PO_LINK).isEmpty())
				{
					status = PagePurchaseOrderListing.getFirstRowTotalAmount(driver, testCaseName);
					logger.info("STATUS " + status);
					flag = status.contains(IConstantsData.INR);
					Assert.assertTrue("Could not apply INR filter under Amount Filter", flag);
					PagePurchaseOrderListing.clickOnClearFilter(driver, testCaseName, 8);
				}
			}
			PagePurchaseOrderListing.clickOnAmountFilterLink(driver, testCaseName);
			if (ActionBot.isElementDisplayed(driver, IPagePurchaseOrderListing.CHECKBOX_AMOUNT_FILTER_USD_CURRENCY))
			{
				PagePurchaseOrderListing.clickOnUSDCurrencyFilter(driver, testCaseName);
				ActionBot.click(driver, IPagePurchaseOrderListing.BUTTON_AMOUNT_FILTER);
				ActionBot.defaultSleep();
				if (!ActionBot.findElements(driver, IPagePurchaseOrderListing.FIRST_PO_LINK).isEmpty())
				{
					status = PagePurchaseOrderListing.getFirstRowTotalAmount(driver, testCaseName);
					flag = status.contains(IConstantsData.USD);
					Assert.assertTrue("Could not apply USD filter under Amount Filter", flag);
				}
			}

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Verify that PO Date column should have
	 * date range filter with min and max defaulted to min and max PO date from
	 * listing respectively.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_38196(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			PagePurchaseOrderListing.clickOnDateFilterStatus(driver, testCaseName);
			boolean rangeFilter = PagePurchaseOrderListing.isMaxAndMinDateRangeFilterPresent(driver, testCaseName);
			Assert.assertTrue("Date range filter not present", rangeFilter);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>PO >>Verify that PO in Draft should have
	 * option Delete on action click.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_38205(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		StandardPO standardpo = new StandardPO();
		new Item();
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardpo.setNextAction(IConstantsData.SAVE_PO_AS_DRAFT);
			FlowStandardPo.createStandardPo(driver, testCaseName, standardpo);
			//			// create standard Po
			//			MainPageHeaderLevelTab.clickOnPOTab(driver);
			//			PagePO.clickOnStandardPO(driver, testCaseName);
			//			standardpo = FlowStandardPo.fillStandardPoCreationForm(driver, testCaseName, standardpo);
			//			PageStandardPO.clickOnSaveAsDraftPo(driver);

			// sort po
			FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ActionBot.defaultSleep();
			boolean deleteOption = PagePurchaseOrderListing.isDeleteOptionPresent(driver, testCaseName);
			System.out.println("Delete link present" + deleteOption);
			Assert.assertTrue("delete Link not present", deleteOption);
			// sort By Date

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Verify that PO in status Cancelled,
	 * Closed, In approval, Parked, Rejected, Scheduled, Expired, Released
	 * should open in view mode when user click on po name.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_38213(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		StandardPO standardPO = new StandardPO();
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			// standardPo = ObjectCreation.getStandardPoCreation("catalogItem");

			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			// click On first PoNo
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);

			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnCancelPoLink(driver, testCaseName);
			ActionBot.defaultSleep();
			PageViewPurchaseOrder.fillCancelPoCommentField(driver, testCaseName, IConstantsData.CANCEL_RECEIPT_COMMENT);
			PageViewPurchaseOrder.clickOnCancelPoSubmitButtom(driver, testCaseName);
			// apply draft po filter
			PoStatusFilter poStatusFilter = new PoStatusFilter();
			poStatusFilter.setCanceled(true);
			ActionBot.defaultSleep();
			FlowPoListing.applyPoStatusFilter(driver, testCaseName, poStatusFilter);
			// get ist po no
			String getPoNo = PagePurchaseOrderListing.getFirstPoNo(driver, testCaseName);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			ActionBot.defaultSleep();
			boolean matchPoNo = getPoNo.equals(PageViewPurchaseOrder.getViewPONo(driver, testCaseName));
			Assert.assertTrue("Unable to open in cancel view mode", matchPoNo);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>verify that User should have status based
	 * filters with Parent nodes as: Draft,In progress,Returned,
	 * Released,Cancelled, Rejected, Closed.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_38236(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;

		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			PagePurchaseOrderListing.clickOnFilterStatusLink(driver, testCaseName);
			ActionBot.defaultSleep();
			boolean statusBasedFilter = PagePurchaseOrderListing.isDraftStatusBasedFilterPresent(driver, testCaseName);
			Assert.assertTrue("Status based filters are absent", statusBasedFilter);
			PagePurchaseOrderListing.clickOnFilterStatusCancelButtom(driver, testCaseName);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>PO >>Verify that There should be Lebel on
	 * screen showing the No. of recored. Line should be - ("Found XXX records",
	 * On filter "Found YYY out of XXX records) <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_38343(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;

		try
		{
			user = LoginLogoutServices.login(driver, testCase);

			MainPageHeaderLevelTab.clickOnPOTab(driver);
			FlowPoListing.filterAllReleasedPO(driver, testCaseName);

			boolean noOfRecordsFound = PagePurchaseOrderListing.isNoOfRecordsLabelPresent(driver, testCaseName);

			Assert.assertTrue("No of Records Found Label not displayed", noOfRecordsFound);
			// sort By Date

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Verify that User should be able to apply
	 * filter on more than one node(including parent and child ) in status
	 * Filter.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_38412(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		boolean flag;
		StandardPO standardPO = new StandardPO();
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			// StandardPO standardPO = ObjectCreation.getStandardPoCreation("catalogItem");
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			ActionBot.defaultSleep();
			PagePurchaseOrderListing.clickOnFilterStatusLink(driver, testCaseName);
			ActionBot.defaultSleep();
			PagePurchaseOrderListing.clickOnExpandReleaseFilterNode(driver, testCaseName);
			PagePurchaseOrderListing.clickOnReleasedStatusCheckbox(driver, testCaseName);
			PagePurchaseOrderListing.clickOnFilterLink(driver, testCaseName);
			flag = (PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).contains(IConstantsData.RELEASED)) ? true : false;
			Assert.assertTrue(flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Verify Add sections as on the requisition
	 * page to display costing & accounting for PO view.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_38705(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		StandardPO standardPO = null;
		boolean flag;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);

			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.RELEASED);
			Assert.assertTrue("PO is not in released state", flag);

			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			PageViewPurchaseOrder.clickOnCostingLink(driver, testCaseName);
			boolean costingdetails = PageViewPurchaseOrder.isCostingDetailsDisplayed(driver, testCaseName);
			Assert.assertTrue("costing Details Absent", costingdetails);
			PageViewPurchaseOrder.clickOnAccountingLink(driver, testCaseName);
			ActionBot.defaultSleep();
			boolean accountingDetails = PageViewPurchaseOrder.isAccountingDetailsDisplayed(driver, testCaseName);
			Assert.assertTrue("Accounting Details Absent", accountingDetails);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
			// Run IE
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>On 'Amend PO' action, PO should open
	 * current version in edit mode with mentioned field editable : Delivery
	 * Details>> Delivery Address (OU address, all addresses in user's scope,
	 * custom address)
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_58327(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		StandardPO standardPO = null;
		boolean flag;
		String otheraddress = CommonServices.getTestData(IConstantsData.PO_OTHER_ADDRESS);
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);

			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.RELEASED);
			Assert.assertTrue("PO is not in released state", flag);

			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			PageStandardPO.clickOnEdit(driver);
			TabPOSummary.clickOnDeliveryPOSummary(driver);
			flag = PageStandardPO.isDeliveryMyAddressRadioButtonEnabled(driver, testCaseName);
			Assert.assertTrue("Not able to change my address", flag);
			boolean otherAddressEditable = PageStandardPO.isEditableOtherDeliveryAddress(driver, otheraddress);
			Assert.assertTrue("Other Delivery Address not Editable", otherAddressEditable);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>On 'Amend PO' action, PO should open
	 * current version in edit mode with mentioned field editable : Delivery
	 * Details>> Delivery date
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_58328(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		StandardPO standardPO = null;
		User user = null;
		boolean flag;
		String date;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);

			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.RELEASED);
			Assert.assertTrue("Po is not in released state", flag);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			PageStandardPO.clickOnEdit(driver);
			TabPOSummary.clickOnDeliveryPOSummary(driver);
			ModalPOSummaryDelivery.clickOnClearReqByLink(driver);
			PurchaseOrder purchaseOrder = new PurchaseOrder();
			purchaseOrder.setCustomDate(CommonUtilities.getRequiredBy());
			date = ModalPOSummaryDelivery.fillRequiredByDate(driver, testCaseName, purchaseOrder.getCustomDate().getDay(), purchaseOrder.getCustomDate().getMonth(),
				purchaseOrder.getCustomDate().getYear());
			Assert.assertNotNull("Not able to edit date", date);
			ActionBot.defaultLowSleep();
			ModalPOSummaryCostBooking.clickOnCancel(driver, testCaseName);
			date = PageStandardPO.fillRequiredByDate(driver, testCaseName, purchaseOrder.getCustomDate().getDay(), purchaseOrder.getCustomDate().getMonth(),
				purchaseOrder.getCustomDate().getYear());
			Assert.assertNotNull("Not able to edit date", date);
			String editable = PageStandardPO.isDeliveryDateEditable(driver);
			boolean booleanValue = Boolean.parseBoolean(editable);

			Assert.assertTrue("Delivery Date Not Editable", booleanValue);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>On 'Amend PO' action, PO should open
	 * current version in edit mode with mentioned field editable : Delivery
	 * Details>> Deliver To
	 * 
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_58329(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		StandardPO standardPO = new StandardPO();
		String DeliverTo = CommonServices.getTestData(IConstantsData.DELIVER_TO_FIELD);
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			FlowPoListing.filterAllReleasedPO(driver, testCaseName);
			PagePurchaseOrderListing.clickOnHeaderPoNo(driver, testCaseName);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			PageStandardPO.clickOnEdit(driver);
			TabPOSummary.clickOnDeliveryPOSummary(driver);
			String editable = ModalPOSummaryDelivery.isEditableDeliveryField(driver, testCaseName, DeliverTo);
			Assert.assertEquals("Delivery field Editable", DeliverTo, editable);
			ModalPOSummaryCostBooking.clickOnCancel(driver, testCaseName);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>On 'Amend PO' action, PO should open
	 * current version in edit mode with mentioned field editable :Supplier
	 * Info>>Payment Terms
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_58381(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		StandardPO standardPO = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);
			PagePurchaseOrderSetting.clickOnAllowToChangeDefaultSupplierPaymentTermsOnPO_Yes(driver, testCaseName);

			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);

			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			ActionBot.defaultSleep();
			boolean editable = PageStandardPO.isEditableSupplierPaymentTerms(driver);
			Assert.assertTrue("PaymentTerms not Editable", editable);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>On 'Amend PO' action, PO should open
	 * current version in edit mode with mentioned field editable :Supplier
	 * Info>>Reference
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_58384(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		StandardPO standardPO = new StandardPO();
		String reference = CommonServices.getTestData(IConstantsData.APPROVE_COMMENT);
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			FlowPoListing.filterAllReleasedPO(driver, testCaseName);
			PagePurchaseOrderListing.clickOnHeaderPoNo(driver, testCaseName);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			ActionBot.scroll(driver);
			boolean referenceField = PageStandardPO.isEditableReference(driver, reference);
			Assert.assertTrue("Reference Field is not Editable", referenceField);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>On 'Amend PO' action, PO should open
	 * current version in edit mode with mentioned field editable :Supplier
	 * Info>>PO Contact
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_58385(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		StandardPO standardPO = new StandardPO();
		String contact = CommonServices.getTestData(IConstantsData.PO_SUPPLIER_CONTACT);
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			FlowPoListing.filterAllReleasedPO(driver, testCaseName);
			PagePurchaseOrderListing.clickOnHeaderPoNo(driver, testCaseName);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			boolean contacts = PageStandardPO.isEditableSupplierContact(driver, contact);
			Assert.assertTrue("Contact Field is not Editable", contacts);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>On 'Amend PO' action, PO should open
	 * current version in edit mode with mentioned field editable :Taxes
	 * 
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_58386(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		StandardPO standardPO = new StandardPO();
		String taxName = CommonServices.getTestData(IConstantsData.DELIVER_TO_FIELD);
		String taxrate = CommonServices.getTestData(IConstantsData.TAX_RATE);
		String taxtype = CommonServices.getTestData(IConstantsData.TAX_TYPE);

		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			FlowPoListing.filterAllReleasedPO(driver, testCaseName);
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);

			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			ActionBot.scroll(driver, "900");
			boolean taxType = PageStandardPO.isEditableTaxType(driver);
			ActionBot.defaultSleep();
			PageStandardPO.fillTaxType(driver, testCaseName, taxtype, 1);
			PageStandardPO.enterTaxName(driver, testCaseName, taxName, 1);
			PageStandardPO.fillTaxTypeRATE(driver, taxrate);
			Assert.assertTrue("TaxType is not Editable", taxType);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>On 'Amend PO' action, PO should open
	 * current version in edit mode with mentioned field editable :Taxes [User
	 * should be able to add/remove/modify taxes.]
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_58388(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		StandardPO standardPO = new StandardPO();

		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			FlowPoListing.filterAllReleasedPO(driver, testCaseName);
			PagePurchaseOrderListing.clickOnHeaderPoNo(driver, testCaseName);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			boolean NewtaxType = PageStandardPO.isEnabledAddTax(driver);
			Assert.assertTrue("Unable To Add New tax", NewtaxType);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>On 'Amend PO' action, PO should open
	 * current version in edit mode with mentioned field editable : Discount
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_58389(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		StandardPO standardPO = new StandardPO();
		int rates;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			FlowPoListing.filterAllReleasedPO(driver, testCaseName);
			PagePurchaseOrderListing.clickOnHeaderPoNo(driver, testCaseName);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			((JavascriptExecutor) driver).executeScript("window.scrollBy(0,300);");
			PageStandardPO.clickOnModifyLink(driver);

			ActionBot.defaultSleep();
			rates = CommonUtilities.getNonZeroRandomNumbers(2);
			PageStandardPO.fillDiscountField(driver, testCaseName, rates);
			boolean discountField = PageStandardPO.isEditableDiscountField(driver);

			Assert.assertTrue("Discount field is not editable", discountField);
			// PageStandardPO.clickOnDiscountModalSaveBtm(driver);
			ModalDiscountPO.clickOnItemLevelDiscount(driver, testCaseName);
			String type = IConstantsData.PERCENTAGE;

			ModalDiscountPO.selectItemLevelDiscountType(driver, testCaseName, type);
			int value = 50;
			ModalDiscountPO.enterItemLevelDiscountValue(driver, testCaseName, value);
			ModalDiscountPO.clickOnItemLevelTotalDiscount(driver, testCaseName);
			double discountedAmount = ModalDiscountPO.getItemLevelTotalDiscountAmount(driver, testCaseName);
			ModalDiscountPO.clickOnSaveDiscount(driver, testCaseName);
			// compare discounted amount on modal with discount price on
			// standard PO page
			double headerDiscount = ModalDiscountPO.getHeaderLevelTotalDiscountAmount(driver, testCaseName);
			boolean flag = discountedAmount == headerDiscount;
			Assert.assertTrue(flag);
			// fill discount amount
			PageStandardPO.clickOnModify(driver, testCaseName);
			ModalDiscountPO.clickOnItemLevelDiscount(driver, testCaseName);
			String type0 = "Amount";
			ModalDiscountPO.selectItemLevelDiscountType(driver, testCaseName, type0);
			int value1 = 500;
			ModalDiscountPO.enterItemLevelDiscountValue(driver, testCaseName, value1);
			ModalDiscountPO.clickOnItemLevelTotalDiscount(driver, testCaseName);
			double discountedAmount1 = ModalDiscountPO.getItemLevelTotalDiscountAmount(driver, testCaseName);
			ModalDiscountPO.clickOnSaveDiscount(driver, testCaseName);
			// compare discounted amount on modal with discount price on
			// standard PO page
			double headerDiscount1 = ModalDiscountPO.getHeaderLevelTotalDiscountAmount(driver, testCaseName);
			boolean flag1 = discountedAmount1 == headerDiscount1;
			Assert.assertTrue(flag1);
			// fill discount per item
			PageStandardPO.clickOnModify(driver, testCaseName);
			ModalDiscountPO.clickOnItemLevelDiscount(driver, testCaseName);
			String type1 = "Percentage";
			ModalDiscountPO.selectItemLevelDiscountType(driver, testCaseName, type1);
			int value2 = 5;
			ModalDiscountPO.enterItemLevelDiscountValue(driver, testCaseName, value2);
			ModalDiscountPO.clickOnItemLevelTotalDiscount(driver, testCaseName);
			double discountedAmount2 = ModalDiscountPO.getItemLevelTotalDiscountAmount(driver, testCaseName);
			ModalDiscountPO.clickOnSaveDiscount(driver, testCaseName);
			// compare discounted amount on modal with discount price on
			// standard PO page
			double headerDiscount2 = ModalDiscountPO.getHeaderLevelTotalDiscountAmount(driver, testCaseName);
			boolean flag2 = discountedAmount2 == headerDiscount2;
			Assert.assertTrue(flag2);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>On 'Amend PO' action, PO should open
	 * current version in edit mode with mentioned field editable :
	 * Others>>Terms & Conditions
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_58391(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		StandardPO standardPO = new StandardPO();
		String termsAndConditions = CommonServices.getTestData(IConstantsData.COMMENT_FOR_RETURN_REQUISITION);
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);

			MainPageHeaderLevelTab.clickOnPOTab(driver);
			FlowPoListing.filterAllReleasedPO(driver, testCaseName);
			PagePurchaseOrderListing.clickOnHeaderPoNo(driver, testCaseName);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			ActionBot.scroll(driver);
			boolean termsAndConditionField = PageStandardPO.isEditableTearmsAndConditonSFiled(driver, termsAndConditions);
			Assert.assertTrue("Terms & Conditions Field Not editable", termsAndConditionField);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>On 'Amend PO' action, PO should open
	 * current version in edit mode with mentioned field editable : Others>>PO
	 * notes
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_58392(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		String poNotes = CommonServices.getTestData(IConstantsData.ORDER_DESCRIPTION);
		try
		{
			user = LoginLogoutServices.login(driver, testCase);

			StandardPO standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);

			boolean notes = PageStandardPO.isEditablePoNotesField(driver, poNotes);
			Assert.assertTrue("Po Notes Field Not editable", notes);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>On 'Amend PO' action, PO should open
	 * current version in edit mode with mentioned field editable : Others>>PO
	 * level Comments & Attachments
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_58393(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		StandardPO standardPO = new StandardPO();
		String Comments = CommonServices.getTestData(IConstantsData.COMMENT_FOR_RETURN_REQUISITION);
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			FlowPoListing.filterAllReleasedPO(driver, testCaseName);
			PagePurchaseOrderListing.clickOnHeaderPoNo(driver, testCaseName);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			ActionBot.scroll(driver);
			boolean poComments = PageStandardPO.isEditableCommentsFields(driver, Comments);
			Assert.assertTrue("Po Comments Field Not editable", poComments);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>On 'Amend PO' action, PO should open
	 * current version in edit mode with mentioned field editable : Setting:
	 * Require receipt against this PO
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_58394(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		StandardPO standardPO = new StandardPO();
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			FlowPoListing.filterAllReleasedPO(driver, testCaseName);
			PagePurchaseOrderListing.clickOnHeaderPoNo(driver, testCaseName);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			PageStandardPO.clickOnRequireReceiptChkbox(driver);
			boolean requiredReceipt = PageStandardPO.isEditableRequireReceiptCheckBox(driver);
			Assert.assertTrue("Required Receipt CheckBox Not editable", requiredReceipt);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Amend PO: PO should open current version
	 * in edit mode with mentioned field editable : Item details>>Description
	 * (only for manual PO)
	 * 
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_58397(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;

		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			StandardPO standardPO = ObjectCreation.getStandardPoCreation("catalogItem");
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			// boolean itemDescription =
			boolean itemDescription = ModalPOItemSummaryCostAllocation.isEditableAmendItemDescription(driver);
			Assert.assertTrue("Modal Item Description Not editable", itemDescription);
			// itemDescription);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Amend PO: PO should open current version
	 * in edit mode with mentioned field editable : Item details>>Unit price
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_58398(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		StandardPO standardPO = new StandardPO();
		try
		{
			user = LoginLogoutServices.login(driver, testCase);

			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			// click On PoTab
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			FlowPoListing.filterAllReleasedPO(driver, testCaseName);
			PagePurchaseOrderListing.clickOnHeaderPoNo(driver, testCaseName);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			ActionBot.scroll(driver);
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			// scroll with in modal
			ActionBot.jQueryScroll(driver, ".eformItemInpt.ui-front", 900);
			boolean marketPrice = ModalPOItemSummaryCostAllocation.isEditableMarketPrice(driver, testCaseName);
			Assert.assertTrue("Item Description Field is not editable", marketPrice);
			ModalPOFreeTextItemSummaryItem.clickOnCancelBtnItemSummary(driver, testCaseName);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Amend PO: PO should open current version
	 * in edit mode with mentioned field editable : Delivery date (it should not
	 * impact previously ordered qty)
	 * 
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_58401(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;

		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			FlowPoListing.filterAllReleasedPO(driver, testCaseName);
			PagePurchaseOrderListing.clickOnHeaderPoNo(driver, testCaseName);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);

			String editable = PageStandardPO.isDeliveryDateEditable(driver);
			// verify Whether Date is editable or not
			Assert.assertNotNull("Delivery Date Not Editable", editable);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Amend PO: Quantity of Items coming from
	 * manual PO only can be changed.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_58403(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;

		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			/*
			 * StandardPO standardpo =
			 * ObjectCreation.getStandardPoCreation("catalogItem");
			 * FlowStandardPo.createStandardPo(driver, testCaseName,
			 * standardpo);
			 */
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			ActionBot.defaultSleep();
			FlowPoListing.filterAllReleasedPO(driver, testCaseName);
			PagePurchaseOrderListing.clickOnHeaderPoNo(driver, testCaseName);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			ActionBot.defaultHighSleep();
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			ActionBot.jQueryScroll(driver, ".eformItemInpt.ui-front", 300);
			boolean itemQuantity = ModalPOItemSummaryCostAllocation.isEditableAmendModelItemQuantity(driver, testCaseName);
			Assert.assertTrue("Modal Item Quantity editable", itemQuantity);
			ModalPOFreeTextItemSummaryItem.clickOnCancelBtnItemSummary(driver, testCaseName);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Amend PO: Quantity of Items coming from
	 * manual PO only can be changed. [Check for Items from REQ]
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_58404(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		Requisition requisition = new Requisition();
		Item item = new Item();
		CatelogItem catelogItem = new CatelogItem();
		int quantity;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);

			// req object creation
			requisition = ObjectCreation.getRequisition(driver);
			item = ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);
			requisition.setItems(item);

			catelogItem = ObjectCreation.getDefaultCatalogItemObject();

			quantity = CommonUtilities.getNonZeroRandomNumbers(2);
			catelogItem.setQuantity(quantity);
			// req to buyers desk
			CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);
			// click on first ReqNo link
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			// convert To Po
			FlowBuyersDesk.convertToPo(driver, testCaseName);

			// to click on first checkbox
			PagePurchaseOrderToBeGenerated.ClikOnPurchaseOrderToBeGeneratedCheckBox(driver, testCaseName, 0);

			PagePurchaseOrderToBeGenerated.clickOnSubmitPoForProcessing(driver, testCaseName);
			PurchaseOrder purchaseOrder1 = FlowConvertedPurchaseOrder.getPurchaseOrderinfo(driver, testCaseName, 1);
			// For Second Item
			// PurchaseOrder purchaseOrder2 =
			// FlowConvertedPurchaseOrder.getPurchaseOrderinfo(driver,
			// testCaseName, 3);
			// Click on Release
			// PageConvertedPurchaseOrder.clickOnReleaselink(driver,
			// testCaseName, 1);
			// Click on Release and check
			// PageConvertedPurchaseOrder.clickOnReleaselink(driver,
			// testCaseName, 3);
			FlowPoListing.searchPo(driver, testCaseName, purchaseOrder1.getPoNo(), IConstantsData.SEARCH_BY_PO_NO);

			String status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			if (status.equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL))
			{
				// to approve the PO
				ApprovalAllRequests approvalAllRequests = new ApprovalAllRequests();
				approvalAllRequests.setDocumentNo(purchaseOrder1.getPoNo());
				approvalAllRequests.setActions(IConstantsData.APPROVE);
				approvalAllRequests.setComment(IConstantsData.APPROVE_COMMENT);
				approvalAllRequests.setDocumentType(IConstantsData.PURCHASE_ORDER);
				FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);
				ActionBot.defaultSleep();
			}
			FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			ActionBot.defaultSleep();

			FlowPoListing.searchPo(driver, testCaseName, purchaseOrder1.getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			// click on first poNo
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			ActionBot.defaultSleep();
			ActionBot.scroll(driver, "550");
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			boolean editable = ModalPOItemSummaryCostAllocation.isEditableAmendModelItemQuantity(driver, testCaseName);
			// verify Whether Date is editable or not
			Assert.assertTrue("Delivery Date Not Editable", editable);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Amend PO: Item quantity of manual PO items
	 * should be allowed to be changed within tolerance limit defined.
	 * 
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_58410(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		{
			// RTC_22610 : testcase to be mapped
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_58409"));

		}
		CommonServices.startTestCase(driver, testCase, mappedTestCases);
		User user = null;
		StandardPO standardPO = new StandardPO();
		int quantity = 100;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);

			// create standard PO
			standardPO = FlowStandardPo.createStandardPo(driver, testCaseName, standardPO);
			ActionBot.defaultSleep();
			//approve po
			MainPageHeaderLevelTab.clickOnApprovalAllRequestsTab(driver);
			// to approve the PO
			ApprovalAllRequests approvalAllRequests = new ApprovalAllRequests();
			approvalAllRequests.setDocumentNo(standardPO.getPoNumber());
			approvalAllRequests.setActions(IConstantsData.APPROVE);
			approvalAllRequests.setComment(IConstantsData.APPROVE_COMMENT);
			approvalAllRequests.setDocumentType(IConstantsData.PURCHASE_ORDER);
			FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

			ActionBot.defaultSleep();
			ActionBot.defaultHighSleep();
			driver.navigate().refresh();
			driver.navigate().refresh();
			// search po
			boolean flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			assertTrue("Error while searching PO", flag);

			// click on first poNo
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			ActionBot.defaultSleep();
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			quantity = 121;
			PageStandardPO.fillAmendPoItemQuantity(driver, testCaseName, quantity);
			ModalPOItemSummaryCostAllocation.clickOnSave(driver, testCaseName);
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			//flag = ActionBot.isElementDisplayed(driver, By.xpath(".//*[@class='col-qty error']//span[contains(@class,'inlineError')]"));
			flag = ActionBot.isElementDisplayed(driver, IPageStandardPO.ERROR_QUANTITY_ITEM_SUMMARY);
			Assert.assertTrue(flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
			// Run IE
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Amend PO: Changed qty should not be less
	 * than the received/invoiced qty in any case. [Consider larger from
	 * invoiced and received quantity]
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_58411(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		StandardPO standardPO = new StandardPO();
		Receipt receipt = null;
		Invoice invoice = null;
		boolean flag;
		int quantity;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);

			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);

			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);

			PagePurchaseOrderListing.clickOnPoActionsLink(driver, testCaseName);
			ModalPOListingActions.clickOnCreateReceiptLink(driver, testCaseName);
			receipt = ObjectCreation.getDefaultReceiptObject();
			receipt = FlowReceipt.createReceipt(driver, testCaseName, receipt);

			invoice = ObjectCreation.getDefaultFlipInvoiceObject();
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnPoActionsLink(driver, testCaseName);
			ModalPOActions.clickOnCreateInvoiceFromActions(driver, testCaseName);
			invoice = FlowFlipInvoice.createFlipInvoice(driver, testCaseName, invoice);

			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			flag = FlowPoListing.getInvocieIconStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.FULLY_INVOICED);
			Assert.assertTrue("Invoice is not fully invocied", flag);

			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);

			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendAlertContinuePopup(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			ActionBot.jQueryScroll(driver, ".eformItemInpt.ui-front", 450);
			quantity = CommonUtilities.getRandomNumbersBetweenRange(1, 1, standardPO.getItems().getCatelogItems().get(0).getQuantity());
			ModalItemSummaryItem.clearAndEnterQuantity(driver, testCaseName, quantity);
			ModalPOItemSummaryCostAllocation.clickOnSave(driver, testCaseName);
			boolean errormsgdisplayed = PageStandardPO.isQuantityErrorMessagedisplayed(driver);
			Assert.assertTrue("Error msg not displayed", errormsgdisplayed);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Amend PO: In case of Manual PO , allow
	 * adding more items to it. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_58412(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		StandardPO standardPO = new StandardPO();
		Item item = new Item();
		boolean flag = false;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// to get Standard PO object
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			// create standard PO
			item = ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			// search po
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			// view po
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);

			// to amend the PO
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			ModalViewPOActions.clickOnAmendPoLink(driver, testCaseName);
			// to Amend PO
			ActionBot.scroll(driver);
			item = FlowStandardPo.addItem(driver, testCaseName, item);

			// to submit PO for processing
			PageStandardPO.clickOnSubmitPOForProcessing(driver, testCaseName);

			// search po
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);

			// to check amended PO
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			ModalViewPOActions.clickOnAmendPoLink(driver, testCaseName);

			List<WebElement> itemNames = PageStandardPO.getItemName(driver, testCaseName);
			flag = false;
			for (WebElement element : itemNames)
			{
				String itemName = element.getText().trim();
				if (itemName.equalsIgnoreCase(standardPO.getItems().getCatelogItems().get(0).getItemName())
					|| itemName.equalsIgnoreCase(standardPO.getItems().getGuidedItems().get(0).getShortDescription())
					|| itemName.equalsIgnoreCase(item.getGuidedItems().get(0).getShortDescription()))
				{
					flag = true;
				}
			}
			Assert.assertTrue("added catalog item was not present", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Amend PO: User should have following
	 * actions on amended PO document. >> 'Save as draft', 'Review PO', 'Cancel'
	 * & 'Submit'
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_58533(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;

		try
		{
			user = LoginLogoutServices.login(driver, testCase);

			MainPageHeaderLevelTab.clickOnPOTab(driver);
			// click on first poNo
			FlowPoListing.filterAllReleasedPO(driver, testCaseName);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);

			boolean elementPresent = PageStandardPO.isSubmitPoForProcessingButtomPresent(driver);

			Assert.assertTrue("Submit po processing btm not present", elementPresent);

			boolean elementsaveAsDraft = PageStandardPO.isSaveAsDraftlinkpresent(driver);

			Assert.assertTrue("Save As Dreaft Link Not Present", elementsaveAsDraft);
			// verify cancel present or not
			boolean elementCancel = PageStandardPO.isCancelLinkPresent(driver);

			Assert.assertTrue("Cancel Link not Present ", elementCancel);
			// verify Reviewpo link present or not
			boolean elementReviewPoLink = PageStandardPO.isReviewPoLinkPresent(driver);

			Assert.assertTrue("Review Link not Present", elementReviewPoLink);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Verify User should be able to define
	 * "PO Number format", "PO # Sequence starts at" & "PO # Sequence ends at"
	 * at Tenant >Company > BU > Location levels.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_63588(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;

		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);
			boolean isAllow = PageCustomizeSettings.isAllowUserToChangePoNoFormat(driver, testCaseName);
			Assert.assertFalse("PoNo Format Not Editable", isAllow);
			boolean isAllowSeq = PageCustomizeSettings.isAllowUserToChangePoSeqEndAtFormat(driver, testCaseName);
			Assert.assertFalse("Seq End At Field Not Editable", isAllowSeq);
			boolean isAllowSeqStart = PageCustomizeSettings.isAllowUserToChangePoSeqEndAtFormat(driver, testCaseName);
			Assert.assertFalse("Seq Start At Field Not Editable", isAllowSeqStart);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
			// Run IE
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Verify User should be able to select
	 * location in a drop down for a Company > BU. [Configuration > Add another
	 * level as "Locations" ]
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_63590(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;

		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);

			boolean isAllowPoNoLevelStart = PageCustomizeSettings.isAllowUserToChangeLevelToUsePoNoFormat(driver, testCaseName, "testEditable");
			Assert.assertTrue("Seq Start At Field Not Editable", isAllowPoNoLevelStart);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
			// Run IE
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Verify Settings: Configuration > Tenant
	 * level > PO > Control 1) Allow editing auto-generated PO Number: Yes
	 * [default] | No
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_63593(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;

		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			// click On purchase order link
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);
			boolean AllsettingYes = PageCustomizeSettings.isAllowEditingAutogeneratedPoNoYes(driver, testCaseName);
			Assert.assertFalse("Allow edit Auto generated Setting No by default", AllsettingYes);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Verify if Allow editing auto-generated PO
	 * Number is No then when PO is in draft, generate a temporary number
	 * [Format can be "$temp015-PO"].
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_63594(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		String autogeneratedpo = CommonServices.getTestData(IConstantsData.AUTO_GENERATED_PONO_FORMAT);
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			// click On purchase order link
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);
			PageCustomizeSettings.clickOnAllowEditAutogeneratedSettingsNo(driver, testCaseName);
			PageCustomizeSettings.clickOnSaveButtom(driver, testCaseName);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			PagePO.clickOnStandardPO(driver, testCaseName);
			boolean autogenereratepoNoFormat = autogeneratedpo.equalsIgnoreCase(PageStandardPO.getAutogeneratedPoNo(driver, autogeneratedpo));
			Assert.assertFalse("temp format not generated", autogenereratepoNoFormat);
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			// click On purchase order link
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);
			PageCustomizeSettings.clickOnAllowEditAutogeneratedSettingsYes(driver, testCaseName);
			PageCustomizeSettings.clickOnSaveButtom(driver, testCaseName);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Verify if Allow editing auto-generated PO
	 * Number is No then On submit generate actual PO number based on format
	 * defined in settings & consume sequence number.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_63596(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		StandardPO standardPO = new StandardPO();
		String poNoFormat = CommonServices.getTestData(IConstantsData.PO_NO_FORMAT_AS_PER_SETTING);
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			// click On purchase order link
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);
			PageCustomizeSettings.clickOnAllowEditAutogeneratedSettingsNo(driver, testCaseName);
			PageCustomizeSettings.clickOnSaveButtom(driver, testCaseName);
			MainPageHeaderLevelTab.clickOnPOTab(driver);

			// create standard PO
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createStandardPo(driver, testCaseName, standardPO);
			boolean genereratepoNoFormat = poNoFormat.equalsIgnoreCase(PageViewPurchaseOrder.getViewPONo(driver, testCaseName));
			Assert.assertFalse("temp format not generated", genereratepoNoFormat);
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			// click On purchase order link
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);
			PageCustomizeSettings.clickOnAllowEditAutogeneratedSettingsYes(driver, testCaseName);
			PageCustomizeSettings.clickOnSaveButtom(driver, testCaseName);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Verify if Allow editing auto-generated PO
	 * Number is Yes then manual PO number when in draft should be editable.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_63597(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		new StandardPO();
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			// click On purchase order link
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);
			PageCustomizeSettings.clickOnAllowEditAutogeneratedSettingsYes(driver, testCaseName);
			PageCustomizeSettings.clickOnSaveButtom(driver, testCaseName);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			// create standard PO
			// standardPO =
			// ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			/*
			 * FlowStandardPo.fillStandardPoCreationForm(driver, testCaseName,
			 * standardPO); PageStandardPO.clickOnSaveAsDraftPo(driver);
			 */
			FlowPoListing.filterAllDraftPO(driver, testCaseName);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			boolean draftPoNo = PageStandardPO.isEditableDraftpoNoField(driver);
			Assert.assertTrue("Draft Po No Field not editable", draftPoNo);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Verify System should always validate for
	 * unique PO number on save/submit. In case of duplicate error, show
	 * following message in a pop-up:
	 * "PO Number used has already been consumed. Would you like to auto-generate new PO number?"
	 * : Yes (default) | No. Option "Yes" should suggest new PO number,"No" will
	 * not change it & the let user change it. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_63601(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		StandardPO standardPO = new StandardPO();
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			// click On purchase order link
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);
			PageCustomizeSettings.clickOnAllowEditAutogeneratedSettingsYes(driver, testCaseName);
			PageCustomizeSettings.clickOnSaveButtom(driver, testCaseName);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			// create standard PO
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO.setNextAction(IConstantsData.SAVE_PO_AS_DRAFT);
			FlowStandardPo.createStandardPo(driver, testCaseName, standardPO);
			FlowPoListing.filterAllDraftPO(driver, testCaseName);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			// clear and fill duplicate poNo
			String duplicatePonNo = standardPO.getPoNumber();
			PageStandardPO.fillPoNoWithDuplicatepoNo(driver, duplicatePonNo);
			PageStandardPO.clickOnSaveAsDraftPo(driver);
			/*
			 * boolean errormsgpresent =
			 * duplicatePonNo.equalsIgnoreCase(PageStandardPO.
			 * getDuplicatePoNoErrorMsg(driver, duplicatePonNo));
			 * Assert.assertTrue("Error msg present", errormsgpresent);
			 * PageStandardPO.clickOnErrorMsgPopupYesButton(driver);
			 */

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 194660 - Unable to save PO
	 * after reviewing before saving, error 500 thrown.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_64109(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		StandardPO standardPO = new StandardPO();
		String reviewPOPage = null;
		boolean flag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab

			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO.setNextAction(IConstantsData.NONE);
			standardPO = FlowStandardPo.createStandardPo(driver, testCaseName, standardPO);
			PageStandardPO.clickOnReViewPoLink(driver);
			String winHandlerBefore = driver.getWindowHandle();
			Set<String> winHandler = driver.getWindowHandles();
			for (String handler : winHandler)
			{
				driver.switchTo().window(handler);
			}

			driver.manage().window().maximize();
			reviewPOPage = PagePreviewPOPage.getPreviewPoNo(driver, testCaseName);
			flag = standardPO.getPoNumber().equalsIgnoreCase(reviewPOPage);
			Assert.assertFalse("review link not working", flag);
			driver.switchTo().window(winHandlerBefore);
			String poNo = FlowStandardPo.savePOAsDraft(driver, testCaseName);
			if (poNo != null)
				standardPO.setPoNumber(poNo);
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("Not able to save PO", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 195052 - Review PO not
	 * working for amended PO.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_66302(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		boolean flag = false;
		StandardPO standardPO = new StandardPO();
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);

			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.RELEASED);
			Assert.assertTrue("PO is not in released state", flag);

			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			PageStandardPO.clickOnReViewPoLink(driver);
			String winHandlerBefore = driver.getWindowHandle();
			Set<String> winHandler = driver.getWindowHandles();
			for (String handler : winHandler)
			{
				driver.switchTo().window(handler);
			}

			driver.manage().window().maximize();
			String reviewPOPage = PageStandardPO.getPONo(driver, testCaseName);
			flag = standardPO.getPoNumber().equalsIgnoreCase(reviewPOPage);
			Assert.assertTrue("review link not working", flag);
			driver.switchTo().window(winHandlerBefore);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 195053 - Allowing to add Item
	 * w/o Accounting info though indicated mandatory.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_66306(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		new CatelogItem();
		String accountTypeErrorMsg = CommonServices.getTestData(IConstantsData.MODAL_ACCOUNTIN_ERROR_MSG);
		String addItemsToPOfield = CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING);
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			PagePO.clickOnStandardPO(driver, testCaseName);
			PagePO.clickOnAdd(driver, testCaseName);
			// add new items
			PageStandardPO.clickOnSearchItem(driver);
			PageStandardPO.fillAddItemsToPOField(driver, addItemsToPOfield);
			PageStandardPO.clickOnSearch(driver);
			PageStandardPO.clickOnAdd(driver, 1);

			ActionBot.defaultSleep();
			ActionBot.scroll(driver, "300");
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);

			// click On Accounting
			ModalPOItemSummaryCostAllocation.clickOnCostBookingTab(driver, testCaseName);
			ModalPOItemSummaryCostAllocation.clearGLAccount(driver, testCaseName);
			ModalPOItemSummaryCostAllocation.clickOnSave(driver, testCaseName);

			String errorMsg = ModalPOItemSummaryCostAllocation.getaccuntTypeErrorMsg(driver, accountTypeErrorMsg);
			Assert.assertNotNull("Error Msg Displayed", errorMsg);
			ModalPOItemSummaryCostAllocation.clickOnCancel(driver);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 195066 - Unable to submit
	 * amendment with delivery date selected as todays date.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_69685(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab

			MainPageHeaderLevelTab.clickOnPOTab(driver);
			FlowPoListing.filterAllReleasedPO(driver, testCaseName);
			String pono = PagePurchaseOrderListing.getFirstPoNo(driver, testCaseName);
			PagePurchaseOrderListing.clickOnHeaderPoNo(driver, testCaseName);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			PurchaseOrder purchaseOrder = new PurchaseOrder();
			purchaseOrder.setCustomDate(CommonUtilities.getRequiredBy());

			PageStandardPO.fillRequiredByDate(driver, testCaseName, purchaseOrder.getCustomDate().getDay(), purchaseOrder.getCustomDate().getMonth(),
				purchaseOrder.getCustomDate().getYear());
			PageStandardPO.clickOnRequireReceiptChkbox(driver);
			//	PageStandardPO.clickOnSubmitPOForProcessing(driver);
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			FlowPoListing.searchPo(driver, testCaseName, pono, IConstantsData.SEARCH_BY_PO_NO);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 195070 - PO notes not shown
	 * on PO view though same are entered before submitting amendment.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_69686(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		StandardPO standardPO = new StandardPO();
		String Notes = CommonServices.getTestData(IConstantsData.ORDER_DESCRIPTION);
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			ActionBot.scroll(driver);
			String getPoNotes = PageStandardPO.fillAmendPoNotes(driver, testCaseName, Notes);
			ActionBot.defaultSleep();
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			ActionBot.defaultSleep();
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnTermsAndNotesLink(driver, testCaseName);
			boolean flag = getPoNotes.equalsIgnoreCase(PageViewPurchaseOrder.getViewPONotes(driver, testCaseName));
			Assert.assertTrue("PoNotes absent", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 195101 - In a scenario ,
	 * unable to add new item to a PO while amending.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_69693(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		CatelogItem catelogItem = new CatelogItem();
		GuidedItem guidedItem = new GuidedItem();
		Item item = new Item();
		boolean flag = false;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			item = ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);
			catelogItem.setItemName(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING));
			int quantity = CommonUtilities.getNonZeroRandomNumbers(2);
			catelogItem.setQuantity(quantity);

			// poItem = ObjectCreation.getItem(testCase,
			// IConstantsData.GUIDED_ITEM);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			FlowPoListing.filterAllReleasedPO(driver, testCaseName);
			PagePurchaseOrderListing.clickOnHeaderPoNo(driver, testCaseName);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			// click On Item Summary edit
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			ActionBot.defaultSleep();
			ModalPOItemSummaryCostAllocation.clickOnCancel(driver);
			// add new items
			/** To add Catalog item **/
			PageStandardPO.clickOnSearchItem(driver);

			catelogItem = FlowStandardPo.searchItem(driver, testCaseName, catelogItem);
			FlowStandardPo.addCatalogItemToCart(driver, testCaseName, catelogItem);
			if (PopUpDeleteConfirmation.isYesButtonPresent(driver, testCaseName))
			{
				PopUpDeleteConfirmation.clickOnYesButton(driver, testCaseName);
				ActionBot.defaultSleep();

				// to fill cost booking
				ModalPOItemSummaryCostAllocation.clickOnCostBookingTab(driver, testCaseName);
				CostBookingRequisitionSummary costBookingRequisitionSummary = ObjectCreation.getDefaultObjectOfCostBooking();
				costBookingRequisitionSummary.setNextAction(IConstantsData.NONE);
				costBookingRequisitionSummary = FlowStandardPo.fillCostBookingPurchaseOrderSummary(driver, testCaseName, costBookingRequisitionSummary);

				// to fill accounting
				ModalPOItemSummaryCostAllocation.clickOnCostBookingTab(driver, testCaseName);
				if (ModalPOFreeTextItemSummaryCostAllocation.getGLAccount(driver, testCaseName) == null)
				{
					AccountingItemSummary accountingItemSummary = ObjectCreation.getDefaultObjectOfAccounting();
					FlowStandardPo.fillAccountingDetails(driver, testCaseName, accountingItemSummary);
				}
			}
			// FlowStandardPo.submitPoForProcessing(driver, testCaseName);

			// submit po
			List<WebElement> listOfItems = PageStandardPO.getListOfItems(driver, testCaseName);
			for (WebElement element : listOfItems)
			{
				String itemName = element.getText().trim();
				if (itemName.equalsIgnoreCase(catelogItem.getItemName()) || itemName.equalsIgnoreCase(guidedItem.getShortDescription())
					|| itemName.equalsIgnoreCase(item.getCatelogItems().get(0).getItemName()))
				{
					flag = true;
				}
			}
			Assert.assertTrue("Items not added to po", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 195231 - Unable to amend PO,
	 * Errors shown for required by date at header and item level.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_74188(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		boolean flag;
		StandardPO standardPO = new StandardPO();
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			// MainPageHeaderLevelTab.clickOnPOTab(driver);
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.GUIDED_ITEM);
			standardPO.setNextAction(IConstantsData.NONE);
			standardPO = FlowStandardPo.createStandardPo(driver, testCaseName, standardPO);
			ActionBot.defaultSleep();
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			// click On Delivery Tab
			ModalItemSummaryAccounting.clickOnDelivery(driver);

			// fill req by date at item level
			PurchaseOrder purchaseOrder = new PurchaseOrder();
			purchaseOrder.setCustomDate(CommonUtilities.getRequiredBy());
			ModalItemSummaryDelivery.fillRequiredByDateAtItemLevel(driver, testCaseName, Integer.toString(purchaseOrder.getCustomDate().getDay()),
				purchaseOrder.getCustomDate().getMonth(), purchaseOrder.getCustomDate().getYear());
			ModalPOItemSummaryCostAllocation.clickOnSave(driver, testCaseName);
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);

			String status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			if (status.equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL))
			{
				MainPageHeaderLevelTab.clickOnApprovalAllRequestsTab(driver);
				// to approve the PO
				ApprovalAllRequests approvalAllRequests = new ApprovalAllRequests();
				approvalAllRequests.setDocumentNo(standardPO.getPoNumber());
				approvalAllRequests.setActions(IConstantsData.APPROVE);
				approvalAllRequests.setComment(IConstantsData.APPROVE_COMMENT);
				approvalAllRequests.setDocumentType(IConstantsData.PURCHASE_ORDER);
				FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

				ActionBot.defaultSleep();
				ActionBot.defaultHighSleep();
				driver.navigate().refresh();
				driver.navigate().refresh();
				FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			}
			PagePurchaseOrderListing.clickOnHeaderPoNo(driver, testCaseName);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			PageStandardPO.clickOnRequireReceiptChkbox(driver);
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			//PageStandardPO.clickOnSubmitPOForProcessing(driver);
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue(flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 195255 - UOM shown as label
	 * in a scenario, for Item edit and Add Item too.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_74477(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		StandardPO standardPO = new StandardPO();
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			String UOM = CommonServices.getTestData(IConstantsData.EACH);
			// click On PoTab
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.GUIDED_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			// search po
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			ActionBot.defaultSleep();
			ActionBot.scroll(driver, "250");
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			ActionBot.jQueryScroll(driver, ".eformItemInpt.ui-front", 900);
			String Uom = PageStandardPO.isUOMfieldItemDetailsEditable(driver, UOM);
			Assert.assertNull("Uom Field not Editable", Uom);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 195257 - Required by date
	 * shown as NaN on Create and Amend PO screen in IE.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_74481(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		StandardPO standardPO = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab

			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);

			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);

			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);

			String Editable = PageStandardPO.isDeliveryDateEditable(driver);
			Assert.assertNotNull("delivery date editable", Editable);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
			// Run IE
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 195321 - UOM non editable in
	 * copied Item while amending.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_74773(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		StandardPO standardPO = new StandardPO();
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			String UOM = CommonServices.getTestData(IConstantsData.EACH);
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);

			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			PageStandardPO.clickOnItemCopyLink(driver);
			ActionBot.defaultSleep();
			List<WebElement> editItem = PageStandardPO.getListOfItemLevelEditButtons(driver, testCaseName);
			ActionBot.click(driver, editItem.get(1));
			ActionBot.defaultSleep();
			ActionBot.jQueryScroll(driver, ".eformItemInpt.ui-front", 500);
			String Uom = PageStandardPO.isUOMfieldItemDetailsEditable(driver, UOM);
			Assert.assertNull("Uom Field not Editable", Uom);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
			// Run IE
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Copied PO should be a new draft. All items
	 * will be copied to new PO.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_76915(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		StandardPO standardPO = new StandardPO();
		boolean flag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			// Copy a po
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			List<WebElement> listOfItems = PageStandardPO.getListOfItems(driver, testCaseName);
			for (WebElement element : listOfItems)
			{
				String itemName = element.getText().trim();
				if (itemName.equalsIgnoreCase(standardPO.getItems().getCatelogItems().get(0).getItemName()))
				{
					flag = true;
				}
			}
			Assert.assertTrue("Items not Copied ", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Buyer should be able to add/remove items &
	 * modify PO details
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_76916(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		StandardPO standardPO = new StandardPO();
		CatelogItem catelogItem = new CatelogItem();
		GuidedItem guidedItem = new GuidedItem();
		Item item = new Item();
		boolean flag = false;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			ActionBot.defaultSleep();
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			// Copy a po
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			// change po details
			standardPO.setOrderDescription(PageStandardPO.enterOrderDescription(driver, standardPO.getOrderDescription()));
			standardPO.getCustomDate().setDate(PageStandardPO.fillRequiredByDate(driver, testCaseName, standardPO.getCustomDate().getDay(), standardPO.getCustomDate().getMonth(),
				standardPO.getCustomDate().getYear()));
			// add new item
			item = ObjectCreation.getItem(IConstantsData.GUIDED_ITEM);
			FlowStandardPo.addItem(driver, testCaseName, item);

			List<WebElement> listOfItems = PageViewPurchaseOrder.getListOfItems(driver, testCaseName);
			for (WebElement element : listOfItems)
			{
				String itemName = element.getText().trim();
				if (itemName.equalsIgnoreCase(catelogItem.getItemName()) || itemName.equalsIgnoreCase(guidedItem.getShortDescription())
					|| itemName.equalsIgnoreCase(item.getCatelogItems().get(0).getItemName()))
				{
					flag = true;
				}
			}
			Assert.assertTrue("Items are not added ", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>As a Buyer, try removing a new item from a
	 * copied draft PO.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_76918(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		boolean flag;
		StandardPO standardPO = new StandardPO();
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);

			// create standard PO
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);

			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			// Copy a po
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			ActionBot.defaultSleep();
			/*
			 * Item item = ObjectCreation.getItem(IConstantsData.GUIDED_ITEM);
			 * FlowStandardPo.addItem(driver, testCaseName, item);
			 */
			// verify list of item coped
			PageStandardPO.clickOnItemDeleteLink(driver);
			String conformationMsg = PageStandardPO.getConformationMsg(driver, testCaseName);
			Assert.assertNotNull("Unable to delete Item", conformationMsg);
			PageStandardPO.clickOnItemDeleteYesPopup(driver);
			List<WebElement> itemNames = PageStandardPO.getItemName(driver, testCaseName);
			flag = itemNames.size() == 0;
			Assert.assertTrue("Item is not deleted", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>New PO No should be generated as per
	 * latest setting & format
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_76920(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);
			String poNoFormat = PagePurchaseOrderSetting.getPONumberFormat(driver, testCaseName);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			// Copy a po
			FlowPoListing.filterAllReleasedPO(driver, testCaseName);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ActionBot.defaultSleep();
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			boolean matchpoNoFormat = poNoFormat.equalsIgnoreCase(PageStandardPO.getPONo(driver, testCaseName));
			Assert.assertFalse("PoNo is not geneting as per latest Format", matchpoNoFormat);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Copy PO : Delivery date should be left
	 * empty.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_76921(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;

		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			// Copy a po
			FlowPoListing.filterAllReleasedPO(driver, testCaseName);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ActionBot.defaultSleep();
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			boolean empty = PageStandardPO.isDeliveryDateBlank(driver);
			Assert.assertTrue("Date field is not empty", empty);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Copy PO : Check case where price of
	 * catalog item changed while amending and that PO gets copied.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_76935(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		StandardPO standardPO = new StandardPO();
		int quantity;
		String reference = CommonServices.getTestData(IConstantsData.APPROVE_COMMENT);
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);

			// create standard PO
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);

			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			ActionBot.scroll(driver);
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			ActionBot.jQueryScroll(driver, ".eformItemInpt.ui-front", 400);
			quantity = CommonUtilities.getNonZeroRandomNumbers(1);
			int qty = ModalItemSummaryItem.clearAndEnterQuantity(driver, testCaseName, quantity);
			String marketPrice = CommonServices.getTestData(IConstantsData.MARKET_PRICE);
			ModalPOFreeTextItemSummaryItem.fillMarketPrice(driver, testCaseName, Integer.parseInt(marketPrice));
			ModalPOItemSummaryCostAllocation.clickOnSave(driver, testCaseName);
			PageStandardPO.isEditableReference(driver, reference);
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			// copy po And check Item Quantity
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			ActionBot.scroll(driver, "250");
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			ActionBot.defaultSleep();
			ActionBot.jQueryScroll(driver, ".eformItemInpt.ui-front", 400);
			int getqty = ModalItemSummaryItem.getQuantity(driver, testCaseName);
			Assert.assertEquals("price Are Not Same", qty, getqty);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Copy PO : Check copying a PO which
	 * contains Delivery split in it.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_76942(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			Requisition requisition = ObjectCreation.getRequisition(driver);

			Item item = ObjectCreation.getItem("catalogItem");

			requisition.setItems(item);
			// select Delivery Split
			/*
			 * String itemID = catelogItem.getItemID();
			 * PageRequisitionCheckOut.clickEditItemSummary(driver,
			 * testCaseName, itemID);
			 */

			CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			// convert To Po
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			FlowBuyersDesk.convertToPo(driver, testCaseName);
			// to click on first checkbox
			PagePurchaseOrderToBeGenerated.ClikOnPurchaseOrderToBeGeneratedCheckBox(driver, testCaseName, 0);
			PagePurchaseOrderToBeGenerated.clickOnSubmitPoForProcessing(driver, testCaseName);
			// Aprove po
			MainPageHeaderLevelTab.clickOnApprovalAllRequestsTab(driver);
			// to approve the PO
			PurchaseOrder purchaseorder = new PurchaseOrder();
			ApprovalAllRequests approvalAllRequests = new ApprovalAllRequests();
			approvalAllRequests.setDocumentNo(purchaseorder.getPoNo());
			approvalAllRequests.setActions(IConstantsData.APPROVE);
			approvalAllRequests.setComment(IConstantsData.APPROVE_COMMENT);
			approvalAllRequests.setDocumentType(IConstantsData.PURCHASE_ORDER);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			driver.navigate().refresh();
			ActionBot.defaultHighSleep();

			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Copy PO : Check copying a PO which
	 * contains free text item in it.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_76946(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		StandardPO standardPO = new StandardPO();
		Item item = new Item();
		boolean flag;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.GUIDED_ITEM);
			// create standard PO
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			ActionBot.scroll(driver);
			ActionBot.defaultSleep();
			List<WebElement> itemNames = PageStandardPO.getItemName(driver, testCaseName);
			flag = false;

			for (WebElement element : itemNames)
			{
				String itemName = element.getText().trim();
				logger.info("the itemNames:" + itemName);
				logger.info("the description :" + standardPO.getItems().getGuidedItems().get(0).getShortDescription());

				if (itemName.contains(standardPO.getItems().getGuidedItems().get(0).getShortDescription()))
				{
					flag = true;
				}
			}
			Assert.assertTrue(" added freeText item was not copied", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>User should be able to add catalog items
	 * in manual POs by clicking 'Add Items' action.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_76990(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		Item item = new Item();
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			PagePO.clickOnStandardPO(driver, testCaseName);
			ActionBot.scroll(driver);
			// to get item object having guided item
			item = ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);
			FlowStandardPo.addItem(driver, testCaseName, item);
			boolean msg = PageStandardPO.isNoItemAvailableMsgDisplayed(driver, testCaseName);
			Assert.assertFalse("Item not added", msg);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>User should be able to reset the inline
	 * section by clicking on [x] <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_76995(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			PagePO.clickOnStandardPO(driver, testCaseName);
			PageStandardPO.clickOnAddItem(driver);
			PageStandardPO.clickOnSearchItem(driver);
			ActionBot.click(driver, IPageStandardPO.TEXTBOX_ADD_ITEMS_TO_PO);
			ActionBot.defaultLowSleep();

			PageStandardPO.clickOnResetlineCrossButton(driver);
			boolean msg = ActionBot.isElementDisplayed(driver, IPageStandardPO.TEXTBOX_ADD_ITEMS_TO_PO);
			Assert.assertTrue("Unable to Reset", !msg);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>On click of Add Items, an inline section
	 * should come above item grid which should contain options to search for
	 * catalog items, punch-outs, create free-text item
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_76991(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			PagePO.clickOnStandardPO(driver, testCaseName);
			PageStandardPO.clickOnAddItem(driver);
			boolean inLineSection = PageStandardPO.isInlineSectionpresentUnderItemGrid(driver, testCaseName);
			Assert.assertTrue("Inline section not present under Item grid", inLineSection);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>User should be able to add items by
	 * providing quantity for each item
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_76996(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		boolean flag;
		CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING);
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			PagePO.clickOnStandardPO(driver, testCaseName);
			ActionBot.defaultSleep();
			ActionBot.scroll(driver);
			Item item = new Item();
			item = ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);
			FlowStandardPo.addItem(driver, testCaseName, item);
			List<WebElement> li = PageStandardPO.getListOfItems(driver, testCaseName);
			flag = (li.size() > 0) ? true : false;
			Assert.assertTrue(flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Try adding a item without mentioning
	 * quantity. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_77015(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		String addItemsToPOfield = CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING);
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			PagePO.clickOnStandardPO(driver, testCaseName);
			ActionBot.scroll(driver, "500");
			// PageStandardPO.clickOnAddItem(driver);
			PageStandardPO.clickOnSearchItem(driver);

			PageStandardPO.fillAddItemsToPOField(driver, addItemsToPOfield);
			PageStandardPO.clickOnSearch(driver);
			ActionBot.scroll(driver);
			ActionBot.defaultSleep();
			PageStandardPO.clickOnAdd(driver, 1);
			String Quantity = PageStandardPO.getAddedItemQuantity(driver, testCaseName);
			Assert.assertNotNull("Quantity not Added", Quantity);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Try adding items before selecting a PO
	 * supplier, then after adding items select supplier. [provided that there
	 * exists items in grid with different currency/supplier] <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_77022(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		String addItemsToPOfield = CommonServices.getTestData(IConstantsData.OTHER_ITEM_NAME_FOR_SEARCHING);
		String supplierName = CommonServices.getTestData(IConstantsData.SUPPLIER_NAME);
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			PagePO.clickOnStandardPO(driver, testCaseName);
			ActionBot.scroll(driver);
			// PageStandardPO.clickOnAddItem(driver);
			ActionBot.scroll(driver, "500");
			PageStandardPO.clickOnSearchItem(driver);
			PageStandardPO.fillAddItemsToPOField(driver, addItemsToPOfield);
			PageStandardPO.clickOnSearch(driver);
			PageStandardPO.clickOnAdd(driver, 1);
			ActionBot.scroll(driver, "-400");
			PageStandardPO.enterSupplierName(driver, supplierName);
			//((JavascriptExecutor) driver).executeScript("window.scrollBy(0,300);");
			String Quantity = PageStandardPO.getAddedItemQuantity(driver, testCaseName);
			Assert.assertNotNull("Item grid does not exists with diff currency and supplier", Quantity);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Within item listing User should be able to
	 * filter on : Item name
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_77007(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		String addItemsToPOfield = CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING);
		String supplierNmae = CommonServices.getTestData(IConstantsData.SUPPLIER_NAME);
		boolean flag = false;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			PagePO.clickOnStandardPO(driver, testCaseName);
			ActionBot.scroll(driver);
			PageStandardPO.clickOnAddItem(driver);
			PageStandardPO.clickOnSearchItem(driver);
			ActionBot.scroll(driver);
			PageStandardPO.fillAddItemsToPOField(driver, addItemsToPOfield);
			PageStandardPO.clickOnSearch(driver);
			ActionBot.defaultSleep();
			flag = FlowStandardPo.searchItem(driver, testCaseName, addItemsToPOfield, IConstantsData.SEARCH_BY_ITEM_NAME);
			Assert.assertTrue("Error while searching Item", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Converted price in users currency should
	 * not be shown when users currency is same as that of item currency.
	 * 
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_77023(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		String addItemsToPOfield = CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING);
		String supplierName = CommonServices.getTestData(IConstantsData.SUPPLIER_NAME);
		String currencyType = CommonServices.getTestData(IConstantsData.CURRENCY_TYPE);
		boolean flag = false;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			PagePO.clickOnStandardPO(driver, testCaseName);
			PageStandardPO.enterSupplierName(driver, supplierName);
			((JavascriptExecutor) driver).executeScript("window.scrollBy(0,500);");
			ActionBot.defaultSleep();

			PageStandardPO.clickOnAddItem(driver);
			PageStandardPO.clickOnSearchItem(driver);
			PageStandardPO.fillAddItemsToPOField(driver, addItemsToPOfield);
			PageStandardPO.clickOnSearch(driver);
			PageStandardPO.clickOnAdd(driver, 1);
			PageStandardPO.enterCurrencyType(driver, currencyType);
			flag = PageStandardPO.isconvertedpricedisplayed(driver, testCaseName);
			Assert.assertFalse("converted currency field displayed", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 22436 - Allow to add external
	 * email address setting not working.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_23397(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;

		String to = CommonServices.getTestData(IConstantsData.Email_OUTSIDE_COMPANY);
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);
			PagePurchaseOrderSetting.clickOnAllowEmailingPOToUsersOutsideCompany_No(driver, testCaseName);
			PagePurchaseOrderSetting.clickOnSaveButton(driver, testCaseName);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			FlowPoListing.filterAllReleasedPO(driver, testCaseName);
			PagePurchaseOrderListing.clickOnHeaderPoNo(driver, testCaseName);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnLinkEmailPo(driver, testCaseName);
			ModalEmailPODocument.fillEmailToField(driver, testCaseName, to);
			boolean errorMsg = ModalEmailPODocument.isErrorMsgForMailIdOfOutSideUserdisplayed(driver, testCaseName);
			Assert.assertFalse("Allow user Outsidecompany Mailid Not Working", errorMsg);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Verify Allow creating a free text zero
	 * price item in Copy PO-Verify impact on Copy PO <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_108486(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		StandardPO standardPO = new StandardPO();
		Item item = new Item();
		boolean flag = false;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);

			// create standard PO
			standardPO = FlowStandardPo.createStandardPo(driver, testCaseName, standardPO);
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ActionBot.defaultSleep();
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);

			/** To add guided item **/
			PurchaseOrder purchaseOrder = new PurchaseOrder();
			purchaseOrder.setCustomDate(CommonUtilities.getRequiredBy());

			PageStandardPO.fillRequiredByDate(driver, testCaseName, purchaseOrder.getCustomDate().getDay(), purchaseOrder.getCustomDate().getMonth(),
				purchaseOrder.getCustomDate().getYear());
			ActionBot.scroll(driver);
			item = ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);
			FlowStandardPo.addItem(driver, testCaseName, item);
			// submit po
			String copyPoNo = FlowStandardPo.submitPoForProcessing(driver, testCaseName);

			List<WebElement> listOfItems = PageViewPurchaseOrder.getListOfItems(driver, testCaseName);
			for (WebElement element : listOfItems)
			{
				String itemName = element.getText().trim();
				if (itemName.equalsIgnoreCase(item.getCatelogItems().get(0).getItemName()))
				{
					flag = true;
				}

			}
			Assert.assertTrue("Items not added to po", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Check Review PO against a Coped PO after
	 * adding or removing items. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_107098(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		StandardPO standardPO = new StandardPO();
		Item item = new Item();
		item = ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);
		boolean flag = false;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.GUIDED_ITEM);

			// create standard PO
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);

			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			// view po
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			ActionBot.defaultSleep();
			// to CopyPo
			PurchaseOrder purchaseOrder = new PurchaseOrder();
			purchaseOrder.setCustomDate(CommonUtilities.getRequiredBy());

			PageStandardPO.fillRequiredByDate(driver, testCaseName, purchaseOrder.getCustomDate().getDay(), purchaseOrder.getCustomDate().getMonth(),
				purchaseOrder.getCustomDate().getYear());
			ActionBot.scroll(driver);
			FlowStandardPo.addItem(driver, testCaseName, item);
			ActionBot.defaultSleep();
			// to submit PO for processing
			PageStandardPO.clickOnReViewPoLink(driver);
			// search po
			String winHandlerBefore = driver.getWindowHandle();
			Set<String> winHandler = driver.getWindowHandles();
			for (String handler : winHandler)
			{
				driver.switchTo().window(handler);
			}

			driver.manage().window().maximize();
			String poNoOnPreviewPOPage = PagePreviewPOPage.getPreviewPoNo(driver, testCaseName);
			System.out.println(driver.getTitle());
			flag = standardPO.getPoNumber().equalsIgnoreCase(poNoOnPreviewPOPage);
			driver.switchTo().window(winHandlerBefore);
			System.out.println(poNoOnPreviewPOPage);
			Assert.assertFalse("PO Number on Preview PO Page is wrong", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Verify Allow creating a free text zero
	 * price item in Copy PO-Validation: Item sub total should not be zero.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_108493(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();

		User user = null;
		StandardPO standardPo = new StandardPO();
		Item item = null;
		GuidedItem guidedItem = new GuidedItem();
		boolean flag = true;
		String supplierType = CommonServices.getTestData(IConstantsData.SUPPLIER_NAME);
		guidedItem = ObjectCreation.getDefaultGuidedItemObject(supplierType);
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			standardPo = ObjectCreation.getStandardPoCreation(IConstantsData.GUIDED_ITEM);
			FlowStandardPo.createStandardPo(driver, testCaseName, standardPo);
			FlowPoListing.searchPo(driver, testCaseName, standardPo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOListingActions.clickOnCopyLink(driver, testCaseName);
			// Select requirerd
			PurchaseOrder purchaseOrder = new PurchaseOrder();
			purchaseOrder.setCustomDate(CommonUtilities.getRequiredBy());
			purchaseOrder.setPoNo(PageStandardPO.getPONo(driver, testCaseName));
			PageStandardPO.fillRequiredByDate(driver, testCaseName, purchaseOrder.getCustomDate().getDay(), purchaseOrder.getCustomDate().getMonth(),
				purchaseOrder.getCustomDate().getYear());
			ActionBot.scroll(driver, "400");
			item = ObjectCreation.getItem(IConstantsData.GUIDED_ITEM);
			item.getGuidedItems().get(0).setZeroPriceItem(true);
			FlowStandardPo.addItem(driver, testCaseName, item);
			String poNo = FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			if (poNo != null)
				purchaseOrder.setPoNo(poNo);
			FlowPoListing.searchPo(driver, testCaseName, purchaseOrder.getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			String totalItemprice = PageStandardPO.getItemSubTotalPriceIndexWise(driver, testCaseName, 2);
			logger.info("Item Sub price " + totalItemprice);
			if (totalItemprice != null)
			{
				totalItemprice = totalItemprice.split("\\.")[0].replaceAll("[^0-9]", "");
				Double itemPrice = Double.parseDouble(totalItemprice);
				flag = itemPrice == 0;
			}
			Assert.assertTrue("Item sub total should be zero. ", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Verify Allow creating a free text zero
	 * price item in Amend PO.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_108506(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		new StandardPO();
		GuidedItem guidedItem = new GuidedItem();
		String supplierType = CommonServices.getTestData(IConstantsData.SUPPLIER_NAME);
		guidedItem = ObjectCreation.getDefaultGuidedItemObject(supplierType);
		Item item = null;
		boolean flag;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			StandardPO standardPo = new StandardPO();
			standardPo = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);

			// create standard PO
			standardPo = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPo);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			FlowPoListing.searchPo(driver, testCaseName, standardPo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			if (PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL))
			{
				ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, standardPo.getPoNumber(),
					IConstantsData.PURCHASE_ORDER, IConstantsData.APPROVE);
				FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);
				FlowPoListing.searchPo(driver, testCaseName, standardPo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			}
			flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.RELEASED);
			Assert.assertTrue("PO is not in released state", flag);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);

			ActionBot.scroll(driver, "400");
			item = ObjectCreation.getItem(IConstantsData.GUIDED_ITEM);
			item.getGuidedItems().get(0).setZeroPriceItem(true);
			FlowStandardPo.addItem(driver, testCaseName, item);
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			boolean popUpMsgDisplayed = PageStandardPO.getItemSubTotalShouldNotBeZeroMsg(driver, testCaseName);
			Assert.assertFalse("Item sub total should be zero. ", popUpMsgDisplayed);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>If User adds item from another
	 * supplierâ€™s catalog, system should ask for confirmation with mentioned
	 * message.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_77000(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		String supplierName = CommonServices.getTestData(IConstantsData.OTHER_SUPPLIER_NAME);
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			PagePO.clickOnStandardPO(driver, testCaseName);
			PageStandardPO.enterSupplierName(driver, supplierName);
			PageStandardPO.clickOnAddItem(driver);
			PageStandardPO.clickOnSearchItem(driver);
			PageStandardPO.fillAddItemsToPOField(driver, CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			PageStandardPO.clickOnSearch(driver);
			PageStandardPO.clickOnAdd(driver, 1);
			ActionBot.defaultSleep();
			boolean diffSupplier = PageStandardPO.isPopUpForItemDiffSupplierPresent(driver, testCaseName);
			Assert.assertTrue("Add it as free text item msg not present", diffSupplier);
			PageStandardPO.clickOnPopItemDiffSupplierCancelLink(driver);
			boolean msgDisplayed = PageStandardPO.isItemNotAddedAsFreeTextItemMsg(driver, testCaseName);
			Assert.assertTrue("Item Added As freetextItem", msgDisplayed);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 212152 - add a guided item in SPO and change
	 * the currency and check if the changed currency is reflected in the guided item or not
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_196208(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		boolean flag;
		User user = null;
		Item item = new Item();
		String supplierName = CommonServices.getTestData(IConstantsData.SUPPLIER_WITH_DIFF_CURRENCY);
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			StandardPO standardPO = new StandardPO();
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.GUIDED_ITEM);
			standardPO.setNextAction(IConstantsData.NONE);
			FlowStandardPo.createStandardPo(driver, testCaseName, standardPO);
			PageStandardPO.enterCurrencyType(driver, CommonServices.getTestData(IConstantsData.CHANGED_CURRENCY));
			ModalChangeCurrencyPO.clickOnConvertAmountsToCurrencyType(driver, testCaseName);
			String tprice = PageStandardPO.getPOTotalPrice(driver, testCaseName);
			flag = (tprice.contains(CommonServices.getTestData(IConstantsData.CHANGED_CURRENCY)) ? true : false);
			Assert.assertTrue(flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Price filter should load min and max
	 * values as per the search result.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_77016(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CatelogItem catelogItem = new CatelogItem();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		boolean flag;
		String itemPrice;
		String itemPrice2;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			// to search item
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			PagePO.clickOnStandardPO(driver, testCaseName);
			catelogItem = ObjectCreation.getDefaultCatalogItemObject();
			PageStandardPO.clickOnAddItem(driver);
			PageStandardPO.clickOnSearchItem(driver);
			FlowStandardPo.searchItem(driver, testCaseName, catelogItem);

			// to get item price of first item
			List<WebElement> itemPriceList = PageStandardPO.getItemPrice(driver, testCaseName);
			//List<WebElement> itemPriceList2 = PageStandardPO.getItemPrice(driver, testCaseName);
			itemPrice = itemPriceList.get(0).getText().trim();
			itemPrice2 = itemPriceList.get(1).getText().trim();
			int price = Integer.parseInt(CommonUtilities.getDecimalPrice(itemPrice.substring(4)).trim());
			int price2 = Integer.parseInt(CommonUtilities.getDecimalPrice(itemPrice2.substring(4)).trim());
			flag = (price <= price2) ? true : false;
			Assert.assertTrue(flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Verify that we should have the option of
	 * reply to address in custome>>email notification for Email PO document.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_22629(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			PageCustomizeSettings.clickOnGeneralSettingsLink(driver, testCaseName);
			ActionBot.defaultSleep();
			String to = CommonServices.getTestData(IConstantsData.TO_FIELD_VALUE_FOR_SENDING_PO_EMAIL);
			boolean replyTo = PageCustomizeSettings.isReplyToAddressFieldPresent(driver, testCaseName, to);
			Assert.assertTrue("Rply to Address Field not present", replyTo);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Try adding a free text item with same item
	 * number as any of the catalog item and see the behavior.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_77025(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		Item item = new Item();
		GuidedItem guidedItem = new GuidedItem();
		String supplierType = CommonServices.getTestData(IConstantsData.SUPPLIER_NAME);
		guidedItem = ObjectCreation.getDefaultGuidedItemObject(supplierType);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			item = ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			PagePO.clickOnStandardPO(driver, testCaseName);
			ActionBot.scroll(driver);
			FlowStandardPo.addItem(driver, testCaseName, item);
			// ((JavascriptExecutor)
			// driver).executeScript("window.scrollBy(0,200);");
			int getItemNo = PageStandardPO.getCatelogItemNo(driver, testCaseName);
			((JavascriptExecutor) driver).executeScript("window.scrollBy(0,300);");
			/** To add guided item **/
			PageStandardPO.clickOnFreeTextItem(driver);
			guidedItem.setLineNo(getItemNo);
			guidedItem.setItemID(PageStandardPO.getItemId(driver, testCaseName, guidedItem.getShortDescription()));
			guidedItem.setNextAction(IConstantsData.SAVE);
			guidedItem = FlowStandardPo.fillGuidedItemForm(driver, testCaseName, guidedItem);
			ActionBot.defaultSleep();
			boolean isNewItem = PageStandardPO.isNewFreeTextItemCreated(driver, testCaseName);
			Assert.assertTrue("Free text Item Not treated as diff Item", isNewItem);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Check the for mentioned scenario If User
	 * adds item from another supplierâ€™s catalog.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_77003(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		String addItemsToPOfield = CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING);
		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab

			MainPageHeaderLevelTab.clickOnPOTab(driver);
			PagePO.clickOnStandardPO(driver, testCaseName);
			String SupplierName = CommonServices.getTestData(IConstantsData.SUPPLIER_NAME);
			ActionBot.defaultSleep();
			PageStandardPO.enterSupplierName(driver, SupplierName);
			//	PageStandardPO.clickOnAddItem(driver);
			PageStandardPO.clickOnSearchItem(driver);
			//		FlowStandardPo.searchItem(driver, testCaseName, catelogItem);
			//		ActionBot.scroll(driver);
			PageStandardPO.fillAddItemsToPOField(driver, addItemsToPOfield);
			PageStandardPO.clickOnSearch(driver);
			ActionBot.scroll(driver);
			ActionBot.defaultSleep();
			// check SupplierName and add
			List<WebElement> searchTexts = PageStandardPO.getSupplierNames(driver, testCaseName);

			List<WebElement> addButtons = PageStandardPO.Additem(driver, testCaseName);

			int itemIndex = 0;
			for (WebElement searchText : searchTexts)
			{
				if (!SupplierName.equalsIgnoreCase(searchText.getText()))
				{
					WebElement addBtnElement = addButtons.get(itemIndex);
					addBtnElement.click();
					PageStandardPO.clickOnPopItemDiffSupplierCancelLink(driver);
					String supplierName = CommonServices.getTestData(IConstantsData.OTHER_SUPPLIER_NAME);
					PageStandardPO.enterSupplierName(driver, supplierName);
					addBtnElement.click();
					boolean diffSupplier = PageStandardPO.isPopUpForItemDiffSupplierPresent(driver, testCaseName);
					Assert.assertFalse("Add it as free text item msg Popup present", diffSupplier);
					break;
				}
				else if (SupplierName.equalsIgnoreCase(searchText.getText()))
				{
					String supplierName = CommonServices.getTestData(IConstantsData.OTHER_SUPPLIER_NAME);
					PageStandardPO.enterSupplierName(driver, supplierName);
					WebElement addBtnElement = addButtons.get(itemIndex);
					addBtnElement.click();
					PageStandardPO.clickOnPopItemDiffSupplierCancelLink(driver);
					PageStandardPO.enterSupplierName(driver, SupplierName);
					addBtnElement.click();
					boolean diffSupplier = PageStandardPO.isPopUpForItemDiffSupplierPresent(driver, testCaseName);
					Assert.assertFalse("Add it as free text item msg Popup present", diffSupplier);
					break;
				}
				++itemIndex;
			}
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Search result should show items in a grid
	 * with mentioned fields.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_77030(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		String supplierName = CommonServices.getTestData(IConstantsData.SUPPLIER_NAME);

		//String addItemsToPOfield = CommonServices.getTestData(IConstantsData.ADD_ITEM_TO_PO_FIELD);
		User user = null;
		try
		{

			user = LoginLogoutServices.login(driver, testCase);
			String addItemsToPOfield = CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING);
			// click On PoTab
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			PagePO.clickOnStandardPO(driver, testCaseName);
			ActionBot.scroll(driver);
			PageStandardPO.enterSupplierName(driver, supplierName);
			PageStandardPO.clickOnAddItem(driver);
			PageStandardPO.clickOnSearchItem(driver);
			ActionBot.defaultSleep();
			PageStandardPO.fillAddItemsToPOField(driver, addItemsToPOfield);
			ActionBot.defaultSleep();
			PageStandardPO.clickOnSearch(driver);
			PageStandardPO.clickOnAdd(driver, 1);
			ActionBot.defaultSleep();
			int ItemNo = PageStandardPO.getCatelogItemNo(driver, testCaseName);
			Assert.assertNotNull("Item details absent", ItemNo);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Item search result : User should be able
	 * to search by item number
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_77035(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		String supplierName = CommonServices.getTestData(IConstantsData.SUPPLIER_NAME);
		String addItemsToPOfield = CommonServices.getTestData(IConstantsData.SEARCH_BY_ITEM_NO);
		User user = null;
		try
		{
			StandardPO standardpo = new StandardPO();
			standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardpo.setNextAction(IConstantsData.NONE);
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			PagePO.clickOnStandardPO(driver, testCaseName);
			PageStandardPO.enterSupplierName(driver, supplierName);
			PageStandardPO.clickOnAddItem(driver);
			PageStandardPO.clickOnSearchItem(driver);
			PageStandardPO.fillAddItemsToPOField(driver, addItemsToPOfield);
			PageStandardPO.clickOnSearch(driver);
			PageStandardPO.clickOnAdd(driver, 1);

			if (PopUpDefaultConfirmation.isConfirmYesButtonPresent(driver, testCaseName))
			{
				PopUpDefaultConfirmation.clickOnConfirmYesButton(driver, testCaseName);
				ActionBot.defaultSleep();
			}
			ModalItemSummaryCostAllocation.clickOnCostBooking(driver);
			//			
			ModalItemSummaryCostAllocation.fillGLAccount(driver, CommonServices.getTestData(IConstantsData.GL_ACCOUNT));
			ModalItemSummaryCostAllocation.clickOnSave(driver);
			int ItemNo = PageStandardPO.getCatelogItemNo(driver, testCaseName);
			boolean flag = (ItemNo == Integer.parseInt(addItemsToPOfield)) ? true : false;
			Assert.assertTrue(flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Catalog Item in PO via file : User should
	 * get a link "Add item via file" next to Add items button on PO creation
	 * page.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_77061(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);

		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			PagePO.clickOnStandardPO(driver, testCaseName);
			PageStandardPO.clickOnAddItem(driver);
			ActionBot.defaultSleep();
			boolean addItemLink = PageStandardPO.isAddItemViaFileLinkPresent(driver);
			Assert.assertNotNull("Add item via link not present", addItemLink);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>After confirming to convert Catalog item
	 * into free text item all item details should be copied as it is.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_77012(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		String addItemsToPOfield = CommonServices.getTestData(IConstantsData.ITEM_WITH_DIFFERENT_SUPPLIER);
		StandardPO standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
		CatelogItem catelogItem = standardpo.getItems().getCatelogItems().get(0);
		catelogItem.setItemName(CommonServices.getTestData(IConstantsData.ITEM_WITH_DIFFERENT_CURRENCY));
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			PagePO.clickOnStandardPO(driver, testCaseName);

			if (standardpo.getSupplierName() != null)
			{
				standardpo.setSupplierName(PageStandardPO.enterSupplierName(driver, standardpo.getSupplierName()));
			}
			ActionBot.scroll(driver, "650");
			ActionBot.scroll(driver, "400");
			PageStandardPO.clickOnSearchItem(driver);
			FlowStandardPo.searchItem(driver, testCaseName, catelogItem);

			List<WebElement> searchTexts = PageStandardPO.getListOFSearchedItemNames(driver, testCaseName);
			List<WebElement> quantityInputs = PageStandardPO.fillQuantity(driver, testCaseName);
			List<WebElement> addButtons = PageStandardPO.Additem(driver, testCaseName);
			int index = 0;
			do
			{
				int itemIndex = 0;

				// int cnt = 1;
				boolean flag = false;
				for (WebElement searchText : searchTexts)
				{
					if (catelogItem.getItemName().equalsIgnoreCase(searchText.getText()))
					{
						WebElement quantityElement = quantityInputs.get(itemIndex);
						ActionBot.scroll(driver, quantityElement);
						quantityElement.clear();
						quantityElement.sendKeys(Integer.toString(catelogItem.getQuantity()));
						logger.info("Entered Quantity : " + quantityElement.getAttribute("value").trim());
						ScreenShot.screenshot(driver, testCaseName, "After adding Quantity");
						ActionBot.defaultSleep();
						WebElement addBtnElement = addButtons.get(itemIndex);
						Actions actions = new Actions(driver);
						actions.moveToElement(addBtnElement).click().build().perform();
						// addBtnElement.click();
						ActionBot.defaultSleep();
						/*
						 * ActionBot.waitTillPopUpIsPresent(driver, By.xpath(
						 * ".//*[@id='wrapper']//em[contains(@class,'icon tickActive')]"
						 * ));
						 */
						flag = true;
						break;
					}
					// cnt++;
					++itemIndex;
				}
				if (flag)
				{
					break;
				}
				index++;
				if (PageStandardPO.isNextPaginationPresent(driver, testCaseName))
				{
					PageStandardPO.clickOnNextPagination(driver, testCaseName);
				}
			} while (index < 3);

			ScreenShot.screenshot(driver, testCaseName, "After adding catalog item");
			// to handle other supplier/currency items
			if (PopUpDefaultConfirmation.isConfirmYesButtonPresent(driver, testCaseName))
			{
				PopUpDefaultConfirmation.clickOnConfirmYesButton(driver, testCaseName);
				ActionBot.defaultSleep();

				// line no
				ModalPOFreeTextItemSummaryItem.getLineNo(driver, testCaseName);
				Assert.assertTrue(ActionBot.getTextWithInElement(driver, IModalPOFreeTextItemSummaryItem.TEXTBOX_SHORT_DESCRIPTION).equalsIgnoreCase(catelogItem.getItemName()));
			}

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 197196 - Issues with earlier
	 * item level delivery date than header, blocking user from submititng PO
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_108713(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			StandardPO standardPO = new StandardPO();
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			PurchaseOrder purchaseOrder = new PurchaseOrder();
			purchaseOrder.setCustomDate(CommonUtilities.getFutureDayDate());
			PageStandardPO.fillRequiredByDate(driver, testCaseName, purchaseOrder.getCustomDate().getDay(), purchaseOrder.getCustomDate().getMonth(),
				purchaseOrder.getCustomDate().getYear());
			ActionBot.scroll(driver, "450");
			ActionBot.defaultSleep();
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			ModalItemSummaryDelivery.clickOnItemSummaryDeliveryTab(driver, testCaseName);

			// fill req by date at item level
			PurchaseOrder purchaseOrder1 = new PurchaseOrder();
			purchaseOrder1.setCustomDate(CommonUtilities.getRequiredBy());
			ModalItemSummaryDelivery.fillRequiredByDateAtItemLevel(driver, testCaseName, Integer.toString(purchaseOrder1.getCustomDate().getDay()),
				purchaseOrder1.getCustomDate().getMonth(), purchaseOrder1.getCustomDate().getYear());
			ModalPOItemSummaryCostAllocation.clickOnSave(driver, testCaseName);
			boolean flag = PageStandardPO.isDiffDeliveryDateErroMsgDisplayed(driver, testCaseName);
			Assert.assertTrue("Diff delivery date msg not displayed", flag);
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);

			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("The earlier delivery date is blocking while submiting the PO", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Edit PO; Tax name should be autofill drop
	 * down from master for that tax type or any free text value.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_139310(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			String taxType = CommonServices.getTestData(IConstantsData.TAX_TYPE, 0);

			StandardPO standardpo = new StandardPO();
			standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardpo.setNextAction(IConstantsData.NONE);
			standardpo = FlowStandardPo.createStandardPo(driver, testCaseName, standardpo);
			PageStandardPO.fillTaxType(driver, testCaseName, taxType, 1);
			PageStandardPO.clickOnAddNewTaxType(driver);
			String poNo = FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			if (poNo != null)
				standardpo.setPoNumber(poNo);
			FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			ActionBot.scroll(driver, "450");
			String taxName = PageViewPurchaseOrder.getTaxName(driver, testCaseName);
			Assert.assertNotNull("Tax Name is not set automatically by selecting Tax type", taxName);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Buyer when amending Purchase Orders,
	 * should be able to edit Item name & description for non-catalog items and
	 * copied catalog items , same should get back updated on REQ also.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_130493(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		boolean flag;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			Requisition requisition = ObjectCreation.getRequisition(driver);
			Item item = ObjectCreation.getItem(IConstantsData.BOTH);

			requisition.setItems(item);
			requisition = CombineFlowImpl.reqToPO(driver, testCaseName, requisition);
			FlowPoListing.searchPo(driver, testCaseName, requisition.getReqNo(), IConstantsData.SEARCH_BY_ORDER_DESCRIPTION);
			String poNumber = PagePurchaseOrderListing.getFirstPoNo(driver, testCaseName);

			String status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			if (status.equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL))
			{
				// to approve the PO
				ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, poNumber, IConstantsData.PURCHASE_ORDER,
					IConstantsData.APPROVE);
				FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);
				FlowPoListing.searchPo(driver, testCaseName, poNumber, IConstantsData.SEARCH_BY_PO_NO);
			}
			flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.RELEASED);
			Assert.assertTrue("PO is not is released state", flag);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			ActionBot.scroll(driver, "450");
			String itemId = PageStandardPO.getItemId(driver, requisition.getItems().getCatelogItems().get(0).getItemName());
			PageStandardPO.clickOnCopyItem(driver, testCaseName, itemId);
			// submit po
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			ActionBot.defaultSleep();
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			// For first Item
			PageRequisitionView.clickOnRequisitionTab(driver, testCaseName);
			List<String> items = PageBuyersDesk.getListOfRequisitionItems(driver, testCaseName);
			flag = items.size() == 2;
			Assert.assertTrue("Item copied while amending PO is reflected at requisition", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Edit PO; Tax name should be autofill drop
	 * down from master for that tax type or any free text value.[Validation
	 * should be handled for tax name]
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_139311(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			StandardPO standardpo = new StandardPO();
			standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardpo.setNextAction(IConstantsData.NONE);
			standardpo = FlowStandardPo.createStandardPo(driver, testCaseName, standardpo);
			String taxType = PageStandardPO.fillTaxType(driver, testCaseName, CommonServices.getTestData(IConstantsData.TAX_TYPE, 0), 1);
			logger.info("Tax type is :" + taxType);
			PageStandardPO.clickOnAddNewTaxType(driver);
			String poNo = FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			if (poNo != null)
				standardpo.setPoNumber(poNo);
			FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			ActionBot.scroll(driver, "450");
			String taxName = PageViewPurchaseOrder.getTaxName(driver, testCaseName);
			Assert.assertNotNull("TaxName is not autoselected by Tax type", taxName);
			String taxRate = PageViewPurchaseOrder.getTaxRate(driver, testCaseName);
			Assert.assertNotNull("Tax rate is not auto selected by tax type", taxRate);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Edit PO; User should be able to enter
	 * Amount of tax directly w/o entering tax rate & it should be
	 * autocalculated vice versa. [Validation should be handled for Tax amount]
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_139315(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		Item item = new Item();
		StandardPO standardpo = new StandardPO();
		User user = null;
		boolean flag;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			// create and release po
			standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardpo = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardpo);
			// search po
			FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			// click On Action link
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			// click On copy link
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			// add giuded item
			item = ObjectCreation.getItem(IConstantsData.GUIDED_ITEM);
			ActionBot.scroll(driver, "450");
			FlowStandardPo.addItem(driver, testCaseName, item);
			String itemId = PageStandardPO.getItemId(driver, item.getGuidedItems().get(0).getShortDescription());
			// click on Item Summary edit
			PageStandardPO.clickOnItemSummaryEdit(driver, testCaseName, itemId);
			// click on tax tab
			ModalItemSummaryTax.clickOnTaxesTab(driver, testCaseName);
			// select Tax type
			ModalItemSummaryTax.fillTaxType(driver, testCaseName, CommonServices.getTestData(IConstantsData.TAX_TYPE), 1);
			// fill tax name
			ModalItemSummaryTax.fillTaxName(driver, testCaseName, CommonServices.getTestData(IConstantsData.TAX_NAME));
			int amount = CommonUtilities.getNonZeroRandomNumbers(2);
			// fill tax amount
			ModalItemSummaryTax.fillTaxAmount(driver, testCaseName, Integer.toString(amount));
			ModalItemSummaryTax.clickOnAddNewTaxbtn(driver, testCaseName, 2);
			String taxRate = ModalItemSummaryTax.getTaxrate(driver, testCaseName);
			DecimalFormat decimalFormat = new DecimalFormat("00.000");
			float taxrate = Float.parseFloat(taxRate);
			taxrate = Float.parseFloat(decimalFormat.format(taxrate));
			float itemPrice = item.getGuidedItems().get(0).getPrice();
			float quantity = item.getGuidedItems().get(0).getQuantity();
			float expectedTaxRate = (amount * 100) / (itemPrice * quantity);
			expectedTaxRate = Float.parseFloat(decimalFormat.format(expectedTaxRate));
			logger.info("Actual tax rate : " + taxrate + "Expected tax rate :" + expectedTaxRate);
			flag = (taxrate == expectedTaxRate);
			Assert.assertTrue("Tax rate is not auto calculated after entering tax amount", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Contract Number >> User should be able to
	 * enter multilingual characters in Contract Number at header level and item
	 * level in PO.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_145050(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		StandardPO standardpo = new StandardPO();
		String contractNo = CommonServices.getTestData(IConstantsData.MULTILINGUAL_CHARACTER_ITEMNAME);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.GUIDED_ITEM);
			standardpo.setNextAction(IConstantsData.NONE);
			FlowStandardPo.createStandardPo(driver, testCaseName, standardpo);
			PageStandardPO.fillSupplierContractNo(driver, testCaseName, contractNo);
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			boolean ScontractNo = contractNo.equalsIgnoreCase(PageViewPurchaseOrder.getSupplierContractNo(driver, testCaseName));
			Assert.assertFalse("Unable to enter multilingula character ", ScontractNo);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Contract Number >> User should be able to
	 * enter special characters in Contract Number at header level and item
	 * level in PO.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_145049(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		StandardPO standardPO = new StandardPO();
		String contractNo = CommonServices.getTestData(IConstantsData.SPECIAL_CHARACTER_ITEMNAME);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.GUIDED_ITEM);
			standardPO.setNextAction(IConstantsData.NONE);
			standardPO = FlowStandardPo.createStandardPo(driver, testCaseName, standardPO);
			PageStandardPO.fillSupplierContractNo(driver, testCaseName, contractNo);
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			ActionBot.jQueryScroll(driver, ".eformItemInpt.ui-front", 600);
			ModalItemSummaryItem.fillModalItemContractNo(driver, testCaseName, contractNo);
			ModalItemSummaryCostAllocation.clickOnCancel(driver);
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			ActionBot.defaultMediumSleep();
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);

			boolean ScontractNo = contractNo.equalsIgnoreCase(PageViewPurchaseOrder.getSupplierContractNo(driver, testCaseName));
			Assert.assertFalse("Unable to enter special character ", ScontractNo);
			ActionBot.scroll(driver);
			ModalItemPoview.clickOnCatalogItem(driver, 1);
			boolean IcontractNo = contractNo.equalsIgnoreCase(PageViewPurchaseOrder.getItemContratNo(driver, testCaseName));
			Assert.assertFalse("unable to enter Special char at item level", IcontractNo);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Contract Number >> User should be able to
	 * provide contract number while creating PO.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_145035(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		Requisition requisition = null;
		String contractNo = CommonServices.getTestData(IConstantsData.PO_SUPPLIER_CONTACT);
		User user = null;
		boolean flag;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.GUIDED_ITEM);
			requisition.getItems().getGuidedItems().get(0).setContractNoInSuppInfo(contractNo);
			requisition = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			FlowBuyersDesk.convertToPo(driver, testCaseName);
			FlowBuyersDesk.saveAllSuggestedPosAsDraft(driver, testCaseName);

			FlowPoListing.searchPo(driver, testCaseName, requisition.getReqNo(), IConstantsData.SEARCH_BY_ORDER_DESCRIPTION);
			flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.DRAFT_FILTER_LABEL);
			Assert.assertTrue("PO is not in draft sattus", flag);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			boolean ScontractNo = contractNo.equalsIgnoreCase(ModalItemSummaryItem.getModalItemContractNo(driver));
			Assert.assertTrue("Unable to provide contract No ", ScontractNo);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 201015 - Unable to add free
	 * text item in PO.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_134462(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();

		StandardPO standardPO = new StandardPO();
		GuidedItem guidedItem = new GuidedItem();
		new CatelogItem();
		boolean flag = false;
		Item item = new Item();
		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);

			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			ActionBot.defaultSleep();
			String copyPo = PageStandardPO.getPONo(driver, testCaseName);
			ActionBot.scroll(driver, "450");
			item = ObjectCreation.getItem(IConstantsData.GUIDED_ITEM);
			item.getGuidedItems().get(0).setZeroPriceItem(true);
			FlowStandardPo.addItem(driver, testCaseName, item);

			String newCopyPo = FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			if (newCopyPo != null)
				copyPo = newCopyPo;
			FlowPoListing.searchPo(driver, testCaseName, copyPo, IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			ActionBot.defaultSleep();
			List<WebElement> listOfItems = PageViewPurchaseOrder.getListOfItems(driver, testCaseName);
			for (WebElement element : listOfItems)
			{
				String itemName = element.getText().trim();
				if (itemName.equalsIgnoreCase(item.getGuidedItems().get(0).getShortDescription()))
				{
					flag = true;
					break;
				}
			}
			Assert.assertTrue("Items are not added ", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 200910 - Catalog item is
	 * editable in Copy/Amend PO.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_134465(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();

		StandardPO standardPO = new StandardPO();
		String contractNo = CommonServices.getTestData(IConstantsData.CONTRACT_NO);
		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			ActionBot.defaultSleep();
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			String editable = ModalItemSummaryItem.fillModalItemContractNo(driver, testCaseName, contractNo);
			Assert.assertNull("Item editable", editable);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 200907 - Specifications Data
	 * are allowed to add entries for Catalog items of manual PO.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_134466(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		StandardPO standardPO = new StandardPO();
		String contractNo = CommonServices.getTestData(IConstantsData.CONTRACT_NO);
		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			ActionBot.defaultSleep();
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			String editable = ModalItemSummaryItem.fillModalItemContractNo(driver, testCaseName, contractNo);
			Assert.assertNull("Item editable", editable);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Contract Number >> User should be able to
	 * enter alphanumeric characters in Contract Number at header level and item
	 * level in PO.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_145048(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		StandardPO standardpo = new StandardPO();
		boolean ScontractNo;
		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			String contractNo = CommonServices.getTestData((IConstantsData.SPECIAL_CHARACTER_ITEMNAME), 0);
			standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.GUIDED_ITEM);
			standardpo.setNextAction(IConstantsData.NONE);
			standardpo = FlowStandardPo.createStandardPo(driver, testCaseName, standardpo);
			PageStandardPO.fillSupplierContractNo(driver, testCaseName, contractNo);
			String poNo = FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			if (poNo != null)
				standardpo.setPoNumber(poNo);
			FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			ScontractNo = contractNo.equalsIgnoreCase(PageViewPurchaseOrder.getSupplierContact(driver, testCaseName));
			Assert.assertTrue("Unable to enter  alphanumeric character ", ScontractNo);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Amend PO; any time the value of discount
	 * change from header or item level ; should reflect all places.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_139472(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		StandardPO standardPO = new StandardPO();
		User user = null;
		boolean flag;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);

			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			String itemPrice = PageStandardPO.getTotalItemPrice(driver, testCaseName).split("\\.")[0].replaceAll("[^0-9]", "");
			PageStandardPO.clickOnModifyLink(driver);
			ActionBot.defaultSleep();
			int rates = CommonUtilities.getNonZeroRandomNumbers(2);
			String discount = PageStandardPO.fillDiscountField(driver, testCaseName, rates);

			Assert.assertNotNull("Discount field is not editable", discount);
			ModalDiscountPO.clickOnItemLevelDiscount(driver, testCaseName);
			ModalDiscountPO.selectItemLevelDiscountType(driver, testCaseName, IConstantsData.PERCENTAGE);
			ModalDiscountPO.enterItemLevelDiscountValue(driver, testCaseName, CommonUtilities.getNonZeroRandomNumbers(1));
			ModalDiscountPO.clickOnSaveDiscount(driver, testCaseName);
			PageStandardPO.clickOnModifyLink(driver);
			double discountedAmount = ModalDiscountPO.getItemLevelTotalDiscountAmount(driver, testCaseName);
			ModalDiscountPO.clickOnSaveDiscount(driver, testCaseName);
			// standard PO page
			double headerDiscount = ModalDiscountPO.getHeaderLevelTotalDiscountAmount(driver, testCaseName);
			flag = discountedAmount == headerDiscount;
			Assert.assertTrue("Item level discount is not reflected for discount type Percentage", flag);

			// fill discount amount
			PageStandardPO.clickOnModify(driver, testCaseName);
			ModalDiscountPO.clickOnItemLevelDiscount(driver, testCaseName);
			ModalDiscountPO.selectItemLevelDiscountType(driver, testCaseName, IConstantsData.AMOUNT);
			int discountValue = CommonUtilities.getRandomNumbersBetweenRange(2, 10, Integer.parseInt(itemPrice));
			ModalDiscountPO.enterItemLevelDiscountValue(driver, testCaseName, discountValue);
			ModalDiscountPO.clickOnSaveDiscount(driver, testCaseName);
			PageStandardPO.clickOnModify(driver, testCaseName);
			discountedAmount = ModalDiscountPO.getItemLevelTotalDiscountAmount(driver, testCaseName);
			ModalDiscountPO.clickOnSaveDiscount(driver, testCaseName);
			// standard PO page
			headerDiscount = ModalDiscountPO.getHeaderLevelTotalDiscountAmount(driver, testCaseName);
			flag = discountedAmount == headerDiscount;
			Assert.assertTrue("Item level discount is not reflected for discount type Amount", flag);

			// fill discount per item
			PageStandardPO.clickOnModify(driver, testCaseName);
			ModalDiscountPO.clickOnItemLevelDiscount(driver, testCaseName);
			ModalDiscountPO.selectItemLevelDiscountType(driver, testCaseName, IConstantsData.PER_ITEM);
			int perItemDiscount = Integer.parseInt(itemPrice) / standardPO.getItems().getCatelogItems().get(0).getQuantity();
			discountValue = CommonUtilities.getRandomNumbersBetweenRange(2, 10, perItemDiscount);
			ModalDiscountPO.enterItemLevelDiscountValue(driver, testCaseName, perItemDiscount);
			ModalDiscountPO.clickOnSaveDiscount(driver, testCaseName);
			PageStandardPO.clickOnModify(driver, testCaseName);
			discountedAmount = ModalDiscountPO.getItemLevelTotalDiscountAmount(driver, testCaseName);
			ModalDiscountPO.clickOnSaveDiscount(driver, testCaseName);
			headerDiscount = ModalDiscountPO.getHeaderLevelTotalDiscountAmount(driver, testCaseName);
			flag = discountedAmount == headerDiscount;
			Assert.assertTrue("Item level discount is not reflected for discount type PerItem", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Contract Number &gt;&gt; If contract
	 * number is not defined at item level in PO (for free text item); then it
	 * should be copied Contract Number defined at header level in PO creation
	 * page.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_145037(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		StandardPO standardpo = new StandardPO();
		String contractNo = CommonServices.getTestData(IConstantsData.OTHER_SUPPLIER_NAME);
		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.GUIDED_ITEM);
			standardpo.getItems().getGuidedItems().get(0).setContractNo(contractNo);
			standardpo.setNextAction(IConstantsData.NONE);
			standardpo = FlowStandardPo.createStandardPo(driver, testCaseName, standardpo);
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			ActionBot.jQueryScroll(driver, ".eformItemInpt.ui-front", 600);
			ModalItemSummaryItem.fillModalItemContractNo(driver, testCaseName, contractNo);
			PageStandardPO.fillSupplierContractNo(driver, testCaseName, contractNo);
			//boolean contrat = contractNo.equalsIgnoreCase(ModalItemSummaryItem.getModalItemContractNo(driver));
			//Assert.assertTrue("contract no not copied form header level", contrat);
			String contractNumber = ModalItemSummaryItem.getModalItemContractNo(driver);
			if (contractNumber == null)
			{
				ModalPOItemSummaryCostAllocation.clickOnCancel(driver);
			}
			String itemcontractNo = CommonServices.getTestData(IConstantsData.SUPPLIER_CONTACT_FIRST_NAME);
			String fillCNo = ModalItemSummaryItem.fillModalItemContractNo(driver, testCaseName, itemcontractNo);
			ModalPOItemSummaryCostAllocation.clickOnSave(driver, testCaseName);
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			ActionBot.jQueryScroll(driver, ".eformItemInpt.ui-front", 600);
			boolean netCNo = fillCNo.equalsIgnoreCase(ModalItemSummaryItem.getModalItemContractNo(driver));
			Assert.assertTrue("Unable to provide contract number for free text item added ", netCNo);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Edit PO; Taxes section should display the
	 * Taxes Sub-total according to user number format & precision & currrency
	 * according to item currency.
	 * 
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_139318(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		Item item = new Item();
		StandardPO standardpo = new StandardPO();

		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			String taxtType = CommonServices.getTestData(IConstantsData.TAX_TYPE);
			String taxName = CommonServices.getTestData(IConstantsData.TAX_NAME);
			String taxRate = CommonServices.getTestData(IConstantsData.TAX_RATE);
			// click On PoTab
			// create and release po
			standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardpo = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardpo);
			// search po
			FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			// click On Action link
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			// click On copy link
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			String currency = PageStandardPO.getCurrencyType(driver, testCaseName);
			ActionBot.scroll(driver, "450");
			// add giuded item
			item = ObjectCreation.getItem(IConstantsData.GUIDED_ITEM);
			FlowStandardPo.addItem(driver, testCaseName, item);
			String itemId = PageStandardPO.getItemId(driver, testCaseName, item.getGuidedItems().get(0).getShortDescription());
			// click on Item Summary edit
			PageStandardPO.clickOnItemSummaryEdit(driver, testCaseName, itemId);
			// click on tax tab
			ModalItemSummaryTax.clickOnTaxesTab(driver, testCaseName);
			ModalItemSummaryTax.fillTaxType(driver, testCaseName, taxtType, 1);
			ModalItemSummaryTax.fillTaxName(driver, testCaseName, taxName);
			ModalItemSummaryTax.fillTaxRate(driver, testCaseName, taxRate);

			String taxSubTotal = ModalItemSummaryTax.getTaxSubTotal(driver, testCaseName);
			Assert.assertTrue("Currency is not present in sub total", taxSubTotal.split("\\ ")[0].toLowerCase().contains(currency.toLowerCase()));
			float amount = Float.parseFloat(taxSubTotal.split("\\ ")[1].replaceAll("[^0-9.]", ""));
			logger.info("Amount is " + amount);
			Assert.assertNotNull("Amount is not present in number format ", amount);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>User should be able to input configured
	 * Parametric field values when creating/editing items on PO.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_131093(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		new Item();
		new GuidedItem();
		String SpecificationName = CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING);
		String SpecificationsDataKey = CommonServices.getTestData(IConstantsData.SPECIFICATION_DATA_KEY);
		String SpecificationsDataValue = CommonServices.getTestData(IConstantsData.SPECIFICATION_DATA_VALUE);
		String url = CommonServices.getTestData(IConstantsData.ITEM_IMAGE_URL);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			StandardPO standardpo = new StandardPO();
			standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.GUIDED_ITEM);
			standardpo.setNextAction(IConstantsData.NONE);
			FlowStandardPo.createStandardPo(driver, testCaseName, standardpo);
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);

			ActionBot.jQueryScroll(driver, ".eformItemInpt.ui-front", 900);
			ActionBot.defaultSleep();
			ModalPOFreeTextItemSummaryItem.clickOnIsGreenRadioButton(driver, testCaseName);
			ModalPOFreeTextItemSummaryItem.clickOnIsPreferredRadioButton(driver, testCaseName);
			ActionBot.defaultSleep();
			String SpcName = ModalPOFreeTextItemSummaryItem.fillSpecificationsName(driver, testCaseName, SpecificationName);
			ModalPOFreeTextItemSummaryItem.fillSpecificationsDataKey(driver, testCaseName, SpecificationsDataKey);
			ModalPOFreeTextItemSummaryItem.fillSpecificationsDataValue(driver, testCaseName, SpecificationsDataValue);
			ModalPOFreeTextItemSummaryItem.fillModalItemImageUrl(driver, testCaseName, url);
			ModalPOItemSummaryCostAllocation.clickOnCostBookingTab(driver, testCaseName);
			String glAccount = CommonServices.getTestData(IConstantsData.GL_ACCOUNT);
			ModalPOItemSummaryCostAllocation.fillGLAccount(driver, glAccount);
			ModalPOFreeTextItemSummaryItem.clickOnSave(driver, testCaseName);
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			ActionBot.jQueryScroll(driver, ".eformItemInpt.ui-front", 900);
			boolean getSpcName = SpcName.equalsIgnoreCase(ModalPOFreeTextItemSummaryItem.getSpecificationsName(driver, testCaseName));
			Assert.assertFalse("Parametric data not submitted properly", getSpcName);
			ModalPOFreeTextItemSummaryItem.clickOnCancelBtnItemSummary(driver, testCaseName);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>User should be able to input configured
	 * Parametric field values when creating/editing items on PO.-Check
	 * Validation for these fields.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_131098(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		new Item();
		String SpecificationName = CommonServices.getTestData(IConstantsData.MAX_CHARACTER_ITEMNAME);
		String SpecificationsDataValue = CommonServices.getTestData(IConstantsData.SPECIFICATION_DATA_VALUE);
		String url = CommonServices.getTestData(IConstantsData.ITEM_INVALID_IMAGE_URL);
		boolean flag = false;
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			StandardPO standardpo = new StandardPO();
			standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.GUIDED_ITEM);
			standardpo.setNextAction(IConstantsData.NONE);
			FlowStandardPo.createStandardPo(driver, testCaseName, standardpo);
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			ActionBot.jQueryScroll(driver, ".eformItemInpt.ui-front", 900);
			ModalPOFreeTextItemSummaryItem.clickOnIsGreenRadioButton(driver, testCaseName);
			ModalPOFreeTextItemSummaryItem.clickOnIsPreferredRadioButton(driver, testCaseName);
			ModalPOFreeTextItemSummaryItem.fillSpecificationsName(driver, testCaseName, SpecificationName);
			ModalPOFreeTextItemSummaryItem.fillSpecificationsDataValue(driver, testCaseName, SpecificationsDataValue);
			ModalPOFreeTextItemSummaryItem.clickOnSave(driver, testCaseName);
			flag = ModalPOFreeTextItemSummaryItem.isNullSpecificationKeyIcondisplayed(driver, testCaseName);
			assertTrue("Null key validation absent", flag);
			ModalPOFreeTextItemSummaryItem.fillModalItemImageUrl(driver, testCaseName, url);
			ModalPOFreeTextItemSummaryItem.clickOnSave(driver, testCaseName);
			ActionBot.defaultSleep();
			flag = ModalPOFreeTextItemSummaryItem.isValidUrlMsgDisplayed(driver, testCaseName);
			assertTrue("Invalid url msg displayed", flag);
			ModalPOFreeTextItemSummaryItem.clickOnCancelBtnItemSummary(driver, testCaseName);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>User should be able to input configured
	 * Parametric field values when creating/editing items on PO.-Check
	 * Validation for these fields.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_134379(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		StandardPO standardPO = new StandardPO();
		User user = null;
		boolean flag;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO.setSupplierName(CommonServices.getTestData(IConstantsData.OTHER_SUPPLIER_NAME));
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			String copyPo = PageStandardPO.getPONo(driver, testCaseName);
			PageStandardPO.enterSupplierName(driver, CommonServices.getTestData(IConstantsData.SUPPLIER_NAME));
			String paymentTerms = CommonServices.getTestData(IConstantsData.PAYMENT_TERMS);
			PageStandardPO.enterPaymentTerms(driver, paymentTerms);
			String Scontact = PageStandardPO.getSupplierContact(driver, testCaseName);
			String newCopyPo = FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			if (newCopyPo != null)
				copyPo = newCopyPo;
			FlowPoListing.searchPo(driver, testCaseName, copyPo, IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			String contact = PageViewPurchaseOrder.getSupplierContact(driver, testCaseName);
			flag = Scontact.equalsIgnoreCase(contact);
			Assert.assertTrue("Unable to change supplier details", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>User should be able to input configured
	 * Parametric field values when creating/editing items on PO.-Check
	 * Multilingual characters for these fields.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_131104(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		new Item();
		new GuidedItem();
		String SpecificationName = CommonServices.getTestData(IConstantsData.MULTILINGUAL_CHARACTER_ITEMNAME);
		String SpecificationsDataValue = CommonServices.getTestData(IConstantsData.MULTILINGUAL_CHARACTER_ITEMNAME);
		String SpecificationsDataKey = CommonServices.getTestData(IConstantsData.MULTILINGUAL_CHARACTER_ITEMNAME);
		String url = CommonServices.getTestData(IConstantsData.ITEM_IMAGE_URL);
		User user = null;
		boolean flag;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			StandardPO standardpo = new StandardPO();
			standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.GUIDED_ITEM);
			standardpo.setNextAction(IConstantsData.NONE);
			FlowStandardPo.createStandardPo(driver, testCaseName, standardpo);
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			ActionBot.jQueryScroll(driver, ".eformItemInpt.ui-front", 900);
			ModalPOFreeTextItemSummaryItem.clickOnIsGreenRadioButton(driver, testCaseName);
			ModalPOFreeTextItemSummaryItem.clickOnIsPreferredRadioButton(driver, testCaseName);
			String SpcName = ModalPOFreeTextItemSummaryItem.fillSpecificationsName(driver, testCaseName, SpecificationName);
			ModalPOFreeTextItemSummaryItem.fillSpecificationsDataKey(driver, testCaseName, SpecificationsDataKey);
			ModalPOFreeTextItemSummaryItem.fillSpecificationsDataValue(driver, testCaseName, SpecificationsDataValue);
			ModalPOFreeTextItemSummaryItem.fillModalItemImageUrl(driver, testCaseName, url);
			ModalPOFreeTextItemSummaryItem.clickOnSave(driver, testCaseName);
			String poNo = FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			if (poNo != null)
				standardpo.setPoNumber(poNo);
			flag = FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("PO with Multilingual characters in Parametric field is not created  ", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 200649 - Error shown on
	 * screen when user edit custom field details on ammend PO screen and submit
	 * that PO.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_133329(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		PEform pEform = new PEform();
		StandardPO standardPo = new StandardPO();
		String searchText = CommonServices.getTestData(IConstantsData.DELIVER_TO_FIELD);
		String text = CommonServices.getTestData(IConstantsData.BUYER_NAME);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);

			// click On PoTab

			pEform = ObjectCreation.getDefaultPEformObject();
			pEform.setProcessName(IConstantsData.PO_FORMS);
			// create PEform
			pEform = FlowPEform.createPEForm(driver, testCaseName, pEform);

			// check if PEform created
			FlowPEform.checkIfPEformSearched(driver, testCaseName, pEform.getPeformName());
			standardPo = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPo.setNextAction(IConstantsData.NONE);
			standardPo = FlowStandardPo.createStandardPo(driver, testCaseName, standardPo);
			PageStandardPO.fillPoEformTextField(driver, testCaseName, searchText);
			String poNo = FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			if (poNo != null)
				standardPo.setPoNumber(poNo);
			ActionBot.defaultSleep();
			MainPageHeaderLevelTab.clickOnApprovalAllRequestsTab(driver);
			// to approve the PO
			ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, standardPo.getPoNumber(), IConstantsData.PURCHASE_ORDER,
				IConstantsData.APPROVE);
			FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);
			FlowPoListing.searchPo(driver, testCaseName, standardPo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			PageStandardPO.clearAndfillPoEformTextField(driver, testCaseName, text);
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			FlowPoListing.searchPo(driver, testCaseName, standardPo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			boolean eformDetails = text.equalsIgnoreCase(PageViewPurchaseOrder.getFilledTextOfPeform(driver, testCaseName));
			Assert.assertTrue(" Error shown on screen when user edit custom field details on ammend PO", eformDetails);
			// to delete the PEform
			FlowPEform.deactivateNdeleteCEform(driver, testCaseName, pEform.getPeformName());
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 200681 - Incorrect costing
	 * values shown in a copied PO in a scenario. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_133360(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		PurchaseOrder purchaseorder = new PurchaseOrder();
		CostBookingItemSummary costBookingItemSummary = new CostBookingItemSummary();
		new ArrayList<CostCenterSplitInfo>();
		String changedCurrency = CommonServices.getTestData(IConstantsData.CHANGED_CURRENCY);
		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			Requisition requisition = ObjectCreation.getRequisition(driver);
			ObjectCreation.getCostCenterProjectAndBudget();
			Item item = ObjectCreation.getItem(IConstantsData.GUIDED_ITEM);
			CommonUtilities.getNonZeroRandomNumbers(2);
			requisition.setItems(item);
			ObjectCreation.getCostCenterProjectAndBudget();

			requisition.setItems(item);
			requisition.getCostBookingRequisitionSummary().setBookCostToSingleCostCenter(false);
			requisition.getCostBookingRequisitionSummary().setSplitCostAtLineItemLevel(true);
			costBookingItemSummary = new CostBookingItemSummary();

			// to set CostBookingItemSummary in guided items - with quantity
			costBookingItemSummary = ObjectCreation.getDefaultObjectOfCCSplitAtItemLevel(false, requisition.getItems().getGuidedItems().get(0).getQuantity());

			AccountingItemSummary accountingItemSummary = ObjectCreation.getDefaultObjectOfAccounting();
			costBookingItemSummary.setAccountingItemSummary(accountingItemSummary);
			costBookingItemSummary.setNextAction(IConstantsData.SAVE);

			requisition.setCostBookingItemSummary(costBookingItemSummary);
			CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			// click on first ReqNo link
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			FlowBuyersDesk.convertToPo(driver, testCaseName);
			List<PurchaseOrder> purchaseOrders = FlowBuyersDesk.submitAllSuggestedPosForProcessing(driver, testCaseName);

			FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			String status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			if (status.equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL))
			{
				// to approve the PO

				ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, purchaseOrders.get(0).getPoNo(),
					IConstantsData.PURCHASE_ORDER, IConstantsData.APPROVE);
				FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);
				FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			}
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			String copyPo = PageStandardPO.getPONo(driver, testCaseName);
			PageStandardPO.changeCurrencyOfSupplier(driver, testCaseName, changedCurrency);
			ModalChangeCurrencyPO.clickOnConvertAmountsToCurrencyType(driver, testCaseName);
			String newCopyPo = FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			if (newCopyPo != null)
				copyPo = newCopyPo;
			FlowPoListing.searchPo(driver, testCaseName, copyPo, IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			boolean currency = PageViewPurchaseOrder.getSupplierCurrency(driver, testCaseName).toLowerCase().contains(changedCurrency.toLowerCase());
			Assert.assertTrue("Currency not updated ", currency);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 201246 - Unable to add new
	 * item in a copied PO with costing at item level.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_133720(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<CostCenterSplitInfo> costCenterSplitInfo = new ArrayList<CostCenterSplitInfo>();
		boolean flag = false;
		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			Requisition requisition = ObjectCreation.getRequisition(driver);

			Item item = ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);
			requisition.setItems(item);
			requisition.getCostBookingRequisitionSummary().setSplitCostAtLineItemLevel(true);
			requisition.getCostBookingItemSummary().setSplitCostCenterAtItemLevel(true);
			CostBookingRequisitionSummary costBookingRequisitionSummary = ObjectCreation.getDefaultObjectOfCostBooking();
			CostCenterSplitInfo costCenterSplitInfo2 = new CostCenterSplitInfo();
			costCenterSplitInfo2.setCostCenter(costBookingRequisitionSummary.getCostCenter());
			costCenterSplitInfo2.setBudget(costBookingRequisitionSummary.getBudget());
			costCenterSplitInfo2.setProject(costBookingRequisitionSummary.getProject());
			costCenterSplitInfo.add(0, costCenterSplitInfo2);
			requisition.getCostBookingItemSummary().setCostCenterSplitInfo(costCenterSplitInfo);
			CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			// click on first ReqNo link
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			FlowBuyersDesk.convertToPo(driver, testCaseName);
			List<PurchaseOrder> purchaseOrders = FlowBuyersDesk.submitAllSuggestedPosForProcessing(driver, testCaseName);

			FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			String status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			if (status.equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL))
			{
				// to approve the PO

				ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, purchaseOrders.get(0).getPoNo(),
					IConstantsData.PURCHASE_ORDER, IConstantsData.APPROVE);
				FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);
				FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);

			}
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			String copyPo = PageStandardPO.getPONo(driver, testCaseName);
			ActionBot.scroll(driver, "450");
			Item items = new Item();
			items = ObjectCreation.getItem(IConstantsData.GUIDED_ITEM);
			items.getGuidedItems().get(0).setNextAction(IConstantsData.NONE);
			PageStandardPO.clickOnFreeTextItem(driver);
			FlowStandardPo.fillGuidedItemForm(driver, testCaseName, items.getGuidedItems().get(0));
			ModalPOItemSummaryCostAllocation.clickOnCostBookingTab(driver, testCaseName);
			AccountingItemSummary accountingItemSummary = new AccountingItemSummary();
			accountingItemSummary = ObjectCreation.getDefaultObjectOfAccounting();
			accountingItemSummary.setNextAction(IConstantsData.NONE);
			FlowStandardPo.fillAccountingDetails(driver, testCaseName, accountingItemSummary);
			//FlowStandardPo.addItem(driver, testCaseName, items);
			ModalPOItemSummaryCostAllocation.fillCostCenter(driver, testCaseName, costBookingRequisitionSummary.getCostCenter());
			ModalPOItemSummaryCostAllocation.fillProject(driver, testCaseName, costBookingRequisitionSummary.getProject());
			ModalPOItemSummaryCostAllocation.fillBudget(driver, testCaseName, costBookingRequisitionSummary.getBudget());
			ModalPOItemSummaryCostAllocation.clickOnSave(driver, testCaseName);
			String newCopyPo = FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			if (newCopyPo != null)
				copyPo = newCopyPo;
			FlowPoListing.searchPo(driver, testCaseName, copyPo, IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			List<WebElement> listOfItems = PageViewPurchaseOrder.getListOfItems(driver, testCaseName);
			for (WebElement element : listOfItems)
			{
				String itemName = element.getText().trim();
				if (itemName.equalsIgnoreCase(items.getGuidedItems().get(0).getShortDescription()))
				{
					flag = true;
					break;
				}
			}
			Assert.assertTrue("Items not added to po", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Amend PO; Tax name should be autofill drop
	 * down from master for that tax type or any free text value.[Validation
	 * should be handled for tax name]
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_139431(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();

		StandardPO standardpo = new StandardPO();
		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			String taxType = CommonServices.getTestData(IConstantsData.TAX_TYPE);
			String taxName = CommonServices.getTestData(IConstantsData.TAX_NAME);
			String taxRate = CommonServices.getTestData(IConstantsData.TAX_RATE);
			// click On PoTab
			standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardpo = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardpo);
			FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			PageStandardPO.fillTaxType(driver, testCaseName, taxType, 1);
			PageStandardPO.enterTaxName(driver, testCaseName, taxName, 1);
			PageStandardPO.enterTaxRate(driver, testCaseName, Integer.parseInt(taxRate), 2);
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			ActionBot.defaultSleep();
			ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, standardpo.getPoNumber(), IConstantsData.PURCHASE_ORDER,
				IConstantsData.APPROVE);
			FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);
			FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			((JavascriptExecutor) driver).executeScript("window.scrollBy(0,300);");
			String viewTaxName = PageViewPurchaseOrder.getTaxName(driver, testCaseName);
			Assert.assertEquals("AutoComplete taxName field not working", taxName, viewTaxName);
			logger.info("Tax rate :" + PageViewPurchaseOrder.getTaxRate(driver, testCaseName));
			boolean rate = PageViewPurchaseOrder.getTaxRate(driver, testCaseName).contains(taxRate);
			Assert.assertTrue("AutoComplete Tax rate field not working ", rate);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Amend PO; User should be able to enter
	 * Amount of tax directly w/o entering tax rate & it should be
	 * autocalculated vice versa.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_139434(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		StandardPO standardpo = new StandardPO();
		User user = null;
		boolean flag;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardpo = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardpo);
			FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			String itemId = PageStandardPO.getItemId(driver, standardpo.getItems().getCatelogItems().get(0).getItemName());
			String catalogItemPrice = PageStandardPO.getMarketPriceOfAddedItem(driver, testCaseName, itemId).split("\\.")[0].replaceAll("[^0-9]", "");
			// click On Item Summary Edit in Amend Po page
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			// click on tax tab
			ModalItemSummaryTax.clickOnTaxesTab(driver, testCaseName);
			// select Tax type
			ModalItemSummaryTax.fillTaxType(driver, testCaseName, CommonServices.getTestData(IConstantsData.TAX_TYPE), 1);
			// fill tax name
			ModalItemSummaryTax.fillTaxName(driver, testCaseName, CommonServices.getTestData(IConstantsData.TAX_NAME));
			int amount = CommonUtilities.getNonZeroRandomNumbers(2);
			// fill tax amount
			ModalItemSummaryTax.fillTaxAmount(driver, testCaseName, Integer.toString(amount));
			ModalItemSummaryTax.clickOnAddNewTaxbtn(driver, testCaseName, 2);
			String taxRate = ModalItemSummaryTax.getTaxrate(driver, testCaseName);
			DecimalFormat decimalFormat = new DecimalFormat("00.000");
			float taxrate = Float.parseFloat(taxRate);
			taxrate = Float.parseFloat(decimalFormat.format(taxrate));
			float itemPrice = Float.parseFloat(catalogItemPrice);
			float quantity = standardpo.getItems().getCatelogItems().get(0).getQuantity();
			float expectedTaxRate = (amount * 100) / (itemPrice * quantity);
			expectedTaxRate = Float.parseFloat(decimalFormat.format(expectedTaxRate));
			logger.info("Actual tax rate : " + taxrate + "Expected tax rate :" + expectedTaxRate);
			flag = (taxrate == expectedTaxRate);
			Assert.assertTrue("Tax rate is not auto calculated after entering tax amount", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Amend PO; Taxes section should display the
	 * Taxes Sub-total according to user number format & precision & currrency
	 * according to item currency.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_139438(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		StandardPO standardpo = new StandardPO();
		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			// click On PoTab
			standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardpo = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardpo);
			FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			// click On Item Summary Edit in Amend Po page
			ActionBot.scroll(driver, "600");
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			ModalItemSummaryTax.clickOnTaxesTab(driver, testCaseName);
			String taxType = CommonServices.getTestData(IConstantsData.TAX_TYPE);
			ModalItemSummaryTax.fillTaxType(driver, testCaseName, taxType, 1);
			// fill tax name
			ModalItemSummaryTax.fillTaxName(driver, testCaseName, CommonServices.getTestData(IConstantsData.TAX_NAME));

			ModalItemSummaryTax.clickOnAddNewTaxbtn(driver, testCaseName, 2);
			ModalItemSummaryTax.fillTaxType(driver, testCaseName, taxType, 2);
			String difftaxName = CommonServices.getTestData(IConstantsData.TAX_NAME_SPECIAL_CHARACTERS);
			// fill tax name
			ModalItemSummaryTax.fillTaxNameByIndex(driver, testCaseName, difftaxName, 2);
			ModalItemSummaryTax.fillTaxAmount(driver, testCaseName, Integer.toString(CommonUtilities.getNonZeroRandomNumbers(3)));
			ModalItemSummaryTax.clickOnAddNewTaxbtn(driver, testCaseName, 3);
			//ModalItemSummaryTax.clickOnTaxesTab(driver, testCaseName);
			String taxSubtotal = ModalItemSummaryTax.getTaxSubTotal(driver, testCaseName);
			Assert.assertNotNull("tax Subtotal Not displayed", taxSubtotal);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>verify that special characters should be
	 * handled in PO number format at all levels. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_108518(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		StandardPO standardPO = new StandardPO();
		String poNumberFormatLevel = CommonServices.getTestData(IConstantsData.LEVEL_TO_USE_PO_NUMBER_FORMAT_COMPANY);
		CommonServices.getTestData(IConstantsData.LEVEL_TO_USE_PO_NUMBER_FORMAT_BU);
		CommonServices.getTestData(IConstantsData.LEVEL_TO_USE_PO_NUMBER_FORMAT_TENANT);
		CommonServices.getTestData(IConstantsData.LEVEL_TO_USE_PO_NUMBER_FORMAT_LOCATION);
		String poNo = CommonServices.getTestData(IConstantsData.SPECIAL_CHARACTER_ITEMNAME);
		boolean flag = false;
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			// click On Purchase order link
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);
			// click On change the level in po format
			PagePurchaseOrderSetting.selectLevelToUsePONumberFormat(driver, testCaseName, poNumberFormatLevel);
			PagePurchaseOrderSetting.clickOnSaveButton(driver, testCaseName);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO.setNextAction(IConstantsData.NONE);
			standardPO = FlowStandardPo.createStandardPo(driver, testCaseName, standardPO);
			// ((JavascriptExecutor)
			// driver).executeScript("window.scrollTop(0);");
			standardPO.setPoNumber(PageStandardPO.clearAndfillPoNo(driver, poNo));
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("Special characters not handled in PoNo Format", flag);
			// for BU level
			/*
			 * MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver,
			 * testCaseName); //click On Purchase order link
			 * PageCustomizeSettings.clickOnPurchaseOrderLink(driver,
			 * testCaseName); //click On change the level in po format
			 * ActionBot.scroll(driver);
			 * PagePurchaseOrderSetting.selectLevelToUsePONumberFormat(driver,
			 * testCaseName, BupoNumberFormatLevel);
			 * PagePurchaseOrderSetting.clickOnSaveButton(driver, testCaseName);
			 * MainPageHeaderLevelTab.clickOnPOTab(driver); standardPO =
			 * ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM)
			 * ; standardPO.setNextAction(IConstantsData.NONE); standardPO =
			 * FlowStandardPo.createStandardPo(driver, testCaseName,
			 * standardPO);
			 * standardPO.setPoNumber(PageStandardPO.clearAndfillPoNo(driver,
			 * poNo)); FlowStandardPo.submitPoForProcessing(driver,
			 * testCaseName); flag = FlowPoListing.searchPo(driver,
			 * testCaseName, standardPO.getPoNumber(),
			 * IConstantsData.SEARCH_BY_PO_NO); Assert.assertFalse(
			 * "Special characters not handled in PoNo Format", flag); //for
			 * Location level
			 * MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver,
			 * testCaseName); //click On Purchase order link
			 * PageCustomizeSettings.clickOnPurchaseOrderLink(driver,
			 * testCaseName); //click On change the level in po format
			 * PagePurchaseOrderSetting.selectLevelToUsePONumberFormat(driver,
			 * testCaseName, locationpoNumberFormatLevel);
			 * PagePurchaseOrderSetting.clickOnSaveButton(driver, testCaseName);
			 * MainPageHeaderLevelTab.clickOnPOTab(driver); standardPO =
			 * ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM)
			 * ; standardPO.setNextAction(IConstantsData.NONE); standardPO =
			 * FlowStandardPo.createStandardPo(driver, testCaseName,
			 * standardPO);
			 * standardPO.setPoNumber(PageStandardPO.clearAndfillPoNo(driver,
			 * poNo)); FlowStandardPo.submitPoForProcessing(driver,
			 * testCaseName); flag = FlowPoListing.searchPo(driver,
			 * testCaseName, standardPO.getPoNumber(),
			 * IConstantsData.SEARCH_BY_PO_NO); Assert.assertFalse(
			 * "Special characters not handled in PoNo Format", flag); //for
			 * Tenant level
			 * MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver,
			 * testCaseName); //click On Purchase order link
			 * PageCustomizeSettings.clickOnPurchaseOrderLink(driver,
			 * testCaseName); //click On change the level in po format
			 * PagePurchaseOrderSetting.selectLevelToUsePONumberFormat(driver,
			 * testCaseName, tenantpoNumberFormatLevel);
			 * PagePurchaseOrderSetting.clickOnSaveButton(driver, testCaseName);
			 * MainPageHeaderLevelTab.clickOnPOTab(driver); standardPO =
			 * ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM)
			 * ; standardPO.setNextAction(IConstantsData.NONE); standardPO =
			 * FlowStandardPo.createStandardPo(driver, testCaseName,
			 * standardPO);
			 * standardPO.setPoNumber(PageStandardPO.clearAndfillPoNo(driver,
			 * poNo)); FlowStandardPo.submitPoForProcessing(driver,
			 * testCaseName);
			 * standardPO.setNextAction(IConstantsData.SUBMIT_PO_FOR_PROCESSING)
			 * ; flag = FlowPoListing.searchPo(driver, testCaseName,
			 * standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			 * Assert.assertFalse(
			 * "Special characters not handled in PoNo Format", flag);
			 */

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>verify that Alphanumeric characters should
	 * be handled in PO number format at all levels. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_108519(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		StandardPO standardPO = new StandardPO();
		String poNumberFormatLevel = CommonServices.getTestData(IConstantsData.LEVEL_TO_USE_PO_NUMBER_FORMAT_COMPANY);
		String BupoNumberFormatLevel = CommonServices.getTestData(IConstantsData.LEVEL_TO_USE_PO_NUMBER_FORMAT_BU);
		String tenantpoNumberFormatLevel = CommonServices.getTestData(IConstantsData.LEVEL_TO_USE_PO_NUMBER_FORMAT_TENANT);
		String locationpoNumberFormatLevel = CommonServices.getTestData(IConstantsData.LEVEL_TO_USE_PO_NUMBER_FORMAT_LOCATION);
		String poNo = CommonServices.getTestData(IConstantsData.OTHER_SUPPLIER_NAME);
		boolean flag = false;
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			// click On Purchase order link
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);
			// click On change the level in po format
			PagePurchaseOrderSetting.selectLevelToUsePONumberFormat(driver, testCaseName, poNumberFormatLevel);
			PagePurchaseOrderSetting.clickOnSaveButton(driver, testCaseName);
			// click on online store tab
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO.setNextAction(IConstantsData.NONE);
			standardPO = FlowStandardPo.createStandardPo(driver, testCaseName, standardPO);
			standardPO.setPoNumber(PageStandardPO.clearAndfillPoNo(driver, poNo));
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("Alphanumeric characters not handled in PoNo Format for company", flag);
			// for BU level
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			// click On Purchase order link
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);
			// click On change the level in po format
			PagePurchaseOrderSetting.selectLevelToUsePONumberFormat(driver, testCaseName, BupoNumberFormatLevel);
			PagePurchaseOrderSetting.clickOnSaveButton(driver, testCaseName);
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO.setNextAction(IConstantsData.NONE);
			standardPO = FlowStandardPo.createStandardPo(driver, testCaseName, standardPO);
			standardPO.setPoNumber(PageStandardPO.clearAndfillPoNo(driver, poNo));
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);

			Assert.assertTrue("Alphanumeric characters not handled in PoNo Format for BU", flag);
			// for Location level
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			// click On Purchase order link
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);
			// click On change the level in po format
			PagePurchaseOrderSetting.selectLevelToUsePONumberFormat(driver, testCaseName, locationpoNumberFormatLevel);
			PagePurchaseOrderSetting.clickOnSaveButton(driver, testCaseName);
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO.setNextAction(IConstantsData.NONE);
			standardPO = FlowStandardPo.createStandardPo(driver, testCaseName, standardPO);
			standardPO.setPoNumber(PageStandardPO.clearAndfillPoNo(driver, poNo));
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("Alphanumeric characters not handled in PoNo Format for Location", flag);
			// for Tenant level
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			// click On Purchase order link
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);
			// click On change the level in po format
			PagePurchaseOrderSetting.selectLevelToUsePONumberFormat(driver, testCaseName, tenantpoNumberFormatLevel);
			PagePurchaseOrderSetting.clickOnSaveButton(driver, testCaseName);
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO.setNextAction(IConstantsData.NONE);
			standardPO = FlowStandardPo.createStandardPo(driver, testCaseName, standardPO);
			standardPO.setPoNumber(PageStandardPO.clearAndfillPoNo(driver, poNo));
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("Alphanumeric characters not handled in PoNo Format for Tenant", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>verify that Multilingual characters should
	 * be handled in PO number format at all levels. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_108521(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		StandardPO standardPO = new StandardPO();
		String poNumberFormatLevel = CommonServices.getTestData(IConstantsData.LEVEL_TO_USE_PO_NUMBER_FORMAT_COMPANY);
		String BupoNumberFormatLevel = CommonServices.getTestData(IConstantsData.LEVEL_TO_USE_PO_NUMBER_FORMAT_BU);
		String tenantpoNumberFormatLevel = CommonServices.getTestData(IConstantsData.LEVEL_TO_USE_PO_NUMBER_FORMAT_TENANT);
		CommonServices.getTestData(IConstantsData.LEVEL_TO_USE_PO_NUMBER_FORMAT_LOCATION);
		String poNo = CommonServices.getTestData(IConstantsData.MULTILINGUAL_CHARACTER_ITEMNAME);
		boolean flag = false;
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			// click On Purchase order link
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);
			// click On change the level in po format
			PagePurchaseOrderSetting.selectLevelToUsePONumberFormat(driver, testCaseName, poNumberFormatLevel);
			ActionBot.scroll(driver);
			PagePurchaseOrderSetting.clickOnSaveButton(driver, testCaseName);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			standardPO.setNextAction(IConstantsData.NONE);
			standardPO = FlowStandardPo.createStandardPo(driver, testCaseName, standardPO);
			standardPO.setPoNumber(PageStandardPO.clearAndfillPoNo(driver, poNo));
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertFalse("Multilingual characters not handled in PoNo Format for company", flag);
			// for BU level
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			// click On Purchase order link
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);
			// click On change the level in po format
			ActionBot.scroll(driver);
			PagePurchaseOrderSetting.selectLevelToUsePONumberFormat(driver, testCaseName, BupoNumberFormatLevel);
			PagePurchaseOrderSetting.clickOnSaveButton(driver, testCaseName);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO.setNextAction(IConstantsData.NONE);
			standardPO = FlowStandardPo.createStandardPo(driver, testCaseName, standardPO);
			standardPO.setPoNumber(PageStandardPO.clearAndfillPoNo(driver, poNo));
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertFalse("Multilingual characters not handled in PoNo Format for BU", flag);
			/*
			 * //for Location level
			 * MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver,
			 * testCaseName); //click On Purchase order link
			 * PageCustomizeSettings.clickOnPurchaseOrderLink(driver,
			 * testCaseName); //click On change the level in po format
			 * PagePurchaseOrderSetting.selectLevelToUsePONumberFormat(driver,
			 * testCaseName, locationpoNumberFormatLevel);
			 * PagePurchaseOrderSetting.clickOnSaveButton(driver, testCaseName);
			 * MainPageHeaderLevelTab.clickOnPOTab(driver); standardPO =
			 * ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM)
			 * ; standardPO.setNextAction(IConstantsData.NONE); standardPO =
			 * FlowStandardPo.createStandardPo(driver, testCaseName,
			 * standardPO);
			 * standardPO.setPoNumber(PageStandardPO.clearAndfillPoNo(driver,
			 * poNo)); FlowStandardPo.submitPoForProcessing(driver,
			 * testCaseName); flag = FlowPoListing.searchPo(driver,
			 * testCaseName, standardPO.getPoNumber(),
			 * IConstantsData.SEARCH_BY_PO_NO); Assert.assertFalse(
			 * "Multilingual characters not handled in PoNo Format for Location"
			 * , flag);
			 */
			// for Tenant level
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			// click On Purchase order link
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);
			// click On change the level in po format
			PagePurchaseOrderSetting.selectLevelToUsePONumberFormat(driver, testCaseName, tenantpoNumberFormatLevel);
			PagePurchaseOrderSetting.clickOnSaveButton(driver, testCaseName);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO.setNextAction(IConstantsData.NONE);
			standardPO = FlowStandardPo.createStandardPo(driver, testCaseName, standardPO);
			standardPO.setPoNumber(PageStandardPO.clearAndfillPoNo(driver, poNo));
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertFalse("Multilingual characters not handled in PoNo Format for Tenant", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>When user copy PO then Purchase type field
	 * should be editable in copy PO screen.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_135029(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		StandardPO standardPO = new StandardPO();
		String purchaseType = CommonServices.getTestData(IConstantsData.PURCHASE_TYPE);
		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOListingActions.clickOnCopyLink(driver, testCaseName);
			String value = PageStandardPO.enterPurchaseType(driver, purchaseType);
			Assert.assertNotNull("purchase field not Editable", value);
			//			MainPageHeaderLevelTab.clickOnPOTab(driver);
			//			FlowPoListing.filterAllDraftPO(driver, testCaseName);
			//			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			//			String value1 = PageStandardPO.enterPurchaseType(driver, purchaseType);
			//			Assert.assertNotNull("purchase field not Editable", value1);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Edit PO; Special Characters should be
	 * handled in Modal of Change multiple, taxes, Discount <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_139336(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();

		StandardPO standardPO = new StandardPO();
		boolean flag;
		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase, mappedTestCases);
			user = LoginLogoutServices.login(driver, testCase);

			{
				// testcase to be mapped
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_139456"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_139396"));

			}

			String taxType = CommonServices.getTestData(IConstantsData.TAX_TYPE);
			String taxName = CommonServices.getTestData(IConstantsData.TAX_NAME_SPECIAL_CHARACTERS);
			//String taxName = "$%#^&^%#^&^&*";
			// click On PoTab
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOListingActions.clickOnCopyLink(driver, testCaseName);
			ActionBot.scroll(driver, "450");
			Item item = new Item();
			item = ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);
			FlowStandardPo.addItem(driver, testCaseName, item);
			PageStandardPO.clickOnAllItemLineCheckBox(driver, testCaseName);
			PageStandardPO.clickOnUpdateAllLinesLink(driver, testCaseName);
			ModalUpdateAllLinesPO.fillTaxType(driver, testCaseName, taxType, 1);
			//ModalUpdateAllLinesPO.selectTaxType(driver, testCaseName, taxType, 2);
			ModalUpdateAllLinesPO.fillTaxName(driver, testCaseName, taxName, 2);
			ModalUpdateAllLinesPO.clickOnApplyTax(driver, testCaseName);
			//String itemId = PageStandardPO.getItemId(driver, standardPO.getItems().getCatelogItems().get(0).getItemName());
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			ModalItemSummaryTax.clickOnTaxesTab(driver, testCaseName);
			String taxname = ModalItemSummaryTax.getTaxeName(driver, testCaseName);
			flag = taxName.equalsIgnoreCase(taxname);
			mappedTestCases.get(0).setTestResult(flag);
			Assert.assertTrue("Unable to handle special character", flag);

			ModalPOItemSummaryCostAllocation.clickOnCancel(driver);
			// do the same in amendPo
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			ActionBot.defaultSleep();
			ActionBot.scroll(driver, "450");
			PageStandardPO.clickOnAllItemLineCheckBox(driver, testCaseName);
			PageStandardPO.clickOnUpdateAllLinesLink(driver, testCaseName);
			ModalUpdateAllLinesPO.fillTaxType(driver, testCaseName, taxType, 1);
			//ModalUpdateAllLinesPO.selectTaxType(driver, testCaseName, taxType, 2);
			ModalUpdateAllLinesPO.fillTaxName(driver, testCaseName, taxname, 2);
			ModalUpdateAllLinesPO.clickOnApplyTax(driver, testCaseName);
			//PageStandardPO.clickOnItemSummaryEdit(driver, testCaseName, itemId);
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			ModalItemSummaryTax.clickOnTaxesTab(driver, testCaseName);
			String taxname1 = ModalItemSummaryTax.getTaxeName(driver, testCaseName);
			flag = taxName.equalsIgnoreCase(taxname1);
			mappedTestCases.get(1).setTestResult(flag);
			Assert.assertTrue("Special character not Supported in Modal change multiple", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Edit PO; Multilingual Characters should be
	 * handled in Modal of Change multiple, taxes, discount
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_139338(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();

		StandardPO standardPO = new StandardPO();
		boolean flag;
		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			String taxType = CommonServices.getTestData(IConstantsData.TAX_TYPE);
			String taxName = CommonServices.getTestData(IConstantsData.TAX_NAME_MULTILINGUAL_CHAR);
			//String taxName = "abc2我们正在测अपना";
			// click On PoTab
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOListingActions.clickOnCopyLink(driver, testCaseName);
			ActionBot.scroll(driver, "450");
			Item item = new Item();
			item = ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);
			FlowStandardPo.addItem(driver, testCaseName, item);
			PageStandardPO.clickOnAllItemLineCheckBox(driver, testCaseName);
			PageStandardPO.clickOnUpdateAllLinesLink(driver, testCaseName);
			ModalUpdateAllLinesPO.fillTaxType(driver, testCaseName, taxType, 1);
			//ModalUpdateAllLinesPO.selectTaxType(driver, testCaseName, taxType, 2);
			ModalUpdateAllLinesPO.fillTaxName(driver, testCaseName, taxName, 2);
			ModalUpdateAllLinesPO.clickOnApplyTax(driver, testCaseName);
			ActionBot.defaultSleep();
			//	String itemId = PageStandardPO.getItemId(driver, standardPO.getItems().getCatelogItems().get(0).getItemName());
			//	PageStandardPO.clickOnItemSummaryEdit(driver, testCaseName, itemId);
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			//PageStandardPO.clickOnEditItemCopyPO(driver, testCaseName);
			ActionBot.defaultSleep();
			ModalItemSummaryTax.clickOnTaxesTab(driver, testCaseName);
			String taxname = ModalItemSummaryTax.getTaxeName(driver, testCaseName);
			flag = taxname.equalsIgnoreCase(taxName);
			Assert.assertTrue("Multilingual character not Supported in Modal change multiple", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Edit PO;Header level discount should not
	 * be more than item sub total & validations should be present.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_139345(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		StandardPO standardPO = new StandardPO();
		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase, mappedTestCases);
			user = LoginLogoutServices.login(driver, testCase);
			{
				// RTC_139346 : testcase to be mapped
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_139346"));
			}
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);

			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOListingActions.clickOnCopyLink(driver, testCaseName);
			ActionBot.scroll(driver, "450");
			String itemPrice = PageStandardPO.getTotalItemPrice(driver, testCaseName).split("\\.")[0].replaceAll("[^0-9]", "");
			PageStandardPO.clickOnModifyLink(driver);
			ModalDiscountPO.clickOnDiscountOnEntireOrder(driver, testCaseName);
			int discount = Integer.parseInt(itemPrice) + CommonUtilities.getNonZeroRandomNumbers(2);
			ModalDiscountPO.fillDiscountAmount(driver, testCaseName, discount);
			ModalDiscountPO.clickOnSaveDiscount(driver, testCaseName);
			boolean msgdisplayed = ModalDiscountPO.isTotalDiscountAmountCannotBeGreaterItemSubTotalmsgDisplayed(driver, testCaseName);
			Assert.assertTrue("Total discount amount can be greater than Item SubTotal", msgdisplayed);
			ModalDiscountPO.clickOnItemLevelDiscount(driver, testCaseName);
			ModalDiscountPO.selectItemLevelDiscountType(driver, testCaseName, IConstantsData.AMOUNT);
			ModalDiscountPO.enterItemLevelDiscountValue(driver, testCaseName, discount);
			ModalDiscountPO.clickOnItemLevelTotalDiscount(driver, testCaseName);
			boolean errorMsg = ModalDiscountPO.isItemLevelTotalDiscountAmountCannotBeGreaterItemSubTotalmsgDisplayed(driver, testCaseName);
			mappedTestCases.get(0).setTestResult(errorMsg);
			Assert.assertTrue("Item Level Discount more thn Item Sub-Total", errorMsg);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Edit PO; any time the value of discount
	 * change from header or item level ; should reflect all places.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_139352(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		StandardPO standardpo = new StandardPO();
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardpo = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardpo);
			FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			ActionBot.scroll(driver, "450");

			String itemPrice = PageStandardPO.getTotalItemPrice(driver, testCaseName).split("\\.")[0].replaceAll("[^0-9]", "");
			PageStandardPO.clickOnModifyLink(driver);

			//Apply discount type Percentage
			ModalDiscountPO.clickOnItemLevelDiscount(driver, testCaseName);
			ModalDiscountPO.selectItemLevelDiscountType(driver, testCaseName, IConstantsData.PERCENTAGE);
			int discountValue = CommonUtilities.getNonZeroRandomNumbers(1);
			ModalDiscountPO.enterItemLevelDiscountValue(driver, testCaseName, discountValue);
			ModalDiscountPO.clickOnSaveDiscount(driver, testCaseName);

			PageStandardPO.clickOnModifyLink(driver);
			String discountedAmount = Double.toString(ModalDiscountPO.getItemLevelTotalDiscountAmount(driver, testCaseName)).split("\\.")[0];
			ModalDiscountPO.clickOnDiscountModalCancelLink(driver, testCaseName);
			// compare discounted amount on modal with discount price on standard PO page
			String headerDiscount = Double.toString(ModalDiscountPO.getHeaderLevelTotalDiscountAmount(driver, testCaseName)).split("\\.")[0];
			logger.info("Discount amount :" + discountedAmount + " Header level discount amount :" + headerDiscount);
			boolean flag = discountedAmount.equalsIgnoreCase(headerDiscount);
			Assert.assertTrue("Discount value is not reflected after applying discount type Percentage", flag);

			//Apply discount type Amount			
			PageStandardPO.clickOnModify(driver, testCaseName);
			ModalDiscountPO.clickOnItemLevelDiscount(driver, testCaseName);
			ModalDiscountPO.selectItemLevelDiscountType(driver, testCaseName, IConstantsData.AMOUNT);
			discountValue = CommonUtilities.getRandomNumbersBetweenRange(2, 10, Integer.parseInt(itemPrice));
			ModalDiscountPO.enterItemLevelDiscountValue(driver, testCaseName, discountValue);
			ModalDiscountPO.clickOnSaveDiscount(driver, testCaseName);

			PageStandardPO.clickOnModifyLink(driver);
			discountedAmount = Double.toString(ModalDiscountPO.getItemLevelTotalDiscountAmount(driver, testCaseName)).split("\\.")[0];
			ModalDiscountPO.clickOnDiscountModalCancelLink(driver, testCaseName);
			// compare discounted amount on modal with discount price on standard PO page
			headerDiscount = Double.toString(ModalDiscountPO.getHeaderLevelTotalDiscountAmount(driver, testCaseName)).split("\\.")[0];
			logger.info("Discount amount :" + discountedAmount + " Header level discount amount :" + headerDiscount);
			flag = discountedAmount.equalsIgnoreCase(headerDiscount);
			Assert.assertTrue("Discount value is not reflected after applying discount type Amount", flag);

			//Apply discount type Per Item			
			PageStandardPO.clickOnModify(driver, testCaseName);
			ModalDiscountPO.clickOnItemLevelDiscount(driver, testCaseName);
			ModalDiscountPO.selectItemLevelDiscountType(driver, testCaseName, IConstantsData.PER_ITEM);
			int perItemDiscount = Integer.parseInt(itemPrice) / standardpo.getItems().getCatelogItems().get(0).getQuantity();
			discountValue = CommonUtilities.getRandomNumbersBetweenRange(2, 10, perItemDiscount);
			ModalDiscountPO.enterItemLevelDiscountValue(driver, testCaseName, discountValue);
			ModalDiscountPO.clickOnSaveDiscount(driver, testCaseName);

			PageStandardPO.clickOnModify(driver, testCaseName);
			discountedAmount = Double.toString(ModalDiscountPO.getItemLevelTotalDiscountAmount(driver, testCaseName)).split("\\.")[0];
			ModalDiscountPO.clickOnDiscountModalCancelLink(driver, testCaseName);
			// compare discounted amount on modal with discount price on standard PO page
			headerDiscount = Double.toString(ModalDiscountPO.getHeaderLevelTotalDiscountAmount(driver, testCaseName)).split("\\.")[0];
			logger.info("Discount amount :" + discountedAmount + " Header level discount amount :" + headerDiscount);
			flag = discountedAmount.equalsIgnoreCase(headerDiscount);
			Assert.assertTrue("Discount value is not reflected after applying discount type Per item", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Edit PO;AÂ CombinationÂ of Tax Type & Name
	 * should only be specified once: i.e. either on header or line. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_139357(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();

		StandardPO standardPO = new StandardPO();

		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			String taxType = CommonServices.getTestData(IConstantsData.TAX_TYPE, 1);
			String TaxName = CommonServices.getTestData(IConstantsData.TAX_NAME);
			// click On PoTab

			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);

			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOListingActions.clickOnCopyLink(driver, testCaseName);
			ActionBot.scroll(driver, "650");
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			ModalItemSummaryTax.clickOnTaxesTab(driver, testCaseName);
			ModalItemSummaryTax.fillTaxType(driver, testCaseName, taxType, 1);
			ModalItemSummaryTax.fillTaxName(driver, testCaseName, TaxName);
			ModalItemSummaryTax.fillTaxRate(driver, testCaseName, CommonServices.getTestData(IConstantsData.TAX_RATE));
			ModalPOFreeTextItemSummaryItem.clickOnSave(driver, testCaseName);
			ActionBot.scroll(driver, "400");
			ActionBot.defaultSleep();
			PageStandardPO.fillTaxType(driver, testCaseName, taxType, 1);
			PageStandardPO.enterTaxName(driver, testCaseName, TaxName, 1);
			PageStandardPO.clickOnAddNewTaxType(driver);
			boolean duplicatTaxErrormsg = PageStandardPO.isDuplicateTaxesErrorMsgDisplayed(driver, testCaseName);
			Assert.assertTrue("Dupicated Tax Allowed", duplicatTaxErrormsg);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>In Copy PO;Validations should be handled
	 * in change multiple options of tax type. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_139393(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();

		StandardPO standardPO = new StandardPO();

		Item item = new Item();
		boolean flag = false;
		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase, mappedTestCases);
			user = LoginLogoutServices.login(driver, testCase);
			{
				// RTC_22610 : testcase to be mapped
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_139453"));
			}
			String taxType = CommonServices.getTestData(IConstantsData.TAX_TYPE);
			String taxName = CommonServices.getTestData(IConstantsData.MAX_CHARACTER_ITEMNAME);
			// click On PoTab
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOListingActions.clickOnCopyLink(driver, testCaseName);
			ActionBot.defaultSleep();
			ActionBot.scroll(driver);
			item = ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);
			FlowStandardPo.addItem(driver, testCaseName, item);
			PageStandardPO.clickOnAllItemLineCheckBox(driver, testCaseName);
			PageStandardPO.clickOnUpdateAllLinesLink(driver, testCaseName);
			ModalUpdateAllLinesPO.selectTaxType(driver, testCaseName, taxType, 2);
			ModalUpdateAllLinesPO.fillTaxName(driver, testCaseName, taxName, 2);
			ModalUpdateAllLinesPO.fillTaxRate(driver, testCaseName, 1000000000);
			ModalUpdateAllLinesPO.clickOnApplyTax(driver, testCaseName);
			ActionBot.defaultSleep();
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			ModalItemSummaryTax.clickOnTaxesTab(driver, testCaseName);
			ActionBot.defaultSleep();
			flag = taxName.equalsIgnoreCase(ModalItemSummaryTax.getTaxeName(driver, testCaseName));
			Assert.assertFalse("Unable to handle validation", flag);
			ModalPOItemSummaryCostAllocation.clickOnCancel(driver);
			// check with blank field
			PageStandardPO.clickOnUpdateAllLinesLink(driver, testCaseName);
			ModalUpdateAllLinesPO.selectTaxType(driver, testCaseName, taxType, 2);
			ModalUpdateAllLinesPO.clickOnApplyTax(driver, testCaseName);
			boolean erroricon = ModalUpdateAllLinesPO.isErrorTooltipiconDisplayed(driver, testCaseName);
			Assert.assertTrue(erroricon);
			ModalUpdateAllLinesPO.clickOnCloseUpdateAllLines(driver, testCaseName);
			// check the same in AmendPo
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			ActionBot.scroll(driver);
			PageStandardPO.clickOnAllItemLineCheckBox(driver, testCaseName);
			PageStandardPO.clickOnUpdateAllLinesLink(driver, testCaseName);
			ModalUpdateAllLinesPO.selectTaxType(driver, testCaseName, taxType, 2);
			ModalUpdateAllLinesPO.fillTaxName(driver, testCaseName, taxName, 2);
			ModalUpdateAllLinesPO.fillTaxRate(driver, testCaseName, 1000000000);
			ModalUpdateAllLinesPO.clickOnApplyTax(driver, testCaseName);
			ActionBot.defaultSleep();
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			ModalItemSummaryTax.clickOnTaxesTab(driver, testCaseName);
			ActionBot.defaultSleep();
			flag = taxName.equalsIgnoreCase(ModalItemSummaryTax.getTaxeName(driver, testCaseName));
			// check with blank field
			ModalPOItemSummaryCostAllocation.clickOnCancel(driver);
			PageStandardPO.clickOnUpdateAllLinesLink(driver, testCaseName);
			ModalUpdateAllLinesPO.selectTaxType(driver, testCaseName, taxType, 2);
			ModalUpdateAllLinesPO.clickOnApplyTax(driver, testCaseName);
			boolean erroricon3 = ModalUpdateAllLinesPO.isErrorTooltipiconDisplayed(driver, testCaseName);
			Assert.assertTrue(erroricon3);
			ModalUpdateAllLinesPO.clickOnCloseUpdateAllLines(driver, testCaseName);
			mappedTestCases.get(0).setTestResult(!flag);
			Assert.assertFalse("Unable to handle validation", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Draft PO >> User should be able to save PO
	 * in draft status from suggested PO screen at buyers desk. (check when user
	 * click on convert to PO from Byers desk listing)
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_145079(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		boolean flag = false;
		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			Requisition requisition = ObjectCreation.getRequisition(driver);

			Item item = ObjectCreation.getItem("catalogItem");

			requisition.setItems(item);
			CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);
			// convert To Po
			PageBuyersDeskListing.clickOnFirstActionButton(driver, testCaseName);
			ModalBuersDeskListingActions.clickOnConvertToPOAction(driver, testCaseName);
			PagePurchaseOrderToBeGenerated.ClikOnPurchaseOrderToBeGeneratedCheckBox(driver, testCaseName, 0);
			PagePurchaseOrderToBeGenerated.clickOnSavePosAsDraft(driver, testCaseName);

			FlowPoListing.searchPo(driver, testCaseName, requisition.getReqNo(), IConstantsData.SEARCH_BY_ORDER_DESCRIPTION);

			String status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			flag = status.equalsIgnoreCase(IConstantsData.DRAFT_FILTER_LABEL);
			Assert.assertTrue("Unable to select Po As Draft", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Draft PO >> User should be able to save PO
	 * in draft status from suggested PO screen at buyers desk.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_145078(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		boolean flag = false;
		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase, mappedTestCases);
			user = LoginLogoutServices.login(driver, testCase);
			{
				// mapped testCases
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_145080"));//0 done
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_145081"));//1 done
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_145082"));//2 done
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_145083"));//3 done
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_145084"));//4 done
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_145085"));//5 done
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_145086"));//6 done
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_145087"));//7 done
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_145090"));//8 done
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_145091"));//9 done
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_145092"));//10 done
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_145098"));//11 done
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_145097"));//12 done
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_145100"));//13 done
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_238998"));//14 done
				// mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_191112"));
			}
			// click On PoTab
			Requisition requisition = ObjectCreation.getRequisition(driver);
			Item item = ObjectCreation.getItem(IConstantsData.GUIDED_ITEM);
			item.getGuidedItems().get(0).setCurrency(CommonServices.getTestData(IConstantsData.CHANGED_CURRENCY));
			requisition.setItems(item);
			requisition = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);
			// convert To Po
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			FlowBuyersDesk.convertToPo(driver, testCaseName);
			PagePurchaseOrderToBeGenerated.ClikOnPurchaseOrderToBeGeneratedCheckBox(driver, testCaseName, 0);
			PagePurchaseOrderToBeGenerated.clickOnSavePosAsDraft(driver, testCaseName);
			FlowPoListing.searchPo(driver, testCaseName, requisition.getReqNo(), IConstantsData.SEARCH_BY_ORDER_DESCRIPTION);
			String status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			flag = status.equalsIgnoreCase(IConstantsData.DRAFT_FILTER_LABEL);
			Assert.assertTrue("PO is not in draft state", flag);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			String poNumber = PageStandardPO.getPONo(driver, testCaseName);
			String supplierEmailId = PageStandardPO.getSupplierEmailId(driver, testCaseName);
			// RTC_145082 starts here 
			//Buyer should be able to edit payment terms
			String paymentTerms = CommonServices.getTestData(IConstantsData.PAYMENT_TERMS);
			paymentTerms = PageStandardPO.enterPaymentTerms(driver, paymentTerms);
			mappedTestCases.get(2).setTestResult(flag);
			Assert.assertTrue("Not able to edit payment terms", paymentTerms.equalsIgnoreCase(PageStandardPO.getSupplierPaymentTerms(driver, testCaseName)));
			//RTC_145083 starts here 
			// Draft PO &gt;&gt; Buyer should be able to change Delivery Term details while editing Draft PO (req to PO.)
			String deliveryTerms = CommonServices.getTestData(IConstantsData.DELIVERY_TERMS);
			String dTerms = PageStandardPO.selectDeliveryTerms(driver, deliveryTerms);
			flag = dTerms.toLowerCase().contains(deliveryTerms.toLowerCase());
			mappedTestCases.get(3).setTestResult(flag);
			Assert.assertTrue("Unable to change Delivery terms", flag);
			//RTC_145084 starts here
			// Draft PO &gt;&gt; Buyer should be able to change PO Contact details while editing Draft PO (req to PO.)
			ActionBot.defaultSleep();
			String contact = CommonServices.getTestData(IConstantsData.PO_SUPPLIER_CONTACT);
			flag = PageStandardPO.isEditableSupplierContact(driver, contact);
			mappedTestCases.get(4).setTestResult(flag);
			Assert.assertTrue("Not able to edit supplier contact", flag);
			String supplierContact = PageStandardPO.getSupplierContact(driver, testCaseName);
			String exchangeRate = PageStandardPO.fillCurrencyExchangeRate(driver, testCaseName, CommonUtilities.getNonZeroRandomNumbers(1));
			flag = (exchangeRate != null);
			mappedTestCases.get(5).setTestResult(flag);
			Assert.assertTrue("Not able to edit currency exchange rate", flag);
			//RTC_145086 starts here
			// Draft PO &gt;&gt; Buyer should be able to change Buyer while editing Draft PO (req to PO.)
			String buyer = CommonServices.getTestData(IConstantsData.BUYER_NAME);
			flag = PageStandardPO.enterBuyer(driver, buyer) != null;
			mappedTestCases.get(6).setTestResult(flag);
			Assert.assertTrue("Not able to modified buyer name", flag);
			// Draft PO &gt;&gt; Buyer should be able to edit require by date while editing Draft PO (req to PO.)
			CustomDate customDate = CommonUtilities.getRequiredBy();
			String requireByDate = PageStandardPO.fillRequiredByDate(driver, testCaseName, customDate.getDay(), customDate.getMonth(), customDate.getYear());
			flag = (requireByDate != null);
			mappedTestCases.get(7).setTestResult(flag);
			Assert.assertTrue("Not able to edit require by date", flag);
			ActionBot.scroll(driver, "400");
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			//RTC_145091 starts here
			// Draft PO &gt;&gt; Buyer should be able to change Delivery Address
			// while editing Draft PO (req to PO.)
			ModalItemSummaryDelivery.clickOnItemSummaryDeliveryTab(driver, testCaseName);
			String otherAddress = ModalItemSummaryDelivery.changeDeliveryOtherAddress(driver, testCaseName, CommonServices.getTestData(IConstantsData.PO_OTHER_ADDRESS));
			flag = (otherAddress != null);
			mappedTestCases.get(9).setTestResult(flag);
			Assert.assertTrue("Other Delivery not Editable", flag);
			//RTC_145081 starts here
			// Buyer should be able to change Market Price; name and description of free text item while editing Draft PO
			ModalItemSummaryItem.clickOnItemDetailsTab(driver, testCaseName);
			String shortDesc = CommonServices.getTestData(IConstantsData.SHORT_DESC_FOR_GUIDED_ITEM);
			String marketPrice = CommonServices.getTestData(IConstantsData.MARKET_PRICE);
			ActionBot.defaultSleep();
			String shortdesc = ModalPOFreeTextItemSummaryItem.clearAndfillShortDescription(driver, testCaseName, shortDesc);
			float marketprice = ModalPOFreeTextItemSummaryItem.clearAndfillMarketPrice(driver, testCaseName, Integer.parseInt(marketPrice));
			flag = shortDesc.equalsIgnoreCase(shortdesc);
			Assert.assertTrue("Not able to edit item short description ", flag);
			flag = Float.parseFloat(marketPrice) == marketprice;
			mappedTestCases.get(1).setTestResult(flag);
			Assert.assertTrue("Not able to edit item market price", flag);
			String taxType = CommonServices.getTestData(IConstantsData.TAX_TYPE, 1);
			String TaxName = CommonServices.getTestData(IConstantsData.TAX_NAME);
			//RTC_145092 starts here 
			// Draft PO &gt;&gt; Buyer should be able to change Item level taxes
			// while editing Draft PO (req to PO.)
			ModalItemSummaryTax.clickOnTaxesTab(driver, testCaseName);
			String taxtype = ModalItemSummaryTax.fillTaxType(driver, testCaseName, taxType, 1);
			flag = taxtype.equalsIgnoreCase(taxType);
			Assert.assertTrue("not able to edit tax type", flag);
			String taxname = ModalItemSummaryTax.fillTaxName(driver, testCaseName, TaxName);
			flag = taxname.equalsIgnoreCase(TaxName);
			mappedTestCases.get(10).setTestResult(flag);
			Assert.assertTrue("not able to edit tax name", flag);
			// Draft PO &amp;gt;&amp;gt; Buyer should not be able to change
			// accounting details while editing Draft PO (req to PO.)
			ModalPOFreeTextItemSummaryCostAllocation.clickOnCostBooking(driver, testCaseName);
			flag = ModalItemSummaryCostAllocation.isGLAccountFieldEnabled(driver, testCaseName);
			mappedTestCases.get(8).setTestResult(flag);
			Assert.assertTrue("Gl account is editable", flag);
			ModalPOFreeTextItemSummaryItem.clickOnSave(driver, testCaseName);
			String poTotalPrice = PageStandardPO.getPOTotalPrice(driver, testCaseName).split("\\.")[0].replaceAll("[^0-9]", "");
			String poNo = FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			if (poNo != null)
				poNumber = poNo;
			logger.info("PO NUmber IS :" + poNumber);
			FlowPoListing.searchPo(driver, testCaseName, poNumber, IConstantsData.SEARCH_BY_PO_NO);
			String status1 = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			if (status1.equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL))
			{
				// to approve the PO
				ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, poNumber, IConstantsData.PURCHASE_ORDER,
					IConstantsData.APPROVE);
				FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);
				// search po
				flag = FlowPoListing.searchPo(driver, testCaseName, poNumber, IConstantsData.SEARCH_BY_PO_NO);
				Assert.assertTrue("Error while searching PO", flag);
				flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.RELEASED);
				mappedTestCases.get(0).setTestResult(flag);
				Assert.assertTrue("Status of PO was not Released", flag);
			}
			FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			//RTC_145100 starts here
			PurchaseOrder purchaseOrder = FlowConvertedPurchaseOrder.getReqViewPurchaseOrderinfo(driver, testCaseName, 1);
			String totalPrice = purchaseOrder.getPoTotal().split("\\.")[0].replaceAll("[^0-9]", "");
			flag = totalPrice.equalsIgnoreCase(poTotalPrice);
			mappedTestCases.get(13).setTestResult(flag);
			Assert.assertTrue("Total price is not same", flag);
			//RTC_145097 starts here
			PageRequisitionView.clickOnRequisitionTab(driver, testCaseName);
			String requirebyDate = PageRequisitionView.getRequiredByDate(driver, testCaseName);
			flag = requirebyDate.equalsIgnoreCase(requireByDate);
			mappedTestCases.get(12).setTestResult(flag);
			Assert.assertTrue("Require by date is not same", flag);
			ActionBot.scroll(driver, "400");
			String itemId = PageStandardPO.getItemId(driver, shortdesc);
			String itemName = PageRequisitionView.getItem_Name(driver, testCaseName, itemId);
			flag = itemName.equalsIgnoreCase(shortdesc);
			mappedTestCases.get(11).setTestResult(flag);
			Assert.assertTrue("Item description is not same", flag);
			FlowPoListing.searchPo(driver, testCaseName, poNumber, IConstantsData.SEARCH_BY_PO_NO);
			FlowPoListing.copyPO(driver, testCaseName);
			String copyPoSupplierContact = PageStandardPO.getSupplierContact(driver, testCaseName);
			String copyPoSupplierEmailId = PageStandardPO.getSupplierEmailId(driver, testCaseName);
			flag = supplierContact.equalsIgnoreCase(copyPoSupplierContact);
			Assert.assertTrue("Supplier contact is not same while copying po", flag);
			flag = supplierEmailId.equalsIgnoreCase(copyPoSupplierEmailId);
			mappedTestCases.get(14).setTestResult(flag);
			Assert.assertTrue("Supplier email id is not same while copying po", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 214899 - Contract number is
	 * not copied to guided item if mentioned on header while amending REQ-PO.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_219816(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			Requisition requisition = ObjectCreation.getRequisition(driver);

			Item item = ObjectCreation.getItem(IConstantsData.GUIDED_ITEM);

			requisition.setItems(item);
			requisition = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);
			// convert To Po
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			FlowBuyersDesk.convertToPo(driver, testCaseName);
			List<PurchaseOrder> purchaseOrders = FlowBuyersDesk.submitAllSuggestedPosForProcessing(driver, testCaseName);

			FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			String status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			if (status.equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL))
			{
				ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, purchaseOrders.get(0).getPoNo(),
					IConstantsData.PURCHASE_ORDER, IConstantsData.APPROVE);
				FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

				FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			}

			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnAmendPOFromActions(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			ActionBot.jQueryScroll(driver, ".eformItemInpt.ui-front", 500);
			String getContractNo = ModalItemSummaryItem.getModalItemContractNo(driver);
			Assert.assertNotNull(getContractNo);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Draft PO &gt;&gt; Buyer should be able to
	 * change header level taxes (always applicable as NO) while editing Draft
	 * PO (req to PO.)
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_145093(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		boolean flag = false;
		String taxType = CommonServices.getTestData(IConstantsData.TAX_TYPE, 1);
		String taxName = CommonServices.getTestData(IConstantsData.TAX_NAME);
		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			// click On PoTab
			Requisition requisition = ObjectCreation.getRequisition(driver);

			Item item = ObjectCreation.getItem(IConstantsData.GUIDED_ITEM);

			requisition.setItems(item);

			CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);
			// convert To Po
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			FlowBuyersDesk.convertToPo(driver, testCaseName);
			FlowBuyersDesk.saveAllSuggestedPosAsDraft(driver, testCaseName);
			//			PageBuyersDesk.clickOnConvertToPo(driver, testCaseName);
			//			ActionBot.defaultSleep();
			//			PagePurchaseOrderToBeGenerated.ClikOnPurchaseOrderToBeGeneratedCheckBox(driver, testCaseName, 0);
			//			PagePurchaseOrderToBeGenerated.clickOnSavePosAsDraft(driver, testCaseName);
			//			String status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			//			flag = status.equalsIgnoreCase(IConstantsData.DRAFT_FILTER_LABEL);
			//			Assert.assertTrue(flag);
			//			PoStatusFilter poStatusFilter = new PoStatusFilter();
			//			poStatusFilter.setDraftFilter(true);
			//			FlowPoListing.applyPoStatusFilter(driver, testCaseName, poStatusFilter);

			FlowPoListing.searchPo(driver, testCaseName, requisition.getReqNo(), IConstantsData.SEARCH_BY_ORDER_DESCRIPTION);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			String poNumber = PageStandardPO.getPONo(driver, testCaseName);
			ActionBot.scroll(driver, "800");
			ActionBot.defaultSleep();
			PageStandardPO.fillTaxType(driver, testCaseName, taxType, 1);
			PageStandardPO.enterTaxName(driver, testCaseName, taxName, 1);
			PageStandardPO.clickOnAddNewTaxType(driver);
			String poNo = FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			if (poNo != null)
				poNumber = poNo;
			FlowPoListing.searchPo(driver, testCaseName, poNumber, IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			flag = PageViewPurchaseOrder.getTaxType(driver, testCaseName, 2).equalsIgnoreCase(taxType);
			Assert.assertTrue("Tax type is not added", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Draft PO >> User should be able to save PO
	 * in draft status from suggested PO screen at buyers desk.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_145094(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		String deliveryTerms = CommonServices.getTestData(IConstantsData.DELIVERY_TERMS);
		boolean flag = false;
		int rates;
		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase, mappedTestCases);
			user = LoginLogoutServices.login(driver, testCase);
			{
				// mapped testCases
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_145095"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_145096"));

			}
			// click On PoTab
			Requisition requisition = ObjectCreation.getRequisition(driver);

			Item item = ObjectCreation.getItem(IConstantsData.GUIDED_ITEM);

			requisition.setItems(item);
			requisition = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);
			// convert To Po
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			FlowBuyersDesk.convertToPo(driver, testCaseName);
			FlowBuyersDesk.saveAllSuggestedPosAsDraft(driver, testCaseName);

			FlowPoListing.searchPo(driver, testCaseName, requisition.getReqNo(), IConstantsData.SEARCH_BY_ORDER_DESCRIPTION);
			String poNumber = PagePurchaseOrderListing.getFirstPoNo(driver, testCaseName);
			flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.DRAFT_FILTER_LABEL);
			Assert.assertTrue("PO is not in draft status", flag);

			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			String itemPrice = PageStandardPO.getTotalItemPrice(driver, testCaseName).split("\\.")[0].replaceAll("[^0-9]", "");
			// Draft PO &gt;&gt; Buyer should be able to change Discount (header
			// and item level) while editing Draft PO (req to PO.)
			PageStandardPO.clickOnModifyLink(driver);
			ActionBot.defaultSleep();
			rates = CommonUtilities.getNonZeroRandomNumbers(2);
			PageStandardPO.fillDiscountField(driver, testCaseName, rates);
			boolean discountField = PageStandardPO.isEditableDiscountField(driver);

			Assert.assertTrue("Discount field is not editable", discountField);
			// PageStandardPO.clickOnDiscountModalSaveBtm(driver);
			ModalDiscountPO.clickOnItemLevelDiscount(driver, testCaseName);
			//			String type = IConstantsData.PERCENTAGE;
			ModalDiscountPO.selectItemLevelDiscountType(driver, testCaseName, IConstantsData.PERCENTAGE);
			int discountValue = CommonUtilities.getNonZeroRandomNumbers(2);
			ModalDiscountPO.enterItemLevelDiscountValue(driver, testCaseName, discountValue);
			ModalDiscountPO.clickOnSaveDiscount(driver, testCaseName);
			PageStandardPO.clickOnModifyLink(driver);
			double discountedAmount = ModalDiscountPO.getItemLevelTotalDiscountAmount(driver, testCaseName);
			ModalDiscountPO.clickOnSaveDiscount(driver, testCaseName);
			//ModalDiscountPO.clickOnItemLevelTotalDiscount(driver, testCaseName);
			//double discountedAmount = ModalDiscountPO.getItemLevelTotalDiscountAmount(driver, testCaseName);
			//			ModalDiscountPO.clickOnSaveDiscount(driver, testCaseName);
			// compare discounted amount on modal with discount price on
			// standard PO page
			double headerDiscount = ModalDiscountPO.getHeaderLevelTotalDiscountAmount(driver, testCaseName);
			flag = discountedAmount == headerDiscount;
			Assert.assertTrue("Item level discount is not reflected for discount type Percentage", flag);
			// fill discount amount
			PageStandardPO.clickOnModify(driver, testCaseName);
			ModalDiscountPO.clickOnItemLevelDiscount(driver, testCaseName);
			//			String type0 = "Amount"
			ModalDiscountPO.selectItemLevelDiscountType(driver, testCaseName, IConstantsData.AMOUNT);
			discountValue = CommonUtilities.getRandomNumbersBetweenRange(2, 10, Integer.parseInt(itemPrice));
			//			int value1 = 500;
			ModalDiscountPO.enterItemLevelDiscountValue(driver, testCaseName, discountValue);
			ModalDiscountPO.clickOnSaveDiscount(driver, testCaseName);
			PageStandardPO.clickOnModifyLink(driver);
			//ModalDiscountPO.clickOnItemLevelTotalDiscount(driver, testCaseName);
			discountedAmount = ModalDiscountPO.getItemLevelTotalDiscountAmount(driver, testCaseName);
			ModalDiscountPO.clickOnSaveDiscount(driver, testCaseName);
			// compare discounted amount on modal with discount price on
			// standard PO page
			headerDiscount = ModalDiscountPO.getHeaderLevelTotalDiscountAmount(driver, testCaseName);
			flag = discountedAmount == headerDiscount;
			Assert.assertTrue("Item level discount is not reflected for discount type Amount", flag);
			// fill discount per item
			PageStandardPO.clickOnModify(driver, testCaseName);
			ModalDiscountPO.clickOnItemLevelDiscount(driver, testCaseName);
			//			String type1 = "Percentage";
			ModalDiscountPO.selectItemLevelDiscountType(driver, testCaseName, IConstantsData.PER_ITEM);
			int perItemDiscount = Integer.parseInt(itemPrice) / Math.round(requisition.getItems().getGuidedItems().get(0).getQuantity());
			discountValue = CommonUtilities.getRandomNumbersBetweenRange(2, 10, perItemDiscount);
			//			int value2 = 5;
			ModalDiscountPO.enterItemLevelDiscountValue(driver, testCaseName, discountValue);
			ModalDiscountPO.clickOnSaveDiscount(driver, testCaseName);
			PageStandardPO.clickOnModifyLink(driver);
			//			ModalDiscountPO.clickOnItemLevelTotalDiscount(driver, testCaseName);
			discountedAmount = ModalDiscountPO.getItemLevelTotalDiscountAmount(driver, testCaseName);
			ModalDiscountPO.clickOnSaveDiscount(driver, testCaseName);
			// compare discounted amount on modal with discount price on
			// standard PO page
			headerDiscount = ModalDiscountPO.getHeaderLevelTotalDiscountAmount(driver, testCaseName);
			flag = discountedAmount == headerDiscount;
			mappedTestCases.get(0).setTestResult(flag);
			Assert.assertTrue("Item level discount is not reflected for discount type PerItem", flag);
			// Draft PO &gt;&gt; Buyer should be able to change Freight and
			// extra charges while editing Draft PO (req to PO.)
			PageStandardPO.selectDeliveryTerms(driver, deliveryTerms);
			Double beforeAddingcTax = PageStandardPO.getTotalAmountWithoutSupplier(driver, testCaseName);
			PageStandardPO.clickOnCompoundTax(driver, testCaseName);
			String taxType = CommonServices.getTestData(IConstantsData.TAX_TYPE, 1);
			//			int index = 3;
			PageStandardPO.fillTaxType(driver, testCaseName, taxType, 2);
			String taxName = CommonServices.getTestData(IConstantsData.TAX_NAME);
			// String taxName = "tax";
			PageStandardPO.enterTaxName(driver, testCaseName, taxName, 2);
			String taxRate2 = CommonServices.getTestData(IConstantsData.TAX_RATE);
			//			// int taxRate2 = 5;
			PageStandardPO.enterTaxRate(driver, testCaseName, Integer.parseInt(taxRate2), 4);
			PageStandardPO.clickOnTaxAmount(driver, testCaseName, 4);
			Double compountTaxAmount = PageStandardPO.getTotalAmountWithoutSupplier(driver, testCaseName);
			flag = beforeAddingcTax == compountTaxAmount;
			// mappedTestCases.get(1).setTestResult(flag);
			Assert.assertFalse("Unable to add Compound Tax", flag);
			// Draft PO &gt;&gt; Buyer should be able to change Freight and
			// extra charges while editing Draft PO (req to PO.)
			ActionBot.scroll(driver);
			ActionBot.defaultSleep();
			int Freight = CommonUtilities.getNonZeroRandomNumbers(2);
			Freight = PageStandardPO.clearAndfillFreightTax(driver, testCaseName, Freight);
			PageStandardPO.clickOnAddNewTaxType(driver);
			String poNo = FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			if (poNo != null)
				poNumber = poNo;
			FlowPoListing.searchPo(driver, testCaseName, poNumber, IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			Double getFreightValue = PageViewPurchaseOrder.getFreightTaxValue(driver, testCaseName);
			flag = Freight == getFreightValue;
			Assert.assertTrue("Frieght value is not reflected", flag);
			mappedTestCases.get(1).setTestResult(flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Draft PO &gt;&gt; Buyer should be able to
	 * see all Draft PO (req to PO) which comes in his scope. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_145101(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		PurchaseOrder purchaseorder = new PurchaseOrder();
		boolean flag = false;
		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase, mappedTestCases);
			user = LoginLogoutServices.login(driver, testCase);
			{
				// mapped testCases
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_145102"));
			}
			// click On PoTab
			Requisition requisition = ObjectCreation.getRequisition(driver);
			Item item = ObjectCreation.getItem(IConstantsData.GUIDED_ITEM);
			requisition.setItems(item);
			requisition = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);
			// convert To Po
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			FlowBuyersDesk.convertToPo(driver, testCaseName);
			PagePurchaseOrderToBeGenerated.ClikOnPurchaseOrderToBeGeneratedCheckBox(driver, testCaseName, 0);
			PagePurchaseOrderToBeGenerated.clickOnSavePosAsDraft(driver, testCaseName);
			FlowPoListing.searchPo(driver, testCaseName, requisition.getReqNo(), IConstantsData.SEARCH_BY_ORDER_DESCRIPTION);
			flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.DRAFT_FILTER_LABEL);
			Assert.assertTrue("PO is not in draft status", flag);
			purchaseorder.setPoNo(PagePurchaseOrderListing.getFirstPoNo(driver, testCaseName));
			User user2 = UserUtilHelper.getAvailableUserFromList();
			LoginLogoutServices.logout(driver, testCase, user);
			ActionBot.defaultMediumSleep();

			// login with other user
			LoginLogoutServices.login(driver, testCase, user2);
			// user = user2;
			FlowPoListing.searchPo(driver, testCaseName, purchaseorder.getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.DRAFT_FILTER_LABEL);
			Assert.assertTrue("Unable to see all draft", flag);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			Item item1 = ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);
			FlowStandardPo.addItem(driver, testCaseName, item1);
			String poNo = FlowStandardPo.savePOAsDraft(driver, testCaseName);
			if (poNo != null)
				purchaseorder.setPoNo(poNo);
			User user3 = UserUtilHelper.getAvailableUserFromList();
			LoginLogoutServices.logout(driver, testCase, user2);
			ActionBot.defaultMediumSleep();
			LoginLogoutServices.login(driver, testCase, user3);
			FlowPoListing.searchPo(driver, testCaseName, purchaseorder.getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.DRAFT_FILTER_LABEL);
			Assert.assertTrue("Unable to see all draft", flag);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			ActionBot.scroll(driver, "450");
			List<WebElement> listOfItems = PageStandardPO.getListOfItems(driver, testCaseName);
			//catelogItem = ObjectCreation.getDefaultCatalogItemObject();
			for (WebElement element : listOfItems)
			{
				String itemName = element.getText().trim();
				logger.info("Item Name : " + itemName);
				if (itemName.equalsIgnoreCase(item1.getCatelogItems().get(0).getItemName()))
				{
					flag = true;
					break;
				}
				logger.info("Flag : " + flag);
			}
			mappedTestCases.get(0).setTestResult(flag);
			Assert.assertTrue("Items not added to po", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 195180 - My addresses of
	 * previous buyer too selectable in next edit.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_73355(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		PurchaseOrder purchaseorder = new PurchaseOrder();
		boolean flag = false;
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			Requisition requisition = ObjectCreation.getRequisition(driver);

			Item item = ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);
			requisition.setItems(item);

			requisition = CombineFlowImpl.reqToPO(driver, testCaseName, requisition);
			purchaseorder.setPoNo(PagePurchaseOrderListing.getFirstPoNo(driver, testCaseName));
			// search po
			flag = FlowPoListing.searchPo(driver, testCaseName, purchaseorder.getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue(flag);
			ActionBot.defaultMediumSleep();

			User user2 = UserUtilHelper.getAvailableUserFromList();
			LoginLogoutServices.logout(driver, testCase, user);
			ActionBot.defaultMediumSleep();

			// login with other user
			LoginLogoutServices.login(driver, testCase, user2);
			// user = user2;

			MainPageHeaderLevelTab.clickOnPOTab(driver);
			flag = FlowPoListing.searchPo(driver, testCaseName, purchaseorder.getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("Unable to see all draft", flag);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);

			PageStandardPO.clickOnEdit(driver);
			TabPOSummary.clickOnDeliveryPOSummary(driver);

			ActionBot.click(driver, IModalPOSummaryDelivery.RADIO_BUTTON_DELIVER_TO_SINGLE_PERSON);
			ModalPOSummaryDelivery.clickOnOUAdressCheckbox(driver, testCaseName);

			String deliverTo = ModalPOSummaryDelivery.getDeliverTo(driver, testCaseName);
			flag = deliverTo.trim().equalsIgnoreCase(user.getDisplayName().trim());
			Assert.assertFalse(flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 204368 - Item detail modal is
	 * not displayed when click in item name in amend PO.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_147118(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			PoStatusFilter poStatusFilter = new PoStatusFilter();
			poStatusFilter.setReleased(true);
			FlowPoListing.applyPoStatusFilter(driver, testCaseName, poStatusFilter);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			ActionBot.scroll(driver);
			PageStandardPO.clickOnItemName(driver, testCaseName);
			boolean itemDetails = com.zycus.automation.eproc.pageobjects.modals.itemDetailsPO.ModalItemDetails.isItemNamePresent(driver, testCaseName);
			Assert.assertTrue("item Details Absent", itemDetails);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 226793 - Tax rates defined
	 * only at country level are not getting applied automatically on PO .
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_294169(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		{
			// RTC_187595 : testcase to be mapped
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_187595"));

		}
		CommonServices.startTestCase(driver, testCase, mappedTestCases);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			String zycustax = CommonServices.getTestData(IConstantsData.DIFF_TAX_TYPE);
			String zycustaxs = CommonServices.getTestData(IConstantsData.TAX_TYPE);
			String zycustaxsq = CommonServices.getTestData(IConstantsData.COUNTY);
			int code = CommonUtilities.getNonZeroRandomNumbers(4);
			int Rate = CommonUtilities.getNonZeroRandomNumbers(1);
			String addressName = CommonServices.getTestData(IConstantsData.MY_ADDRESS);
			String addressStreetName = CommonServices.getTestData(IConstantsData.TAX_FREE_DELIVERY_ADDRESS);
			String countyName = CommonServices.getTestData(IConstantsData.COUNTY);
			String cityName = CommonServices.getTestData(IConstantsData.CITY);
			MainPageHeaderLevelTab.clickOnMasterSubTab(driver);
			PageMasterDataSettings.clickOnTaxRatesLink(driver, testCaseName);
			PageTaxRatesMasterDataSettings.clickOnAddTaxRate(driver, testCaseName);
			PageTaxRatesMasterDataSettings.fillNameTaxRate(driver, testCaseName, zycustax);
			ActionBot.defaultSleep();
			PageTaxRatesMasterDataSettings.fillTaxType(driver, testCaseName, zycustaxs);
			PageTaxRatesMasterDataSettings.SelectCountry(driver, testCaseName, zycustaxsq, 3);
			PageTaxRatesMasterDataSettings.fillUniqueCode(driver, testCaseName, code);
			PageTaxRatesMasterDataSettings.fillTaxRate(driver, testCaseName, Rate);
			PageTaxRatesMasterDataSettings.clickOnAddTaxRateBtn(driver, testCaseName);
			PageMasterDataSettings.clickOnReturnToSetUpModule(driver, testCaseName);
			StandardPO standardpo = new StandardPO();
			standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardpo.setNextAction(IConstantsData.NONE);
			FlowStandardPo.createStandardPo(driver, testCaseName, standardpo);
			PageStandardPO.clickOnEdit(driver);
			TabPOSummary.clickOnDeliveryPOSummary(driver);
			ModalPOSummaryDelivery.clickOnMyAddress(driver, testCaseName);
			ModalPOSummaryDelivery.clickOnCreateNewAddress(driver, testCaseName);
			ModalPOSummaryDelivery.fillNewAddressName(driver, testCaseName, addressName);
			ModalPOSummaryDelivery.fillNewAddressStreetName(driver, testCaseName, addressStreetName);
			ModalPOSummaryDelivery.enterCityName(driver, testCaseName, cityName);
			ModalPOSummaryDelivery.enterCountyName(driver, testCaseName, countyName);
			ModalPOSummaryDelivery.selectCountryName(driver, testCaseName, 3);
			int zipcode = CommonUtilities.getNonZeroRandomNumbers(4);
			ModalPOSummaryDelivery.fillNewAddressPostalCode(driver, testCaseName, zipcode);
			ModalPOSummaryCostBooking.clickOnSave(driver, testCaseName);
			PopUpDefaultConfirmation.clickOnConfirmYesButton(driver, testCaseName);
			String tName = PageStandardPO.getAutoUpdatedTaxNameName(driver, testCaseName);
			boolean value = tName.equalsIgnoreCase(zycustaxs);
			mappedTestCases.get(0).setTestResult(value);
			Assert.assertTrue(value);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 204450 - Unnecessary error is
	 * occurred on exchange rate when company is deactivated from master.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_147119(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		StandardPO standardpo = new StandardPO();
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardpo = FlowStandardPo.createStandardPo(driver, testCaseName, standardpo);
			FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOListingActions.clickOnCopyLink(driver, testCaseName);
			ActionBot.defaultSleep();
			MainPageHeaderLevelTab.clickOnMasterSubTab(driver);
			PageMasterDataSettings.clickOnCompaniesLink(driver, testCaseName);
			PageMasterDataSettings.clickOnCompanyActivateAndDeactivelink(driver, testCaseName, 2);
			PopUpDefaultConfirmation.clickOnConfirmYesButton(driver, testCaseName);
			PageMasterDataSettings.clickOnReturnToSetUpModule(driver, testCaseName);
			ActionBot.defaultSleep();
			FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOListingActions.clickOnCopyLink(driver, testCaseName);
			ActionBot.defaultSleep();
			boolean errorMsg = PageStandardPO.isCurrencyErrorMsgDisplayed(driver, testCaseName);
			Assert.assertFalse("Currency Error Msg Displayed", errorMsg);
			MainPageHeaderLevelTab.clickOnMasterSubTab(driver);
			PageMasterDataSettings.clickOnCompaniesLink(driver, testCaseName);
			PageMasterDataSettings.clickOnDeactivelink(driver, testCaseName, 2);
			PopUpDefaultConfirmation.clickOnConfirmYesButton(driver, testCaseName);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 209851 - Error 500 is
	 * displayed on keeping message field blank in email PO
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_191156(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		String to = CommonServices.getTestData(IConstantsData.TO_FIELD_VALUE_FOR_SENDING_PO_EMAIL);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			FlowPoListing.filterAllReleasedPO(driver, testCaseName);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			ModalViewPOActions.clickOnEmailPoLink(driver, testCaseName);
			ModalEmailPODocument.fillEmailToField(driver, testCaseName, to);
			ModalEmailPODocument.clickOnSendEmailButton(driver, testCaseName);
			boolean errorMsg = ModalEmailPODocument.isErrorMsgAddMsgToSendMailPresent(driver, testCaseName);
			Assert.assertTrue("Error message not Displayed", errorMsg);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 207064 - [Demo issue]Script
	 * error shown while clicking create free text item in standard PO
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_191282(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		CatelogItem catelogItem = new CatelogItem();
		GuidedItem guidedItem = new GuidedItem();
		Item item = new Item();
		StandardPO standardpo = new StandardPO();
		boolean flag = false;
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);

			standardpo.setNextAction(IConstantsData.SUBMIT_PO_FOR_PROCESSING);
			standardpo = FlowStandardPo.createStandardPo(driver, testCaseName, standardpo);
			FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			ActionBot.scroll(driver);
			List<WebElement> listOfItems = PageViewPurchaseOrder.getListOfItems(driver, testCaseName);

			for (WebElement element : listOfItems)
			{
				String itemName = element.getText().trim();
				logger.info("Item Name : " + itemName);
				if (standardpo.getItems().getCatelogItems().get(0).getItemName().equalsIgnoreCase(itemName))
				{
					flag = true;
					break;
				}
				System.out.println("Flag : " + flag);
			}
			Assert.assertTrue("Items not added to po", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 207066 - [Demo issue]Warning
	 * missing to reset taxes at header while changing header level address in
	 * creating standard PO
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_191284(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		CommonServices.getTestData(IConstantsData.SUPPLIER_NAME);
		String taxType = CommonServices.getTestData(IConstantsData.TAX_TYPE);
		String taxName = CommonServices.getTestData(IConstantsData.TAX_NAME);
		String address = CommonServices.getTestData(IConstantsData.PO_MY_ADDRESS);
		String addressStreetName = "Automation_Street";
		int zipcode = 12345;
		String cityName = "Automation_City";
		String addressName = "Automation_Address_Name";
		StandardPO standardpo = new StandardPO();
		User user = null;
		boolean flag;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardpo.setNextAction(IConstantsData.NONE);

			FlowStandardPo.createStandardPo(driver, testCaseName, standardpo);
			PageStandardPO.fillTaxType(driver, testCaseName, taxType, 1);
			PageStandardPO.enterTaxName(driver, testCaseName, taxName, 1);
			ActionBot.scroll(driver, "-800");

			PageStandardPO.clickOnEdit(driver);
			TabPOSummary.clickOnDeliveryPOSummary(driver);
			ModalPOSummaryDelivery.clickOnMyAddress(driver, testCaseName);
			ModalPOSummaryDelivery.clickOnCreateNewAddress(driver, testCaseName);
			ModalPOSummaryDelivery.fillNewAddressName(driver, testCaseName, addressName);
			ModalPOSummaryDelivery.fillNewAddressStreetName(driver, testCaseName, addressStreetName);
			ModalPOSummaryDelivery.fillNewAddressPostalCode(driver, testCaseName, zipcode);
			ModalPOSummaryDelivery.selectCountryName(driver, testCaseName, 1);
			ModalPOSummaryDelivery.enterCityName(driver, testCaseName, cityName);
			ActionBot.click(driver, IModalPOSummaryDelivery.DELIVERY_MY_ADDRESS_SAVE_ADD);
			ActionBot.click(driver, IModalPOSummaryCostBooking.BUTTON_SAVE_PO_SUMMARY);

			ModalPOSummaryDelivery.clickONTaxCahneConfirmationYesBtn(driver, testCaseName);

			String poNo = FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			if (poNo != null)
				standardpo.setPoNumber(poNo);
			flag = FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("PO is not created", flag);

			PagePO.clickOnStandardPO(driver, testCaseName);
			PageStandardPO.clickOnEdit(driver);
			TabPOSummary.clickOnDeliveryPOSummary(driver);
			boolean deliveryAddress = PageStandardPO.isEditableDeliveryAddress(driver, address);
			Assert.assertTrue(deliveryAddress);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 207091 - [Demo issue]Unit
	 * price instead of market price should be seen on item modal on view PO
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_191297(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);

		StandardPO standardpo = new StandardPO();
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardpo.setNextAction(IConstantsData.NONE);
			standardpo = FlowStandardPo.createStandardPo(driver, testCaseName, standardpo);
			// fill discount amount
			PageStandardPO.clickOnModify(driver, testCaseName);
			ModalDiscountPO.clickOnItemLevelDiscount(driver, testCaseName);
			String type0 = "Amount";
			ModalDiscountPO.selectItemLevelDiscountType(driver, testCaseName, type0);
			int value1 = 50;
			ModalDiscountPO.enterItemLevelDiscountValue(driver, testCaseName, value1);
			ModalDiscountPO.clickOnItemLevelTotalDiscount(driver, testCaseName);
			ModalDiscountPO.clickOnSaveDiscount(driver, testCaseName);
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnItemName(driver, testCaseName);
			ActionBot.defaultSleep();
			boolean Mprice = ModalItemPoview.isMarketPriceValuePresents(driver);
			Assert.assertTrue(Mprice);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 219000 - Error in drop down
	 * list of "to" field while you email PO. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_247882(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		String to = CommonServices.getTestData(IConstantsData.TO_FIELD_VALUE_FOR_SENDING_PO_EMAIL);
		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			FlowPoListing.filterAllReleasedPO(driver, testCaseName);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnLinkEmailPo(driver, testCaseName);
			ModalEmailPODocument.fillEmailToField(driver, testCaseName, to);
			String addMailId = ModalEmailPODocument.getAddedMailid(driver, testCaseName);
			Assert.assertNotEquals("Type-aheade list not presents", to, addMailId);
			ModalEmailPODocument.clickOnCancelButton(driver, testCaseName);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 218678 - While creating a
	 * standard PO,payment terms is not removed when you remove Supplier name.
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_247888(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		String supplierName = null;
		User user = null;
		boolean flag;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			supplierName = CommonServices.getTestData(IConstantsData.SUPPLIER_NAME);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			PagePO.clickOnStandardPO(driver, testCaseName);
			PageStandardPO.enterSupplierName(driver, supplierName);
			String paymentTermsBefore = PageStandardPO.getPaymentTerms(driver, testCaseName);
			PageStandardPO.clearSupplierName(driver, testCaseName);
			PageStandardPO.fillOrderDescription(driver, testCaseName, CommonServices.getTestData(IConstantsData.ORDER_DESCRIPTION));
			String getpayment = PageStandardPO.getPaymentTerms(driver, testCaseName);
			flag = paymentTermsBefore.equalsIgnoreCase(getpayment);
			Assert.assertFalse("payment terms remains same after removing supplier", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 218678 - While creating a
	 * standard PO,currency type is not removed when you remove Supplier name.
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_296120(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		String supplierName = CommonServices.getTestData(IConstantsData.SUPPLIER_NAME);
		StandardPO standardPO = new StandardPO();
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			FlowPoListing.filterAllReleasedPO(driver, testCaseName);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOListingActions.clickOnCopyLink(driver, testCaseName);
			PageStandardPO.enterSupplierName(driver, supplierName);
			String currency = PageStandardPO.getCurrencyType(driver, testCaseName);
			Assert.assertNotNull(currency);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 209960 - Payment terms not
	 * getting copied when user copy PO.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_191548(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		//String paymentTerms = CommonServices.getTestData(IConstantsData.PAYMENT_TERMS_OTHER_SUPPLIER);
		StandardPO standardpo = new StandardPO();
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardpo = FlowStandardPo.createStandardPo(driver, testCaseName, standardpo);
			FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			// get payment terms
			String pTerms = PageStandardPO.getSupplierPaymentTerms(driver, testCaseName);
			logger.info("Payment term " + pTerms + " Standard PO payment terms " + standardpo.getPaymentTerms());
			boolean copiedPo = standardpo.getPaymentTerms().equalsIgnoreCase(pTerms);
			Assert.assertTrue("Payment term is not get copied when user copy the PO", copiedPo);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Amend PO; Item level discount should grid
	 * layout having the option of Item Name;Market Price; Quantity; Total Price
	 * Discount; Type Discount; Amount; Discounted Price.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_139468(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		StandardPO standardPO = new StandardPO();
		boolean flag = false;
		int rates;
		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);

			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			String itemPrice = PageStandardPO.getTotalItemPrice(driver, testCaseName).split("\\.")[0].replaceAll("[^0-9]", "");
			PageStandardPO.clickOnModifyLink(driver);
			ActionBot.defaultSleep();
			rates = CommonUtilities.getNonZeroRandomNumbers(2);
			String discount = PageStandardPO.fillDiscountField(driver, testCaseName, rates);

			Assert.assertNotNull("Discount field is not editable", discount);
			ModalDiscountPO.clickOnItemLevelDiscount(driver, testCaseName);
			ModalDiscountPO.selectItemLevelDiscountType(driver, testCaseName, IConstantsData.PERCENTAGE);
			ModalDiscountPO.enterItemLevelDiscountValue(driver, testCaseName, CommonUtilities.getNonZeroRandomNumbers(1));
			ModalDiscountPO.clickOnSaveDiscount(driver, testCaseName);
			PageStandardPO.clickOnModifyLink(driver);
			double discountedAmount = ModalDiscountPO.getItemLevelTotalDiscountAmount(driver, testCaseName);
			ModalDiscountPO.clickOnSaveDiscount(driver, testCaseName);
			// standard PO page
			double headerDiscount = ModalDiscountPO.getHeaderLevelTotalDiscountAmount(driver, testCaseName);
			flag = discountedAmount == headerDiscount;
			Assert.assertTrue("Item level discount is not reflected for discount type Percentage", flag);

			// fill discount amount
			PageStandardPO.clickOnModify(driver, testCaseName);
			ModalDiscountPO.clickOnItemLevelDiscount(driver, testCaseName);
			ModalDiscountPO.selectItemLevelDiscountType(driver, testCaseName, IConstantsData.AMOUNT);
			int discountValue = CommonUtilities.getRandomNumbersBetweenRange(2, 10, Integer.parseInt(itemPrice));
			ModalDiscountPO.enterItemLevelDiscountValue(driver, testCaseName, discountValue);
			ModalDiscountPO.clickOnSaveDiscount(driver, testCaseName);
			PageStandardPO.clickOnModify(driver, testCaseName);
			discountedAmount = ModalDiscountPO.getItemLevelTotalDiscountAmount(driver, testCaseName);
			ModalDiscountPO.clickOnSaveDiscount(driver, testCaseName);
			// standard PO page
			headerDiscount = ModalDiscountPO.getHeaderLevelTotalDiscountAmount(driver, testCaseName);
			flag = discountedAmount == headerDiscount;
			Assert.assertTrue("Item level discount is not reflected for discount type Amount", flag);

			// fill discount per item
			PageStandardPO.clickOnModify(driver, testCaseName);
			ModalDiscountPO.clickOnItemLevelDiscount(driver, testCaseName);
			ModalDiscountPO.selectItemLevelDiscountType(driver, testCaseName, IConstantsData.PER_ITEM);
			int perItemDiscount = Integer.parseInt(itemPrice) / standardPO.getItems().getCatelogItems().get(0).getQuantity();
			discountValue = CommonUtilities.getRandomNumbersBetweenRange(2, 10, perItemDiscount);
			ModalDiscountPO.enterItemLevelDiscountValue(driver, testCaseName, perItemDiscount);
			ModalDiscountPO.clickOnSaveDiscount(driver, testCaseName);
			PageStandardPO.clickOnModify(driver, testCaseName);
			discountedAmount = ModalDiscountPO.getItemLevelTotalDiscountAmount(driver, testCaseName);
			ModalDiscountPO.clickOnSaveDiscount(driver, testCaseName);
			headerDiscount = ModalDiscountPO.getHeaderLevelTotalDiscountAmount(driver, testCaseName);
			flag = discountedAmount == headerDiscount;
			Assert.assertTrue("Item level discount is not reflected for discount type PerItem", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Item search result : User should be able
	 * to search by manufacturer
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_77036(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		String addItemsToPOfield = CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING);
		String manufacturerName = IConstantsData.NONE;

		CommonServices.startTestCase(driver, testCase);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			ActionBot.defaultSleep();
			PagePO.clickOnStandardPO(driver, testCaseName);
			ActionBot.scroll(driver, "500");
			ActionBot.defaultSleep();
			PageStandardPO.clickOnSearchItem(driver);
			ActionBot.defaultSleep();
			PageStandardPO.fillAddItemsToPOField(driver, addItemsToPOfield);
			ActionBot.defaultSleep();
			PageStandardPO.clickOnSearch(driver);
			ActionBot.scroll(driver);
			PageStandardPO.fillSearchByManufacturerName(driver, manufacturerName);
			ActionBot.defaultSleep();

			PageStandardPO.clickOnIstRowManufacturer(driver);
			boolean manName = manufacturerName.equalsIgnoreCase(PageStandardPO.getIstRowManufacturerName(driver, testCaseName));
			Assert.assertTrue(manName);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 210064 - Always applicable
	 * taxes on std PO are incorrectly added/deleted in below scenario
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_191725(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		{
			// : testcase to be mapped
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_192306"));

		}
		CommonServices.startTestCase(driver, testCase, mappedTestCases);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			PagePO.clickOnStandardPO(driver, testCaseName);
			ActionBot.scroll(driver);
			PageStandardPO.clickOnAddSimpleTax(driver, testCaseName, 2);
			PageStandardPO.clickOnRemoveTaxBtn(driver, 2);
			ActionBot.defaultSleep();
			PageStandardPO.clickOnRemoveAllTaxesOption(driver, testCaseName);
			boolean removalbtn = PageStandardPO.isRemovalTaxBtnPresent(driver, testCaseName, 1);
			Assert.assertFalse(removalbtn);
			mappedTestCases.get(0).setTestResult(!removalbtn);
			boolean removeTax = PageStandardPO.isRemovalTaxLinkPresent(driver, testCaseName);

			Assert.assertTrue("Remove all tax link not present", removeTax);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 204066 - Buyer unable to
	 * change cost center to header when user copy PO which is from requisition
	 * having cost center split at item level.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_193213(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<CostCenterSplitInfo> centerSplitInfos = new ArrayList<CostCenterSplitInfo>();
		Map<String, String> cc_budget_project;
		User user = null;
		boolean flag;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			Requisition requisition = ObjectCreation.getRequisition(driver);
			cc_budget_project = ObjectCreation.getOtherCostCenterProjectAndBudget();
			Item item = ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);

			requisition.setItems(item);
			CostBookingRequisitionSummary costBookingRequisitionSummary = new CostBookingRequisitionSummary();
			// to set CC split at item level
			requisition.getCostBookingRequisitionSummary().setBookCostToSingleCostCenter(false);
			requisition.getCostBookingRequisitionSummary().setSplitCostAtLineItemLevel(true);
			costBookingRequisitionSummary.setNextAction(IConstantsData.SAVE);
			CostBookingItemSummary costBookingItemSummary = new CostBookingItemSummary();
			costBookingItemSummary.setSplitCostCenterAtItemLevel(true);
			costBookingItemSummary.setSplitCostCenterAtItemLevel_percentage(true);
			CostCenterSplitInfo centerSplitInfo1 = new CostCenterSplitInfo();
			centerSplitInfo1.setCostCenter(cc_budget_project.get(IConstantsData.costCenter));
			centerSplitInfo1.setBudget(cc_budget_project.get(IConstantsData.budget));
			centerSplitInfo1.setProject(cc_budget_project.get(IConstantsData.project));
			centerSplitInfo1.setPercentage(100);
			AccountingItemSummary accountingItemSummary = ObjectCreation.getDefaultObjectOfAccounting();
			costBookingItemSummary.setAccountingItemSummary(accountingItemSummary);
			costBookingItemSummary.setNextAction(IConstantsData.SAVE);
			centerSplitInfos.add(centerSplitInfo1);
			costBookingItemSummary.setCostCenterSplitInfo(centerSplitInfos);
			//costBookingItemSummary.setNextAction(IConstantsData.NONE);
			requisition.setCostBookingItemSummary(costBookingItemSummary);

			requisition = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			FlowBuyersDesk.convertToPo(driver, testCaseName);
			List<PurchaseOrder> purchaseOrders = FlowBuyersDesk.submitAllSuggestedPosForProcessing(driver, testCaseName);
			//			// Fill Req Change Comment
			//			PageBuyersDesk.fillReqChangeComment(driver, testCaseName, IConstantsData.REC_CHANGE_COMM);
			//
			//			PageBuyersDesk.clickOnConvertToPo(driver, testCaseName);
			//
			//			PagePurchaseOrderToBeGenerated.ClikOnPurchaseOrderToBeGeneratedCheckBox(driver, testCaseName, 0);
			//
			//			// PagePurchaseOrderToBeGenerated.ClikOnPurchaseOrderToBeGeneratedCheckBox(driver,
			//			// testCaseName, 1);
			//
			//			PagePurchaseOrderToBeGenerated.clickOnSubmitPoForProcessing(driver, testCaseName);

			FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			ModalPOFreeTextItemSummaryCostAllocation.clickOnCostBooking(driver, testCaseName);
			String itemlevelCDetails = ModalItemSummaryCostBooking.getItemlevelCostingdetails(driver);
			String itemLevelBudgetDetails = ModalItemSummaryCostBooking.getItemlevelBudgetdetails(driver);
			flag = itemlevelCDetails.toLowerCase().contains(centerSplitInfo1.getCostCenter().toLowerCase().split("\\:")[1].trim());
			Assert.assertTrue("ItemCDetails are not equal itemlevelCDetails :" + itemlevelCDetails + "expected :" + centerSplitInfo1.getCostCenter(), flag);
			flag = itemLevelBudgetDetails.toLowerCase().contains(centerSplitInfo1.getBudget().toLowerCase().split("\\:")[1].trim());
			Assert.assertTrue("itemLevelBudgetDetails are not same itemLevelBudgetDetails :" + itemLevelBudgetDetails + "expected" + centerSplitInfo1.getBudget(), flag);
			ModalPOFreeTextItemSummaryItem.clickOnCancelBtnItemSummary(driver, testCaseName);
			PageStandardPO.clickOnEdit(driver);
			TabPOSummary.clickOnCostBookingPOSummary(driver);
			String costbookingdetails = ModalPOSummaryCostBooking.getHeaderLevelCostingDetails(driver, testCaseName);
			String budgetDetails = ModalPOSummaryCostBooking.getHeaderLevelBudgetDetails(driver, testCaseName);
			flag = costbookingdetails.toLowerCase().contains(centerSplitInfo1.getCostCenter().toLowerCase().split("\\:")[1].trim());
			Assert.assertTrue("costing Details are unequal costbookingdetails :" + costbookingdetails + "expected :" + centerSplitInfo1.getCostCenter(), flag);
			flag = budgetDetails.toLowerCase().contains(centerSplitInfo1.getBudget().toLowerCase().split("\\:")[1].trim());
			Assert.assertTrue("CostBooking budget details are unequal budgetDetails :" + budgetDetails + "expected :" + centerSplitInfo1.getBudget(), flag);
			flag = ModalPOSummaryCostBooking.isRadioBottonSingleCostCenterEnable(driver, testCaseName);
			Assert.assertTrue("unable to switch to header level", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 195370 - When amended a PO
	 * whose delivery is in past, delivery date not getting updated even after
	 * submit.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_75194(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		StandardPO standardPO = new StandardPO();
		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			PurchaseOrder purchaseOrder = new PurchaseOrder();
			purchaseOrder.setCustomDate(CommonUtilities.getRequiredBy());
			String deliveryDate = PageStandardPO.fillRequiredByDate(driver, testCaseName, purchaseOrder.getCustomDate().getDay(), purchaseOrder.getCustomDate().getMonth(),
				purchaseOrder.getCustomDate().getYear());
			PageStandardPO.clickOnRequireReceiptChkbox(driver);
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			boolean updatedDate = deliveryDate.equalsIgnoreCase(PageViewPurchaseOrder.getDeliveryDateUnderDeliverySection(driver, testCaseName));
			Assert.assertTrue(updatedDate);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 195370 - When amended a PO
	 * whose delivery is in past, delivery date not getting updated even after
	 * submit.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_275820(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		StandardPO standardPO = new StandardPO();
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			PurchaseOrder purchaseOrder = new PurchaseOrder();
			purchaseOrder.setCustomDate(CommonUtilities.getRequiredBy());
			String deliveryDate = PageStandardPO.fillRequiredByDate(driver, testCaseName, purchaseOrder.getCustomDate().getDay(), purchaseOrder.getCustomDate().getMonth(),
				purchaseOrder.getCustomDate().getYear());
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			boolean updatedDate = deliveryDate.equalsIgnoreCase(PageViewPurchaseOrder.getDeliveryDateUnderDeliverySection(driver, testCaseName));
			Assert.assertTrue(updatedDate);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 214751 - [DEMO]: Error 500 is
	 * displayed on searching PO in PO listing
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_246933(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		StandardPO standardPO = new StandardPO();
		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO.setNextAction(IConstantsData.SAVE_PO_AS_DRAFT);
			standardPO = FlowStandardPo.createStandardPo(driver, testCaseName, standardPO);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			PoStatusFilter poStatusFilter = new PoStatusFilter();
			poStatusFilter.setDraftFilter(true);
			FlowPoListing.applyPoStatusFilter(driver, testCaseName, poStatusFilter);
			String status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			boolean flag = status.equalsIgnoreCase(IConstantsData.DRAFT_FILTER_LABEL);
			Assert.assertTrue("The status of PO is not Draft after applying filter", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 231807 - Error 500 thrown on
	 * viewing draft PO having buyer field blank .
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_307591(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		StandardPO standardpo = new StandardPO();
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardpo.setBuyer(null);
			standardpo.setNextAction(IConstantsData.SAVE_PO_AS_DRAFT);
			standardpo = FlowStandardPo.createStandardPo(driver, testCaseName, standardpo);
			FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			String status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			boolean flag = status.equalsIgnoreCase(IConstantsData.DRAFT_FILTER_LABEL);
			Assert.assertTrue(flag);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 231519 - Error 500 thrown on
	 * canceling a PO . <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_307416(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		StandardPO standardpo = new StandardPO();
		String closeComment = CommonServices.getTestData(IConstantsData.CONVERT_TO_PO_COMMENT);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardpo = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardpo);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnClosePOFromActions(driver, testCaseName);
			ModalClosePO.fillCloseComment(driver, testCaseName, closeComment);
			ModalClosePO.clickOnClosePO(driver, testCaseName);
			String status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			boolean flag = status.equalsIgnoreCase(IConstantsData.CLOSE);
			Assert.assertFalse(flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 228592 - Searching 'temp'
	 * word in PO number field and keeping Type as Blanket or Release in PO
	 * listing leads to script error. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_301130(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		//StandardPO standardpo = new StandardPO();
		BPO bpo = new BPO();
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			//	standardpo.setNextAction(IConstantsData.NONE);
			bpo = ObjectCreation.getBPOCreation(IConstantsData.CATALOG_ITEM);
			bpo.setNextAction(IConstantsData.NONE);
			// FlowStandardPo.createStandardPo(driver, testCaseName, standardpo);

			FlowBPO.createBPO(driver, testCaseName, bpo);
			String poNo = "tempPO_" + CommonUtilities.getNonZeroRandomNumbers(7);
			PageStandardPO.clearAndfillPoNo(driver, poNo);
			bpo.setNextAction(IConstantsData.SUBMIT_PO_FOR_PROCESSING);
			bpo.setPoNumber(poNo);
			//standardpo.setNextAction(IConstantsData.SUBMIT_PO_FOR_PROCESSING);
			ActionBot.defaultSleep();
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			FlowPoListing.searchPo(driver, testCaseName, bpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			String pageViewpoNo = PageViewPurchaseOrder.getViewPONo(driver, testCaseName);
			boolean temp = poNo.equalsIgnoreCase(pageViewpoNo);
			Assert.assertTrue(temp);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 205948 - Total discount of
	 * item level is not displayed on print template. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_178279(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		StandardPO standardpo = new StandardPO();
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardpo.setNextAction(IConstantsData.NONE);
			standardpo = FlowStandardPo.createStandardPo(driver, testCaseName, standardpo);
			PageStandardPO.clickOnModifyLink(driver);
			ModalDiscountPO.clickOnItemLevelDiscount(driver, testCaseName);
			String type = IConstantsData.PERCENTAGE;
			ModalDiscountPO.selectItemLevelDiscountType(driver, testCaseName, type);
			int value = 50;
			ModalDiscountPO.enterItemLevelDiscountValue(driver, testCaseName, value);
			ModalDiscountPO.clickOnItemLevelTotalDiscount(driver, testCaseName);
			ModalDiscountPO.clickOnSaveDiscount(driver, testCaseName);
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			ActionBot.scroll(driver);
			String tDiscount = PageViewPurchaseOrder.getTotalItemLevelDiscount(driver, testCaseName);
			boolean flag = (tDiscount != null) ? true : false;
			Assert.assertTrue(flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 205348 - User allowed to
	 * decrease market price in amend screen after creating invoice of that
	 * item.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_163198(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		StandardPO standardpo = new StandardPO();
		Invoice invoice = new Invoice();
		User user = null;
		boolean flag;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.GUIDED_ITEM);
			standardpo = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardpo);
			FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnCreateInvoiceButton(driver, testCaseName);
			invoice = ObjectCreation.getDefaultFlipInvoiceObject();
			invoice = FlowFlipInvoice.createFlipInvoice(driver, testCaseName, invoice);
			FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			flag = FlowPoListing.getInvocieIconStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.FULLY_INVOICED);
			Assert.assertTrue("Invoice is not created", flag);

			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			PopUpAlertAmmendedPO.clickOnContinueButton(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			ActionBot.jQueryScroll(driver, ".eformItemInpt.ui-front", 600);
			float marketPrice = standardpo.getItems().getGuidedItems().get(0).getPrice();
			float editedMarketPrice = CommonUtilities.getRandomNumbersBetweenRange(2, 10, marketPrice);
			ModalPOFreeTextItemSummaryItem.fillMarketPrice(driver, testCaseName, editedMarketPrice);
			ModalPOFreeTextItemSummaryItem.clickOnSave(driver, testCaseName);
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			flag = FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("PO is not ammended", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 207001 - PO number is not
	 * generated automatically when user create Draft PO from buyers desk though
	 * "Allow editing auto-generated PO Number:" setting is YES.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_181619(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		new StandardPO();
		boolean flag;
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);
			PagePurchaseOrderSetting.clickOnAllowEditingAutoGeneratedPONumber_Yes(driver, testCaseName);
			String format = PagePurchaseOrderSetting.getPONumberFormat(driver, testCaseName);
			ActionBot.defaultSleep();
			PagePurchaseOrderSetting.clickOnSaveButton(driver, testCaseName);
			// create a draft Po From buyer desk
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			Requisition requisition = ObjectCreation.getRequisition(driver);

			Item item = ObjectCreation.getItem("guidedItem");

			requisition.setItems(item);
			CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);
			// convert To Po
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			PageBuyersDesk.clickOnConvertToPo(driver, testCaseName);
			ActionBot.defaultSleep();
			PagePurchaseOrderToBeGenerated.ClikOnPurchaseOrderToBeGeneratedCheckBox(driver, testCaseName, 0);
			PagePurchaseOrderToBeGenerated.clickOnSavePosAsDraft(driver, testCaseName);
			String status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			flag = status.equalsIgnoreCase(IConstantsData.DRAFT_FILTER_LABEL);
			Assert.assertTrue(flag);
			PoStatusFilter poStatusFilter = new PoStatusFilter();
			poStatusFilter.setDraftFilter(true);
			FlowPoListing.applyPoStatusFilter(driver, testCaseName, poStatusFilter);
			// click On first po no
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			boolean ponoformt = format.equalsIgnoreCase(PageStandardPO.getPONo(driver, testCaseName));
			Assert.assertTrue(!ponoformt);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 223278 - On changing the
	 * currency in PO, previous currency is displayed in budget and project
	 * tooltip
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_276043(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		StandardPO standardpo = new StandardPO();
		String changedCurrency = CommonServices.getTestData(IConstantsData.CHANGED_CURRENCY);
		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_205035"));
			}
			standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardpo.setNextAction(IConstantsData.NONE);
			FlowStandardPo.createStandardPo(driver, testCaseName, standardpo);
			PageStandardPO.changeCurrencyOfSupplier(driver, testCaseName, changedCurrency);
			ModalChangeCurrencyPO.clickOnConvertAmountsToCurrencyType(driver, testCaseName);
			String getcrncy = PageStandardPO.getChangeCurrency(driver, testCaseName);
			boolean verifycurrency = getcrncy.toLowerCase().contains(changedCurrency.toLowerCase());
			Assert.assertTrue("previous currency is displayed", verifycurrency);
			// RTC_205035 starts here
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			ModalItemSummaryCostAllocation.clickOnCostBooking(driver);
			String glAccount = ModalItemSummaryCostAllocation.fillGLAccount(driver, null);
			Assert.assertNotNull("Gl account is not filled", glAccount);
			mappedTestCases.get(0).setTestResult(true);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 226760 - Error is not shown
	 * when user submits PO without selecting tax type in following scenario .
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_294151(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		StandardPO standardpo = new StandardPO();
		String zycustax = CommonServices.getTestData(IConstantsData.BUYER_NAME);
		String zycustaxs = CommonServices.getTestData(IConstantsData.DIFF_TAX_TYPE);
		String zycustaxsq = CommonServices.getTestData(IConstantsData.COUNTY);
		String taxType = CommonServices.getTestData(IConstantsData.DIFF_TAX_TYPE);
		String TaxName = CommonServices.getTestData(IConstantsData.TASK_NAME);
		CommonServices.getTestData(IConstantsData.TAX_TYPE);
		int code = CommonUtilities.getNonZeroRandomNumbers(12);
		int Rate = CommonUtilities.getNonZeroRandomNumbers(5);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			MainPageHeaderLevelTab.clickOnSetUpTab(driver);
			MainPageHeaderLevelTab.clickOnMasterSubTab(driver);
			PageMasterDataSettings.clickOnTaxRatesLink(driver, testCaseName);
			PageTaxRatesMasterDataSettings.clickOnAddTaxRate(driver, testCaseName);
			PageTaxRatesMasterDataSettings.fillNameTaxRate(driver, testCaseName, zycustax);
			PageTaxRatesMasterDataSettings.fillTaxType(driver, testCaseName, zycustaxs);
			PageTaxRatesMasterDataSettings.fillCountry(driver, testCaseName, zycustaxsq);
			PageTaxRatesMasterDataSettings.fillUniqueCode(driver, testCaseName, code);
			PageTaxRatesMasterDataSettings.fillTaxRate(driver, testCaseName, Rate);
			PageTaxRatesMasterDataSettings.clickOnAddTaxRateBtn(driver, testCaseName);
			standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.GUIDED_ITEM);
			standardpo = FlowStandardPo.createStandardPo(driver, testCaseName, standardpo);
			PageStandardPO.selectTaxType(driver, testCaseName, taxType, 3);
			PageStandardPO.enterTaxName(driver, testCaseName, TaxName, 3);
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			boolean flag = FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			assertTrue("Error while searching PO", flag);

			String status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			if (status.equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL))
			{
				MainPageHeaderLevelTab.clickOnApprovalAllRequestsTab(driver);
				// to approve the PO
				ApprovalAllRequests approvalAllRequests = new ApprovalAllRequests();
				approvalAllRequests.setDocumentNo(standardpo.getPoNumber());
				approvalAllRequests.setActions(IConstantsData.APPROVE);
				approvalAllRequests.setComment(IConstantsData.APPROVE_COMMENT);
				approvalAllRequests.setDocumentType(IConstantsData.PURCHASE_ORDER);
				FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

				ActionBot.defaultSleep();
				ActionBot.defaultHighSleep();
				driver.navigate().refresh();
				driver.navigate().refresh();
				// search po
				flag = FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
				assertTrue("Error while searching PO", flag);
			}
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			PageCustomizeSettings.clickOnMasterDataLink(driver, testCaseName);

			FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOListingActions.clickOnCopyLink(driver, testCaseName);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 227348 - PO currency is
	 * getting changed on editing PO in following scenario .
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_295238(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		StandardPO standardpo = new StandardPO();
		String changedCurrency = CommonServices.getTestData(IConstantsData.CHANGED_CURRENCY);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.GUIDED_ITEM);
			standardpo.setNextAction(IConstantsData.SAVE_PO_AS_DRAFT);
			standardpo.setCurrencyType(changedCurrency);
			standardpo = FlowStandardPo.createStandardPo(driver, testCaseName, standardpo);
			FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			boolean currency = changedCurrency.equalsIgnoreCase(PageStandardPO.getCurrencyType(driver, testCaseName));
			Assert.assertTrue(currency);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 225968 - Auto PO is not
	 * getting generated even when all details are present in requisition . <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_293132(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);

		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click on customize settings
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);
			PageCustomizeSettings.clickOnAllowEditAutogeneratedSettingsYes(driver, testCaseName);
			PageCustomizeSettings.clickOnSaveButtom(driver, testCaseName);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			Requisition requisition = ObjectCreation.getRequisition(driver);

			Item item = ObjectCreation.getItem("catalogItem");

			CommonUtilities.getNonZeroRandomNumbers(2);

			/*
			 * CatelogItem catelogItem2 = new CatelogItem();
			 * catelogItem2.setItemName(CommonServices.getTestData(
			 * IConstantsData.SEARCH_FOR)); catelogItem2.setQuantity(quantity);
			 * 
			 * item.getCatelogItems().add(catelogItem2);
			 */
			requisition.setItems(item);

			/*
			 * DeliveryRequisitionSummary deliveryRequisitionSummary = new
			 * DeliveryRequisitionSummary();
			 * deliveryRequisitionSummary.setMyAddressOption(true);
			 * deliveryRequisitionSummary.setMyAddress_Name("");
			 * deliveryRequisitionSummary.setMyAddress_city("");
			 * 
			 * requisition.setDeliveryRequisitionSummary(
			 * deliveryRequisitionSummary);
			 */

			CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);
			MainPageHeaderLevelTab.clickOnCustomizeSubTab(driver);
			// click On purchase order link
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);
			ActionBot.defaultSleep();
			ActionBot.scroll(driver);
			// make Auto generated po setting No
			PagePurchaseOrderSetting.clickOnAutomaticallyGeneratePO_No(driver, testCaseName);
			PagePurchaseOrderSetting.clickOnSaveButton(driver, testCaseName);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			MainPageHeaderLevelTab.clickOnCustomizeSubTab(driver);
			// click On purchase order link
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);
			ActionBot.defaultSleep();
			ActionBot.scroll(driver);
			// make Auto generated po setting No
			PagePurchaseOrderSetting.clickOnAutomaticallyGeneratePO_No(driver, testCaseName);
			PagePurchaseOrderSetting.clickOnSaveButton(driver, testCaseName);
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 207171 - Accounting error
	 * displayed on item edit popup on PO edit screen when buyer enter
	 * accounting using change multiple on buyer desk and then save that PO in
	 * draft.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_183981(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		String glaccount = CommonServices.getTestData(IConstantsData.GL_ACCOUNT);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click on customize settings
			Requisition requisition = ObjectCreation.getRequisition(driver);

			Item item = ObjectCreation.getItem("catalogItem");

			CommonUtilities.getNonZeroRandomNumbers(2);

			requisition.setItems(item);

			CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			PageBuyersDesk.clickItemCheckbox(driver, testCaseName);
			PageBuyersDesk.clickOnUpdateAllLink(driver, testCaseName);
			PageBuyersDesk.fillGLAccount(driver, testCaseName, glaccount);
			PageBuyersDesk.clickOnApplyallLink(driver, testCaseName);
			PageBuyersDesk.fillReqChangeComment(driver, testCaseName, IConstantsData.CONVERT_TO_PO_COMMENT);
			PageBuyersDesk.clickOnConvertToPo(driver, testCaseName);
			//FlowBuyersDesk.convertToPo(driver, testCaseName);
			PagePurchaseOrderToBeGenerated.ClikOnPurchaseOrderToBeGeneratedCheckBox(driver, testCaseName, 0);
			PurchaseOrder purchaseOrder = new PurchaseOrder();
			PagePurchaseOrderToBeGenerated.clickOnSavePosAsDraft(driver, testCaseName);
			FlowPoListing.searchPo(driver, testCaseName, requisition.getReqNo(), IConstantsData.SEARCH_BY_ORDER_DESCRIPTION);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			purchaseOrder.setPoNo(PageStandardPO.getPONo(driver, testCaseName));
			ActionBot.scroll(driver, "600");
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			ModalPOFreeTextItemSummaryCostAllocation.clickOnCostBooking(driver, testCaseName);
			ActionBot.defaultSleep();

			ModalPOItemSummaryCostAllocation.clickOnSave(driver, testCaseName);
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);

			boolean flag = FlowPoListing.searchPo(driver, testCaseName, purchaseOrder.getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue(flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 195163 - Updated PO review
	 * not shown when reviewed after first time.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_73359(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click on customize settings
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			FlowPoListing.filterAllReleasedPO(driver, testCaseName);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnAmendPOFromActions(driver, testCaseName);
			PurchaseOrder purchaseOrder = new PurchaseOrder();
			purchaseOrder.setCustomDate(CommonUtilities.getRequiredBy());
			PageStandardPO.fillRequiredByDate(driver, testCaseName, purchaseOrder.getCustomDate().getDay(), purchaseOrder.getCustomDate().getMonth(),
				purchaseOrder.getCustomDate().getYear());
			PageStandardPO.clickOnRequireReceiptChkbox(driver);
			PageStandardPO.clickOnReViewPoLink(driver);
			String winHandlerBefore = driver.getWindowHandle();
			Set<String> winHandler = driver.getWindowHandles();
			for (String handler : winHandler)
			{
				driver.switchTo().window(handler);
			}

			driver.manage().window().maximize();
			driver.switchTo().window(winHandlerBefore);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 226763 - Document not found
	 * error is displayed when user viewed approved PO request from In Approval
	 * tab. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_294153(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();

		boolean flag;
		CommonServices.getTestData(IConstantsData.REJECT_COMMENT);
		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			// click on customize settings
			Requisition requisition = ObjectCreation.getRequisition(driver);

			Item item = ObjectCreation.getItem(IConstantsData.GUIDED_ITEM);

			requisition.setItems(item);
			requisition = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);
			// convert To Po
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			FlowBuyersDesk.convertToPo(driver, testCaseName);
			FlowBuyersDesk.saveAllSuggestedPosAsDraft(driver, testCaseName);

			FlowPoListing.searchPo(driver, testCaseName, requisition.getReqNo(), IConstantsData.SEARCH_BY_ORDER_DESCRIPTION);
			PurchaseOrder purchaseOrder1 = new PurchaseOrder();
			purchaseOrder1.setPoNo(PagePurchaseOrderListing.getFirstPoNo(driver, testCaseName));
			String status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			flag = status.equalsIgnoreCase(IConstantsData.DRAFT_FILTER_LABEL);
			Assert.assertTrue("PO is not in draft state", flag);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOListingActions.clickOnDeleteLink(driver, testCaseName);
			PopUpDefaultConfirmation.clickOnConfirmYesButton(driver, testCaseName);
			// ModalClosePO.clickOnClosePO(driver, testCaseName);
			ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, purchaseOrder1.getPoNo(), IConstantsData.PURCHASE_ORDER,
				IConstantsData.APPROVE);
			//approvalAllRequests.setDocumentNo(purchaseOrder1.getPoNo());
			//approvalAllRequests.setActions(IConstantsData.APPROVE);
			//approvalAllRequests.setComment(IConstantsData.APPROVE_COMMENT);
			//approvalAllRequests.setDocumentType(IConstantsData.PURCHASE_ORDER);
			FlowAllRequestsApproval.searchInAllRequestsApprovalTab(driver, testCaseName, approvalAllRequests);
			flag = PageAllRequestsApproval.isNoDataRecordsMessageDisplayed(driver, testCaseName);
			Assert.assertTrue("PO is still present even after deletion", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * o <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Draft PO >> If Buyer delete Draft PO (req
	 * to PO); then alll items in PO should be free to re-order. </b> </font>
	 * <b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_145110(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		boolean flag;
		String status;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			Requisition requisition = ObjectCreation.getRequisition(driver);

			Item item = ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);

			requisition.setItems(item);

			requisition = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			// click on first ReqNo link
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			FlowBuyersDesk.convertToPo(driver, testCaseName);

			PagePurchaseOrderToBeGenerated.ClikOnPurchaseOrderToBeGeneratedCheckBox(driver, testCaseName, 0);

			PagePurchaseOrderToBeGenerated.clickOnSavePosAsDraft(driver, testCaseName);
			FlowPoListing.searchPo(driver, testCaseName, requisition.getReqNo(), IConstantsData.SEARCH_BY_ORDER_DESCRIPTION);
			status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			flag = status.equalsIgnoreCase(IConstantsData.DRAFT_FILTER_LABEL);
			Assert.assertTrue("PO is not in draft state", flag);
			FlowPoListing.deleteDraft(driver, testCaseName);
			// Purchase Order Object Creation
			// For first Item
			ActionBot.defaultSleep();
			FlowBuyersDeskListing.searchAtBuyersDeskListing(driver, testCaseName, requisition);
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			FlowBuyersDesk.convertToPo(driver, testCaseName);
			FlowBuyersDesk.submitAllSuggestedPosForProcessing(driver, testCaseName);
			flag = FlowPoListing.searchPo(driver, testCaseName, requisition.getReqNo(), IConstantsData.SEARCH_BY_ORDER_DESCRIPTION);
			Assert.assertTrue("PO with same items is not created", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * o <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Verify on adding items to a draft PO from
	 * requisition, if supplier address of the items are different, pop up containing Item selected is from another
	 * supplier or currencies do not match should come<br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_230044(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();

		User user = null;
		boolean flag;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			Requisition requisition = ObjectCreation.getRequisition(driver);

			Item item = ObjectCreation.getItem(IConstantsData.GUIDED_ITEM);
			item.getGuidedItems().get(0).setSupplierNameInSuppInfo(CommonServices.getTestData(IConstantsData.OTHER_SUPPLIER_NAME));

			requisition.setItems(item);

			requisition = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			// click on first ReqNo link
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			ActionBot.scroll(driver, "450");
			FlowBuyersDesk.convertToPo(driver, testCaseName);

			FlowBuyersDesk.saveAllSuggestedPosAsDraft(driver, testCaseName);

			FlowPoListing.searchPo(driver, testCaseName, requisition.getReqNo(), IConstantsData.SEARCH_BY_ORDER_DESCRIPTION);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			ActionBot.defaultSleep();
			Item items = ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);
			//add item
			PageStandardPO.clickOnSearchItem(driver);
			FlowStandardPo.searchItem(driver, testCaseName, items.getCatelogItems().get(0));
			ActionBot.scroll(driver, "200");
			ActionBot.defaultSleep();
			PageStandardPO.enterQuantityOfItem(driver, testCaseName, items.getCatelogItems().get(0).getQuantity());
			PageStandardPO.clickOnAdd(driver, 1);
			//To check pop up is present or not as item is of other supplier
			flag = PopUpDefaultConfirmation.isConfirmYesButtonPresent(driver, testCaseName);
			Assert.assertTrue("POP up with different suppler warning is not present ", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * o <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Edit PO; If user changes currency/Supplier
	 * then it should reflect at all places at PO header; CC at Header in
	 * Qtip;CC at item level; price in item grid/item details
	 * modal;accounting;Taxes at item; taxes at item; discount at header/item;in
	 * freight; in delivery split; market price; unit price; PO gross total; PO
	 * Net Total.<br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_139362(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		StandardPO standardPO = new StandardPO();
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			String taxType = CommonServices.getTestData(IConstantsData.TAX_TYPE, 1);
			String taxName = CommonServices.getTestData(IConstantsData.TAX_NAME);
			String changedCurrency = CommonServices.getTestData(IConstantsData.CHANGED_CURRENCY);

			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createStandardPo(driver, testCaseName, standardPO);

			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);

			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			ActionBot.scroll(driver, "550");
			PageStandardPO.fillTaxType(driver, testCaseName, taxType, 1);
			PageStandardPO.enterTaxName(driver, testCaseName, taxName, 1);
			ActionBot.scroll(driver, "-450");
			PageStandardPO.changeCurrencyOfSupplier(driver, testCaseName, changedCurrency);
			ModalChangeCurrencyPO.clickOnConvertAmountsToCurrencyType(driver, testCaseName);
			//ActionBot.defaultHighSleep();
			ActionBot.scroll(driver, "400");
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			String currency = ModalPOFreeTextItemSummaryItem.getChangeCurrency(driver, testCaseName);
			boolean flag = changedCurrency.equalsIgnoreCase(currency);
			Assert.assertTrue("unable to update currency in item market price", flag);
			//ActionBot.defaultSleep();
			ModalItemSummaryTax.clickOnTaxesTab(driver, testCaseName);
			String taxCurrency = ModalItemSummaryTax.getCurrencyType(driver, testCaseName);
			Assert.assertEquals("unable to update currency in item market price", changedCurrency, taxCurrency);
			ModalPOFreeTextItemSummaryItem.clickOnCancelBtnItemSummary(driver, testCaseName);
			String FreightCurrency = PageStandardPO.getFreightCurrency(driver, testCaseName);
			Assert.assertEquals("Unable to update Freight Currency", changedCurrency, FreightCurrency);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * o <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Contract Number >> If user add Catalog
	 * item in PO and Contract number is already present for that item then it
	 * should not get overwrite with Header level contract Number of PO.<br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_145038(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		int contractNo = CommonUtilities.getNonZeroRandomNumbers(3);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);

			StandardPO standardPO = new StandardPO();
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO.setNextAction(IConstantsData.NONE);
			FlowStandardPo.createStandardPo(driver, testCaseName, standardPO);
			PageStandardPO.enterContractNo(driver, contractNo);
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			ModalItemSummaryItem.getModalItemContractNo(driver);
			ModalPOFreeTextItemSummaryItem.clickOnCancelBtnItemSummary(driver, testCaseName);
			// int headerCno = PageStandardPO.getContractNo(driver,
			// testCaseName);
			// Assert.assertEquals(contractNo, headerCno);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * o <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Verify Allow creating a free text zero
	 * price item in manual PO-Verify imapct on receipt.<br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_107325(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		Receipt receipt = new Receipt();
		User user = null;
		boolean flag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			StandardPO standardPO = new StandardPO();
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.GUIDED_ITEM);
			standardPO.getItems().getGuidedItems().get(0).setZeroPriceItem(true);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			receipt = ObjectCreation.getDefaultReceiptObject();
			PagePurchaseOrderListing.clickOnPoActionsLink(driver, testCaseName);
			ModalPOListingActions.clickOnCreateReceiptLink(driver, testCaseName);

			// fill receipt form
			receipt.setReceiptComment(PageCreateReceipt.fillReceiptComments(driver, testCaseName, receipt.getReceiptComment()));
			PageCreateReceipt.clickOnSelectAllReceiptItems(driver, testCaseName);
			if (receipt.getNextAction().equalsIgnoreCase(IConstantsData.SUBMIT_INVOICE))
			{
				FlowReceipt.submitReceipt(driver, testCaseName);
			}
			receipt.setReceiptNo(PageReceiptListing.getFirstReceiptNo(driver, testCaseName));
			receipt.setStatus(PageReceiptListing.getFirstReceiptStatus(driver, testCaseName));

			flag = receipt.getStatus().equalsIgnoreCase(IConstantsData.CONFIRMED_STATUS);
			Assert.assertTrue("Receipt is not created against PO", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * o <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 202003 - Unable to add
	 * catalog item in PO which contains large parametric data.<br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_134484(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();

		User user = null;
		boolean flag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			StandardPO standardPO = new StandardPO();
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			//add the catalog item with large parametric data
			standardPO.getItems().getCatelogItems().get(0).setItemName(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 2));
			standardPO.setNextAction(IConstantsData.NONE);
			FlowStandardPo.createStandardPo(driver, testCaseName, standardPO);
			//check item added or not
			List<WebElement> items = PageStandardPO.getListOfItems(driver, testCaseName);
			for (WebElement item : items)
			{
				if (item.getText().equalsIgnoreCase(standardPO.getItems().getCatelogItems().get(0).getItemName()))
				{
					flag = true;
					break;
				}
			}
			Assert.assertTrue("unable to add catalog Item with large paramaetric data", flag);
			String poNo = FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			if (poNo != null)
				standardPO.setPoNumber(poNo);
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("PO with catalog item having large parametric data is not created", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * o <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Item price and total price calculation
	 * should change accordingly when supplier is changed for po after adding
	 * items.<br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_77024(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		String changedCurrency = CommonServices.getTestData(IConstantsData.CHANGED_CURRENCY);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			StandardPO standardPO = new StandardPO();
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO.setNextAction(IConstantsData.NONE);
			standardPO = FlowStandardPo.createStandardPo(driver, testCaseName, standardPO);
			String itemPrice = PageStandardPO.getTotalItemPrice(driver, testCaseName);
			PageStandardPO.changeCurrencyOfSupplier(driver, testCaseName, changedCurrency);
			ModalChangeCurrencyPO.clickOnConvertAmountsToCurrencyType(driver, testCaseName);
			String getitemPrice = PageStandardPO.getTotalItemPrice(driver, testCaseName);
			Assert.assertNotEquals(itemPrice, getitemPrice);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * o <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 229109 - [Demo issue]:Unable
	 * to send PO due to an error in the price range. </b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_302343(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		String status;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click on setup and customize
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			PageCustomizeSettings.clickOnBuyersDeskLink(driver, testCaseName);
			int receivedByQuantity = CommonUtilities.getNonZeroRandomNumbers(3);
			PageCustomizeSettings.clickOnSaveButtom(driver, testCaseName);
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			PageCustomizeSettings.clickOnBuyersDeskLink(driver, testCaseName);
			PageBuyersDeskSettings.fillAllowBuyerItemRcvByQuantityTextBox(driver, testCaseName, receivedByQuantity);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			Requisition requisition = ObjectCreation.getRequisition(driver);

			Item item = ObjectCreation.getItem("catalogItem");

			CommonUtilities.getNonZeroRandomNumbers(2);

			requisition.setItems(item);

			CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			// click on first ReqNo link
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			// Fill Req Change Comment
			PageBuyersDesk.fillReqChangeComment(driver, testCaseName, IConstantsData.REC_CHANGE_COMM);

			PageBuyersDesk.clickOnConvertToPo(driver, testCaseName);

			PagePurchaseOrderToBeGenerated.ClikOnPurchaseOrderToBeGeneratedCheckBox(driver, testCaseName, 0);

			// PagePurchaseOrderToBeGenerated.ClikOnPurchaseOrderToBeGeneratedCheckBox(driver,
			// testCaseName, 1);

			PagePurchaseOrderToBeGenerated.clickOnSubmitPoForProcessing(driver, testCaseName);
			PurchaseOrder purchaseOrder1 = FlowConvertedPurchaseOrder.getPurchaseOrderinfo(driver, testCaseName, 1);
			FlowPoListing.searchPo(driver, testCaseName, purchaseOrder1.getPoNo(), IConstantsData.SEARCH_BY_PO_NO);

			status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			if (status.equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL))
			{
				// to approve the PO
				ApprovalAllRequests approvalAllRequests = new ApprovalAllRequests();
				approvalAllRequests.setDocumentNo(purchaseOrder1.getPoNo());
				approvalAllRequests.setActions(IConstantsData.APPROVE);
				approvalAllRequests.setComment(IConstantsData.APPROVE_COMMENT);
				approvalAllRequests.setDocumentType(IConstantsData.PURCHASE_ORDER);
				FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);
				ActionBot.defaultSleep();
			}
			FlowPoListing.searchPo(driver, testCaseName, purchaseOrder1.getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * o <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Verify if auto PO setting is ON and
	 * assigned buyer field in requisition is empty; then Auto PO should be
	 * generated with Buyer field from C>B>L>Tenant in PO
	 * 
	 * </b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_251820(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		String status;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click on setup and customize
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);
			PageCustomizeSettings.clickOnAllowEditAutogeneratedSettingsYes(driver, testCaseName);
			PageCustomizeSettings.clickOnSaveButtom(driver, testCaseName);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			Requisition requisition = ObjectCreation.getRequisition(driver);

			Item item = ObjectCreation.getItem("catalogItem");

			requisition.setItems(item);
			requisition.setAssignedBuyer(null);
			CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			// Fill Req Change Comment
			PageBuyersDesk.fillReqChangeComment(driver, testCaseName, IConstantsData.REC_CHANGE_COMM);

			PageBuyersDesk.clickOnConvertToPo(driver, testCaseName);

			PagePurchaseOrderToBeGenerated.ClikOnPurchaseOrderToBeGeneratedCheckBox(driver, testCaseName, 0);

			// PagePurchaseOrderToBeGenerated.ClikOnPurchaseOrderToBeGeneratedCheckBox(driver,
			// testCaseName, 1);

			PagePurchaseOrderToBeGenerated.clickOnSubmitPoForProcessing(driver, testCaseName);
			PurchaseOrder purchaseOrder1 = FlowConvertedPurchaseOrder.getPurchaseOrderinfo(driver, testCaseName, 1);
			FlowPoListing.searchPo(driver, testCaseName, purchaseOrder1.getPoNo(), IConstantsData.SEARCH_BY_PO_NO);

			status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			if (status.equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL))
			{
				// to approve the PO
				ApprovalAllRequests approvalAllRequests = new ApprovalAllRequests();
				approvalAllRequests.setDocumentNo(purchaseOrder1.getPoNo());
				approvalAllRequests.setActions(IConstantsData.APPROVE);
				approvalAllRequests.setComment(IConstantsData.APPROVE_COMMENT);
				approvalAllRequests.setDocumentType(IConstantsData.PURCHASE_ORDER);
				FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);
				ActionBot.defaultSleep();
			}
			FlowPoListing.searchPo(driver, testCaseName, purchaseOrder1.getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			String buyer = PageStandardPO.getBuyer(driver);
			Assert.assertNotNull(buyer);
			// change to default setting
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);
			PageCustomizeSettings.clickOnAllowEditAutogeneratedSettingsNo(driver, testCaseName);
			PageCustomizeSettings.clickOnSaveButtom(driver, testCaseName);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * o <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Standard PO: Verify User should not be
	 * able to submit a standard PO with deactivated project; proper error
	 * message should be displayed to the user
	 * 
	 * </b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_275858(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		String SearchItem = CommonServices.getTestData(IConstantsData.FILL_PROJECT_NAME);
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click on setup and customize
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);

			// click on cost booking link
			PageCustomizeSettings.clickOnCostBookingLink(driver, testCaseName);

			// click on cost Projects Link
			PageCostBookingSettings.clickOnProjects(driver);
			// Click on Always
			PageProjectsSettings.clickOnAlways(driver);
			// Click On Save
			PageProjectsSettings.clickOnSave(driver);
			StandardPO standardpo = new StandardPO();
			standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardpo.setNextAction(IConstantsData.SAVE_PO_AS_DRAFT);
			standardpo = FlowStandardPo.createStandardPo(driver, testCaseName, standardpo);
			// deActivate PrejectLink
			MainPageHeaderLevelTab.clickOnMasterSubTab(driver);
			PageMasterDataSettings.clickOnProjectsLink(driver, testCaseName);
			// fill searchBox
			PageProjectsMasterDataSettings.fillProjectSearchBox(driver, testCaseName, SearchItem);
			PageProjectsMasterDataSettings.clickOnGo(driver, testCaseName);
			PageProjectsMasterDataSettings.clickOnActive(driver, testCaseName);
			PopUpDefaultConfirmation.clickOnConfirmYesButton(driver, testCaseName);
			ActionBot.defaultSleep();
			PageMasterDataSettings.clickOnReturnToSetUpModule(driver, testCaseName);
			FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			boolean value = PageStandardPO.isValidationMapCheckErrorPresent(driver, testCaseName);
			Assert.assertTrue(value);
			MainPageHeaderLevelTab.clickOnMasterSubTab(driver);
			PageMasterDataSettings.clickOnProjectsLink(driver, testCaseName);
			// fill searchBox
			PageProjectsMasterDataSettings.fillProjectSearchBox(driver, testCaseName, SearchItem);
			PageProjectsMasterDataSettings.clickOnGo(driver, testCaseName);
			PageProjectsMasterDataSettings.clickOnActive(driver, testCaseName);
			PopUpDefaultConfirmation.clickOnConfirmYesButton(driver, testCaseName);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Draft PO >> Buyer should be able to delete
	 * items from Draft PO (req to PO). <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_145107(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		{
			// RTC_22610 : testcase to be mapped
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_145108"));

		}
		CommonServices.startTestCase(driver, testCase, mappedTestCases);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);

			Requisition requisition = ObjectCreation.getRequisition(driver);

			Item item = ObjectCreation.getItem(IConstantsData.BOTH);

			requisition.setItems(item);

			requisition = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			// click on first ReqNo link
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			FlowBuyersDesk.convertToPo(driver, testCaseName);
			List<WebElement> listOfCheckBoxes = PagePurchaseOrderToBeGenerated.getListOfAllSuggestedPOCheckboxes(driver, testCaseName);
			for (WebElement element : listOfCheckBoxes)
			{
				if (!element.isSelected())
				{
					element.click();
				}
			}

			PagePurchaseOrderToBeGenerated.clickOnSavePosAsDraft(driver, testCaseName);
			FlowPoListing.searchPo(driver, testCaseName, requisition.getReqNo(), IConstantsData.SEARCH_BY_ORDER_DESCRIPTION);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			String deliveryTerms = CommonServices.getTestData(IConstantsData.DELIVERY_TERMS);
			PageStandardPO.selectDeliveryTerms(driver, deliveryTerms);
			ActionBot.scroll(driver, "500");
			String itemId = PageStandardPO.getItemId(driver, item.getCatelogItems().get(0).getItemName());
			PageStandardPO.deleteItemByItemId(driver, testCaseName, itemId);
			PopUpDefaultConfirmation.clickOnConfirmYesButton(driver, testCaseName);
			FlowStandardPo.savePOAsDraft(driver, testCaseName);
			//MainPageHeaderLevelTab.clickOnBuyersDeskSubTab(driver, testCaseName);
			// search req in buyer desk page
			FlowBuyersDeskListing.searchAtBuyersDeskListing(driver, testCaseName, requisition);
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			FlowBuyersDesk.convertToPo(driver, testCaseName);
			FlowBuyersDesk.submitAllSuggestedPosForProcessing(driver, testCaseName);

			boolean flag = FlowPoListing.searchPo(driver, testCaseName, requisition.getReqNo(), IConstantsData.SEARCH_BY_ORDER_DESCRIPTION);
			mappedTestCases.get(0).setTestResult(flag);
			Assert.assertTrue("Unable to Re-ordered", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 206785 - Error in costing
	 * shown in copy PO event even after correcting the values after price
	 * modifications.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_172665(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		boolean flag;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			Requisition requisition = ObjectCreation.getRequisition(driver);

			Item item = ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);

			int quantity = CommonUtilities.getNonZeroRandomNumbers(2);
			CatelogItem catelogItem2 = new CatelogItem();
			catelogItem2.setItemName(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING));
			catelogItem2.setQuantity(quantity);

			item.getCatelogItems().add(catelogItem2);

			requisition.setItems(item);

			CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			// click on first ReqNo link
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			FlowBuyersDesk.convertToPo(driver, testCaseName);
			List<PurchaseOrder> purchaseOrders = FlowBuyersDesk.submitAllSuggestedPosForProcessing(driver, testCaseName);

			FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			// fill req by date
			PurchaseOrder purchaseOrder = new PurchaseOrder();
			purchaseOrder.setCustomDate(CommonUtilities.getRequiredBy());
			purchaseOrder.setPoNo(PageStandardPO.getPONo(driver, testCaseName));
			PageStandardPO.fillRequiredByDate(driver, testCaseName, purchaseOrder.getCustomDate().getDay(), purchaseOrder.getCustomDate().getMonth(),
				purchaseOrder.getCustomDate().getYear());
			ActionBot.scroll(driver);
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			ActionBot.jQueryScroll(driver, ".eformItemInpt.ui-front", 600);
			ModalPOFreeTextItemSummaryItem.fillQuantity(driver, testCaseName, item.getCatelogItems().get(0).getQuantity() + 1);
			ModalPOFreeTextItemSummaryCostAllocation.clickOnCostBooking(driver, testCaseName);
			ActionBot.defaultSleep();
			ModalPOFreeTextItemSummaryItem.clickOnSave(driver, testCaseName);
			String poNo = FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			if (poNo != null)
				purchaseOrder.setPoNo(poNo);
			flag = FlowPoListing.searchPo(driver, testCaseName, purchaseOrder.getPoNo(), IConstantsData.SEARCH_BY_PO_NO);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Verify on copying a Requisition to PO in
	 * which costing is split, the project information should be carried with
	 * the CC/Budget info for the copied PO
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_276020(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		List<CostCenterSplitInfo> centerSplitInfos = new ArrayList<CostCenterSplitInfo>();
		Map<String, String> cc_budget_project;
		new StandardPO();
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			Requisition requisition = ObjectCreation.getRequisition(driver);
			cc_budget_project = ObjectCreation.getOtherCostCenterProjectAndBudget();
			Item item = ObjectCreation.getItem("catalogItem");

			CommonUtilities.getNonZeroRandomNumbers(2);

			requisition.setItems(item);
			CostBookingRequisitionSummary costBookingRequisitionSummary = new CostBookingRequisitionSummary();
			// to set CC split at item level
			requisition.getCostBookingRequisitionSummary().setSplitCostToMultipleCostCenter(true);
			requisition.getCostBookingRequisitionSummary().setSplitCostAtLineItemLevel(true);
			costBookingRequisitionSummary.setNextAction(IConstantsData.SAVE);
			CostBookingItemSummary costBookingItemSummary = new CostBookingItemSummary();
			costBookingItemSummary.setSplitCostCenterAtItemLevel(true);
			costBookingItemSummary.setSplitCostCenterAtItemLevel_percentage(true);
			CostCenterSplitInfo centerSplitInfo1 = new CostCenterSplitInfo();
			centerSplitInfo1.setCostCenter(cc_budget_project.get(IConstantsData.costCenter));
			centerSplitInfo1.setBudget(cc_budget_project.get(IConstantsData.budget));
			centerSplitInfo1.setProject(cc_budget_project.get(IConstantsData.project));
			centerSplitInfo1.setPercentage(100);

			centerSplitInfos.add(centerSplitInfo1);
			costBookingItemSummary.setCostCenterSplitInfo(centerSplitInfos);
			costBookingItemSummary.setNextAction(IConstantsData.SAVE);
			requisition.setCostBookingItemSummary(costBookingItemSummary);
			CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			// Fill Req Change Comment
			PageBuyersDesk.clickItemCheckbox(driver, testCaseName);

			// fill GL account
			PageBuyersDesk.clickOnExpandAllLink(driver, testCaseName);
			PageBuyersDesk.clickEditLinkForCostBookingItemLevel(driver, testCaseName);
			PageBuyersDesk.enterGLAccountForCostBookingItemLevel(driver, testCaseName);
			PageBuyersDesk.clickButtonOkCostAllocationTab(driver, testCaseName);
			PageBuyersDesk.fillReqChangeComment(driver, testCaseName, IConstantsData.REC_CHANGE_COMM);

			PageBuyersDesk.clickOnConvertToPo(driver, testCaseName);

			PagePurchaseOrderToBeGenerated.ClikOnPurchaseOrderToBeGeneratedCheckBox(driver, testCaseName, 0);

			// PagePurchaseOrderToBeGenerated.ClikOnPurchaseOrderToBeGeneratedCheckBox(driver,
			// testCaseName, 1);

			PagePurchaseOrderToBeGenerated.clickOnSubmitPoForProcessing(driver, testCaseName);
			PurchaseOrder purchaseOrder1 = FlowConvertedPurchaseOrder.getPurchaseOrderinfo(driver, testCaseName, 1);
			FlowPoListing.searchPo(driver, testCaseName, purchaseOrder1.getPoNo(), IConstantsData.SEARCH_BY_PO_NO);

			String status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			if (status.equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL))
			{
				// to approve the PO
				ApprovalAllRequests approvalAllRequests = new ApprovalAllRequests();
				approvalAllRequests.setDocumentNo(purchaseOrder1.getPoNo());
				approvalAllRequests.setActions(IConstantsData.APPROVE);
				approvalAllRequests.setComment(IConstantsData.APPROVE_COMMENT);
				approvalAllRequests.setDocumentType(IConstantsData.PURCHASE_ORDER);
				FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);
				ActionBot.defaultSleep();
			}
			FlowPoListing.searchPo(driver, testCaseName, purchaseOrder1.getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			ActionBot.scroll(driver);
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			ModalPOFreeTextItemSummaryCostAllocation.clickOnCostBooking(driver, testCaseName);
			String itemlevelCDetails = ModalItemSummaryCostBooking.getItemlevelCostingdetails(driver);
			String itemLevelPDetails = ModalItemSummaryCostBooking.getItemlevelProjectdetails(driver);
			boolean ItemCCDetails = itemlevelCDetails.equalsIgnoreCase(centerSplitInfo1.getCostCenter());
			Assert.assertTrue("ItemCDetails are not equal", ItemCCDetails);
			boolean ItemPdetails = itemLevelPDetails.equalsIgnoreCase(centerSplitInfo1.getProject());
			Assert.assertTrue(ItemPdetails);
			ModalPOFreeTextItemSummaryItem.clickOnCancelBtnItemSummary(driver, testCaseName);
			PageStandardPO.clickOnEdit(driver);
			TabPOSummary.clickOnCostBookingPOSummary(driver);
			String costbookingdetails = ModalPOSummaryCostBooking.getHeaderLevelCostingDetails(driver, testCaseName);
			String projectDetails = ModalPOSummaryCostBooking.getHeaderLevelProjectDetails(driver, testCaseName);
			boolean ccDetails = costbookingdetails.equalsIgnoreCase(centerSplitInfo1.getCostCenter());
			Assert.assertTrue("costing Details are unequal", ccDetails);
			boolean cpDetails = projectDetails.equalsIgnoreCase(centerSplitInfo1.getProject());
			Assert.assertTrue("CostBooking project details are unequal", cpDetails);
			boolean singleCostCenter = ModalPOSummaryCostBooking.isRadioBottomSingleCostCenterSelected(driver, testCaseName);
			Assert.assertTrue("unable to switch to header level", singleCostCenter);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}

	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 213830 - Unable to add
	 * catalog or free text item in draft PO in a scenario.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_204503(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();

		List<CostCenterSplitInfo> centerSplitInfos = new ArrayList<CostCenterSplitInfo>();
		Map<String, String> cc_budget_project;
		User user = null;
		boolean flag;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			Requisition requisition = ObjectCreation.getRequisition(driver);
			cc_budget_project = ObjectCreation.getOtherCostCenterProjectAndBudget();
			Item item = ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);
			requisition.setItems(item);
			CostBookingRequisitionSummary costBookingRequisitionSummary = ObjectCreation.getDefaultObjectOfCostBooking();
			// to set CC split at item level
			requisition.getCostBookingRequisitionSummary().setSplitCostAtLineItemLevel(true);
			CostBookingItemSummary costBookingItemSummary = new CostBookingItemSummary();
			costBookingItemSummary.setSplitCostCenterAtItemLevel(true);
			costBookingItemSummary.setSplitCostCenterAtItemLevel_percentage(true);
			CostCenterSplitInfo centerSplitInfo1 = new CostCenterSplitInfo();
			centerSplitInfo1.setCostCenter(cc_budget_project.get(IConstantsData.costCenter));
			centerSplitInfo1.setBudget(cc_budget_project.get(IConstantsData.budget));
			centerSplitInfo1.setProject(cc_budget_project.get(IConstantsData.project));
			centerSplitInfo1.setPercentage(100);

			AccountingItemSummary accountingItemSummary = ObjectCreation.getDefaultObjectOfAccounting();
			costBookingItemSummary.setAccountingItemSummary(accountingItemSummary);
			costBookingItemSummary.setNextAction(IConstantsData.SAVE);
			centerSplitInfos.add(centerSplitInfo1);
			costBookingItemSummary.setCostCenterSplitInfo(centerSplitInfos);
			costBookingItemSummary.setNextAction(IConstantsData.SAVE);
			requisition.setCostBookingItemSummary(costBookingItemSummary);
			requisition = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			FlowBuyersDesk.convertToPo(driver, testCaseName);

			PagePurchaseOrderToBeGenerated.ClikOnPurchaseOrderToBeGeneratedCheckBox(driver, testCaseName, 0);

			PagePurchaseOrderToBeGenerated.clickOnSavePosAsDraft(driver, testCaseName);
			FlowPoListing.searchPo(driver, testCaseName, requisition.getReqNo(), IConstantsData.SEARCH_BY_ORDER_DESCRIPTION);
			Assert.assertTrue("PO is not in draft state", PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.DRAFT_FILTER_LABEL));
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			GuidedItem guidedItem = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.EXISTING_SUPPLIER);
			guidedItem.setNextAction(IConstantsData.NONE);
			PageStandardPO.clickOnFreeTextItem(driver);
			FlowStandardPo.fillGuidedItemForm(driver, testCaseName, guidedItem);
			ModalPOItemSummaryCostAllocation.clickOnCostBookingTab(driver, testCaseName);
			accountingItemSummary.setNextAction(IConstantsData.NONE);
			FlowStandardPo.fillAccountingDetails(driver, testCaseName, accountingItemSummary);
			ModalItemSummaryCostAllocation.fillCostCenter(driver, testCaseName, costBookingRequisitionSummary.getCostCenter());
			ModalItemSummaryCostAllocation.fillProject(driver, testCaseName, costBookingRequisitionSummary.getProject());
			ModalItemSummaryCostAllocation.fillBudget(driver, testCaseName, costBookingRequisitionSummary.getBudget());
			ModalItemSummaryCostAllocation.clickOnSave(driver);
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);

			FlowPoListing.searchPo(driver, testCaseName, requisition.getReqNo(), IConstantsData.SEARCH_BY_ORDER_DESCRIPTION);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			List<WebElement> itemNames = PageViewPurchaseOrder.getListOfItems(driver, testCaseName);
			flag = itemNames.size() == 2;
			Assert.assertTrue("Item is not added to draft Po", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}

	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 208908 - Unable to submit PO
	 * amendment in as scenario, system blocking user with invalid date error
	 * though its valid.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_187876(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		List<CostCenterSplitInfo> centerSplitInfos = new ArrayList<CostCenterSplitInfo>();
		Map<String, String> cc_budget_project;
		new StandardPO();
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			Requisition requisition = ObjectCreation.getRequisition(driver);
			cc_budget_project = ObjectCreation.getOtherCostCenterProjectAndBudget();
			Item item = ObjectCreation.getItem("catalogItem");

			CommonUtilities.getNonZeroRandomNumbers(2);

			requisition.setItems(item);
			CostBookingRequisitionSummary costBookingRequisitionSummary = new CostBookingRequisitionSummary();
			// to set CC split at item level
//			requisition.getCostBookingRequisitionSummary().setSplitCostToMultipleCostCenter(true);
			requisition.getCostBookingRequisitionSummary().setSplitCostAtLineItemLevel(true);
			costBookingRequisitionSummary.setNextAction(IConstantsData.SAVE);
			CostBookingItemSummary costBookingItemSummary = ObjectCreation.getDefaultObjectOfCostBookingItemSummary();
			costBookingItemSummary.setSplitCostCenterAtItemLevel(true);
			costBookingItemSummary.setSplitCostCenterAtItemLevel_percentage(true);
			CostCenterSplitInfo centerSplitInfo1 = new CostCenterSplitInfo();
			centerSplitInfo1.setCostCenter(cc_budget_project.get(IConstantsData.costCenter));
			centerSplitInfo1.setBudget(cc_budget_project.get(IConstantsData.budget));
			centerSplitInfo1.setProject(cc_budget_project.get(IConstantsData.project));
			centerSplitInfo1.setPercentage(100);

			centerSplitInfos.add(centerSplitInfo1);
			costBookingItemSummary.setCostCenterSplitInfo(centerSplitInfos);
			costBookingItemSummary.setNextAction(IConstantsData.SAVE);
			requisition.setCostBookingItemSummary(costBookingItemSummary);
			requisition = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			// Fill Req Change Comment
			//PageBuyersDesk.fillReqChangeComment(driver, testCaseName, IConstantsData.REC_CHANGE_COMM);
			FlowBuyersDesk.convertToPo(driver, testCaseName);
			//PageBuyersDesk.clickOnConvertToPo(driver, testCaseName);

			PagePurchaseOrderToBeGenerated.ClikOnPurchaseOrderToBeGeneratedCheckBox(driver, testCaseName, 0);

			// PagePurchaseOrderToBeGenerated.ClikOnPurchaseOrderToBeGeneratedCheckBox(driver,
			// testCaseName, 1);
			//	FlowBuyersDesk.submitAllSuggestedPosForProcessing(driver, testCaseName);
			PagePurchaseOrderToBeGenerated.clickOnSubmitPoForProcessing(driver, testCaseName);
			PurchaseOrder purchaseOrder1 = new PurchaseOrder();
			//purchaseOrder1.setPoNo(PagePurchaseOrderListing.getFirstPoNo(driver, testCaseName));

			FlowPoListing.searchPo(driver, testCaseName, requisition.getReqNo(), IConstantsData.SEARCH_BY_ORDER_DESCRIPTION);

			//purchaseOrder1.setPoNo(PagePurchaseOrderListing.getPOId(driver, testCaseName));
			purchaseOrder1.setPoNo(PagePurchaseOrderListing.getFirstPoNo(driver, testCaseName));
			String status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);

			if (status.equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL))
			{
				// to approve the PO
				ApprovalAllRequests approvalAllRequests = new ApprovalAllRequests();
				approvalAllRequests.setDocumentNo(purchaseOrder1.getPoNo());
				approvalAllRequests.setActions(IConstantsData.APPROVE);
				approvalAllRequests.setComment(IConstantsData.APPROVE_COMMENT);
				approvalAllRequests.setDocumentType(IConstantsData.PURCHASE_ORDER);
				FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);
				ActionBot.defaultSleep();
			}

			FlowPoListing.searchPo(driver, testCaseName, purchaseOrder1.getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			//FlowPoListing.searchPo(driver, testCaseName, purchaseOrder1.getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnAmendPOFromActions(driver, testCaseName);
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			boolean status1 = FlowPoListing.searchPo(driver, testCaseName, purchaseOrder1.getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue(status1);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}

	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 200953 - Costing details at
	 * header becoming blank in a scenario.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_134385(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		List<CostCenterSplitInfo> centerSplitInfos = new ArrayList<CostCenterSplitInfo>();
		Map<String, String> cc_budget_project;
		new StandardPO();
		User user = null;
		boolean flag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			{
				// RTC_22610 : testcase to be mapped
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_238997"));
			}
			Requisition requisition = ObjectCreation.getRequisition(driver);
			cc_budget_project = ObjectCreation.getOtherCostCenterProjectAndBudget();
			Item item = ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);

			requisition.setItems(item);
			CostBookingRequisitionSummary costBookingRequisitionSummary = new CostBookingRequisitionSummary();
			// to set CC split at item level
			requisition.getCostBookingRequisitionSummary().setSplitCostToMultipleCostCenter(true);
			requisition.getCostBookingRequisitionSummary().setSplitCostAtLineItemLevel(true);
			costBookingRequisitionSummary.setNextAction(IConstantsData.SAVE);
			CostBookingItemSummary costBookingItemSummary = new CostBookingItemSummary();
			costBookingItemSummary.setSplitCostCenterAtItemLevel(true);
			costBookingItemSummary.setSplitCostCenterAtItemLevel_percentage(true);
			CostCenterSplitInfo centerSplitInfo1 = new CostCenterSplitInfo();
			centerSplitInfo1.setCostCenter(cc_budget_project.get(IConstantsData.costCenter));
			centerSplitInfo1.setBudget(cc_budget_project.get(IConstantsData.budget));
			centerSplitInfo1.setProject(cc_budget_project.get(IConstantsData.project));
			centerSplitInfo1.setPercentage(100);

			centerSplitInfos.add(centerSplitInfo1);
			costBookingItemSummary.setCostCenterSplitInfo(centerSplitInfos);
			costBookingItemSummary.setNextAction(IConstantsData.SAVE);
			requisition.setCostBookingItemSummary(costBookingItemSummary);
			CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			FlowBuyersDesk.convertToPo(driver, testCaseName);
			List<PurchaseOrder> purchaseOrders = FlowBuyersDesk.submitAllSuggestedPosForProcessing(driver, testCaseName);
			FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);

			String status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			if (status.equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL))
			{
				// to approve the PO
				ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, purchaseOrders.get(0).getPoNo(),
					IConstantsData.PURCHASE_ORDER, IConstantsData.APPROVE);
				FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);
				ActionBot.defaultSleep();
			}
			flag = FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue(flag);

			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnAmendPOFromActions(driver, testCaseName);
			PageStandardPO.fillOrderDescription(driver, testCaseName, CommonServices.getTestData(IConstantsData.ORDER_DESCRIPTION) + CommonUtilities.getNonZeroRandomNumbers(3));
			String supplierContact = PageStandardPO.getSupplierContact(driver, testCaseName);
			String supplierEmailId = PageStandardPO.getSupplierEmailId(driver, testCaseName);
			// click On header level edit
			PageStandardPO.clickOnEdit(driver);
			ModalPOSummaryCostBooking.clickOnSave(driver, testCaseName);
			PageStandardPO.clickOnEdit(driver);
			TabPOSummary.clickOnCostBookingPOSummary(driver);
			ModalPOSummaryCostBooking.clickOnSave(driver, testCaseName);
			ActionBot.scroll(driver, "500");
			// click On expand item
			PageStandardPO.clickOnExpandAll(driver);
			// click On costbooking edit
			PageStandardPO.clickOnItemExpandCostbookingEdit(driver, testCaseName);
			ModalPOFreeTextItemSummaryItem.clickOnSave(driver, testCaseName);

			FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			flag = FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("PO is not created", flag);
			//To check mapped test case scenario
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			Assert.assertTrue("Supplier contact is changed while ammending PO", supplierContact.equalsIgnoreCase(PageViewPurchaseOrder.getSupplierContact(driver, testCaseName)));
			Assert.assertTrue("Supplier email Id is changed while ammending PO", supplierEmailId.equalsIgnoreCase(PageViewPurchaseOrder.getSupplierEmailId(driver, testCaseName)));
			flag = true;
			mappedTestCases.get(0).setTestResult(flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}

	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 211341 - Cost center not
	 * displayed properly in PO when user perform Qty propotional to delivery
	 * split in Req and then create two different PO for different location for
	 * each split.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_194875(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		Requisition requisition = new Requisition();
		boolean flag;
		CostBookingItemSummary costBookingItemSummary = new CostBookingItemSummary();
		DeliveryItemSummary deliveryItemSummary = new DeliveryItemSummary();
		new StandardPO();
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			// to set non mandatory fields
			requisition.setCommentForSupplier(IConstantsData.COMMENT_FOR_SUPPLIER);
			requisition.setReasonForOrdering(IConstantsData.REASON_FOR_ORDERING);
			requisition.setRequired(true);

			// to set CC split at item level
			requisition.getCostBookingRequisitionSummary().setBookCostToSingleCostCenter(false);
			requisition.getCostBookingRequisitionSummary().setSplitCostAtLineItemLevel(true);

			// to get delivery split object
			deliveryItemSummary = ObjectCreation.getDefaultObjectOfDeliverySplitAtItemLevel(requisition.getItems().getCatelogItems().get(0).getQuantity());

			// to get cc split at item level object
			costBookingItemSummary = ObjectCreation.getDefaultObjectOfCCSplitAtItemLevel(false, 0);
			costBookingItemSummary.setSplitCostCenterAtItemLevel_quantityProportionalToDelivery(true);

			requisition.setCostBookingItemSummary(costBookingItemSummary);
			requisition.setDeliveryItemSummary(deliveryItemSummary);

			CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			// Fill Req Change Comment
			//	PageBuyersDesk.fillReqChangeComment(driver, testCaseName, IConstantsData.REC_CHANGE_COMM);

			FlowBuyersDesk.convertToPo(driver, testCaseName);

			List<PurchaseOrder> purchaseOrders = FlowBuyersDesk.submitAllSuggestedPosForProcessing(driver, testCaseName);
			//PagePurchaseOrderToBeGenerated.ClikOnPurchaseOrderToBeGeneratedCheckBox(driver, testCaseName, 0);

			//	PagePurchaseOrderToBeGenerated.ClikOnPurchaseOrderToBeGeneratedCheckBox(driver, testCaseName, 1);

			//		PagePurchaseOrderToBeGenerated.clickOnSubmitPoForProcessing(driver, testCaseName);
			//			MainPageHeaderLevelTab.clickOnPOTab(driver);
			//			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			//			ActionBot.scroll(driver);
			//			PageViewPurchaseOrder.clickOnCostingLink(driver, testCaseName);
			//			ActionBot.defaultSleep();
			//			MainPageHeaderLevelTab.clickOnPOTab(driver);
			//			PagePurchaseOrderListing.clickOnPoLink(driver, testCaseName, 2);
			//			ActionBot.scroll(driver);
			//			PageViewPurchaseOrder.clickOnCostingLink(driver, testCaseName);
			//			ActionBot.defaultSleep();
			flag = FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("Couldnot create ", flag);
			flag = FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(1).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue(flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}

	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 208418 - Multiple Po with
	 * same PO number is generated when user creates multiple Draft PO from
	 * Buyers desk. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_189396(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		Requisition requisition = new Requisition();
		CostBookingItemSummary costBookingItemSummary = new CostBookingItemSummary();
		DeliveryItemSummary deliveryItemSummary = new DeliveryItemSummary();
		new StandardPO();
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			// to set non mandatory fields
			requisition.setCommentForSupplier(IConstantsData.COMMENT_FOR_SUPPLIER);
			requisition.setReasonForOrdering(IConstantsData.REASON_FOR_ORDERING);
			requisition.setRequired(true);

			// to set CC split at item level
			requisition.getCostBookingRequisitionSummary().setBookCostToSingleCostCenter(false);
			requisition.getCostBookingRequisitionSummary().setSplitCostAtLineItemLevel(true);

			// to get delivery split object
			deliveryItemSummary = ObjectCreation.getDefaultObjectOfDeliverySplitAtItemLevel(requisition.getItems().getCatelogItems().get(0).getQuantity());

			// to get cc split at item level object
			costBookingItemSummary = ObjectCreation.getDefaultObjectOfCCSplitAtItemLevel(false, 0);
			costBookingItemSummary.setSplitCostCenterAtItemLevel_quantityProportionalToDelivery(true);

			requisition.setCostBookingItemSummary(costBookingItemSummary);
			requisition.setDeliveryItemSummary(deliveryItemSummary);

			CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			// Fill Req Change Comment
			//	PageBuyersDesk.fillReqChangeComment(driver, testCaseName, IConstantsData.REC_CHANGE_COMM);
			FlowBuyersDesk.convertToPo(driver, testCaseName);
			//	PageBuyersDesk.clickOnConvertToPo(driver, testCaseName);

			PagePurchaseOrderToBeGenerated.ClikOnPurchaseOrderToBeGeneratedCheckBox(driver, testCaseName, 0);

			PagePurchaseOrderToBeGenerated.ClikOnPurchaseOrderToBeGeneratedCheckBox(driver, testCaseName, 1);

			PagePurchaseOrderToBeGenerated.clickOnSavePosAsDraft(driver, testCaseName);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			String pono = PagePurchaseOrderListing.getFirstPoNo(driver, testCaseName);
			boolean flag = (pono != null) ? true : false;
			Assert.assertTrue(flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}

	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 223212 - Project field is
	 * displayed in Copy PO even though project setting is NO
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_276039(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		List<CostCenterSplitInfo> centerSplitInfos = new ArrayList<CostCenterSplitInfo>();
		Map<String, String> cc_budget_project;
		new StandardPO();
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			PageCustomizeSettings.clickOnCostBookingLink(driver, testCaseName);

			// click on cost Projects Link
			PageCostBookingSettings.clickOnProjects(driver);
			PageProjectsSettings.clickOnNever(driver);
			PageProjectsSettings.clickOnSave(driver);
			Requisition requisition = ObjectCreation.getRequisition(driver);
			cc_budget_project = ObjectCreation.getOtherCostCenterProjectAndBudget();
			Item item = ObjectCreation.getItem("catalogItem");
			requisition.setItems(item);
			CostBookingRequisitionSummary costBookingRequisitionSummary = new CostBookingRequisitionSummary();
			// to set CC split at item level
			requisition.getCostBookingRequisitionSummary().setSplitCostAtLineItemLevel(true);
			costBookingRequisitionSummary.setNextAction(IConstantsData.SAVE);
			CostBookingItemSummary costBookingItemSummary = new CostBookingItemSummary();
			costBookingItemSummary.setSplitCostCenterAtItemLevel(true);
			costBookingItemSummary.setSplitCostCenterAtItemLevel_percentage(true);
			CostCenterSplitInfo centerSplitInfo1 = new CostCenterSplitInfo();
			centerSplitInfo1.setCostCenter(cc_budget_project.get(IConstantsData.costCenter));
			centerSplitInfo1.setBudget(cc_budget_project.get(IConstantsData.budget));
			centerSplitInfo1.setProject(cc_budget_project.get(IConstantsData.project));
			centerSplitInfo1.setPercentage(100);

			centerSplitInfos.add(centerSplitInfo1);
			costBookingItemSummary.setCostCenterSplitInfo(centerSplitInfos);
			costBookingItemSummary.setNextAction(IConstantsData.NONE);
			requisition.setCostBookingItemSummary(costBookingItemSummary);
			CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			// Fill Req Change Comment
			PageBuyersDesk.fillReqChangeComment(driver, testCaseName, IConstantsData.REC_CHANGE_COMM);

			PageBuyersDesk.clickOnConvertToPo(driver, testCaseName);

			PagePurchaseOrderToBeGenerated.ClikOnPurchaseOrderToBeGeneratedCheckBox(driver, testCaseName, 0);

			// PagePurchaseOrderToBeGenerated.ClikOnPurchaseOrderToBeGeneratedCheckBox(driver,
			// testCaseName, 1);

			PagePurchaseOrderToBeGenerated.clickOnSubmitPoForProcessing(driver, testCaseName);
			PurchaseOrder purchaseOrder1 = new PurchaseOrder();

			FlowPoListing.searchPo(driver, testCaseName, requisition.getReqNo(), IConstantsData.SEARCH_BY_ORDER_DESCRIPTION);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			purchaseOrder1.setPoNo(PageStandardPO.getPONo(driver, testCaseName));

			String status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			if (status.equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL))
			{
				// to approve the PO
				ApprovalAllRequests approvalAllRequests = new ApprovalAllRequests();
				approvalAllRequests.setDocumentNo(purchaseOrder1.getPoNo());
				approvalAllRequests.setActions(IConstantsData.APPROVE);
				approvalAllRequests.setComment(IConstantsData.APPROVE_COMMENT);
				approvalAllRequests.setDocumentType(IConstantsData.PURCHASE_ORDER);
				FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);
				ActionBot.defaultSleep();
			}
			FlowPoListing.searchPo(driver, testCaseName, purchaseOrder1.getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			ActionBot.scroll(driver);
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			ModalPOFreeTextItemSummaryCostAllocation.clickOnCostBooking(driver, testCaseName);
			String itemLevelPDetails = ModalItemSummaryCostBooking.getItemlevelProjectdetails(driver);

			boolean ItemPdetails = itemLevelPDetails.equalsIgnoreCase(centerSplitInfo1.getProject());
			Assert.assertTrue(ItemPdetails);
			ModalPOFreeTextItemSummaryItem.clickOnCancelBtnItemSummary(driver, testCaseName);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}

	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 210079 - Error modal is not
	 * proper on amending a PO whose amendment copy is in approval
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_191831(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		boolean flag;
		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			StandardPO standardPO = new StandardPO();
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			//	PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			//
			//standardPO.setPoNumber(PagePurchaseOrderListing.getFirstPoNo(driver, testCaseName));

			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			Item item = new Item();
			item = ObjectCreation.getItem(IConstantsData.GUIDED_ITEM);
			FlowStandardPo.addItem(driver, testCaseName, item);
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			/*
			 * ApprovalAllRequests approvalAllRequests = new ApprovalAllRequests();
			 * approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, standardPO.getPoNumber(), IConstantsData.PURCHASE_ORDER, IConstantsData.APPROVE);
			 * 
			 * FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);
			 */
			//	FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnPoActionsLink(driver, testCaseName);
			ModalPOActions.clickOnAmendPOFromActions(driver, testCaseName);
			ActionBot.defaultSleep();
			flag = PagePurchaseOrderListing.isAlertOfPOWaitingForApprovalPresent(driver, testCaseName);
			Assert.assertTrue(flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 209527 - Negative values are
	 * displayed in PO in costing, accounting, PO total, taxes and tax sub-total
	 * fields
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_190752(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		boolean flag;
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		StandardPO standardPO = new StandardPO();
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.GUIDED_ITEM);
			standardPO.setNextAction(IConstantsData.NONE);
			FlowStandardPo.createStandardPo(driver, testCaseName, standardPO);
			// get Total tax Amount
			String poTotal = PageStandardPO.getTotalItemPrice(driver, testCaseName);
			poTotal = poTotal.substring(4).replace(",", "");
			double t1 = Double.parseDouble(poTotal);
			Integer total = (int) t1;
			PageStandardPO.clickOnModifyLink(driver);
			// fill discount
			int discount = ModalDiscountPO.fillDiscountAmount(driver, testCaseName, total);
			ModalDiscountPO.clickOnSaveDiscount(driver, testCaseName);
			// change item price/quantity
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			ActionBot.jQueryScroll(driver, ".eformItemInpt.ui-front", 600);
			String marketPrice = CommonServices.getTestData(IConstantsData.MARKET_PRICE);
			ModalPOFreeTextItemSummaryItem.fillMarketPrice(driver, testCaseName, Integer.parseInt(marketPrice));
			ModalPOFreeTextItemSummaryItem.clickOnSave(driver, testCaseName);
			ActionBot.defaultHighSleep();
			flag = discount == total;
			Assert.assertTrue(flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Amend PO: PO should open current version
	 * in edit mode with mentioned field editable : Setting: Require receipt
	 * against this PO (it will affect remaining unreceived items in that PO)
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_58395(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		StandardPO standardPO = new StandardPO();
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.GUIDED_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			ActionBot.scroll(driver);
			PageStandardPO.clickOnRequireReceiptChkbox(driver);
			PageStandardPO.clickOnSubmitPOForProcessing(driver, testCaseName);
			boolean flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("Unable to submit", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 204446 - Undefined is
	 * displayed for price on view item detail modal & also shows script error.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_147115(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		boolean flag;
		new StandardPO();
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			String mprice = CommonServices.getTestData(IConstantsData.MARKET_PRICE);
			float marketPrice = Float.parseFloat(mprice);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			FlowPoListing.filterAllReleasedPO(driver, testCaseName);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnAmendPOFromActions(driver, testCaseName);
			ActionBot.scroll(driver);
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			ActionBot.defaultSleep();
			ModalPOFreeTextItemSummaryItem.clearAndfillMarketPrice(driver, testCaseName, marketPrice);
			float market_price = ModalPOFreeTextItemSummaryItem.getMarketPriceOfItem(driver, testCaseName);
			if (market_price == marketPrice)
			{
				flag = true;
			}
			else
				flag = false;
			Assert.assertTrue("Unable to submit", flag);
			ModalPOFreeTextItemSummaryItem.clickOnCancelBtnItemSummary(driver, testCaseName);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 201100 - OU should not be
	 * editable while amending a PO, only addresses should be editable.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_145596(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		new StandardPO();
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			FlowPoListing.filterAllReleasedPO(driver, testCaseName);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnAmendPOFromActions(driver, testCaseName);
			PageStandardPO.clickOnEdit(driver);
			TabPOSummary.clickOnDeliveryPOSummary(driver);
			String DeliverTo = CommonServices.getTestData(IConstantsData.DELIVER_TO_FIELD);
			String dAdd = ModalPOSummaryDelivery.isEditableDeliveryField(driver, testCaseName, DeliverTo);
			Assert.assertNotNull(dAdd);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b> Test for bug 196197 - Item number is not
	 * displayed on requisition view under order tab for free text item & on PO
	 * template also. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_106789(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		String status;
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);

			Requisition requisition = ObjectCreation.getRequisition(driver);

			Item item = ObjectCreation.getItem(IConstantsData.GUIDED_ITEM);

			requisition.setItems(item);

			requisition = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			// click on first ReqNo link
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			// Fill Req Change Comment
			FlowBuyersDesk.convertToPo(driver, testCaseName);

			// submit all POs
			List<PurchaseOrder> purchaseOrders = FlowBuyersDesk.submitAllSuggestedPosForProcessing(driver, testCaseName);

			FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnPoActionsLink(driver, testCaseName);
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			ActionBot.defaultSleep();
			ActionBot.scroll(driver);
			String itemNo = PageStandardPO.getItemNo(driver, testCaseName);
			FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			if (status.equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL))
			{
				// to approve the PO
				ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, purchaseOrders.get(0).getPoNo(),
					IConstantsData.PURCHASE_ORDER, IConstantsData.APPROVE);
				FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);
				ActionBot.defaultSleep();
			}
			FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			ActionBot.defaultSleep();
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			// For first Item
			PurchaseOrder purchaseOrder3 = FlowConvertedPurchaseOrder.getReqViewPurchaseOrderinfo(driver, testCaseName, 1);
			boolean flag = purchaseOrder3.getItemNo().toLowerCase().contains(itemNo.toLowerCase());
			Assert.assertTrue("itemNo not Same", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b> Test for bug 21181 - Custom address is
	 * not displayed when we entered from create requisition. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_22118(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		boolean flag;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);

			Item item = ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);

			Requisition requisition = ObjectCreation.getRequisition(driver);
			requisition.setNextAction(IConstantsData.NONE);
			requisition.setItems(item);

			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);
			PageRequisitionCheckOut.clickEditHeaderInfo(driver, testCaseName);
			TabCheckoutReqSummary.clickDeliveryTab(driver, testCaseName);
			ModelRequisitionSummaryDelivery.selectDeliveryMyAddress(driver, testCaseName);
			DeliveryRequisitionSummary deliveryRequisitionSummary = new DeliveryRequisitionSummary();
			deliveryRequisitionSummary.setMyAddress_Name(CommonServices.getTestData(IConstantsData.MY_ADDRESS));
			deliveryRequisitionSummary.setMyAddress_Street1(CommonServices.getTestData(IConstantsData.MY_ADDRESS_STREET1));
			deliveryRequisitionSummary.setMyAddress_country(CommonServices.getTestData(IConstantsData.COUNTY));
			deliveryRequisitionSummary.setMyAddress_city(CommonServices.getTestData(IConstantsData.CITY));
			FlowRequisition.createCustomNewDeliveryAddress(driver, testCaseName, deliveryRequisitionSummary);
			ModelRequisitionSummaryCommon.clickSaveReqSummary(driver, testCaseName);

			FlowRequisition.submitReq(driver, testCaseName, true);
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			Assert.assertTrue("Requition is not created", requisition.getReqNo() != null);
			FlowMyRequisitions.viewRequisition(driver, testCaseName);
			flag = PageRequisitionView.getDeliveryAddress(driver, testCaseName).toLowerCase().contains(deliveryRequisitionSummary.getMyAddress_Name().toLowerCase());
			Assert.assertTrue("Address is not reflected at requisition view", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b> Req-BOR save as draft >>Changing Amount
	 * by changing freight should redefault GL type/account on demand based on
	 * setting <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_287063(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		boolean flag;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);

			Requisition requisition = ObjectCreation.getRequisition(driver);

			Item item = ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);

			requisition.setItems(item);

			requisition = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			// click on first ReqNo link
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);

			FlowBuyersDesk.convertToPo(driver, testCaseName);
			FlowBuyersDesk.saveAllSuggestedPosAsDraft(driver, testCaseName);

			FlowPoListing.searchPo(driver, testCaseName, requisition.getReqNo(), IConstantsData.SEARCH_BY_ORDER_DESCRIPTION);
			PurchaseOrder purchaseOrder = new PurchaseOrder();
			purchaseOrder.setPoNo(PagePurchaseOrderListing.getFirstPoNo(driver, testCaseName));
			flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.DRAFT_FILTER_LABEL);
			Assert.assertTrue("PO is not in draft status", flag);

			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);

			Item item1 = ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);
			// add catalog Item
			FlowStandardPo.addItem(driver, testCaseName, item1);
			String freight = CommonServices.getTestData(IConstantsData.FREIGHT_CHARGES);
			PageStandardPO.fillFreightCharges(driver, testCaseName, freight);
			PageStandardPO.clickOnAddNewTaxType(driver);
			String poNo = FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			if (poNo != null)
				purchaseOrder.setPoNo(poNo);
			flag = FlowPoListing.searchPo(driver, testCaseName, purchaseOrder.getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("Po is not submitted", flag);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			flag = PageViewPurchaseOrder.getFreightTaxValue(driver, testCaseName) == Double.parseDouble(freight);
			Assert.assertTrue("Freight value is not same", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b> Drat PO >> Error should be displayed on
	 * screen with entity name if following entities are deleted/deactivate when
	 * buyer edit Draft PO (Req to PO).
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_145282(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);

			Requisition requisition = ObjectCreation.getRequisition(driver);

			Item item = ObjectCreation.getItem("catalogItem");

			/*
			 * int quantity = CommonUtilities.getNonZeroRandomNumbers(2);
			 * CatelogItem catelogItem2 = new CatelogItem();
			 * catelogItem2.setItemName(CommonServices.getTestData(
			 * IConstantsData.SEARCH_FOR)); catelogItem2.setQuantity(quantity);
			 */

			// item.getCatelogItems().add(catelogItem2);

			requisition.setItems(item);

			CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			// click on first ReqNo link
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			// Fill Req Change Comment
			PageBuyersDesk.fillReqChangeComment(driver, testCaseName, IConstantsData.REC_CHANGE_COMM);

			PageBuyersDesk.clickOnConvertToPo(driver, testCaseName);

			PagePurchaseOrderToBeGenerated.ClikOnPurchaseOrderToBeGeneratedCheckBox(driver, testCaseName, 0);

			// PagePurchaseOrderToBeGenerated.ClikOnPurchaseOrderToBeGeneratedCheckBox(driver,
			// testCaseName, 1);

			PagePurchaseOrderToBeGenerated.clickOnSavePosAsDraft(driver, testCaseName);
			StandardPO standardPO = new StandardPO();
			standardPO.setPoNumber(PagePurchaseOrderListing.getFirstPoNo(driver, testCaseName));
			MainPageHeaderLevelTab.clickOnMasterSubTab(driver);
			PageMasterDataSettings.clickOnCostCenterLink(driver, testCaseName);
			String search = CommonServices.getTestData(IConstantsData.COST_CENTER);
			PageCostCenterSettings.fillSearchCostCenter(driver, testCaseName, search);
			PageCostCenterSettings.clickOnGoBtn(driver);
			PageCostCenterSettings.clickOnActiveCCLin(driver);
			PopUpDefaultConfirmation.clickOnConfirmYesButton(driver, testCaseName);
			PageMasterDataSettings.clickOnReturnToSetUpModule(driver, testCaseName);
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			boolean value = PageStandardPO.isValidationMapCheckErrorPresent(driver, testCaseName);
			Assert.assertTrue(value);
			MainPageHeaderLevelTab.clickOnMasterSubTab(driver);
			PageMasterDataSettings.clickOnCostCenterLink(driver, testCaseName);
			PageCostCenterSettings.fillSearchCostCenter(driver, testCaseName, search);
			PageCostCenterSettings.clickOnGoBtn(driver);
			PageCostCenterSettings.clickOnDeActivateCCLink(driver);
			PopUpDefaultConfirmation.clickOnConfirmYesButton(driver, testCaseName);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		try
		{
			MainPageHeaderLevelTab.clickOnMasterSubTab(driver);
			PageMasterDataSettings.clickOnCostCenterLink(driver, testCaseName);
			String search = CommonServices.getTestData(IConstantsData.COST_CENTER);
			PageCostCenterSettings.fillSearchCostCenter(driver, testCaseName, search);
			PageCostCenterSettings.clickOnGoBtn(driver);
			PageCostCenterSettings.clickOnDeActivateCCLink(driver);
			PopUpDefaultConfirmation.clickOnConfirmYesButton(driver, testCaseName);
		}
		catch (Exception e)
		{
			logger.error("Unable to change cc" + e, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b> Test for bug 200294 - Free text item is
	 * not editable in PO if its coming from requisition. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_134473(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();

		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			Requisition requisition = ObjectCreation.getRequisition(driver);

			Item item = ObjectCreation.getItem(IConstantsData.GUIDED_ITEM);

			requisition.setItems(item);

			CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			// click on first ReqNo link
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			FlowBuyersDesk.convertToPo(driver, testCaseName);
			List<PurchaseOrder> purchaseOrders = FlowBuyersDesk.submitAllSuggestedPosForProcessing(driver, testCaseName);
			FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			CustomDate customDate = CommonUtilities.getRequiredBy();
			PageStandardPO.fillRequiredByDate(driver, testCaseName, customDate.getDay(), customDate.getMonth(), customDate.getYear());
			ActionBot.scroll(driver, "550");
			ActionBot.defaultSleep();
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			ActionBot.jQueryScroll(driver, ".eformItemInpt.ui-front", 400);
			// check whether item is editable or not
			float marketPrice = CommonUtilities.getNonZeroRandomNumber(2);
			float Mprice = ModalPOFreeTextItemSummaryItem.fillMarketPrice(driver, testCaseName, marketPrice);
			Assert.assertTrue("Free text item coming from req is not editable", marketPrice == Mprice);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b> Draft PO >> When items are linked with PO
	 * (draft/released); they can not be reorder from buyers desk. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_145111(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		boolean flag;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			Requisition requisition = ObjectCreation.getRequisition(driver);

			Item item = ObjectCreation.getItem(IConstantsData.GUIDED_ITEM);

			requisition.setItems(item);

			requisition = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			// click on first ReqNo link
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			FlowBuyersDesk.convertToPo(driver, testCaseName);

			PagePurchaseOrderToBeGenerated.ClikOnPurchaseOrderToBeGeneratedCheckBox(driver, testCaseName, 0);

			PagePurchaseOrderToBeGenerated.clickOnSavePosAsDraft(driver, testCaseName);
			FlowPoListing.searchPo(driver, testCaseName, requisition.getReqNo(), IConstantsData.SEARCH_BY_ORDER_DESCRIPTION);
			flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.DRAFT_FILTER_LABEL);
			Assert.assertTrue("PO is not in draft state", flag);

			FlowBuyersDeskListing.searchAtBuyersDeskListing(driver, testCaseName, requisition);
			// check item in buyer desk listing
			MainPageHeaderLevelTab.clickOnBuyersDeskSubTab(driver, testCaseName);
			PageBuyersDeskListing.clickOnClearStatusFilter(driver, testCaseName);
			FlowBuyersDeskListing.searchAtBuyersDeskListing(driver, testCaseName, requisition);
			flag = PageBuyersDesk.isConvertToPOOptionPresent(driver, testCaseName);
			Assert.assertFalse("Buyer is able to order drafted po items", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Draft PO >> When items are linked with PO
	 * (draft/released); they should not be editable at buyers desk.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_145112(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();

		User user = null;
		boolean flag;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			Requisition requisition = ObjectCreation.getRequisition(driver);

			Item item = ObjectCreation.getItem(IConstantsData.GUIDED_ITEM);

			requisition.setItems(item);

			requisition=CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			// click on first ReqNo link
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);

			ActionBot.scroll(driver, "600");
			FlowBuyersDesk.convertToPo(driver, testCaseName);
			FlowBuyersDesk.saveAllSuggestedPosAsDraft(driver, testCaseName);
			FlowPoListing.searchPo(driver, testCaseName, requisition.getReqNo(), IConstantsData.SEARCH_BY_ORDER_DESCRIPTION);
			flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.DRAFT_FILTER_LABEL);
			Assert.assertTrue("PO is not in draft state", flag);

			MainPageHeaderLevelTab.clickOnBuyersDeskSubTab(driver, testCaseName);
			// check item in buyer desk listing
			PageBuyersDeskListing.clickOnClearStatusFilter(driver, testCaseName);
			FlowBuyersDeskListing.searchAtBuyersDeskListing(driver, testCaseName, requisition);
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			int value = PageBuyersDesk.clickItemCheckbox(driver, testCaseName);
			flag = (value == 1);
			Assert.assertTrue("Item is editable at buyers desk", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b> Try copying a REQ containing catalog item
	 * whose price has been modified by buyer while submitting REQ. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_107214(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);

			Requisition requisition = ObjectCreation.getRequisition(driver);

			Item item = ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);
			requisition.setItems(item);

			CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			// click on first ReqNo link
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			// Fill Req Change Comment
			int itemPrice = CommonUtilities.getRandomNumbersBetweenRange(2, 10, (int) item.getCatelogItems().get(0).getUnitPrice());
			ActionBot.scroll(driver, "400");
			PageBuyersDesk.clickItemCheckbox(driver, testCaseName);
			String itemId = item.getCatelogItems().get(0).getItemID();
			itemPrice = PageBuyersDesk.fillItemPrice(driver, testCaseName, itemPrice, itemId);
			PageBuyersDesk.fillReqChangeComment(driver, testCaseName, IConstantsData.CONVERT_TO_PO_COMMENT);
			PageBuyersDesk.clickOnConvertToPo(driver, testCaseName);
			PageBuyersDesk.waitTillUpdateProcessingDivIsPresent(driver, testCaseName);
			if (!PagePurchaseOrderToBeGenerated.isSubmitPOForProcessingPresent(driver, testCaseName))
			{
				ActionBot.defaultSleep();
			}
			// submit all POs
			List<PurchaseOrder> purchaseOrders = FlowBuyersDesk.submitAllSuggestedPosForProcessing(driver, testCaseName);

			FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			String copyPONo = PageStandardPO.getPONo(driver, testCaseName);
			ActionBot.scroll(driver);
			String copyPONo1 = FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			if (copyPONo1 != null)
				copyPONo = copyPONo1;
			ActionBot.waitForPageLoad(driver);
			boolean flag = FlowPoListing.searchPo(driver, testCaseName, copyPONo, IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("PO is not copied", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b> Test for bug 196227 - Though user not
	 * provided PO contact from PO checkout still it PO contact is gone with PO.
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_106793(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();

		User user = null;
		boolean flag;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			StandardPO standardpo = new StandardPO();
			standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.GUIDED_ITEM);
			standardpo.setNextAction(IConstantsData.NONE);
			standardpo = FlowStandardPo.createStandardPo(driver, testCaseName, standardpo);
			ActionBot.scroll(driver, "700");
			ActionBot.defaultSleep();
			PageStandardPO.clearSupplierContact(driver, testCaseName);
			PageStandardPO.fillOrderDescription(driver, testCaseName, CommonServices.getTestData(IConstantsData.ORDER_DESCRIPTION));
			String supplierContact = PageStandardPO.getSupplierContact(driver, testCaseName);
			String poNo = FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			if (poNo != null)
				standardpo.setPoNumber(poNo);
			FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			String contact = PageViewPurchaseOrder.getSupplierContact(driver, testCaseName);
			flag = supplierContact.equalsIgnoreCase(contact);
			Assert.assertFalse("Supplier contact is dislayed even it is cleared", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Verify On click of it, User should get
	 * same pop-up as 'Email PO' but with following changes: Pop-up title:
	 * 'Remind Supplier', Option to remove attached PO document <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_107548(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		StandardPO standardPO = new StandardPO();
		// String expected =
		// CommonServices.getTestData(IConstantsData.REMIND_SUPPLIER_TITLE);
		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			ModalViewPOActions.clickOnRemindPoLink(driver, testCaseName);
			String rsupplier = PageViewPurchaseOrder.getRemindSupplierTitle(driver, testCaseName);
			Assert.assertEquals("Remind supplier title absent", IConstantsData.REMIND_SUPPLIER_TITLE, rsupplier);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Verify While adding email address in 'To'
	 * box in 'Email PO' pop-up, append each added name before 'To' box
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_107549(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		StandardPO standardPO = new StandardPO();
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);

			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			ModalViewPOActions.clickOnRemindPoLink(driver, testCaseName);
			String to = CommonServices.getTestData(IConstantsData.TO_FIELD_VALUE_FOR_SENDING_PO_EMAIL);
			PageViewPurchaseOrder.fillRemindSupplierToField(driver, testCaseName, to);
			String rsupplier = PageViewPurchaseOrder.getRemindSupplierAddedField(driver, testCaseName);
			Assert.assertNotNull("value not added", rsupplier);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>While adding/editing a item in PO : Auto
	 * suggest category from Description only when its empty.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_130498(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		CommonServices.getTestData(IConstantsData.REMIND_SUPPLIER_TITLE);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			PagePO.clickOnStandardPO(driver, testCaseName);
			ActionBot.scroll(driver, "400");
			PageStandardPO.clickOnFreeTextItem(driver);
			String shortDesc = CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 0);
			ModalPOFreeTextItemSummaryItem.fillShortDescription(driver, testCaseName, shortDesc);
			ModalPOFreeTextItemSummaryItem.fillFreeTextItemNo(driver, testCaseName, Integer.toString(CommonUtilities.getNonZeroRandomNumbers(1)));
			String productCategory = ModalPOFreeTextItemSummaryItem.getProductCategory(driver, testCaseName);
			Assert.assertNull("Product category is not auto selected", productCategory);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b> Test for bug 195336 - In a scenario,
	 * incorrect statuses shown for a PO and Copy of item getting created on its
	 * own.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_74843(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);

		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			String supplierName = CommonServices.getTestData(IConstantsData.OTHER_SUPPLIER_NAME);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			PagePO.clickOnStandardPO(driver, testCaseName);
			PageStandardPO.enterSupplierName(driver, supplierName);
			ActionBot.scroll(driver, "600");
			PageStandardPO.clickOnSearchItem(driver);
			PageStandardPO.fillAddItemsToPOField(driver, CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			PageStandardPO.clickOnSearch(driver);
			PageStandardPO.fillSearchSupplierForItem(driver, testCaseName, CommonServices.getTestData(IConstantsData.SUPPLIER_NAME));
			ActionBot.defaultSleep();
			PageStandardPO.clickOnAdd(driver, 1);
			ActionBot.defaultSleep();
			boolean diffSupplier = PageStandardPO.isPopUpForItemDiffSupplierPresent(driver, testCaseName);
			Assert.assertTrue("Add it as free text item msg not present", diffSupplier);
			PageStandardPO.clickOnPopItemDiffSupplierCancelLink(driver);
			boolean msgDisplayed = PageStandardPO.isItemNotAddedAsFreeTextItemMsg(driver, testCaseName);
			Assert.assertTrue("Item Added As freetextItem", msgDisplayed);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b> Catalog Item in PO via file : Try
	 * uploading fiel in format other than xlsx/xls.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_77581(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			PagePO.clickOnStandardPO(driver, testCaseName);
			ActionBot.scroll(driver);
			PageStandardPO.clickOnAddItemViaFileLink(driver, testCaseName);
			String filePath = IConstants.ATTACHMENT_FILES_PATH + IConstantsData.ITEM_FILE_OTHERTHAN_XLS;
			ModalUploadItemViaFile.enterFilePath(driver, testCaseName, filePath);
			ActionBot.defaultSleep();
			// ModalUploadItemViaFile.clickOnUploadFile(driver, testCaseName);
			boolean eMsg = PageStandardPO.isInvalidFileFormatErrorMsgDisplayed(driver, testCaseName);
			Assert.assertTrue(eMsg);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Add Item in PO via file : User should be
	 * able to add free-text items through file.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_77059(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			PagePO.clickOnStandardPO(driver, testCaseName);
			ActionBot.scroll(driver);
			PageStandardPO.clickOnAddItemViaFileLink(driver, testCaseName);
			String filePath = IConstants.ATTACHMENT_FILES_PATH + IConstantsData.FREE_TEXT_ITEM_ATTACHMENT;
			ModalUploadItemViaFile.enterFilePath(driver, testCaseName, filePath);
			ActionBot.defaultSleep();
			ModalUploadItemViaFile.clickOnUploadFile(driver, testCaseName);
			List<WebElement> IName = PageStandardPO.getItemName(driver, testCaseName);
			Assert.assertNotNull(IName);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Catalog Item in PO via file : Try
	 * uploading fiel wihtout any headers in it.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_77582(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			PagePO.clickOnStandardPO(driver, testCaseName);
			ActionBot.scroll(driver);
			PageStandardPO.clickOnAddItemViaFileLink(driver, testCaseName);
			String filePath = IConstants.ATTACHMENT_FILES_PATH + IConstantsData.ITEM_WITHOUT_HEADER;
			ActionBot.defaultSleep();
			ModalUploadItemViaFile.enterFilePath(driver, testCaseName, filePath);
			ActionBot.defaultSleep();
			ModalUploadItemViaFile.clickOnUploadFile(driver, testCaseName);
			// check for invalid file format
			boolean popUp = PageStandardPO.isInvalidFileFormatPop_upDisplayed(driver, testCaseName);
			Assert.assertTrue("Invalid pop_up not displayed", popUp);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 203678 - Unable to attach
	 * file in Copy PO if attachments already present from requisition or from
	 * PO.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_146694(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		try
		{

			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			StandardPO standardpo = new StandardPO();
			standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardpo.setNextAction(IConstantsData.NONE);
			standardpo = FlowStandardPo.createStandardPo(driver, testCaseName, standardpo);
			PageStandardPO.clickOnPOAddAttachmentLink(driver, testCaseName);
			String fileName = IConstants.ATTACHMENT_FILES_PATH + IConstantsData.FREE_TEXT_ITEM_ATTACHMENT;
			ModalPOAttachment.fillAttachmentFileName(driver, testCaseName, fileName);
			ModalPOAttachment.clickOnDoneButton(driver, testCaseName);
			String poNo = FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			if (poNo != null)
				standardpo.setPoNumber(poNo);
			FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			PageStandardPO.clickOnPOAddAttachmentLink(driver, testCaseName);
			String fileName1 = IConstants.ATTACHMENT_FILES_PATH + IConstantsData.FREE_TEXT_ITEM_ATTACHMENT;
			ModalPOAttachment.fillAttachmentFileName(driver, testCaseName, fileName1);
			ModalPOAttachment.clickOnDoneButton(driver, testCaseName);
			PageStandardPO.clickOnPOAddAttachmentLink(driver, testCaseName);
			String attachfileName = ModalPOAttachment.getAttachmentName(driver, testCaseName);
			Assert.assertEquals("unable to add new file", IConstantsData.FREE_TEXT_ITEM_ATTACHMENT, attachfileName);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 203678 - Unable to attach
	 * file in Copy PO if attachments already present from requisition or from
	 * PO.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_151984(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		User user = null;
		boolean flag;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase, mappedTestCases);
			user = LoginLogoutServices.login(driver, testCase);

			{
				// RTC_151985 : testcase to be mapped
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_151985"));

			}
			StandardPO standardpo = new StandardPO();
			standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardpo.setNextAction(IConstantsData.NONE);
			standardpo = FlowStandardPo.createStandardPo(driver, testCaseName, standardpo);
			ActionBot.scroll(driver, "-450");
			PageStandardPO.clickOnPOAddAttachmentLink(driver, testCaseName);
			String fileName = IConstants.ATTACHMENT_FILES_PATH + IConstantsData.FREE_TEXT_ITEM_ATTACHMENT;
			ModalPOAttachment.fillAttachmentFileName(driver, testCaseName, fileName);
			ModalPOAttachment.selectVisibility(driver, testCaseName, IConstantsData.internal_file_visibility, IConstantsData.FREE_TEXT_ITEM_ATTACHMENT);
			ModalPOAttachment.clickOnDoneButton(driver, testCaseName);
			String poNo = FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			if (poNo != null)
				standardpo.setPoNumber(poNo);
			flag = FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("Error while searching PO", flag);

			String status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			if (status.equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL))
			{
				// to approve the PO
				ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, standardpo.getPoNumber(),
					IConstantsData.PURCHASE_ORDER, IConstantsData.APPROVE);
				FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

				// search po
				FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			}
			flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.RELEASED);
			Assert.assertTrue("PO is not in released state", flag);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnPreviewPoLink(driver, testCaseName);
			// switch to preview po page and get attachment
			String winHandlerBefore = driver.getWindowHandle();
			Set<String> winHandler = driver.getWindowHandles();
			for (String handler : winHandler)
			{
				driver.switchTo().window(handler);
			}

			driver.manage().window().maximize();

			logger.info("driver is :" + driver.getTitle());

			driver.switchTo().window(winHandlerBefore);
			flag = FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			PageStandardPO.clickOnPOAddAttachmentLink(driver, testCaseName);
			ModalPOAttachment.selectVisibility(driver, testCaseName, IConstantsData.supplier_file_visibility, IConstantsData.FREE_TEXT_ITEM_ATTACHMENT);
			ModalPOAttachment.clickOnDoneButton(driver, testCaseName);
			PurchaseOrder purchaseOrder = new PurchaseOrder();
			purchaseOrder.setCustomDate(CommonUtilities.getRequiredBy());

			PageStandardPO.fillRequiredByDate(driver, testCaseName, purchaseOrder.getCustomDate().getDay(), purchaseOrder.getCustomDate().getMonth(),
				purchaseOrder.getCustomDate().getYear());
			String copyPo = FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			if (copyPo != null)
				standardpo.setPoNumber(copyPo);
			flag = FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			assertTrue("Error while searching PO", flag);

			String status1 = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			if (status1.equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL))
			{
				// to approve the PO
				ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, standardpo.getPoNumber(),
					IConstantsData.PURCHASE_ORDER, IConstantsData.APPROVE);
				FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

				// search po
				flag = FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			}
			flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.RELEASED);
			mappedTestCases.get(0).setTestResult(flag);
			Assert.assertTrue("PO is not in released state", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Catalog Item in PO via file : Try
	 * uploading fiel wihtout any headers in it.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_77065(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		{
			// RTC_22610 : testcase to be mapped
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_77066"));
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_77067"));
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_77068"));
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_77069"));

		}
		CommonServices.startTestCase(driver, testCase, mappedTestCases);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			PagePO.clickOnStandardPO(driver, testCaseName);
			ActionBot.scroll(driver);
			PageStandardPO.clickOnAddItemViaFileLink(driver, testCaseName);
			String filePath = IConstants.ATTACHMENT_FILES_PATH + IConstantsData.ITEM_ATTACHMENT_VALIDATION;
			ActionBot.defaultSleep();
			ModalUploadItemViaFile.enterFilePath(driver, testCaseName, filePath);
			ActionBot.defaultSleep();
			ModalUploadItemViaFile.clickOnUploadFile(driver, testCaseName);
			// check for invalid file format
			boolean flag = PageStandardPO.isItemNameMissingMsgDisplayed(driver, testCaseName);
			mappedTestCases.get(0).setTestResult(!flag);
			boolean flag1 = PageStandardPO.isProductCatagoryMissingMsgDisplayed(driver, testCaseName);
			mappedTestCases.get(1).setTestResult(!flag1);
			boolean flag2 = PageStandardPO.isUnitPriceMissingMsgDisplayed(driver, testCaseName);
			mappedTestCases.get(2).setTestResult(!flag2);
			boolean flag3 = PageStandardPO.isUoMMissingMsgDisplayed(driver, testCaseName);
			mappedTestCases.get(3).setTestResult(!flag3);
			Assert.assertTrue("Invalid pop_up not displayed", !flag);
			// PageStandardPO.clickOnErrorModalCloseBtn(driver, testCaseName);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Catalog Item in PO via file : Try
	 * uploading file with disturbed structure than template [any missing
	 * columns OR extra columns]
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_78085(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			PagePO.clickOnStandardPO(driver, testCaseName);
			ActionBot.scroll(driver);
			PageStandardPO.clickOnAddItemViaFileLink(driver, testCaseName);
			String filePath = IConstants.ATTACHMENT_FILES_PATH + IConstantsData.ITEM_FILE_WITH_DISTURBED_STRUCTURE;
			ActionBot.defaultSleep();
			ModalUploadItemViaFile.enterFilePath(driver, testCaseName, filePath);
			ActionBot.defaultSleep();
			ModalUploadItemViaFile.clickOnUploadFile(driver, testCaseName);
			// check for invalid file format
			boolean popUp = PageStandardPO.isInvalidFileFormatPop_upDisplayed(driver, testCaseName);
			Assert.assertTrue("Invalid pop_up not displayed", popUp);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Catalog Item in PO via file : Perform max
	 * allowed length validation on all columns in file.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_77074(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			PagePO.clickOnStandardPO(driver, testCaseName);
			ActionBot.scroll(driver);
			PageStandardPO.clickOnAddItemViaFileLink(driver, testCaseName);
			String filePath = IConstants.ATTACHMENT_FILES_PATH + IConstantsData.ITEM_FILE_WITH_MAXCHAR;
			ActionBot.defaultSleep();
			ModalUploadItemViaFile.enterFilePath(driver, testCaseName, filePath);
			ActionBot.defaultSleep();
			ModalUploadItemViaFile.clickOnUploadFile(driver, testCaseName);
			// check for invalid file format
			boolean eMsg = (ActionBot.isElementDisplayed(driver, IPageStandardPO.ALERT_MESSAGE_INVALID_ATTACHMENT)) ? true : false;
			//boolean eMsg = PageStandardPO.isInvalidFileFormatErrorMsgDisplayed(driver, testCaseName);
			Assert.assertTrue(eMsg);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Catalog Item in PO via file : System
	 * should take currency automatically as supplier currency while uploading
	 * thru file.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_77071(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			PagePO.clickOnStandardPO(driver, testCaseName);

			ActionBot.scroll(driver);
			PageStandardPO.clickOnAddItemViaFileLink(driver, testCaseName);
			String filePath = IConstants.ATTACHMENT_FILES_PATH + IConstantsData.FREE_TEXT_ITEM_ATTACHMENT;

			ActionBot.defaultSleep();
			ModalUploadItemViaFile.enterFilePath(driver, testCaseName, filePath);
			ActionBot.defaultSleep();
			ModalUploadItemViaFile.clickOnUploadFile(driver, testCaseName);
			// check for invalid file format
			boolean eMsg = (ActionBot.isElementDisplayed(driver, IPageStandardPO.ALERT_MESSAGE_INVALID_ATTACHMENT)) ? false : true;
			Assert.assertTrue(eMsg);

			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			ActionBot.jQueryScroll(driver, ".eformItemInpt.ui-front", 600);
			String scurrency = ModalItemSummaryItem.getModalItemCurrencylabel(driver, testCaseName);
			Assert.assertNotNull(scurrency);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 200979 - Though there is only
	 * 24 item in file still it shown the error of 'Only 25 item can be uploaded
	 * via file in PO'.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_134463(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		User user = null;
		boolean flag;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase, mappedTestCases);
			user = LoginLogoutServices.login(driver, testCase);

			{
				// RTC_134458 : testcase to be mapped
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_134458"));
			}
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			PagePO.clickOnStandardPO(driver, testCaseName);
			String supplierName = CommonServices.getTestData(IConstantsData.SUPPLIER_NAME);
			PageStandardPO.enterSupplierName(driver, supplierName);
			ActionBot.scroll(driver, "450");
			PageStandardPO.clickOnAddItemViaFileLink(driver, testCaseName);
			String filePath = IConstants.ATTACHMENT_FILES_PATH + IConstantsData.FILE_WITH_MULTIPLE_ITEMS;
			ActionBot.defaultSleep();
			ModalUploadItemViaFile.enterFilePath(driver, testCaseName, filePath);
			ActionBot.defaultSleep();
			ModalUploadItemViaFile.clickOnUploadFile(driver, testCaseName);
			ActionBot.defaultMediumSleep();
			// check for invalid file format
			boolean maxvalue = PageStandardPO.isMaxNoItemErrorMasgDisplayed(driver, testCaseName);
			Assert.assertTrue("can add more than 200 items", maxvalue);
			mappedTestCases.get(0).setTestResult(maxvalue);
			PageStandardPO.clickOnOkMoreItemAlertPopUp(driver);
			PageStandardPO.clickOnAddItemViaFileLink(driver, testCaseName);
			String filePath1 = IConstants.ATTACHMENT_FILES_PATH + IConstantsData.FILE_WITH_25_ITEMS;
			ActionBot.defaultSleep();
			ModalUploadItemViaFile.enterFilePath(driver, testCaseName, filePath1);
			ActionBot.defaultSleep();
			ModalUploadItemViaFile.clickOnUploadFile(driver, testCaseName);
			ActionBot.defaultSleep();
			flag = PageStandardPO.getListOfItems(driver, testCaseName).size() == 25;
			Assert.assertTrue("Unable to add item via file", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Add Item in PO via file : System should
	 * validate for following error while uploading file>>Duplicate Line No
	 * (Line # %Line_No.% has already been consumed)
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_77063(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			PagePO.clickOnStandardPO(driver, testCaseName);
			ActionBot.scroll(driver);
			PageStandardPO.clickOnAddItemViaFileLink(driver, testCaseName);
			String filePath = IConstants.ATTACHMENT_FILES_PATH + IConstantsData.ITEM_WITH_DUPLICATE_LINE_NO;
			ActionBot.defaultSleep();
			ModalUploadItemViaFile.enterFilePath(driver, testCaseName, filePath);
			ActionBot.defaultSleep();
			ModalUploadItemViaFile.clickOnUploadFile(driver, testCaseName);
			// check for invalid file format
			boolean popUp = PageStandardPO.isItempopUpDuplicateLineErrorMsgDisplayed(driver, testCaseName);
			Assert.assertTrue("Duplicate LineNo pop_up not displayed", popUp);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Catalog Item in PO via file : System
	 * should take currency automatically as supplier currency while uploading
	 * through file. [try same before selecting supplier]
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_77072(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			PagePO.clickOnStandardPO(driver, testCaseName);
			//FlowStandardPo.addItem(driver, testCaseName, ObjectCreation.getItem(IConstantsData.CATALOG_ITEM));
			ActionBot.scroll(driver);
			PageStandardPO.clickOnAddItemViaFileLink(driver, testCaseName);
			String filePath = IConstants.ATTACHMENT_FILES_PATH + IConstantsData.FREE_TEXT_ITEM_ATTACHMENT;
			ActionBot.defaultSleep();
			ModalUploadItemViaFile.enterFilePath(driver, testCaseName, filePath);
			ActionBot.defaultSleep();
			ModalUploadItemViaFile.clickOnUploadFile(driver, testCaseName);
			// check for invalid file format
			boolean eMsg = (ActionBot.isElementDisplayed(driver, IPageStandardPO.ALERT_MESSAGE_INVALID_ATTACHMENT)) ? false : true;
			Assert.assertTrue(eMsg);

			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			ActionBot.jQueryScroll(driver, ".eformItemInpt.ui-front", 600);
			String scurrency = ModalItemSummaryItem.getModalItemCurrencylabel(driver, testCaseName);
			Assert.assertEquals("-", scurrency);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 215434 - [Demo][IE]: Error
	 * 500 is displayed on copying a purchase order whose purchase type is
	 * deleted or Purchase type is not selected.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_224288(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();

		User user = null;
		boolean flag;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			StandardPO standardPO = new StandardPO();
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createStandardPo(driver, testCaseName, standardPO);

			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);

			//FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			PageStandardPO.enterPurchaseType(driver, CommonServices.getTestData(IConstantsData.PurchaseType_Used_In_Custom_Business_Rule));
			if (PopUpDeleteConfirmation.isYesButtonPresent(driver, testCaseName))
			{
				PopUpDeleteConfirmation.clickOnYesButton(driver, testCaseName);
			}
			PageStandardPO.clickOnSubmitPOForProcessing(driver, testCaseName);
			flag = PageStandardPO.isPurchaseTypeErroMsgDisplayed(driver, testCaseName);
			Assert.assertTrue("Error message is not displayed", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Draft PO &gt;&gt; If custom address is
	 * defined in PO then all buyers should be able to use that address for that
	 * particular PO only.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_145283(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		Requisition requisition = new Requisition();
		boolean flag = false;
		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			String myAddress_Name = CommonServices.getTestData(IConstantsData.MY_ADDRESS);
			String myAddress_Street1 = CommonServices.getTestData(IConstantsData.MY_ADDRESS_STREET1);
			String myAddress_city = CommonServices.getTestData(IConstantsData.CITY);
			String myAddress_country = CommonServices.getTestData(IConstantsData.COUNTY);
			// click On PoTab
			requisition = ObjectCreation.getRequisition(driver);

			Item item = ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);

			requisition.setItems(item);
			DeliveryRequisitionSummary deliveryRequisitionSummary = new DeliveryRequisitionSummary();
			requisition.setDeliveryRequisitionSummary(deliveryRequisitionSummary);
			// deliveryRequisitionSummary.setMyAddressOption(true);
			deliveryRequisitionSummary.setMyAddressOption(true);
			deliveryRequisitionSummary.setSelectDeliveryAddress(null);
			deliveryRequisitionSummary.setMyAddress_Name(myAddress_Name);
			deliveryRequisitionSummary.setMyAddress_Street1(myAddress_Street1);
			deliveryRequisitionSummary.setMyAddress_city(myAddress_city);
			deliveryRequisitionSummary.setMyAddress_country(myAddress_country);
			deliveryRequisitionSummary.setNextAction(IConstantsData.NONE);
			int myAddress_zip = CommonUtilities.getNonZeroRandomNumbers(5);
			deliveryRequisitionSummary.setMyAddress_zip(myAddress_zip);
			//			CostBookingRequisitionSummary costBookingRequisitionSummary = new CostBookingRequisitionSummary();
			//			requisition.setCostBookingRequisitionSummary(costBookingRequisitionSummary);
			//			costBookingRequisitionSummary.setBookCostToSingleCostCenter(true);
			//			String costCenterBudgetAndProject = CommonServices.getTestData(IConstantsData.CC_PROJECT_BUDGET);
			//			String costCenter, budget, project;
			//			String temp[] = StringUtils.split(costCenterBudgetAndProject.trim(), ",");
			//			costCenter = temp[0].trim();
			//			budget = temp[2].trim();
			//			project = temp[1].trim();
			//			costBookingRequisitionSummary.setCostCenter(costCenter);
			//			costBookingRequisitionSummary.setBudget(budget);
			//			costBookingRequisitionSummary.setProject(project);
			//			costBookingRequisitionSummary.setNextAction(IConstantsData.SAVE);
			//			deliveryRequisitionSummary.setNextAction(IConstantsData.NONE);
			//			requisition.setNextAction(IConstantsData.SUBMIT_REQ);
			// requisition = FlowRequisition.createRequisition(driver,
			// testCaseName, requisition);
			requisition = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);
			// convert To Po
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			FlowBuyersDesk.convertToPo(driver, testCaseName);
			PagePurchaseOrderToBeGenerated.ClikOnPurchaseOrderToBeGeneratedCheckBox(driver, testCaseName, 0);
			PagePurchaseOrderToBeGenerated.clickOnSavePosAsDraft(driver, testCaseName);
			ActionBot.defaultMediumSleep();
			FlowPoListing.searchPo(driver, testCaseName, requisition.getReqNo(), IConstantsData.SEARCH_BY_ORDER_DESCRIPTION);
			PurchaseOrder purchaseorder = new PurchaseOrder();
			purchaseorder.setPoNo(PagePurchaseOrderListing.getFirstPoNo(driver, testCaseName));
			User user2 = UserUtilHelper.getAvailableUserFromList();
			LoginLogoutServices.logout(driver, testCase, user);
			ActionBot.defaultMediumSleep();

			// login with other user
			LoginLogoutServices.login(driver, testCase, user2);
			// user = user2;
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			flag = FlowPoListing.searchPo(driver, testCaseName, purchaseorder.getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("Unable to see all draft", flag);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			ActionBot.defaultMediumSleep();
			PageStandardPO.clickOnEdit(driver);
			TabPOSummary.clickOnDeliveryPOSummary(driver);
			ModalPOSummaryDelivery.clickOnMyAddress(driver, testCaseName);
			String address = CommonServices.getTestData(IConstantsData.MY_ADDRESS);
			ModalPOSummaryDelivery.fillMyAddress(driver, testCaseName, address);
			ModalPOSummaryCostBooking.clickOnSave(driver, testCaseName);
			//			MainPageHeaderLevelTab.clickOnPOTab(driver);
			//			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 2);
			//			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			//			ActionBot.defaultMediumSleep();
			//			PageStandardPO.clickOnEdit(driver);
			//			TabPOSummary.clickOnDeliveryPOSummary(driver);
			//			ModalPOSummaryDelivery.clickOnMyAddress(driver, testCaseName);
			//			String address1 = CommonServices.getTestData(IConstantsData.MY_ADDRESS);
			//			ModalPOSummaryDelivery.fillMyAddress(driver, testCaseName, address1);
			//			ModalPOSummaryCostBooking.clickOnSave(driver, testCaseName);
			//			PageStandardPO.clickOnSaveAsDraftPo(driver);
			//			ActionBot.defaultSleep();
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}

	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 216256 - Error 500 thrown
	 * while convert to PO in mentioned case
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_226899(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		new PurchaseOrder();
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			Requisition requisition = ObjectCreation.getRequisition(driver);

			Item item = ObjectCreation.getItem("guidedItem");

			requisition.setItems(item);
			CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);
			// convert To Po
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);

			PageBuyersDesk.clickOnConvertToPo(driver, testCaseName);
			String reNo = PageConvertedPurchaseOrder.getPurchaseOrderReqNo(driver, testCaseName, 1);
			Assert.assertNotNull(reNo);

			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			PageCustomizeSettings.clickOnCostBookingLink(driver, testCaseName);
			PageBudgetSettings.clickOnAllowBudgetUtilizationNO(driver, testCaseName);

			CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);

			PageBuyersDesk.clickOnConvertToPo(driver, testCaseName);
			PagePurchaseOrderToBeGenerated.clickOnPreviewPoLink(driver, testCaseName, 1);
			String reNo1 = PageConvertedPurchaseOrder.getPurchaseOrderReqNo(driver, testCaseName, 1);
			Assert.assertNotNull(reNo1);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 215261 - Error is not shown
	 * while adding a free text item without parametric data in specification .
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_222403(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			String SpecificationName = CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING);
			String SpecificationsDataValue = CommonServices.getTestData(IConstantsData.SPECIFICATION_DATA_VALUE);
			// click On PoTab
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			PagePO.clickOnStandardPO(driver, testCaseName);
			ActionBot.scroll(driver);
			Item item = new Item();
			item = ObjectCreation.getItem(IConstantsData.GUIDED_ITEM);
			FlowStandardPo.addItem(driver, testCaseName, item);
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			ActionBot.defaultSleep();
			ActionBot.jQueryScroll(driver, ".eformItemInpt.ui-front", 900);
			ModalPOFreeTextItemSummaryItem.clickOnIsGreenRadioButton(driver, testCaseName);
			// ModalPOFreeTextItemSummaryItem.clickOnIsGreenRadioButton(driver,
			// testCaseName);
			ModalPOFreeTextItemSummaryItem.clickOnIsPreferredRadioButton(driver, testCaseName);
			ActionBot.defaultSleep();

			ModalPOFreeTextItemSummaryItem.fillSpecificationsName(driver, testCaseName, SpecificationName);
			ModalPOFreeTextItemSummaryItem.fillSpecificationsDataValue(driver, testCaseName, SpecificationsDataValue);
			ModalPOFreeTextItemSummaryItem.clickOnSave(driver, testCaseName);
			boolean erroricon = ModalPOFreeTextItemSummaryItem.isNullSpecificationKeyIcondisplayed(driver, testCaseName);
			Assert.assertTrue("error msg displayed", erroricon);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 214845 - PO Number is
	 * displayed as blank in the following scenario
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_219475(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);
			String poNumberFormat = CommonServices.getTestData(IConstantsData.PO_NO_FORMAT_TEMP);
			PagePurchaseOrderSetting.fillPONumberFormat(driver, testCaseName, poNumberFormat);
			PagePurchaseOrderSetting.clickOnSaveButton(driver, testCaseName);
			StandardPO standardPO = new StandardPO();
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnAmendPOFromActions(driver, testCaseName);
			PurchaseOrder purchaseOrder = new PurchaseOrder();
			purchaseOrder.setCustomDate(CommonUtilities.getRequiredBy());

			PageStandardPO.fillRequiredByDate(driver, testCaseName, purchaseOrder.getCustomDate().getDay(), purchaseOrder.getCustomDate().getMonth(),
				purchaseOrder.getCustomDate().getYear());
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			boolean poNo = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue(poNo);
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);
			String poNumberFormatsetting = CommonServices.getTestData(IConstantsData.PO_NO_FORMAT_AS_PER_SETTING);
			PagePurchaseOrderSetting.fillPONumberFormat(driver, testCaseName, poNumberFormatsetting);
			PagePurchaseOrderSetting.clickOnSaveButton(driver, testCaseName);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
				PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);
				String poNumberFormatsetting = CommonServices.getTestData(IConstantsData.PO_NO_FORMAT_AS_PER_SETTING);
				PagePurchaseOrderSetting.fillPONumberFormat(driver, testCaseName, poNumberFormatsetting);
				PagePurchaseOrderSetting.clickOnSaveButton(driver, testCaseName);
			}
			catch (Exception e)
			{
				logger.error("Exception occurred while changing Pruchase Order" + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}
		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 205420 - 500 error is
	 * occurred on currency change in copy PO when multilingual item present in
	 * PO.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_162215(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		String changedCurrency = CommonServices.getTestData(IConstantsData.CHANGED_CURRENCY);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			StandardPO standardPO = new StandardPO();
			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			CatelogItem catelogItem = standardPO.getItems().getCatelogItems().get(0);
			catelogItem.setItemName(CommonServices.getTestData(IConstantsData.MULTILINGUAL_CHARACTER_ITEMNAME));
			standardPO.setNextAction(IConstantsData.NONE);
			standardPO.setItems(new Item());
			//			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);

			// create standard PO
			standardPO = FlowStandardPo.createStandardPo(driver, testCaseName, standardPO);

			logger.info("=================== Adding Catalog Item ===================");
			PageStandardPO.clickOnSearchItem(driver);
			FlowStandardPo.searchItem(driver, testCaseName, catelogItem);
			//			FlowStandardPo.addCatalogItemToCart(driver, testCaseName, catelogItem);

			WebElement quantityElement = PageStandardPO.fillQuantity(driver, testCaseName).get(0);
			ActionBot.scroll(driver, quantityElement);
			quantityElement.clear();
			quantityElement.sendKeys(Integer.toString(catelogItem.getQuantity()));
			logger.info("Entered Quantity : " + quantityElement.getAttribute("value").trim());
			ScreenShot.screenshot(driver, testCaseName, "After adding Quantity");
			ActionBot.defaultSleep();
			WebElement addBtnElement = PageStandardPO.Additem(driver, testCaseName).get(0);
			Actions actions = new Actions(driver);
			actions.moveToElement(addBtnElement).click().build().perform();

			ActionBot.scroll(driver, "350");
			catelogItem.setItemID(PageStandardPO.getItemId(driver, testCaseName, catelogItem.getItemName()));
			logger.info("=========================================================");

			ActionBot.defaultSleep();
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			// search po
			boolean flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);

			String status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			if (status.equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL))
			{
				assertTrue("Error while searching PO", flag);
				MainPageHeaderLevelTab.clickOnApprovalAllRequestsTab(driver);
				// to approve the PO
				ApprovalAllRequests approvalAllRequests = new ApprovalAllRequests();
				approvalAllRequests.setDocumentNo(standardPO.getPoNumber());
				approvalAllRequests.setActions(IConstantsData.APPROVE);
				approvalAllRequests.setComment(IConstantsData.APPROVE_COMMENT);
				approvalAllRequests.setDocumentType(IConstantsData.PURCHASE_ORDER);
				FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

				ActionBot.defaultSleep();
				ActionBot.defaultHighSleep();
				driver.navigate().refresh();
				driver.navigate().refresh();
				// search po
				flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
				assertTrue("Error while searching PO", flag);
				flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.COMPLETE_RELEASED_FILTER_LABEL);
				assertTrue("Status of PO was not Released", flag);
			}

			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			PurchaseOrder purchaseOrder = new PurchaseOrder();
			purchaseOrder.setCustomDate(CommonUtilities.getRequiredBy());

			PageStandardPO.fillRequiredByDate(driver, testCaseName, purchaseOrder.getCustomDate().getDay(), purchaseOrder.getCustomDate().getMonth(),
				purchaseOrder.getCustomDate().getYear());
			PageStandardPO.changeCurrencyOfSupplier(driver, testCaseName, changedCurrency);
			ModalChangeCurrencyPO.clickOnConvertAmountsToCurrencyType(driver, testCaseName);
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			boolean poNo = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue(poNo);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 213857 - User is unable to
	 * search gl account by gl code
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	//	@Test(dataProvider = "dataProvider")
	//	public void RTC_205035(TestCase testCase) throws Exception
	//	{
	//		WebDriver driver = DriverSelector.getDriver(testCase);
	//		String testCaseName = testCase.getTestMethodName();
	//		Map<String, String> map = new HashMap<String, String>();
	//		CommonServices.startTestCase(driver, testCase);
	//		User user = null;
	//		try
	//		{
	//			user = LoginLogoutServices.login(driver, testCase);
	//			// click On PoTab
	//			StandardPO standardPO = new StandardPO();
	//			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
	//			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);
	//			MainPageHeaderLevelTab.clickOnMasterSubTab(driver);
	//			PageMasterDataSettings.clickOnGLAccountsLink(driver, testCaseName);
	//			String glaccount = CommonServices.getTestData(IConstantsData.GL_ACCOUNT_CODE);
	//			PageGLAccountsMasterDataSettings.enterGLAccountInSearch(driver, testCaseName, glaccount);
	//			PageGLAccountsMasterDataSettings.selectGlAccountCode(driver, testCaseName, 1);
	//			PageGLAccountsMasterDataSettings.clickOnGO(driver, testCaseName);
	//
	//			CommonServices.successfulExecutionOfTestCase(driver, testCase);
	//		}
	//		catch (AssertionError e)
	//		{
	//			CommonServices.assertionMethod(driver, testCase, user, e);
	//		}
	//		catch (Exception e)
	//		{
	//			CommonServices.exceptionMethod(driver, testCase, user, e);
	//		}
	//		finally
	//		{
	//			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
	//
	//		}
	//	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 214554 - Error is displayed
	 * if PO number exceeds the last sequence number
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_219319(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		StandardPO standardpo = new StandardPO();
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);
			int sequenceNoStartsAt = CommonUtilities.getNonZeroRandomNumbers(1);
			PagePurchaseOrderSetting.fillSequenceNumberStartsAt(driver, testCaseName, sequenceNoStartsAt);

			PagePurchaseOrderSetting.fillSequenceNumberEndsAt(driver, testCaseName, sequenceNoStartsAt);
			PagePurchaseOrderSetting.clickOnSaveButton(driver, testCaseName);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_NAME);
			standardpo.setNextAction(IConstantsData.NONE);
			FlowStandardPo.createStandardPo(driver, testCaseName, standardpo);
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			boolean ponoExceedErrorMsg = PagePurchaseOrderListing.isPoNOExceedErrorMsgDisplayed(driver, testCaseName);
			Assert.assertTrue("poNo exceed error Msg Not displayed", ponoExceedErrorMsg);
			PopUpDefaultConfirmation.clickOnConfirmYesButton(driver, testCaseName);
			// change sequence no.
			MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);
			int sequenceNoStartsAt1 = CommonUtilities.getNonZeroRandomNumbers(1);
			PagePurchaseOrderSetting.fillSequenceNumberStartsAt(driver, testCaseName, sequenceNoStartsAt1);
			int sequenceNoStartsAt2 = CommonUtilities.getNonZeroRandomNumbers(3);
			PagePurchaseOrderSetting.fillSequenceNumberEndsAt(driver, testCaseName, sequenceNoStartsAt2);
			PagePurchaseOrderSetting.clickOnSaveButton(driver, testCaseName);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 205865 - Line number for item
	 * is not getting auto generated even when the setting for auto-generation
	 * is yes in below scenario
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_162554(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			StandardPO standardpo = new StandardPO();
			standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardpo.setNextAction(IConstantsData.NONE);
			FlowStandardPo.createStandardPo(driver, testCaseName, standardpo);
			PageStandardPO.clickOnFreeTextItem(driver);
			int lineNo = ModalPOFreeTextItemSummaryItem.getLineNo(driver, testCaseName);
			Assert.assertNotNull("Line number is not autogenerated", lineNo);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 207932 - On editing draft
	 * PO/BPO, Number getting changed on changing delivery address at header
	 * level
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_178248(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		String addressName = CommonServices.getTestData(IConstantsData.MY_ADDRESS);
		String addressStreetName = CommonServices.getTestData(IConstantsData.TAX_FREE_DELIVERY_ADDRESS);
		String countyName = CommonServices.getTestData(IConstantsData.COUNTY);
		String cityName = CommonServices.getTestData(IConstantsData.CITY);
		User user = null;
		boolean flag;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab

			StandardPO standardpo = new StandardPO();
			standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardpo.setNextAction(IConstantsData.SAVE_PO_AS_DRAFT);
			standardpo = FlowStandardPo.createStandardPo(driver, testCaseName, standardpo);
			FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);

			PageStandardPO.clickOnEdit(driver);

			TabPOSummary.clickOnDeliveryPOSummary(driver);
			ModalPOSummaryDelivery.clickOnMyAddress(driver, testCaseName);
			ModalPOSummaryDelivery.clickOnCreateNewAddress(driver, testCaseName);
			ModalPOSummaryDelivery.fillNewAddressName(driver, testCaseName, addressName);
			ModalPOSummaryDelivery.fillNewAddressStreetName(driver, testCaseName, addressStreetName);
			ModalPOSummaryDelivery.enterCityName(driver, testCaseName, cityName);
			ModalPOSummaryDelivery.enterCountyName(driver, testCaseName, countyName);
			ModalPOSummaryDelivery.selectCountryName(driver, testCaseName, 1);
			int zipcode = CommonUtilities.getNonZeroRandomNumbers(4);
			ModalPOSummaryDelivery.fillNewAddressPostalCode(driver, testCaseName, zipcode);
			ModalPOSummaryCostBooking.clickOnSave(driver, testCaseName);
			ActionBot.click(driver, IModalPOSummaryDeliveryImpl.BUTTON_OK_CHANGE_ADDRESS_ALERT);
			//		ActionBot.click(driver, By.xpath(".//div[contains(@class,\"ui-dialog-buttonpane\")]//button"));

			String cpoNo = PageStandardPO.getPONo(driver, testCaseName);
			Assert.assertEquals("po no changed", standardpo.getPoNumber(), cpoNo);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 201448 - Able to submit one
	 * Draft amendment twice as two different users concurrently.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_134370(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();

		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			// click On PoTab
			StandardPO standardpo = new StandardPO();
			standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardpo = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardpo);
			FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnAmendPOFromActions(driver, testCaseName);
			PurchaseOrder purchaseOrder = new PurchaseOrder();
			purchaseOrder.setCustomDate(CommonUtilities.getRequiredBy());

			PageStandardPO.fillRequiredByDate(driver, testCaseName, purchaseOrder.getCustomDate().getDay(), purchaseOrder.getCustomDate().getMonth(),
				purchaseOrder.getCustomDate().getYear());
			FlowStandardPo.savePOAsDraft(driver, testCaseName);
			User user2 = UserUtilHelper.getAvailableUserFromList();
			LoginLogoutServices.logout(driver, testCase, user);
			ActionBot.defaultMediumSleep();
			// login with other user
			LoginLogoutServices.login(driver, testCase, user2);
			// user = user2;
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			PagePurchaseOrderListing.clickOnViewAmmendedPO(driver, testCaseName);
			PageAmmendedPO.clickOnAmendedPONumber(driver, testCaseName, standardpo.getPoNumber());
			boolean isAleart = PageAmmendedPO.isPoNoAlreadyAmendedAlertDisplayed(driver, testCaseName);
			Assert.assertTrue(isAleart);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 213818 - Allowing to delete
	 * items even though invoice has been created against them.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_204426(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		Invoice invoice = new Invoice();
		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			StandardPO standardpo = new StandardPO();
			standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardpo = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardpo);

			// create invoice
			invoice = ObjectCreation.getDefaultFlipInvoiceObject();
			invoice.setNextAction(IConstantsData.SUBMIT_INVOICE);
			FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnPoActionsLink(driver, testCaseName);
			ModalPOActions.clickOnCreateInvoiceFromActions(driver, testCaseName);
			invoice = FlowFlipInvoice.createFlipInvoice(driver, testCaseName, invoice);
			FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			String invoiceStatus = FlowPoListing.getInvocieIconStatus(driver, testCaseName);
			Assert.assertTrue("Invoice is not created", invoiceStatus.equalsIgnoreCase(IConstantsData.FULLY_INVOICED));

			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			PageViewPurchaseOrder.clickOnAmendPo(driver, testCaseName);
			PopUpAlertAmmendedPO.clickOnContinueButton(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			boolean deleteItem = PageStandardPO.isDeleteItemDisabled(driver, testCaseName);
			Assert.assertTrue("Items in invoice can be deleted", deleteItem);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>In Create Standard PO; If user changes Tax
	 * rate or tax amount from header or from item then it should reflect values
	 * at all places at PO header; CC at Header in Qtip;CC at item level; price
	 * in item grid/item details modal;accounting;Taxes at item; taxes at item;
	 * in delivery split; market price; unit price; PO gross total; PO Net
	 * Total. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_139303(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		User user = null;
		boolean flag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase, mappedTestCases);
			user = LoginLogoutServices.login(driver, testCase);
			{
				// RTC_139302 : testcase to be mapped
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_139302"));

			}
			String taxType = CommonServices.getTestData(IConstantsData.TAX_TYPE, 0);
			String taxName = CommonServices.getTestData(IConstantsData.TAX_NAME_SECOND);
			String taxRate = CommonServices.getTestData(IConstantsData.TAX_RATE);
			// click On PoTab
			StandardPO standardpo = new StandardPO();
			standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardpo.setNextAction(IConstantsData.NONE);
			standardpo = FlowStandardPo.createStandardPo(driver, testCaseName, standardpo);

			PageStandardPO.clickOnExpandAll(driver);
			PageStandardPO.fillTaxType(driver, testCaseName, taxType, 1);
			PageStandardPO.enterTaxName(driver, testCaseName, taxName, 1);
			PageStandardPO.fillTaxTypeRATE(driver, taxRate);
			//PageStandardPO.clickOnTaxAmount(driver, testCaseName, 3);
			String totalTax = PageStandardPO.getPOTotalPrice(driver, testCaseName);
			String totalTaxAmount = totalTax.split("\\.")[0].replaceAll("[^0-9]", "");

			String amountAtCostBooking = PageStandardPO.getAmountAtCostBookingAfterExpanAll(driver, testCaseName);
			flag = totalTaxAmount.equalsIgnoreCase(amountAtCostBooking.split("\\.")[0].replaceAll("[^0-9]", ""));
			Assert.assertTrue("Amount is not reflected at cost booking", flag);

			String amountAtAccounting = PageStandardPO.getAmountAtAccountingAfterExpanAll(driver, testCaseName);
			flag = totalTaxAmount.equalsIgnoreCase(amountAtAccounting.split("\\.")[0].replaceAll("[^0-9]", ""));
			Assert.assertTrue("Amount is not reflected at accounting", flag);

			ActionBot.scroll(driver, "-500");
			String poTotal = PageStandardPO.getHeaderPoTotal(driver, testCaseName);
			flag = totalTaxAmount.equalsIgnoreCase(poTotal.split("\\.")[0].replaceAll("[^0-9]", ""));
			Assert.assertTrue("Amount is not reflected at PO total at header", flag);

			String headerccPo = PageStandardPO.getHeaderCcPoTotal(driver, testCaseName);
			flag = totalTaxAmount.equalsIgnoreCase(headerccPo.split("\\.")[0].replaceAll("[^0-9]", ""));
			Assert.assertTrue("Amount is not reflected at header cost center Qtip", flag);

			ActionBot.scroll(driver, "500");
			taxType = CommonServices.getTestData(IConstantsData.TAX_TYPE, 1);
			taxName = CommonServices.getTestData(IConstantsData.TAX_NAME);
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			ModalItemSummaryTax.clickOnTaxesTab(driver, testCaseName);
			// select Tax type
			ModalItemSummaryTax.fillTaxType(driver, testCaseName, taxType, 1);
			ModalItemSummaryTax.fillTaxName(driver, testCaseName, taxName);
			ModalItemSummaryTax.fillTaxRate(driver, testCaseName, taxRate);
			ModalItemSummaryTax.clickOnNextRowTaxAmount(driver, testCaseName, 2);
			String taxSubtotal = ModalItemSummaryTax.getTaxSubTotal(driver, testCaseName);
			String taxSubTotalAmount = taxSubtotal.split("\\.")[0].replaceAll("[^0-9]", "");
			ModalPOFreeTextItemSummaryItem.clickOnSave(driver, testCaseName);

			String itotalTax = PageStandardPO.getItemLevelTotalTax(driver, testCaseName);
			flag = taxSubTotalAmount.equalsIgnoreCase(itotalTax.split("\\.")[0].replaceAll("[^0-9]", ""));
			Assert.assertTrue("Amount is not reflected at item level total tax", flag);

			String itemLevelTax = PageStandardPO.getItemlevelTax(driver);
			flag = taxSubTotalAmount.equalsIgnoreCase(itemLevelTax.split("\\.")[0].replaceAll("[^0-9]", ""));
			Assert.assertTrue("Amount is not reflected at item level tax", flag);

			//RTC_139302 starts from here
			// change currency
			String changedCurrency = CommonServices.getTestData(IConstantsData.CHANGED_CURRENCY);
			PageStandardPO.changeCurrencyOfSupplier(driver, testCaseName, changedCurrency);
			ModalChangeCurrencyPO.clickOnConvertAmountsToCurrencyType(driver, testCaseName);
			poTotal = PageStandardPO.getHeaderPoTotal(driver, testCaseName);
			flag = poTotal.toLowerCase().contains(changedCurrency.toLowerCase());
			Assert.assertTrue("Currency type is not reflected at header level total ", flag);

			headerccPo = PageStandardPO.getHeaderCcPoTotal(driver, testCaseName);
			flag = headerccPo.toLowerCase().contains(changedCurrency.toLowerCase());
			Assert.assertTrue("Currency type is not reflected at header cost center Qtip ", flag);

			ActionBot.scroll(driver, "450");
			PageStandardPO.clickOnExpandAll(driver);

			amountAtCostBooking = PageStandardPO.getAmountAtCostBookingAfterExpanAll(driver, testCaseName);
			flag = amountAtCostBooking.toLowerCase().contains(changedCurrency.toLowerCase());
			Assert.assertTrue("Currency type is not reflected at cost booking amount", flag);

			amountAtAccounting = PageStandardPO.getAmountAtAccountingAfterExpanAll(driver, testCaseName);
			flag = amountAtAccounting.toLowerCase().contains(changedCurrency.toLowerCase());
			Assert.assertTrue("Currency type is not reflected at accounting amount", flag);

			//PageStandardPO.clickOnItemSummaryEdit(driver, testCaseName, itemID);

			itemLevelTax = PageStandardPO.getItemlevelTax(driver);
			flag = itemLevelTax.toLowerCase().contains(changedCurrency.toLowerCase());
			Assert.assertTrue("Currency type is not reflected at accounting amount", flag);

			itotalTax = PageStandardPO.getItemLevelTotalTax(driver, testCaseName);
			flag = itotalTax.toLowerCase().contains(changedCurrency.toLowerCase());
			Assert.assertTrue("Currency type is not reflected at item level total tax", flag);

			totalTax = PageStandardPO.getPOTotalPrice(driver, testCaseName);
			flag = totalTax.toLowerCase().contains(changedCurrency.toLowerCase());
			Assert.assertTrue("Currency type is not reflected at po total price", flag);

			mappedTestCases.get(0).setTestResult(true);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>PO - In approval state >> When buyer click
	 * on Cancel Release option of parked PO; PO should be saved in draft
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_146197(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase, mappedTestCases);
			user = LoginLogoutServices.login(driver, testCase);
			{
				// RTC_146198 : testcase to be mapped
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_146198"));
			}

			MainPageHeaderLevelTab.clickOnSetUpTab(driver);
			MainPageHeaderLevelTab.clickOnCustomizeSubTab(driver);
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);
			PagePurchaseOrderSetting.clickOnReleaseOrdersImmediately_No(driver, testCaseName);
			// set park value for 5 days
			PagePurchaseOrderSetting.getSelectedReleasePOAutomaticParkTypeOption(driver, testCaseName);
			int parkValue = 5;
			PagePurchaseOrderSetting.fillReleasePOAutomaticParkValue(driver, testCaseName, parkValue);
			// check options of automatically generated PO
			PagePurchaseOrderSetting.getAutomaticallyGeneratePO_option(driver, testCaseName);
			PagePurchaseOrderSetting.clickOnSaveButton(driver, testCaseName);
			// click On PoTab
			StandardPO standardpo = new StandardPO();
			standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardpo = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardpo);
			FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			String status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			boolean flag = status.equalsIgnoreCase("Parked");
			Assert.assertTrue("Status is not parked", flag);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageViewPurchaseOrder.clickOnCancelPoLink(driver, testCaseName);
			String comments = CommonServices.getTestData(IConstantsData.CANCEL_PO_COMMENT);
			PageViewPurchaseOrder.fillCancelPoCommentField(driver, testCaseName, comments);
			PageViewPurchaseOrder.clickOnCancelPoSubmitButtom(driver, testCaseName);
			// ckeck whether it is saved as draft or not
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			String status1 = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			flag = status1.equalsIgnoreCase(IConstantsData.DRAFT_FILTER_LABEL);
			Assert.assertTrue(flag);
			User user2 = UserUtilHelper.getAvailableUserFromList();
			LoginLogoutServices.logout(driver, testCase, user);
			ActionBot.defaultMediumSleep();

			// login with other user
			LoginLogoutServices.login(driver, testCase, user2);
			// user = user2;
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			String status2 = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			flag = status2.equalsIgnoreCase(IConstantsData.DRAFT_FILTER_LABEL);
			mappedTestCases.get(0).setTestResult(flag);
			Assert.assertTrue(flag);
			// revert setting
			MainPageHeaderLevelTab.clickOnSetUpTab(driver);
			MainPageHeaderLevelTab.clickOnCustomizeSubTab(driver);
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);
			PagePurchaseOrderSetting.clickOnReleaseOrdersImmediately_Yes(driver, testCaseName);
			PagePurchaseOrderSetting.clickOnSaveButton(driver, testCaseName);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		try
		{
			MainPageHeaderLevelTab.clickOnSetUpTab(driver);
			MainPageHeaderLevelTab.clickOnCustomizeSubTab(driver);
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);
			PagePurchaseOrderSetting.clickOnReleaseOrdersImmediately_Yes(driver, testCaseName);
			PagePurchaseOrderSetting.clickOnSaveButton(driver, testCaseName);
		}
		catch (Exception e)
		{
			logger.error("Unable to change the release order immediately setting " + e, e);
		}
		finally
		{
			MainPageHeaderLevelTab.clickOnSetUpTab(driver);
			MainPageHeaderLevelTab.clickOnCustomizeSubTab(driver);
			PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);
			PagePurchaseOrderSetting.clickOnReleaseOrdersImmediately_Yes(driver, testCaseName);
			PagePurchaseOrderSetting.clickOnSaveButton(driver, testCaseName);
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>PO - In approval state >> Buyer should be
	 * able to Copy all POs which are coming under his scope which are in In
	 * approval state.
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_146192(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase, mappedTestCases);
			user = LoginLogoutServices.login(driver, testCase);

			{
				// RTC_146193 : testcase to be mapped
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_146193"));
			}
			// click On PoTab
			StandardPO standardpo = new StandardPO();
			standardpo = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardpo.setNextAction(IConstantsData.SUBMIT_PO_FOR_PROCESSING);
			standardpo = FlowStandardPo.createStandardPo(driver, testCaseName, standardpo);
			FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			standardpo.setPoNumber(PagePurchaseOrderListing.getFirstPoNo(driver, testCaseName));
			User user2 = UserUtilHelper.getAvailableUserFromList();
			LoginLogoutServices.logout(driver, testCase, user);
			ActionBot.defaultMediumSleep();

			// login with other user
			LoginLogoutServices.login(driver, testCase, user2);
			FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);
			standardpo.setPoNumber(PageStandardPO.getPONo(driver, testCaseName));
			PurchaseOrder purchaseOrder = new PurchaseOrder();
			purchaseOrder.setCustomDate(CommonUtilities.getRequiredBy());

			PageStandardPO.fillRequiredByDate(driver, testCaseName, purchaseOrder.getCustomDate().getDay(), purchaseOrder.getCustomDate().getMonth(),
				purchaseOrder.getCustomDate().getYear());
			String copyPo = FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			if (copyPo != null)
				standardpo.setPoNumber(copyPo);
			boolean flag = FlowPoListing.searchPo(driver, testCaseName, standardpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			mappedTestCases.get(0).setTestResult(flag);
			Assert.assertTrue("unable to submit po", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 205284 - Error 500 is
	 * displayed on releasing a PO in the following scenario : 1)In the
	 * requisition tab, add items to the cart and checkout 2) Mention p-card as
	 * payment method 3) Submit the requisition 4) In the buyers desk, convert
	 * to PO 5) Go to PO tab and cancel the PO 6) In the buyers desk, again
	 * convert the requisition to PO 7) Release the po
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_161708(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		Item item = new Item();
		Requisition requisition = new Requisition();
		boolean flag;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			requisition = ObjectCreation.getRequisition(driver);
			PCard pCard = new PCard();
			pCard = ObjectCreation.getDefaultObjectOfPCard(IConstantsData.ISSUED_TO_USER);
			pCard.setIssuedTo(user.getUsername());
			FlowCreatePCard.createPCard(driver, testCaseName, pCard);

			item = ObjectCreation.getItem(IConstantsData.GUIDED_ITEM);
			item.getGuidedItems().get(0).setQuantity(1f);
			item.getGuidedItems().get(0).setPrice(pCard.getSpendPerTransaction() - 1);
			requisition.setSettlementvia(IConstantsData.PCARD_SETTLEMENT_VIA_OPTION);
			requisition.setPcard("XXXX XXXX XXXX " + pCard.getpCardNo().substring(pCard.getpCardNo().length() - 4));
			requisition.setItems(item);

			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			requisition = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);
			// convert To Po
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			FlowBuyersDesk.convertToPo(driver, testCaseName);
			List<PurchaseOrder> purchaseOrders = FlowBuyersDesk.submitAllSuggestedPosForProcessing(driver, testCaseName);
			FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			String status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			if (status.equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL))
			{
				// to approve the PO
				ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, purchaseOrders.get(0).getPoNo(),
					IConstantsData.PURCHASE_ORDER, IConstantsData.APPROVE);
				FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

				// search po
				flag = FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
				Assert.assertTrue("Error while searching PO", flag);
			}
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			FlowViewPO.cancelPo(driver, testCaseName);
			FlowBuyersDeskListing.searchAtBuyersDeskListing(driver, testCaseName, requisition);
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			FlowBuyersDesk.convertToPo(driver, testCaseName);
			purchaseOrders = FlowBuyersDesk.submitAllSuggestedPosForProcessing(driver, testCaseName);
			FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			if (status.equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL))
			{
				// to approve the PO
				ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, purchaseOrders.get(0).getPoNo(),
					IConstantsData.PURCHASE_ORDER, IConstantsData.APPROVE);
				FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

				// search po
				flag = FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
				Assert.assertTrue("Error while searching PO", flag);
			}
			flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.RELEASED);
			Assert.assertTrue("PO is not in released state", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 206925 - [Decimal issue]:
	 * Error is displayed in accounting and cost booking section and user is not
	 * able to submit the PO in the following scenario
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_176759(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		boolean flag;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			Requisition requisition = ObjectCreation.getRequisition(driver);

			Item item = ObjectCreation.getItem(IConstantsData.GUIDED_ITEM);
			requisition.setItems(item);
			requisition = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);
			// convert To Po
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			FlowBuyersDesk.convertToPo(driver, testCaseName);
			List<PurchaseOrder> purchaseOrders = FlowBuyersDesk.submitAllSuggestedPosForProcessing(driver, testCaseName);

			FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			String status1 = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			if (status1.equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL))
			{
				// to approve the PO
				ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, purchaseOrders.get(0).getPoNo(),
					IConstantsData.PURCHASE_ORDER, IConstantsData.APPROVE);
				FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

				flag = FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
				Assert.assertTrue("Error while searching PO", flag);
			}
			flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.RELEASED);
			Assert.assertTrue("PO is not in released state", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b> Create a draft PO and apply tax on drafted PO & check it at view PO
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_145113(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		boolean flag;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);
			// click On PoTab
			Requisition requisition = ObjectCreation.getRequisition(driver);

			Item item = ObjectCreation.getItem(IConstantsData.GUIDED_ITEM);
			requisition.setItems(item);
			requisition = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);
			// convert To Po
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			FlowBuyersDesk.convertToPo(driver, testCaseName);
			FlowBuyersDesk.saveAllSuggestedPosAsDraft(driver, testCaseName);
			FlowPoListing.searchPo(driver, testCaseName, requisition.getReqNo(), IConstantsData.SEARCH_BY_ORDER_DESCRIPTION);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			String poNumber = PageStandardPO.getPONo(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			String taxType = PageStandardPO.fillTaxType(driver, testCaseName, CommonServices.getTestData(IConstantsData.TAX_TYPE, 1), 1);
			PageStandardPO.enterTaxName(driver, testCaseName, CommonServices.getTestData(IConstantsData.TAX_NAME), 1);
			String poNo = FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			if (poNo != null)
				poNumber = poNo;
			flag = FlowPoListing.searchPo(driver, testCaseName, poNumber, IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("PO with tax type and tax name is not created", flag);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			flag = taxType.equalsIgnoreCase(PageViewPurchaseOrder.getTaxType(driver, testCaseName, 2));
			Assert.assertTrue("tax type is not reflected at view Po", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>In Create Standard PO;User should be able
	 * to print taxes at both lines & header as they appear on the PO screen.
	 * (i.e. Individual at Line; and grouped at Header)
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_139299(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();

		User user = null;
		StandardPO standardPO = new StandardPO();
		String taxType = CommonServices.getTestData(IConstantsData.TAX_TYPE, 1);
		String TaxName = CommonServices.getTestData(IConstantsData.TAX_NAME);
		boolean flag = false;
		String taxOnPreviewPOPage = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO.setNextAction(IConstantsData.NONE);
			standardPO = FlowStandardPo.createStandardPo(driver, testCaseName, standardPO);
			PageStandardPO.clickOnAmendItemSummaryEdit(driver);
			ModalItemSummaryTax.clickOnTaxesTab(driver, testCaseName);
			ModalItemSummaryTax.fillTaxType(driver, testCaseName, taxType, 1);
			// fill tax name
			ModalItemSummaryTax.fillTaxName(driver, testCaseName, TaxName);
			ModalItemSummaryTax.fillTaxRate(driver, testCaseName, CommonServices.getTestData(IConstantsData.TAX_RATE));
			// search po
			ModalPOFreeTextItemSummaryItem.clickOnSave(driver, testCaseName);
			String tTax = PageStandardPO.getTotalTax(driver, testCaseName);
			String poNo = FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			if (poNo != null)
				standardPO.setPoNumber(poNo);
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			String status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			if (status.equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL))
			{
				// to approve the PO
				ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, standardPO.getPoNumber(),
					IConstantsData.PURCHASE_ORDER, IConstantsData.APPROVE);
				FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);
				FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			}

			// view po5
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);

			// to preview the PO
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			ModalViewPOActions.clickOnPreviewPoLink(driver, testCaseName);

			String winHandlerBefore = driver.getWindowHandle();
			Set<String> winHandler = driver.getWindowHandles();
			for (String handler : winHandler)
			{
				driver.switchTo().window(handler);
			}

			driver.manage().window().maximize();
			taxOnPreviewPOPage = PagePreviewPOPage.getPreviewPoTaxesTotal(driver, testCaseName);
			logger.info("Driver title" + driver.getTitle());
			flag = tTax.equalsIgnoreCase(taxOnPreviewPOPage);
			driver.switchTo().window(winHandlerBefore);
			logger.info("Tax on veiw page" + taxOnPreviewPOPage);
			Assert.assertTrue("PO tax on Preview PO Page is wrong", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>In Create Standard PO;User should be able
	 * to print taxes at both lines & header as they appear on the PO screen.
	 * (i.e. Individual at Line; and grouped at Header)
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_TEST(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		StandardPO standardPO = new StandardPO();
		boolean flag = false;
		String taxOnPreviewPOPage = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// standardPO.setPoNumber(poNumber);
			FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: Amit Dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 205842 - Error is displayed
	 * in cost booking section on adding an item in PO in the following scenario
	 * 
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_162535(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		boolean flag;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			ObjectCreation.getCostCenterProjectAndBudget();
			Requisition requisition = ObjectCreation.getRequisition(driver);
			// cc_budget_project =
			// ObjectCreation.getOtherCostCenterProjectAndBudget();
			Item item = ObjectCreation.getItem(IConstantsData.GUIDED_ITEM);
			requisition.setItems(item);
			// CostBookingRequisitionSummary costBookingRequisitionSummary = new
			// CostBookingRequisitionSummary();
			// to set CC split at item level
			requisition.getCostBookingRequisitionSummary().setBookCostToSingleCostCenter(false);
			requisition.getCostBookingRequisitionSummary().setSplitCostAtLineItemLevel(true);
			// costBookingRequisitionSummary.setNextAction(IConstantsData.SAVE);
			CostBookingItemSummary costBookingItemSummary = new CostBookingItemSummary();

			// to set CostBookingItemSummary in guided items - with quantity
			costBookingItemSummary = ObjectCreation.getDefaultObjectOfCCSplitAtItemLevel(false, requisition.getItems().getGuidedItems().get(0).getQuantity());

			AccountingItemSummary accountingItemSummary = ObjectCreation.getDefaultObjectOfAccounting();
			costBookingItemSummary.setAccountingItemSummary(accountingItemSummary);
			costBookingItemSummary.setNextAction(IConstantsData.SAVE);

			// requisition.getItems().getGuidedItems().get(0).setCostBookingItemSummary(costBookingItemSummary);
			requisition.setCostBookingItemSummary(costBookingItemSummary);
			requisition = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			ActionBot.scroll(driver, "600");
			// convert To Po
			FlowBuyersDesk.convertToPo(driver, testCaseName);
			List<PurchaseOrder> purchaseOrders = FlowBuyersDesk.submitAllSuggestedPosForProcessing(driver, testCaseName);
			//PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);

			//PageBuyersDesk.clickOnConvertToPo(driver, testCaseName);
			//PagePurchaseOrderToBeGenerated.ClikOnPurchaseOrderToBeGeneratedCheckBox(driver, testCaseName, 0);
			//PagePurchaseOrderToBeGenerated.clickOnSubmitPoForProcessing(driver, testCaseName);
			//PurchaseOrder purchaseOrder1 = FlowConvertedPurchaseOrder.getPurchaseOrderinfo(driver, testCaseName, 1);
			FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			String status1 = PagePurchaseOrderListing.getFirstPoNo(driver, testCaseName);
			if (status1.equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL))
			{
				// to approve the PO
				ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, purchaseOrders.get(0).getPoNo(),
					IConstantsData.PURCHASE_ORDER, IConstantsData.APPROVE);
				FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

				// search po
				flag = FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
				Assert.assertTrue("Error while searching PO", flag);
			}
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnCopyFromActions(driver, testCaseName);

			PageStandardPO.clickOnEdit(driver);
			TabPOSummary.clickOnBillingPOSummary(driver);
			ModalPurchaseOrderSummaryBilling.fillCompany(driver, testCaseName, CommonServices.getTestData(IConstantsData.Other_Company_Name));
			ModalPurchaseOrderSummaryBilling.fillBusinessUnit(driver, testCaseName, CommonServices.getTestData(IConstantsData.Other_BusinessUnit));
			ModalPurchaseOrderSummaryBilling.fillLocation(driver, testCaseName, CommonServices.getTestData(IConstantsData.Other_Location));
			TabPOSummary.clickOnCostBookingPOSummary(driver);
			ModalPOSummaryCostBooking.clickOnSave(driver, testCaseName);

			PageStandardPO.clickOnEdit(driver);
			flag = ModalPurchaseOrderSummaryBilling.getCompany(driver, testCaseName).toLowerCase()
				.contains(CommonServices.getTestData(IConstantsData.Other_Company_Name).toLowerCase());
			Assert.assertTrue("Company name is not changed", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * ================================= Amit's TCs End Here
	 * =========================================================================
	 * =======
	 **/

	/**
	 * ================================= Ankitas's TCs Start Here
	 * =========================================================================
	 * =======
	 **/
	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 240078 - Cost centers are not
	 * coming for selection while creating users if cost centers are uploaded
	 * via file . <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * @param testCase </font><b><br>
	 * @throws Exception </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_360940(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		String addedCC = null;
		boolean flag = false;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);
			ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");
			// add new user
			PageUserManagement.clickOnAddUserLink(driver, testCaseName);
			User user2 = new User();
			UserSettings userSettings = new UserSettings();
			userSettings.setCostCenter(addedCC);
			userSettings.setCompanyName(CommonServices.getTestData(IConstantsData.ORGANIZATION_UNIT_OR_COMPANY_NAME));
			userSettings.setBusinessUnit(CommonServices.getTestData(IConstantsData.BUSINESS_UNIT_NAME));
			userSettings.setLocationName(CommonServices.getTestData(IConstantsData.LOCATION_NAME));
			user2.setUserSettings(userSettings);
			user2 = FlowUserManagement.addUser(driver, testCaseName, user2);

			// get cc
			flag = PageUserSettings.getSelectedCostCenter(driver, testCaseName).equalsIgnoreCase(addedCC);
			assertTrue("Cost centers are not coming for selection while creating users if cost centers are uploaded via file", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>If both % as well as currency units ( in
	 * budget exceed setting ) is not set during budget configuration; document
	 * submission should NEVER be blocked if budget exceeds its planned amount .
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * @param testCase </font><b><br>
	 * @throws Exception </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_361112(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		List<MappedTestCase> mappedTestCases = new ArrayList<>();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		List<String> listOfProjects = new ArrayList<>();
		Budget budget = null;
		String calculatedBalanceAmount, calculatedBalanceAmountWithTolerance, status, poNo, poNo1, poNo2, log = "";
		boolean flag = false, budgetCreatedFlag = false, poReservedFlag = false, balanceAmountFlag = false, balanceAmountWithToleranceFlag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase, mappedTestCases);
			user = LoginLogoutServices.login(driver, testCase);

			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_361260"));// 0
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_361231"));// 1
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_361111"));// 2
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_361232"));// 3
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_361212"));// 4
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_361238"));// 5
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_361237"));// 6
			}

			listOfProjects = CommonUtilities.getListOFProjectNamesForBU();

			budget = ObjectCreation.getDefaultObjectOfBudget();
			//	budget.setCurrencyType(CommonServices.getTestData(IConstantsData.CURRENCY_TYPE));
			budget.getBudgetDimension().setBusinessUnit(true);
			budget.getBudgetDimension().setCostCenter(false);
			budget.getBudgetDimension().setDepartment(false);
			budget.getBudgetDimension().setDesignation(false);
			budget.getBudgetDimension().setGlAccount(false);
			budget.getBudgetDimension().setLocation(false);
			budget.getBudgetDimension().setProject(true);

			// budget line for case RTC_361231 and RTC_361111
			budget.getBudgetLines().get(0).setLocation(null);
			budget.getBudgetLines().get(0).setCostCenter(null);

			budget.getBudgetLines().get(0).setDepartment(null);
			budget.getBudgetLines().get(0).setDesignation(null);
			int amount = CommonUtilities.getNonZeroRandomNumbers(3);
			logger.info("Amount is :" + amount);
			budget.getBudgetLines().get(0).setPlannedAmount(Integer.toString(amount));
			budget.getBudgetLines().get(0).setProject(listOfProjects.get(0));
			budget.getBudgetLines().get(0).setIsbudgetLineSetting(true);
			BudgetLineSetting budgetLineSetting = new BudgetLineSetting();
			budgetLineSetting.setExceedPercentTolerance(10);
			budgetLineSetting.setExceedAmountToleranceToInfinite(true);
			budgetLineSetting.setNextAction(IConstantsData.SAVE);
			budget.getBudgetLines().get(0).setBudgetLineSetting(budgetLineSetting);

			// budget line for case RTC_361112
			BudgetLine budgetLine = ObjectCreation.getDefaultObjetOfBudgetLine();
			budgetLine.setLocation(null);
			budgetLine.setCostCenter(null);
			budgetLine.setDepartment(null);
			budgetLine.setDesignation(null);

			budgetLine.setPlannedAmount(Integer.toString(amount));
			budgetLine.setProject(listOfProjects.get(1));
			budgetLine.setIsbudgetLineSetting(true);
			BudgetLineSetting budgetLineSetting1 = new BudgetLineSetting();
			budgetLineSetting1.setExceedPercentToleranceToInfinite(true);
			budgetLineSetting1.setExceedAmountToleranceToInfinite(true);
			budgetLineSetting1.setNextAction(IConstantsData.SAVE);
			budgetLine.setBudgetLineSetting(budgetLineSetting1);

			// add budgetLines in budget
			budget.getBudgetLines().add(budgetLine);

			// create budget
			budget = FlowCreateBudget.createBudget(driver, testCaseName, budget);
			budgetCreatedFlag = true;
			// search budget
			flag = FlowBudgetListing.searchBudget(driver, testCaseName, IConstantsData.SEARCH_BUDGET_BY_BUDGET_NAME, budget);
			Assert.assertTrue("Error while searching budget", flag);

			// create standard PO
			StandardPO standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.GUIDED_ITEM);
			standardPO.getItems().getGuidedItems().get(0).setQuantity(1f);
			standardPO.getItems().getGuidedItems().get(0).setUom(CommonServices.getTestData(IConstantsData.Item_UOM, 0));
			standardPO.getItems().getGuidedItems().get(0).setCurrency(CommonServices.getTestData(IConstantsData.CURRENCY_TYPE));
			standardPO.getItems().getGuidedItems().get(0).setPrice(CommonUtilities.getNonZeroRandomNumber(5));
			standardPO.getCostBookingRequisitionSummary().setProject(CommonUtilities.getProperProject(budget.getBudgetLines().get(0).getProject()));
			standardPO.getCostBookingRequisitionSummary().setBudget(budget.getBudgetLines().get(0).getBudgetLineName());
			standardPO.setRemoveAllTaxes(false);

			standardPO = FlowStandardPo.createStandardPo(driver, testCaseName, standardPO);

			/**
			 * RTC_361260 : If taxes are applied to a PO at the time of submit ;
			 * validation error should be thrown if budget tolerances exceed
			 * because of the taxes
			 **/
			flag = PageStandardPO.getBudgetExhaustedError(driver, testCaseName).equalsIgnoreCase(IConstantsData.ErrorMsg_BudgetExhausted)
				&& PageStandardPO.getBudgetLineForBudgetExhaustedError(driver, testCaseName).equalsIgnoreCase(budget.getBudgetLines().get(0).getBudgetLineName());
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(0), "PO submission was not blocked when tolerance is exceeded");
			/**
			 * RTC_361231 : Budget line amount or tolerance should be reserved
			 * on PO submit
			 **/
			PageStandardPO.clickOnRemoveAllTaxesOption(driver, testCaseName);
			PageStandardPO.clickOnItemName(driver, testCaseName, standardPO.getItems().getGuidedItems().get(0).getItemID());
			// edit price
			standardPO.getItems().getGuidedItems().get(0).setPrice(ModalPOFreeTextItemSummaryItem.fillMarketPrice(driver, testCaseName, CommonUtilities.getNonZeroRandomNumber(2)));
			ModalPOFreeTextItemSummaryItem.clickOnSave(driver, testCaseName);
			// get po total price
			standardPO.setPoTotal(PageStandardPO.getPOTotalPrice(driver, testCaseName));
			standardPO.setPoNumber(PageStandardPO.getPONo(driver, testCaseName));
			// submit PO

			poNo = FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			if (poNo != null)
			{
				standardPO.setPoNumber(poNo);
			}

			// search po
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("Error while searching PO", flag);

			flag = FlowBudgetListing.searchBudget(driver, testCaseName, IConstantsData.SEARCH_BUDGET_BY_BUDGET_NAME, budget);
			Assert.assertTrue("Error while searching budget", flag);

			// view budget
			FlowBudgetListing.viewBudget(driver, testCaseName);
			ActionBot.scroll(driver);

			// view audit
			BudgetAudit budgetAudit = FlowCreateBudget.getBudgetAuditDetails(driver, testCaseName, budget.getBudgetLines().get(0).getBudgetLineName());

			flag = CommonUtilities.getDecimalPriceAlongWithCurrency(budgetAudit.getPoReserved())
				.equalsIgnoreCase(CommonUtilities.getDecimalPriceAlongWithCurrency(standardPO.getPoTotal()));
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(1), "Budget line amount was not reserved on PO submit");

			logger.info("Planned amount :" + budget.getBudgetLines().get(0).getPlannedAmount());
			logger.info("PO total :" + standardPO.getPoTotal());

			calculatedBalanceAmount = Integer.toString(
				Integer.parseInt(budget.getBudgetLines().get(0).getPlannedAmount()) - Integer.parseInt(CommonUtilities.getDecimalPriceAlongWithCurrency(standardPO.getPoTotal())));
			flag = calculatedBalanceAmount.equalsIgnoreCase(CommonUtilities.getDecimalPriceAlongWithCurrency(budgetAudit.getBalanceAmount()));
			Assert.assertTrue("Balance amount was not proper", flag);

			calculatedBalanceAmountWithTolerance = Integer.toString(Integer.parseInt(budget.getBudgetLines().get(0).getPlannedAmount())
				- Integer.parseInt(CommonUtilities.getDecimalPriceAlongWithCurrency(standardPO.getPoTotal()))
				+ Integer.parseInt(budget.getBudgetLines().get(0).getPlannedAmount()) * budget.getBudgetLines().get(0).getBudgetLineSetting().getExceedPercentTolerance() / 100);
			flag = calculatedBalanceAmountWithTolerance.equalsIgnoreCase(budgetAudit.getBalanaceAmountWithTolerance().split("\\ ")[1].split("\\.")[0]);
			Assert.assertTrue("Balance amount with tolerance was not proper", flag);

			/**
			 * RTC_361111 : Document submission should be blocked only when
			 * tolerance is exceeded (depending on the budget exceed setting)
			 **/
			// create standard po again
			// search po
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("Error while searching PO", flag);

			// copy po
			FlowPoListing.copyPO(driver, testCaseName);

			// fill required by date
			CustomDate customDate = CommonUtilities.getTodaysDate();
			customDate.setDate(PageStandardPO.fillRequiredByDate(driver, testCaseName, customDate.getDay(), customDate.getMonth(), customDate.getYear()));
			ActionBot.scroll(driver, "600");
			PageStandardPO.clickOnItemName(driver, testCaseName, PageStandardPO.getItemId(driver, standardPO.getItems().getGuidedItems().get(0).getItemName()));
			// edit price
			standardPO.getItems().getGuidedItems().get(0).setPrice(ModalPOFreeTextItemSummaryItem.fillMarketPrice(driver, testCaseName, CommonUtilities.getNonZeroRandomNumber(5)));
			ModalPOFreeTextItemSummaryItem.clickOnSave(driver, testCaseName);

			// submit PO
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);

			flag = PageStandardPO.getBudgetExhaustedError(driver, testCaseName).equalsIgnoreCase(IConstantsData.ErrorMsg_BudgetExhausted)
				&& PageStandardPO.getBudgetLineForBudgetExhaustedError(driver, testCaseName).equalsIgnoreCase(budget.getBudgetLines().get(0).getBudgetLineName());
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(2), "PO submission was not blocked when tolerance is exceeded");

			/**
			 * RTC_361232 : If a PO 'in approval ' is rolled back and saved to
			 * draft ; the budget line amount should also be released from the
			 * budget line
			 **/
			// search po
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("Error while searching PO", flag);

			// recall po
			FlowPoListing.recallApprovalRequestForPurchaseOrder(driver, testCaseName);
			flag = FlowPoListing.checkIfPORecalled(driver, testCaseName, standardPO.getPoNumber());
			Assert.assertTrue("PO was not recalled", flag);

			// search budget
			flag = FlowBudgetListing.searchBudget(driver, testCaseName, IConstantsData.SEARCH_BUDGET_BY_BUDGET_NAME, budget);
			Assert.assertTrue("Error while searching budget", flag);

			// view budget
			FlowBudgetListing.viewBudget(driver, testCaseName);
			ActionBot.scroll(driver);

			// view audit
			BudgetAudit budgetAudit1 = FlowCreateBudget.getBudgetAuditDetails(driver, testCaseName, budget.getBudgetLines().get(0).getBudgetLineName());

			flag = !CommonUtilities.getDecimalPriceAlongWithCurrency(budgetAudit1.getPoReserved())
				.equalsIgnoreCase(CommonUtilities.getDecimalPriceAlongWithCurrency(standardPO.getPoTotal()))
				&& CommonUtilities.getDecimalPriceAlongWithCurrency(budgetAudit1.getPoReserved()).equalsIgnoreCase("0");
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(3),
				"If a PO 'in approval ' is rolled back and saved to draft ; the budget line amount was not released from the budget line");

			/**
			 * RTC_361212 : Verify budget line audit ; in case when that budget
			 * line amount has exceeded on document submit
			 **/
			// search po
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("Error while searching PO", flag);

			// edit po
			FlowPoListing.viewPO(driver, testCaseName);

			standardPO.setPoTotal(PageStandardPO.getPOTotalPrice(driver, testCaseName));

			standardPO.setPoNumber(PageStandardPO.getPONo(driver, testCaseName));
			// submit po
			poNo1 = FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			if (poNo1 != null)
			{
				standardPO.setPoNumber(poNo1);
			}

			// search po
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("Error while searching PO", flag);

			// search budget
			flag = FlowBudgetListing.searchBudget(driver, testCaseName, IConstantsData.SEARCH_BUDGET_BY_BUDGET_NAME, budget);
			Assert.assertTrue("Error while searching budget", flag);

			// view budget
			FlowBudgetListing.viewBudget(driver, testCaseName);
			ActionBot.scroll(driver);

			// view audit
			BudgetAudit budgetAudit2 = FlowCreateBudget.getBudgetAuditDetails(driver, testCaseName, budget.getBudgetLines().get(0).getBudgetLineName());

			poReservedFlag = CommonUtilities.getDecimalPriceAlongWithCurrency(budgetAudit2.getPoReserved())
				.equalsIgnoreCase(CommonUtilities.getDecimalPriceAlongWithCurrency(standardPO.getPoTotal()));
			if (!poReservedFlag)
			{
				log += "Budget line amount was not reserved on PO submit";
			}

			calculatedBalanceAmount = Integer.toString(
				Integer.parseInt(budget.getBudgetLines().get(0).getPlannedAmount()) - Integer.parseInt(CommonUtilities.getDecimalPriceAlongWithCurrency(standardPO.getPoTotal())));
			balanceAmountFlag = calculatedBalanceAmount.equalsIgnoreCase(CommonUtilities.getDecimalPriceAlongWithCurrency(budgetAudit2.getBalanceAmount()));
			if (!balanceAmountFlag)
			{
				log += "Balance amount was not proper";
			}
			calculatedBalanceAmountWithTolerance = Integer.toString(Integer.parseInt(budget.getBudgetLines().get(0).getPlannedAmount())
				- Integer.parseInt(CommonUtilities.getDecimalPriceAlongWithCurrency(standardPO.getPoTotal()))
				+ Integer.parseInt(budget.getBudgetLines().get(0).getPlannedAmount()) * budget.getBudgetLines().get(0).getBudgetLineSetting().getExceedPercentTolerance() / 100);
			balanceAmountWithToleranceFlag = calculatedBalanceAmountWithTolerance.equalsIgnoreCase(budgetAudit2.getBalanaceAmountWithTolerance().split("\\ ")[1].split("\\.")[0]);
			if (!balanceAmountWithToleranceFlag)
			{
				log += "Balance amount with tolerance was not proper";
			}
			flag = poReservedFlag && balanceAmountFlag && balanceAmountWithToleranceFlag;
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(4), log);

			/**
			 * RTC_361238 : If an 'in approval ' PO is rejected ; then the PO
			 * amount reserved in the budget line should be released
			 **/
			// reject po
			ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, standardPO.getPoNumber(), IConstantsData.PURCHASE_ORDER,
				IConstantsData.REJECT);
			approvalAllRequests = FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

			// to search PO
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("Error in searching PO", flag);

			// to check status of PO
			status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			Assert.assertTrue("Status of PO was not Released , PO not approved", status.equalsIgnoreCase(IConstantsData.REJECTED_FILTER_LABEL));

			// search budget
			flag = FlowBudgetListing.searchBudget(driver, testCaseName, IConstantsData.SEARCH_BUDGET_BY_BUDGET_NAME, budget);
			Assert.assertTrue("Error while searching budget", flag);

			// view budget
			FlowBudgetListing.viewBudget(driver, testCaseName);
			ActionBot.scroll(driver);

			// view audit
			BudgetAudit budgetAudit4 = FlowCreateBudget.getBudgetAuditDetails(driver, testCaseName, budget.getBudgetLines().get(0).getBudgetLineName());

			poReservedFlag = !CommonUtilities.getDecimalPriceAlongWithCurrency(budgetAudit4.getPoReserved())
				.equalsIgnoreCase(CommonUtilities.getDecimalPriceAlongWithCurrency(standardPO.getPoTotal()))
				&& CommonUtilities.getDecimalPriceAlongWithCurrency(budgetAudit4.getPoReserved()).equalsIgnoreCase("0");
			if (!poReservedFlag)
			{
				log += "Budget line amount was not released on PO reject";
			}

			calculatedBalanceAmount = Integer.toString(Integer.parseInt(budget.getBudgetLines().get(0).getPlannedAmount()));
			balanceAmountFlag = calculatedBalanceAmount.equalsIgnoreCase(CommonUtilities.getDecimalPriceAlongWithCurrency(budgetAudit4.getBalanceAmount()));
			if (!balanceAmountFlag)
			{
				log += "Balance amount was not proper on PO reject";
			}
			calculatedBalanceAmountWithTolerance = Integer.toString(Integer.parseInt(budget.getBudgetLines().get(0).getPlannedAmount())
				+ Integer.parseInt(budget.getBudgetLines().get(0).getPlannedAmount()) * budget.getBudgetLines().get(0).getBudgetLineSetting().getExceedPercentTolerance() / 100);
			balanceAmountWithToleranceFlag = calculatedBalanceAmountWithTolerance.equalsIgnoreCase(budgetAudit4.getBalanaceAmountWithTolerance().split("\\ ")[1].split("\\.")[0]);
			if (!balanceAmountWithToleranceFlag)
			{
				log += "Balance amount with tolerance was not proper on PO reject";
			}
			flag = poReservedFlag && balanceAmountFlag && balanceAmountWithToleranceFlag;
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(5), log);

			/**
			 * RTC_361237 : If a PO is cancelled ;amount from budget line should
			 * be rolled back
			 **/
			// create standard po again
			// search po
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("Error while searching PO", flag);

			// copy po
			FlowPoListing.copyPO(driver, testCaseName);

			// fill required by date
			customDate.setDate(PageStandardPO.fillRequiredByDate(driver, testCaseName, customDate.getDay(), customDate.getMonth(), customDate.getYear()));

			standardPO.setPoNumber(PageStandardPO.getPONo(driver, testCaseName));
			// submit PO
			poNo2 = FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			if (poNo2 != null)
			{
				standardPO.setPoNumber(poNo2);
			}

			// search po
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("Error while searching PO", flag);

			if (PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL))
			{
				// approve po
				ApprovalAllRequests approvalAllRequests2 = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, standardPO.getPoNumber(),
					IConstantsData.PURCHASE_ORDER, IConstantsData.APPROVE);
				approvalAllRequests2 = FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests2);
				ActionBot.defaultMediumSleep();
				ActionBot.waitForPageLoad(driver);

				// search po
				flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
				Assert.assertTrue("Error while searching PO", flag);

				flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.COMPLETE_RELEASED_FILTER_LABEL);
				Assert.assertTrue("Status of PO was not released", flag);
			}

			// view po
			FlowPoListing.viewPO(driver, testCaseName);

			// cancel PO
			FlowViewPO.cancelPo(driver, testCaseName);

			// search po
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("Error while searching PO", flag);

			flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.CANCELLED_FILTER_LABEL);
			Assert.assertTrue("Status of PO was not cancelled", flag);

			// search budget
			flag = FlowBudgetListing.searchBudget(driver, testCaseName, IConstantsData.SEARCH_BUDGET_BY_BUDGET_NAME, budget);
			Assert.assertTrue("Error while searching budget", flag);

			// view budget
			FlowBudgetListing.viewBudget(driver, testCaseName);
			ActionBot.scroll(driver);

			// view audit
			BudgetAudit budgetAudit5 = FlowCreateBudget.getBudgetAuditDetails(driver, testCaseName, budget.getBudgetLines().get(0).getBudgetLineName());

			poReservedFlag = !CommonUtilities.getDecimalPriceAlongWithCurrency(budgetAudit5.getPoReserved())
				.equalsIgnoreCase(CommonUtilities.getDecimalPriceAlongWithCurrency(standardPO.getPoTotal()))
				&& CommonUtilities.getDecimalPriceAlongWithCurrency(budgetAudit5.getPoReserved()).equalsIgnoreCase("0");
			log = "";
			if (!poReservedFlag)
			{
				log += "Budget line amount was not released on PO cancel";
			}

			calculatedBalanceAmount = Integer.toString(Integer.parseInt(budget.getBudgetLines().get(0).getPlannedAmount()));
			balanceAmountFlag = calculatedBalanceAmount.equalsIgnoreCase(CommonUtilities.getDecimalPriceAlongWithCurrency(budgetAudit5.getBalanceAmount()));
			if (!balanceAmountFlag)
			{
				log += "Balance amount was not proper on PO cancel";
			}
			calculatedBalanceAmountWithTolerance = Integer.toString(Integer.parseInt(budget.getBudgetLines().get(0).getPlannedAmount())
				+ Integer.parseInt(budget.getBudgetLines().get(0).getPlannedAmount()) * budget.getBudgetLines().get(0).getBudgetLineSetting().getExceedPercentTolerance() / 100);
			balanceAmountWithToleranceFlag = calculatedBalanceAmountWithTolerance.equalsIgnoreCase(budgetAudit5.getBalanaceAmountWithTolerance().split("\\ ")[1].split("\\.")[0]);
			if (!balanceAmountWithToleranceFlag)
			{
				log += "Balance amount with tolerance was not proper on PO cancel";
			}
			flag = poReservedFlag && balanceAmountFlag && balanceAmountWithToleranceFlag;
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(6), log);

			/**
			 * RTC_361112 : If both % as well as currency units ( in budget
			 * exceed setting ) is not set during budget configuration; document
			 * submission should NEVER be blocked if budget exceeds its planned
			 * amount .
			 **/
			// create standard PO
			StandardPO standardPO1 = ObjectCreation.getStandardPoCreation(IConstantsData.GUIDED_ITEM);
			standardPO1.getItems().getGuidedItems().get(0).setQuantity(CommonUtilities.getNonZeroRandomNumber(1));
			standardPO1.getItems().getGuidedItems().get(0).setUom(CommonServices.getTestData(IConstantsData.Item_UOM, 0));
			standardPO1.getItems().getGuidedItems().get(0).setCurrency(CommonServices.getTestData(IConstantsData.CURRENCY_TYPE));
			standardPO1.getItems().getGuidedItems().get(0).setPrice(CommonUtilities.getNonZeroRandomNumber(5));
			standardPO1.getCostBookingRequisitionSummary().setProject(CommonUtilities.getProperProject(budget.getBudgetLines().get(1).getProject()));
			standardPO1.getCostBookingRequisitionSummary().setBudget(budget.getBudgetLines().get(1).getBudgetLineName());

			standardPO1 = FlowStandardPo.createStandardPo(driver, testCaseName, standardPO1);

			flag = PageStandardPO.isBudgetExhaustedErrorPresent(driver, testCaseName);
			Assert.assertTrue(
				"If both % as well as currency units ( in budget exceed setting ) was not set during budget configuration; document submission was blocked if budget exceeds its planned amount",
				!flag);

			// search po
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO1.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("Error while searching PO.", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				if (budgetCreatedFlag)
				{
					// search budget
					FlowBudgetListing.searchBudget(driver, testCaseName, IConstantsData.SEARCH_BUDGET_BY_BUDGET_NAME, budget);
					// deactivate budget
					FlowBudgetListing.deactivateBudget(driver, testCaseName, budget);
				}
			}
			catch (Exception e)
			{
				logger.info("Exception occurred while deactivating budget : " + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
			}
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>If both % as well as currency units ( in
	 * budget exceed setting ) is not set during budget configuration; document
	 * submission should NEVER be blocked if budget exceeds its planned amount .
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * @param testCase </font><b><br>
	 * @throws Exception </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_361239(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		List<MappedTestCase> mappedTestCases = new ArrayList<>();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		List<String> listOfProjects = new ArrayList<>();
		Budget budget = null;
		String calculatedBalanceAmount, calculatedBalanceAmountWithTolerance, status, poNo1, poNo2, poNo3;
		boolean flag = false, budgetCreatedFlag = false, statusFlag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase, mappedTestCases);
			user = LoginLogoutServices.login(driver, testCase);
			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_361233"));// 0
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_361236"));// 1
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_361235"));// 2
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_361234"));// 3
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_361264"));// 4
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_361256"));// 5
			}

			int amount = CommonUtilities.getNonZeroRandomNumbers(3);
			amount = amount * 2;

			listOfProjects = CommonUtilities.getListOFProjectNamesForBU();
			budget = ObjectCreation.getDefaultObjectOfBudget();
			budget.setCurrencyType(CommonServices.getTestData(IConstantsData.CURRENCY_TYPE));
			budget.getBudgetDimension().setBusinessUnit(true);
			budget.getBudgetDimension().setCostCenter(false);
			budget.getBudgetDimension().setDepartment(false);
			budget.getBudgetDimension().setDesignation(false);
			budget.getBudgetDimension().setGlAccount(false);
			budget.getBudgetDimension().setLocation(false);
			budget.getBudgetDimension().setProject(true);

			// budget line
			budget.getBudgetLines().get(0).setLocation(null);
			budget.getBudgetLines().get(0).setCostCenter(null);

			budget.getBudgetLines().get(0).setDepartment(null);
			budget.getBudgetLines().get(0).setDesignation(null);
			budget.getBudgetLines().get(0).setPlannedAmount(Integer.toString(amount));
			budget.getBudgetLines().get(0).setProject(listOfProjects.get(0));
			//	budget.getBudgetLines().get(0).setProject(budget.getBudgetLines().get(0).getProject());
			budget.getBudgetLines().get(0).setIsbudgetLineSetting(true);
			BudgetLineSetting budgetLineSetting = new BudgetLineSetting();
			budgetLineSetting.setExceedPercentTolerance(10);
			budgetLineSetting.setExceedAmountToleranceToInfinite(true);
			budgetLineSetting.setNextAction(IConstantsData.SAVE);
			budget.getBudgetLines().get(0).setBudgetLineSetting(budgetLineSetting);

			// create budget
			logger.info("=============== Create Budget ===============");
			budget = FlowCreateBudget.createBudget(driver, testCaseName, budget);

			budgetCreatedFlag = true;
			// search budget
			logger.info("=============== Search Budget ===============");
			flag = FlowBudgetListing.searchBudget(driver, testCaseName, IConstantsData.SEARCH_BUDGET_BY_BUDGET_NAME, budget);
			Assert.assertTrue("Error while searching budget", flag);

			// create standard PO
			StandardPO standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.GUIDED_ITEM);
			standardPO.getItems().getGuidedItems().get(0).setShortDescription(CommonServices.getTestData(IConstantsData.SHORT_DESC_FOR_GUIDED_ITEM, 1));
			standardPO.getItems().getGuidedItems().get(0).setUom(CommonServices.getTestData(IConstantsData.Item_UOM, 0));
			standardPO.getItems().getGuidedItems().get(0).setQuantity(1f);
			standardPO.getItems().getGuidedItems().get(0).setCurrency(CommonServices.getTestData(IConstantsData.CURRENCY_TYPE));
			standardPO.getItems().getGuidedItems().get(0).setPrice(amount / 2);
			standardPO.getCostBookingRequisitionSummary().setProject(CommonUtilities.getProperProject(budget.getBudgetLines().get(0).getProject()));
			standardPO.getCostBookingRequisitionSummary().setBudget(budget.getBudgetLines().get(0).getBudgetLineName());
			standardPO.setRemoveAllTaxes(true);
			standardPO.setMarkForAddingApprovers(true);

			logger.info("=============== Create Standard PO ===============");
			standardPO = FlowStandardPo.createStandardPo(driver, testCaseName, standardPO);
			// search PO
			logger.info("=============== Search PO ===============");
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("Error in searching PO", flag);

			flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.READY_FOR_APPROVAL_FILTER_LABEL);
			Assert.assertTrue("Status of PO was wrong, It should be Ready For Approval", flag);

			/**
			 * RTC_361233 : Budget line amount should be reserved when PO goes
			 * in 'ready for approval 'state
			 **/
			logger.info("=============== Search Budget ===============");
			flag = FlowBudgetListing.searchBudget(driver, testCaseName, IConstantsData.SEARCH_BUDGET_BY_BUDGET_NAME, budget);
			Assert.assertTrue("Error while searching budget", flag);

			// view budget
			logger.info("=============== View Budget ===============");
			FlowBudgetListing.viewBudget(driver, testCaseName);
			ActionBot.scroll(driver);

			// view audit
			BudgetAudit budgetAudit = FlowCreateBudget.getBudgetAuditDetails(driver, testCaseName, budget.getBudgetLines().get(0).getBudgetLineName());
			flag = CommonUtilities.getDecimalPriceAlongWithCurrency(budgetAudit.getPoReserved())
				.equalsIgnoreCase(CommonUtilities.getDecimalPriceAlongWithCurrency(standardPO.getPoTotal()));
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(0), "Budget line amount was not reserved when PO goes in 'ready for approval 'state ");

			calculatedBalanceAmount = Integer.toString(
				Integer.parseInt(budget.getBudgetLines().get(0).getPlannedAmount()) - Integer.parseInt(CommonUtilities.getDecimalPriceAlongWithCurrency(standardPO.getPoTotal())));
			flag = calculatedBalanceAmount.equalsIgnoreCase(CommonUtilities.getDecimalPriceAlongWithCurrency(budgetAudit.getBalanceAmount()));
			Assert.assertTrue("Balance amount was not proper when PO goes in 'ready for approval 'state", flag);

			calculatedBalanceAmountWithTolerance = Integer.toString(Integer.parseInt(budget.getBudgetLines().get(0).getPlannedAmount())
				- Integer.parseInt(CommonUtilities.getDecimalPriceAlongWithCurrency(standardPO.getPoTotal()))
				+ Integer.parseInt(budget.getBudgetLines().get(0).getPlannedAmount()) * budget.getBudgetLines().get(0).getBudgetLineSetting().getExceedPercentTolerance() / 100);
			flag = calculatedBalanceAmountWithTolerance.equalsIgnoreCase(budgetAudit.getBalanaceAmountWithTolerance().split("\\ ")[1].split("\\.")[0]);
			Assert.assertTrue("Balance amount with tolerance was not proper when PO goes in 'ready for approval 'state", flag);

			/**
			 * RTC_361236 : If a 'ready for approval 'PO is modified then ; the
			 * budget line amount should be released or reserved according to
			 * the modification done
			 **/
			// search PO
			logger.info("=============== Search PO ===============");
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("Error in searching PO", flag);

			logger.info("=============== View PO ===============");
			FlowPoListing.viewPO(driver, testCaseName);
			logger.info("=============== Modify PO ===============");
			PageViewPurchaseOrder.clickOnModifyPO(driver, testCaseName);

			//			GuidedItem guidedItem = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.EXISTING_SUPPLIER);
			//			guidedItem.setQuantity(1f);
			//			guidedItem.setUom(CommonServices.getTestData(IConstantsData.Item_UOM, 0));
			//			guidedItem.setCurrency(CommonServices.getTestData(IConstantsData.CURRENCY_TYPE));
			//			guidedItem.setPrice(amount / 2);
			//			guidedItem.setNextAction(IConstantsData.SAVE);

			Item item = ObjectCreation.getItem(IConstantsData.GUIDED_ITEM);
			item.getGuidedItems().get(0).setShortDescription(CommonServices.getTestData(IConstantsData.SHORT_DESC_FOR_GUIDED_ITEM, 2));
			item.getGuidedItems().get(0).setQuantity(1f);
			item.getGuidedItems().get(0).setUom(CommonServices.getTestData(IConstantsData.Item_UOM, 0));
			item.getGuidedItems().get(0).setPrice(amount / 2);

			logger.info("=============== Add Guided Item ===============");
			ActionBot.scroll(driver, "600");
			item = FlowStandardPo.addItem(driver, testCaseName, item);

			standardPO.getItems().getGuidedItems().add(item.getGuidedItems().get(0));

			// submit po
			logger.info("=============== Submit PO For Processing ===============");
			standardPO.setPoTotal(PageStandardPO.getPOTotalPrice(driver, testCaseName));
			String poNo = FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			if (poNo != null)
			{
				standardPO.setPoNumber(poNo);
			}

			// search PO
			logger.info("=============== Search PO ===============");
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("Error in searching PO", flag);

			status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			if (status.equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL))
			{
				MainPageHeaderLevelTab.clickOnApprovalAllRequestsTab(driver);
				// to approve the PO
				ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, standardPO.getPoNumber(),
					IConstantsData.PURCHASE_ORDER, IConstantsData.APPROVE);
				logger.info("=============== Approve PO ===============");
				FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

				ActionBot.defaultHighSleep();
				driver.navigate().refresh();
				// search po
				logger.info("=============== Search PO ===============");
				flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
				Assert.assertTrue("Error while searching PO", flag);
				flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.COMPLETE_RELEASED_FILTER_LABEL);
				assertTrue("Status of PO was not Released", flag);
			}

			logger.info("=============== Search Budget ===============");
			flag = FlowBudgetListing.searchBudget(driver, testCaseName, IConstantsData.SEARCH_BUDGET_BY_BUDGET_NAME, budget);
			Assert.assertTrue("Error while searching budget", flag);

			// view budget
			logger.info("=============== View Budget ===============");
			FlowBudgetListing.viewBudget(driver, testCaseName);
			ActionBot.scroll(driver);

			// view audit
			BudgetAudit budgetAudit1 = FlowCreateBudget.getBudgetAuditDetails(driver, testCaseName, budget.getBudgetLines().get(0).getBudgetLineName());

			flag = CommonUtilities.getDecimalPriceAlongWithCurrency(budgetAudit1.getPoReserved())
				.equalsIgnoreCase(CommonUtilities.getDecimalPriceAlongWithCurrency(standardPO.getPoTotal()));
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(1),
				"Budget line amount was not reserved, If a 'ready for approval 'PO is modified by adding new guided item ");

			calculatedBalanceAmount = Integer.toString(
				Integer.parseInt(budget.getBudgetLines().get(0).getPlannedAmount()) - Integer.parseInt(CommonUtilities.getDecimalPriceAlongWithCurrency(standardPO.getPoTotal())));
			flag = calculatedBalanceAmount.equalsIgnoreCase(CommonUtilities.getDecimalPriceAlongWithCurrency(budgetAudit1.getBalanceAmount()));
			Assert.assertTrue("Balance amount was not proper, If a 'ready for approval 'PO is modified by adding new guided item ", flag);

			calculatedBalanceAmountWithTolerance = Integer.toString(Integer.parseInt(budget.getBudgetLines().get(0).getPlannedAmount())
				- Integer.parseInt(CommonUtilities.getDecimalPriceAlongWithCurrency(standardPO.getPoTotal()))
				+ Integer.parseInt(budget.getBudgetLines().get(0).getPlannedAmount()) * budget.getBudgetLines().get(0).getBudgetLineSetting().getExceedPercentTolerance() / 100);
			flag = calculatedBalanceAmountWithTolerance.equalsIgnoreCase(budgetAudit1.getBalanaceAmountWithTolerance().split("\\ ")[1].split("\\.")[0]);
			Assert.assertTrue("Balance amount with tolerance was not proper, If a 'ready for approval 'PO is modified by adding new guided item ", flag);

			/**
			 * RTC_361235 : If a PO is amended by removing an item ; then budget
			 * line amount should be released
			 **/
			// search po
			logger.info("=============== Search PO ===============");
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("Error while searching PO", flag);

			// amend po
			logger.info("=============== Amend PO by removing item===============");
			FlowPoListing.amendPO(driver, testCaseName);

			standardPO.getItems().getGuidedItems().get(1).setItemID(PageStandardPO.getItemId(driver, standardPO.getItems().getGuidedItems().get(1).getShortDescription()));
			// remove item from po
			flag = FlowStandardPo.removeItem(driver, testCaseName, standardPO.getItems().getGuidedItems().get(1).getItemID());
			Assert.assertTrue("Item was not removed from PO", flag);

			ActionBot.waitForPageLoad(driver);

			// to submit PO for processing
			standardPO.setPoTotal(PageStandardPO.getPOTotalPrice(driver, testCaseName));
			poNo1 = FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			if (poNo1 != null)
			{
				standardPO.setPoNumber(poNo1);
			}

			// if workflow is applied.. search in amended po listing
			if (PageAmmendedPO.isViewAllPOPresent(driver, testCaseName))
			{
				PageAmmendedPO.getFirstAmendedPONo(driver, testCaseName);
				flag = PageAmmendedPO.isAmendedPOPresentInListing(driver, testCaseName, standardPO.getPoNumber());
				statusFlag = PageAmmendedPO.getStatusOfAmendedPO(driver, testCaseName, standardPO.getPoNumber()).equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL);
				Assert.assertTrue("Amended PO Was not found", flag);
			}
			else
			{
				// search po
				flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
				Assert.assertTrue("Amended PO Was not found", flag);
				statusFlag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL);
			}

			if (statusFlag)
			{
				MainPageHeaderLevelTab.clickOnApprovalAllRequestsTab(driver);
				// to approve the PO
				ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, standardPO.getPoNumber(),
					IConstantsData.PURCHASE_ORDER, IConstantsData.APPROVE);
				logger.info("=============== Approve PO ===============");
				FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

				ActionBot.defaultHighSleep();
				driver.navigate().refresh();
				// search po
				logger.info("=============== Search PO ===============");
				flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
				Assert.assertTrue("Error while searching PO", flag);
				flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.COMPLETE_RELEASED_FILTER_LABEL);
				Assert.assertTrue("Status of PO was not Released", flag);
			}

			logger.info("=============== Search Budget ===============");
			flag = FlowBudgetListing.searchBudget(driver, testCaseName, IConstantsData.SEARCH_BUDGET_BY_BUDGET_NAME, budget);
			Assert.assertTrue("Error while searching budget", flag);

			// view budget
			logger.info("=============== View Budget ===============");
			FlowBudgetListing.viewBudget(driver, testCaseName);
			ActionBot.scroll(driver);

			// view audit
			BudgetAudit budgetAudit2 = FlowCreateBudget.getBudgetAuditDetails(driver, testCaseName, budget.getBudgetLines().get(0).getBudgetLineName());

			flag = CommonUtilities.getDecimalPriceAlongWithCurrency(budgetAudit2.getPoReserved())
				.equalsIgnoreCase(CommonUtilities.getDecimalPriceAlongWithCurrency(standardPO.getPoTotal()));
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(2), "Budget line amount was not released,If a PO is amended by removing an item");

			calculatedBalanceAmount = Integer.toString(
				Integer.parseInt(budget.getBudgetLines().get(0).getPlannedAmount()) - Integer.parseInt(CommonUtilities.getDecimalPriceAlongWithCurrency(standardPO.getPoTotal())));
			flag = calculatedBalanceAmount.equalsIgnoreCase(CommonUtilities.getDecimalPriceAlongWithCurrency(budgetAudit2.getBalanceAmount()));
			Assert.assertTrue("Balance amount was not proper, If a PO is amended by removing an item", flag);

			calculatedBalanceAmountWithTolerance = Integer.toString(Integer.parseInt(budget.getBudgetLines().get(0).getPlannedAmount())
				- Integer.parseInt(CommonUtilities.getDecimalPriceAlongWithCurrency(standardPO.getPoTotal()))
				+ Integer.parseInt(budget.getBudgetLines().get(0).getPlannedAmount()) * budget.getBudgetLines().get(0).getBudgetLineSetting().getExceedPercentTolerance() / 100);
			flag = calculatedBalanceAmountWithTolerance.equalsIgnoreCase(budgetAudit2.getBalanaceAmountWithTolerance().split("\\ ")[1].split("\\.")[0]);
			Assert.assertTrue("Balance amount with tolerance was not proper, If a PO is amended by removing an item", flag);

			/**
			 * RTC_361234 : If a PO is amended by adding a new item ; then
			 * budget line amount should be reserved
			 **/
			/**
			 * RTC_361264 : If PO item amount /quantity is changed during PO
			 * amendment submit; BLA Reserved should be updated.
			 **/
			// search po
			logger.info("=============== Search PO ===============");
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("Error while searching PO", flag);

			// amend po
			logger.info("=============== Amend PO by Adding item===============");
			FlowPoListing.amendPO(driver, testCaseName);

			// add item to po
			Item item2 = ObjectCreation.getItem(IConstantsData.GUIDED_ITEM);
			item2.getGuidedItems().get(0).setUom(CommonServices.getTestData(IConstantsData.Item_UOM, 0));
			item2.getGuidedItems().get(0).setQuantity(1f);
			item2.getGuidedItems().get(0).setShortDescription(CommonServices.getTestData(IConstantsData.SHORT_DESC_FOR_GUIDED_ITEM, 0));
			item2.getGuidedItems().get(0).setPrice(amount);
			item2.getGuidedItems().get(0).setLineNo(CommonUtilities.getNonZeroRandomNumbers(2));
			item2 = FlowStandardPo.addItem(driver, testCaseName, item2);
			ActionBot.waitForPageLoad(driver);

			standardPO.getItems().getGuidedItems().add(item2.getGuidedItems().get(0));

			logger.info("=============== Amend PO by changing price of item===============");
			// edit existing guided item by reducing price
			PageStandardPO.clickOnEditItemSummaryButtonUsingItemName(driver, testCaseName, standardPO.getItems().getGuidedItems().get(2).getShortDescription());

			standardPO.getItems().getGuidedItems().get(2).setPrice(amount / 2);

			ModalPOFreeTextItemSummaryItem.fillMarketPrice(driver, testCaseName, standardPO.getItems().getGuidedItems().get(2).getPrice());

			ModalPOItemSummaryCostAllocation.clickOnSave(driver, testCaseName);

			// to submit PO for processing
			standardPO.setPoTotal(PageStandardPO.getPOTotalPrice(driver, testCaseName));
			poNo2 = FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			if (poNo2 != null)
			{
				standardPO.setPoNumber(poNo2);
			}

			// if workflow is applied.. search in amended po listing
			if (PageAmmendedPO.isViewAllPOPresent(driver, testCaseName))
			{
				PageAmmendedPO.getFirstAmendedPONo(driver, testCaseName);
				flag = PageAmmendedPO.isAmendedPOPresentInListing(driver, testCaseName, standardPO.getPoNumber());
				statusFlag = PageAmmendedPO.getStatusOfAmendedPO(driver, testCaseName, standardPO.getPoNumber()).equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL);
				Assert.assertTrue("Amended PO Was not found", flag);
			}
			else
			{
				// search po
				flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
				Assert.assertTrue("Amended PO Was not found", flag);
				statusFlag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL);
			}

			if (statusFlag)
			{
				MainPageHeaderLevelTab.clickOnApprovalAllRequestsTab(driver);
				// to approve the PO
				ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, standardPO.getPoNumber(),
					IConstantsData.PURCHASE_ORDER, IConstantsData.APPROVE);
				logger.info("=============== Approve PO ===============");
				FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

				ActionBot.defaultHighSleep();
				driver.navigate().refresh();
				// search po
				logger.info("=============== Search PO ===============");
				flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
				Assert.assertTrue("Error while searching PO", flag);
				flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.COMPLETE_RELEASED_FILTER_LABEL);
				Assert.assertTrue("Status of PO was not Released", flag);
			}

			logger.info("=============== Search Budget ===============");
			flag = FlowBudgetListing.searchBudget(driver, testCaseName, IConstantsData.SEARCH_BUDGET_BY_BUDGET_NAME, budget);
			Assert.assertTrue("Error while searching budget", flag);

			// view budget
			logger.info("=============== View Budget ===============");
			FlowBudgetListing.viewBudget(driver, testCaseName);
			ActionBot.scroll(driver);

			// view audit
			BudgetAudit budgetAudit3 = FlowCreateBudget.getBudgetAuditDetails(driver, testCaseName, budget.getBudgetLines().get(0).getBudgetLineName());

			flag = CommonUtilities.getDecimalPriceAlongWithCurrency(budgetAudit3.getPoReserved())
				.equalsIgnoreCase(CommonUtilities.getDecimalPriceAlongWithCurrency(standardPO.getPoTotal()));
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(3), "Budget line amount was not reserved,If a PO is amended by adding a new item");
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(4), "Budget line amount was not reserved,If a PO is amended by changing price of existing item");

			calculatedBalanceAmount = Integer.toString(
				Integer.parseInt(budget.getBudgetLines().get(0).getPlannedAmount()) - Integer.parseInt(CommonUtilities.getDecimalPriceAlongWithCurrency(standardPO.getPoTotal())));
			flag = calculatedBalanceAmount.contains(CommonUtilities.getDecimalPriceAlongWithCurrency(budgetAudit3.getBalanceAmount()));
			Assert.assertTrue("Balance amount was not proper, If a PO is amended by adding a new item", flag);

			calculatedBalanceAmountWithTolerance = Integer.toString(Integer.parseInt(budget.getBudgetLines().get(0).getPlannedAmount())
				- Integer.parseInt(CommonUtilities.getDecimalPriceAlongWithCurrency(standardPO.getPoTotal()))
				+ Integer.parseInt(budget.getBudgetLines().get(0).getPlannedAmount()) * budget.getBudgetLines().get(0).getBudgetLineSetting().getExceedPercentTolerance() / 100);
			flag = calculatedBalanceAmountWithTolerance.contains(budgetAudit3.getBalanaceAmountWithTolerance().split("\\ ")[1].split("\\.")[0]);
			Assert.assertTrue("Balance amount with tolerance was not proper, If a PO is amended by adding a new item", flag);

			/**
			 * RTC_361256 : Budget amount should be released when discounts are
			 * applied on amendment
			 **/
			// search po
			logger.info("=============== Search PO ===============");
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("Error while searching PO", flag);

			// amend po
			logger.info("=============== Amend PO adding discounts ===============");
			FlowPoListing.amendPO(driver, testCaseName);
			ActionBot.scroll(driver, "450");
			// apply discount
			PageStandardPO.clickOnModify(driver, testCaseName);
			int discount = CommonUtilities.getNonZeroRandomNumbers(2);
			ModalDiscountPO.fillDiscountAmount(driver, testCaseName, discount);
			ModalDiscountPO.clickOnSaveDiscount(driver, testCaseName);
			standardPO.setPoTotal(PageStandardPO.getPOTotalPrice(driver, testCaseName));

			// to submit PO for processing
			poNo3 = FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			if (poNo3 != null)
			{
				standardPO.setPoNumber(poNo3);
			}

			// if workflow is applied.. search in amended po listing
			if (PageAmmendedPO.isViewAllPOPresent(driver, testCaseName))
			{
				PageAmmendedPO.getFirstAmendedPONo(driver, testCaseName);
				flag = PageAmmendedPO.isAmendedPOPresentInListing(driver, testCaseName, standardPO.getPoNumber());
				statusFlag = PageAmmendedPO.getStatusOfAmendedPO(driver, testCaseName, standardPO.getPoNumber()).equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL);
				Assert.assertTrue("Amended PO Was not found", flag);
			}
			else
			{
				// search po
				flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
				Assert.assertTrue("Amended PO Was not found", flag);
				statusFlag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL);
			}

			logger.info("=============== Search Budget ===============");
			flag = FlowBudgetListing.searchBudget(driver, testCaseName, IConstantsData.SEARCH_BUDGET_BY_BUDGET_NAME, budget);
			Assert.assertTrue("Error while searching budget", flag);

			// view budget
			logger.info("=============== View Budget ===============");
			FlowBudgetListing.viewBudget(driver, testCaseName);
			ActionBot.scroll(driver);

			// view audit
			BudgetAudit budgetAudit4 = FlowCreateBudget.getBudgetAuditDetails(driver, testCaseName, budget.getBudgetLines().get(0).getBudgetLineName());

			flag = CommonUtilities.getDecimalPriceAlongWithCurrency(budgetAudit4.getPoReserved())
				.equalsIgnoreCase(CommonUtilities.getDecimalPriceAlongWithCurrency(standardPO.getPoTotal()));
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(5), "Budget line amount was not released,If a PO is amended by adding discount");

			flag = budgetAudit4.getNetAmount().contains("-" + budget.getCurrencyType() + " " + discount);
			Assert.assertTrue("Budget line amount was not released,If a PO is amended by adding discount, Net amount shown in budget audit was wrong", flag);

			calculatedBalanceAmount = Integer.toString(
				Integer.parseInt(budget.getBudgetLines().get(0).getPlannedAmount()) - Integer.parseInt(CommonUtilities.getDecimalPriceAlongWithCurrency(standardPO.getPoTotal())));
			flag = calculatedBalanceAmount.contains(CommonUtilities.getDecimalPriceAlongWithCurrency(budgetAudit4.getBalanceAmount()));
			Assert.assertTrue("Balance amount was not proper, If a PO is amended by adding a new item", flag);

			calculatedBalanceAmountWithTolerance = Integer.toString(Integer.parseInt(budget.getBudgetLines().get(0).getPlannedAmount())
				- Integer.parseInt(CommonUtilities.getDecimalPriceAlongWithCurrency(standardPO.getPoTotal()))
				+ Integer.parseInt(budget.getBudgetLines().get(0).getPlannedAmount()) * budget.getBudgetLines().get(0).getBudgetLineSetting().getExceedPercentTolerance() / 100);
			flag = calculatedBalanceAmountWithTolerance.contains(budgetAudit4.getBalanaceAmountWithTolerance().split("\\ ")[1].split("\\.")[0]);
			Assert.assertTrue("Balance amount with tolerance was not proper, If a PO is amended by adding a new item", flag);

			/**
			 * RTC_361239 : Budget line amount should be released if the PO
			 * amendment is rejected
			 **/
			// search po
			logger.info("=============== Search PO ===============");
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("Error while searching PO", flag);

			// amend po
			logger.info("=============== Amend PO by Adding item===============");
			FlowPoListing.amendPO(driver, testCaseName);

			// add item to po
			item.getGuidedItems().get(0).setPrice(amount);
			item = FlowStandardPo.addItem(driver, testCaseName, item);
			ActionBot.waitForPageLoad(driver);

			standardPO.getItems().getGuidedItems().add(item.getGuidedItems().get(0));

			// to submit PO for processing
			standardPO.setPoTotal(PageStandardPO.getPOTotalPrice(driver, testCaseName));
			poNo2 = FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			if (poNo2 != null)
			{
				standardPO.setPoNumber(poNo2);
			}

			// if workflow is applied.. search in amended po listing
			if (PageAmmendedPO.isViewAllPOPresent(driver, testCaseName))
			{
				PageAmmendedPO.getFirstAmendedPONo(driver, testCaseName);
				flag = PageAmmendedPO.isAmendedPOPresentInListing(driver, testCaseName, standardPO.getPoNumber());
				statusFlag = PageAmmendedPO.getStatusOfAmendedPO(driver, testCaseName, standardPO.getPoNumber()).equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL);
				Assert.assertTrue("Amended PO Was not found", flag);
			}
			/*
			 * //to reject the PO ApprovalAllRequests approvalAllRequests =
			 * ObjectCreation.getObjectOfApprovalAllRequests(
			 * IConstantsData.DOC_NO, standardPO.getPoNumber(),
			 * IConstantsData.PURCHASE_ORDER, IConstantsData.REJECT);
			 * logger.info("=============== Reject PO ===============");
			 * FlowAllRequestsApproval.searchAndPerformActions(driver,
			 * testCaseName, approvalAllRequests);
			 * 
			 * ActionBot.defaultHighSleep(); //search po logger.info(
			 * "=============== Search PO ==============="); flag =
			 * FlowPoListing.searchPo(driver, testCaseName,
			 * standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			 * assertTrue("Error while searching PO", flag); flag =
			 * PagePurchaseOrderListing.getFirstPoStatus(driver,
			 * testCaseName).equalsIgnoreCase(
			 * IConstantsData.REJECTED_FILTER_LABEL); assertTrue(
			 * "Status of PO was not Rejected", flag);
			 * 
			 * logger.info("=============== Search Budget ===============");
			 * flag = FlowBudgetListing.searchBudget(driver, testCaseName,
			 * IConstantsData.SEARCH_BUDGET_BY_BUDGET_NAME, budget); assertTrue(
			 * "Error while searching budget", flag);
			 * 
			 * //view budget logger.info(
			 * "=============== View Budget ===============");
			 * FlowBudgetListing.viewBudget(driver, testCaseName);
			 * ActionBot.scroll(driver);
			 * 
			 * //view audit BudgetAudit budgetAudit5 =
			 * FlowCreateBudget.getBudgetAuditDetails(driver, testCaseName,
			 * budget .getBudgetLines().get(0).getBudgetLineName());
			 * 
			 * flag =
			 * CommonUtilities.getDecimalPriceAlongWithCurrency(budgetAudit5.
			 * getPoReserved()).equalsIgnoreCase( budget.getCurrencyType() +
			 * " 0"); assertTrue(
			 * "Budget line amount was not released, if amened po was rejected",
			 * flag);
			 * 
			 * flag =
			 * CommonUtilities.getDecimalPriceAlongWithCurrency(budgetAudit5.
			 * getNetAmount()).equalsIgnoreCase(
			 * CommonUtilities.getDecimalPriceAlongWithCurrency(standardPO.
			 * getPoTotal())); assertTrue(
			 * "Budget line amount was not released,if amened po was rejected, Net amount shown in budget audit was wrong"
			 * , flag);
			 * 
			 * calculatedBalanceAmount =
			 * Integer.toString(Integer.parseInt(budget.getBudgetLines().get(0)
			 * .getPlannedAmount())); flag =
			 * calculatedBalanceAmount.equalsIgnoreCase(CommonUtilities
			 * .getDecimalPriceAlongWithCurrency(budgetAudit5.getBalanceAmount()
			 * )); assertTrue(
			 * "Balance amount was not proper, if amened po was rejected",
			 * flag);
			 * 
			 * calculatedBalanceAmountWithTolerance =
			 * Integer.toString(Integer.parseInt(budget.getBudgetLines().get(0)
			 * .getPlannedAmount()) +
			 * ((Integer.parseInt(budget.getBudgetLines().get(0).
			 * getPlannedAmount()) * budget.getBudgetLines()
			 * .get(0).getBudgetLineSetting().getExceedPercentTolerance()) /
			 * 100)); flag =
			 * calculatedBalanceAmountWithTolerance.equalsIgnoreCase(
			 * CommonUtilities .getDecimalPriceAlongWithCurrency(budgetAudit5.
			 * getBalanaceAmountWithTolerance())); assertTrue(
			 * "Balance amount with tolerance was not proper, if amened po was rejected"
			 * , flag);
			 */

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				if (budgetCreatedFlag)
				{
					// search budget
					FlowBudgetListing.searchBudget(driver, testCaseName, IConstantsData.SEARCH_BUDGET_BY_BUDGET_NAME, budget);
					// deactivate budget
					FlowBudgetListing.deactivateBudget(driver, testCaseName, budget);
				}
			}
			catch (Exception e)
			{
				logger.info("Exception occurred while deactivating budget : " + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
			}
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>In case of Auto PO ; if the tolerance or
	 * Planned amount is reduced concurrently such that the requested amount
	 * cannot be allotted to convert the requisition to PO ; the requisition
	 * should halt at buyers desk <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * @param testCase </font><b><br>
	 * @throws Exception </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_361203(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		List<String> listOfProjects = new ArrayList<>();
		PurchaseOrderSettings purchaseOrderSettings = new PurchaseOrderSettings();
		Budget budget = null;
		boolean flag = false, budgetCreatedFlag = false, poSettingChangedFlag = false;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);

			listOfProjects = CommonUtilities.getListOFProjectNamesForBU();

			budget = ObjectCreation.getDefaultObjectOfBudget();
			budget.setCurrencyType("USD");
			budget.getBudgetDimension().setBusinessUnit(true);
			budget.getBudgetDimension().setCostCenter(false);
			budget.getBudgetDimension().setDepartment(false);
			budget.getBudgetDimension().setDesignation(false);
			budget.getBudgetDimension().setGlAccount(false);
			budget.getBudgetDimension().setLocation(false);
			budget.getBudgetDimension().setProject(true);

			// budget line
			budget.getBudgetLines().get(0).setLocation(null);
			budget.getBudgetLines().get(0).setCostCenter(null);

			budget.getBudgetLines().get(0).setDepartment(null);
			budget.getBudgetLines().get(0).setDesignation(null);

			budget.getBudgetLines().get(0).setPlannedAmount("1000");
			budget.getBudgetLines().get(0).setProject(listOfProjects.get(0));
			budget.getBudgetLines().get(0).setIsbudgetLineSetting(true);
			BudgetLineSetting budgetLineSetting = new BudgetLineSetting();
			budgetLineSetting.setExceedAmountTolerance(100);
			budgetLineSetting.setExceedPercentToleranceToInfinite(true);
			budgetLineSetting.setNextAction(IConstantsData.SAVE);
			budget.getBudgetLines().get(0).setBudgetLineSetting(budgetLineSetting);

			// create budget
			logger.info("=============== Create Budget ===============");
			budget = FlowCreateBudget.createBudget(driver, testCaseName, budget);
			budgetCreatedFlag = true;
			// search budget
			logger.info("=============== Search Budget ===============");
			flag = FlowBudgetListing.searchBudget(driver, testCaseName, IConstantsData.SEARCH_BUDGET_BY_BUDGET_NAME, budget);
			assertTrue("Error while searching budget", flag);

			// Change Purchase order setting : auto PO on
			logger.info("=============== Change PO Settings : set Auto PO as ON   ===============");
			purchaseOrderSettings.setAutomaticallyGenerateOrders(true);
			purchaseOrderSettings.setNextAction(IConstantsData.SAVE);
			poSettingChangedFlag = true;
			purchaseOrderSettings = FlowPurchaseOrderSetting.changePOSetting(driver, testCaseName, purchaseOrderSettings);

			// create requisition
			Requisition requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.GUIDED_ITEM);
			requisition.getItems().getGuidedItems().get(0).setQuantity(2f);
			requisition.getItems().getGuidedItems().get(0).setCurrency("USD");
			requisition.getItems().getGuidedItems().get(0).setPrice(550f);
			requisition.getCostBookingRequisitionSummary().setProject(CommonUtilities.getProperProject(budget.getBudgetLines().get(0).getProject()));
			requisition.getCostBookingRequisitionSummary().setBudget(budget.getBudgetLines().get(0).getBudgetLineName());

			logger.info("=============== Create Requisition ===============");
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// search req
			logger.info("=============== Search Requisition ===============");
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());

			flag = PageMyRequisition.getStatusOfFirstReq(driver, testCaseName).contains(IConstantsData.IN_APPROVAL_FILTER_LABEL);
			assertTrue("Status of Requisition was wrong, It should be In Approval", flag);

			logger.info("=============== Search Budget ===============");
			flag = FlowBudgetListing.searchBudget(driver, testCaseName, IConstantsData.SEARCH_BUDGET_BY_BUDGET_NAME, budget);
			assertTrue("Error while searching budget", flag);

			// view budget
			logger.info("=============== View Budget ===============");
			FlowBudgetListing.viewBudget(driver, testCaseName);
			ActionBot.scroll(driver);

			logger.info("=============== Change Budget Line Settings ===============");
			budgetLineSetting.setExceedAmountTolerance(0);
			budgetLineSetting.setExceedAmountToleranceToInfinite(false);
			budgetLineSetting.setExceedPercentTolerance(0);
			budgetLineSetting.setExceedPercentToleranceToInfinite(false);

			PageCreateBudget.clickOnSettingsOfBudgetLine(driver, testCaseName, budget.getBudgetLines().get(0).getBudgetLineName());
			FlowCreateBudget.fillBudgetLineSetting(driver, testCaseName, budgetLineSetting);

			PageCreateBudget.clickOnSaveAndFreezeBudgetButton(driver, testCaseName);
			logger.info("================ Approve Requisition ================");
			ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, requisition.getReqNo(), IConstantsData.REQUISITION,
				IConstantsData.APPROVE);

			approvalAllRequests = FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);
			// search req
			logger.info("=============== Search Requisition ===============");
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());

			flag = PageMyRequisition.getStatusOfFirstReq(driver, testCaseName).toLowerCase().contains(IConstantsData.WITH_BUYER_FILTER_LABEL.toLowerCase());

			assertTrue("Status of Requisition was wrong, It should be With Buyer", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				if (budgetCreatedFlag)
				{
					// search budget
					FlowBudgetListing.searchBudget(driver, testCaseName, IConstantsData.SEARCH_BUDGET_BY_BUDGET_NAME, budget);
					// deactivate budget
					FlowBudgetListing.deactivateBudget(driver, testCaseName, budget);
				}
				if (poSettingChangedFlag)
				{
					purchaseOrderSettings.setAutomaticallyGenerateOrders(false);
					purchaseOrderSettings = FlowPurchaseOrderSetting.changePOSetting(driver, testCaseName, purchaseOrderSettings);
				}
			}
			catch (Exception e)
			{
				logger.info("Exception occurred while deactivating budget : " + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>If both % as well as currency units ( in
	 * budget exceed setting ) is not set during budget configuration; document
	 * submission should NEVER be blocked if budget exceeds its planned amount .
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * @param testCase </font><b><br>
	 * @throws Exception </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_361265(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		List<MappedTestCase> mappedTestCases = new ArrayList<>();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		List<String> listOfProjects = new ArrayList<>();
		Budget budget = null;
		String calculatedBalanceAmount, calculatedBalanceAmountWithTolerance, poNo;
		float unitPrice;
		boolean flag = false, budgetCreatedFlag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase, mappedTestCases);
			user = LoginLogoutServices.login(driver, testCase);

			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_361259"));// 0
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_361261"));// 1
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_361257"));// 2
			}

			listOfProjects = CommonUtilities.getListOFProjectNamesForBU();

			budget = ObjectCreation.getDefaultObjectOfBudget();
			budget.setCurrencyType(CommonServices.getTestData(IConstantsData.CHANGED_CURRENCY));
			budget.getBudgetDimension().setBusinessUnit(true);
			budget.getBudgetDimension().setCostCenter(false);
			budget.getBudgetDimension().setDepartment(false);
			budget.getBudgetDimension().setDesignation(false);
			budget.getBudgetDimension().setGlAccount(false);
			budget.getBudgetDimension().setLocation(false);
			budget.getBudgetDimension().setProject(true);

			int amount = CommonUtilities.getNonZeroRandomNumbers(4);
			// budget line 0
			budget.getBudgetLines().get(0).setLocation(null);
			budget.getBudgetLines().get(0).setCostCenter(null);
			budget.getBudgetLines().get(0).setDepartment(null);
			budget.getBudgetLines().get(0).setDesignation(null);

			budget.getBudgetLines().get(0).setPlannedAmount(Integer.toString(amount));
			budget.getBudgetLines().get(0).setProject(listOfProjects.get(0));
			budget.getBudgetLines().get(0).setIsbudgetLineSetting(true);
			BudgetLineSetting budgetLineSetting = new BudgetLineSetting();
			budgetLineSetting.setExceedPercentTolerance(10);
			budgetLineSetting.setExceedAmountToleranceToInfinite(true);
			budgetLineSetting.setNextAction(IConstantsData.SAVE);
			budget.getBudgetLines().get(0).setBudgetLineSetting(budgetLineSetting);

			// budget line 1
			BudgetLine budgetLine = ObjectCreation.getDefaultObjetOfBudgetLine();
			budgetLine.setLocation(null);
			budgetLine.setCostCenter(null);
			budgetLine.setDepartment(null);
			budgetLine.setDesignation(null);

			budgetLine.setPlannedAmount(Integer.toString(amount));
			budgetLine.setProject(listOfProjects.get(1));
			budgetLine.setIsbudgetLineSetting(true);
			budgetLine.setBudgetLineSetting(budgetLineSetting);

			budget.getBudgetLines().add(budgetLine);

			// create budget
			logger.info("=============== Create Budget ===============");
			budget = FlowCreateBudget.createBudget(driver, testCaseName, budget);
			budgetCreatedFlag = true;
			// search budget
			logger.info("=============== Search Budget ===============");
			flag = FlowBudgetListing.searchBudget(driver, testCaseName, IConstantsData.SEARCH_BUDGET_BY_BUDGET_NAME, budget);
			Assert.assertTrue("Error while searching budget", flag);

			// change po settings
			logger.info("=============== Change PO Settings ==============");
			PurchaseOrderSettings purchaseOrderSettings = new PurchaseOrderSettings();
			purchaseOrderSettings.setAllowUsersToChangeDefaultSupplierCurrency(true);
			purchaseOrderSettings.setNextAction(IConstantsData.SAVE);
			purchaseOrderSettings = FlowPurchaseOrderSetting.changePOSetting(driver, testCaseName, purchaseOrderSettings);

			// create standard PO
			StandardPO standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.GUIDED_ITEM);
			standardPO.getItems().getGuidedItems().get(0).setUom(CommonServices.getTestData(IConstantsData.Item_UOM, 0));
			standardPO.getItems().getGuidedItems().get(0).setQuantity(2f);
			standardPO.getItems().getGuidedItems().get(0).setCurrency(CommonServices.getTestData(IConstantsData.CHANGED_CURRENCY));
			standardPO.getItems().getGuidedItems().get(0).setPrice(amount);
			standardPO.getCostBookingRequisitionSummary().setProject(CommonUtilities.getProperProject(budget.getBudgetLines().get(0).getProject()));
			standardPO.getCostBookingRequisitionSummary().setBudget(budget.getBudgetLines().get(0).getBudgetLineName());
			standardPO.setRemoveAllTaxes(true);
			standardPO.setNextAction(IConstantsData.NONE);

			logger.info("=============== Create Standard PO ===============");
			standardPO = FlowStandardPo.createStandardPo(driver, testCaseName, standardPO);

			/** RTC_361259 : Verify currency conversions in PO with budget **/
			// change currency
			PageStandardPO.enterCurrencyType(driver, CommonServices.getTestData(IConstantsData.CHANGED_CURRENCY));
			ModalChangeCurrencyPO.clickOnOnlyChangeCurrencyToCurrencyType(driver, testCaseName);
			standardPO.setPoTotal(PageStandardPO.getPOTotalPrice(driver, testCaseName));

			// submit po
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);

			flag = PageStandardPO.getBudgetExhaustedError(driver, testCaseName).equalsIgnoreCase(IConstantsData.ErrorMsg_BudgetExhausted)
				&& PageStandardPO.getBudgetLineForBudgetExhaustedError(driver, testCaseName).equalsIgnoreCase(budget.getBudgetLines().get(0).getBudgetLineName());
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(0), "PO submission was not blocked after currency conversion");

			/**
			 * RTC_361261 : For a catalog item ( unit and market price are
			 * different ); then the budget amount reserved should be according
			 * to the unit price
			 **/
			// remove above added item
			flag = FlowStandardPo.removeItem(driver, testCaseName, standardPO.getItems().getGuidedItems().get(0).getItemID());
			Assert.assertTrue("Error while removing item from po", flag);

			// change currency
			PageStandardPO.enterCurrencyType(driver, CommonServices.getTestData(IConstantsData.CURRENCY_TYPE));

			// add catalog item to
			logger.info("================= Add Catalog Item =================");
			Item item = ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);
			item.getCatelogItems().get(0).setQuantity(1);
			item = FlowStandardPo.addItem(driver, testCaseName, item);
			//			PageStandardPO.clickOnEditItemSummaryButtonUsingItemName(driver, testCaseName, item.getCatelogItems().get(0).getItemName());
			//			ModalPOItemSummaryCostAllocation.clickOnCostBookingTab(driver, testCaseName);
			//			CostBookingRequisitionSummary costBookingRequisitionSummary = ObjectCreation.getDefaultObjectOfCostBooking();
			//			costBookingRequisitionSummary = FlowStandardPo.fillItemSummaryCostBooking(driver, testCaseName, costBookingRequisitionSummary);

			// view catalog item
			logger.info("================ View Catalog Item ================");
			PageStandardPO.clickOnEditItemSummaryButtonUsingItemName(driver, testCaseName, item.getCatelogItems().get(0).getItemName());
			ActionBot.jQueryScroll(driver, ".eformItemInpt.ui-front", 450);
			ModalPOFreeTextItemSummaryItem.getMarketPriceOfItem(driver, testCaseName);
			unitPrice = ModalPOFreeTextItemSummaryItem.getUnitPriceOfItem(driver, testCaseName);
			ModalPOFreeTextItemSummaryItem.getCurrencyOfMarketPriceOfItem(driver, testCaseName);
			ModalPOFreeTextItemSummaryItem.clickOnCancelBtnItemSummary(driver, testCaseName);

			standardPO.setPoTotal(PageStandardPO.getPOTotalPrice(driver, testCaseName));

			// submit po
			poNo = FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			if (poNo != null)
			{
				standardPO.setPoNumber(poNo);
			}

			// search PO
			logger.info("=============== Search PO ===============");
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("Error in searching PO", flag);

			flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL);
			Assert.assertTrue("Status of PO was wrong, It should be In Approval", flag);

			logger.info("=============== Search Budget ===============");
			flag = FlowBudgetListing.searchBudget(driver, testCaseName, IConstantsData.SEARCH_BUDGET_BY_BUDGET_NAME, budget);
			Assert.assertTrue("Error while searching budget", flag);

			// view budget
			logger.info("=============== View Budget ===============");
			FlowBudgetListing.viewBudget(driver, testCaseName);
			ActionBot.scroll(driver);

			// view audit
			BudgetAudit budgetAudit = FlowCreateBudget.getBudgetAuditDetails(driver, testCaseName, budget.getBudgetLines().get(0).getBudgetLineName());

			flag = CommonUtilities.getDecimalPriceAlongWithCurrency(budgetAudit.getPoReserved())
				.equalsIgnoreCase(CommonUtilities.getDecimalPriceAlongWithCurrency(standardPO.getPoTotal()))
				&& CommonUtilities.getDecimalPrice(budgetAudit.getPoReserved()).equalsIgnoreCase(CommonUtilities.getDecimalPrice(Float.toString(unitPrice)));
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(1), "Budget line amount was not reserved according to Unit price of catalog item");

			calculatedBalanceAmount = Integer.toString(
				Integer.parseInt(budget.getBudgetLines().get(0).getPlannedAmount()) - Integer.parseInt(CommonUtilities.getDecimalPriceAlongWithCurrency(standardPO.getPoTotal())));
			flag = calculatedBalanceAmount.equalsIgnoreCase(CommonUtilities.getDecimalPriceAlongWithCurrency(budgetAudit.getBalanceAmount()));
			Assert.assertTrue("Balance amount was not proper", flag);

			calculatedBalanceAmountWithTolerance = Integer.toString(Integer.parseInt(budget.getBudgetLines().get(0).getPlannedAmount())
				- Integer.parseInt(CommonUtilities.getDecimalPriceAlongWithCurrency(standardPO.getPoTotal()))
				+ Integer.parseInt(budget.getBudgetLines().get(0).getPlannedAmount()) * budget.getBudgetLines().get(0).getBudgetLineSetting().getExceedPercentTolerance() / 100);
			flag = calculatedBalanceAmountWithTolerance.equalsIgnoreCase(budgetAudit.getBalanaceAmountWithTolerance().split("\\ ")[1].split("\\.")[0].replaceAll("[^0-9]", ""));
			Assert.assertTrue("Balance amount with tolerance was not proper", flag);

			/**
			 * RTC_361257 : User should not be able to release a PO with a
			 * Deactivated /deleted budget ---Check the case when planned amount
			 * of the budget line has been used
			 **/
			//			// create standard PO
			//			StandardPO standardPO1 = ObjectCreation.getStandardPoCreation(IConstantsData.GUIDED_ITEM);
			//			standardPO1.getItems().getGuidedItems().get(0).setQuantity(1f);
			//			standardPO1.getItems().getGuidedItems().get(0).setCurrency(CommonServices.getTestData(IConstantsData.CURRENCY_TYPE));
			//			standardPO1.getItems().getGuidedItems().get(0).setPrice(amount);
			//			standardPO1.getCostBookingRequisitionSummary().setProject(CommonUtilities.getProperProject(budget.getBudgetLines().get(1).getProject()));
			//			standardPO1.getCostBookingRequisitionSummary().setBudget(budget.getBudgetLines().get(1).getBudgetLineName());
			//			standardPO1.setRemoveAllTaxes(true);
			//			standardPO1.setCurrencyType(CommonServices.getTestData(IConstantsData.CURRENCY_TYPE));
			//			//standardPO1.setNextAction(IConstantsData.NONE);
			//
			//			logger.info("=============== Create Standard PO ===============");
			//			standardPO1 = FlowStandardPo.createStandardPo(driver, testCaseName, standardPO1);
			//
			//			// search PO
			//			logger.info("=============== Search PO ===============");
			//			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO1.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			//			assertTrue("Error in searching PO", flag);

			// create standard PO
			StandardPO standardPO2 = ObjectCreation.getStandardPoCreation(IConstantsData.GUIDED_ITEM);
			standardPO2.getItems().getGuidedItems().get(0).setQuantity(1f);
			standardPO2.getItems().getGuidedItems().get(0).setUom(CommonServices.getTestData(IConstantsData.Item_UOM, 0));
			standardPO2.getItems().getGuidedItems().get(0).setCurrency(CommonServices.getTestData(IConstantsData.CURRENCY_TYPE));
			standardPO2.getItems().getGuidedItems().get(0).setPrice(amount);
			standardPO2.getCostBookingRequisitionSummary().setProject(CommonUtilities.getProperProject(budget.getBudgetLines().get(1).getProject()));
			standardPO2.getCostBookingRequisitionSummary().setBudget(budget.getBudgetLines().get(1).getBudgetLineName());
			standardPO2.setRemoveAllTaxes(true);
			standardPO2.setCurrencyType(CommonServices.getTestData(IConstantsData.CURRENCY_TYPE));
			//standardPO2.setNextAction(IConstantsData.NONE);

			logger.info("=============== Create Standard PO ===============");
			standardPO2 = FlowStandardPo.createStandardPo(driver, testCaseName, standardPO2);

			// search PO
			logger.info("=============== Search PO ===============");
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO2.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("Error in searching PO", flag);

			flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL);
			Assert.assertTrue("Status of PO was wrong, It should be In Approval", flag);

			// search budget
			logger.info("=============== Search Budget ===============");
			flag = FlowBudgetListing.searchBudget(driver, testCaseName, IConstantsData.SEARCH_BUDGET_BY_BUDGET_NAME, budget);
			Assert.assertTrue("Error while searching budget", flag);

			// deactivate budget
			logger.info("=============== Deactivate Budget ===============");
			flag = FlowBudgetListing.deactivateBudget(driver, testCaseName, budget);
			Assert.assertTrue("Error while deactivating budget", flag);
			budgetCreatedFlag = false;

			// to approve the PO
			ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, standardPO2.getPoNumber(), IConstantsData.PURCHASE_ORDER,
				IConstantsData.APPROVE);
			logger.info("=============== Approve PO ===============");
			FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

			ActionBot.defaultHighSleep();
			// search po
			logger.info("=============== Search PO ===============");
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO2.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("Error while searching PO", flag);
			flag = !PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.COMPLETE_RELEASED_FILTER_LABEL);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(2), "User was able to release a PO with a Deactivated budget");

			// search budget
			logger.info("=============== Search Budget ===============");
			flag = FlowBudgetListing.searchBudget(driver, testCaseName, IConstantsData.SEARCH_BUDGET_BY_BUDGET_NAME, budget);
			Assert.assertTrue("Error while searching budget", flag);

			// activate budget
			logger.info("=============== Activate Budget ===============");
			flag = FlowBudgetListing.activateBudget(driver, testCaseName, budget);
			budgetCreatedFlag = true;
			Assert.assertTrue("Error while activating budget", flag);

			// create filp invoice
			logger.info("=============== Create Flip Invoice ===============");
			Invoice invoice = ObjectCreation.getDefaultFlipInvoiceObject();
			invoice = FlowFlipInvoice.createFlipInvoiceAndConfirmAndSubmitIt(driver, testCaseName, standardPO2, invoice);

			FlowPoListing.searchPo(driver, testCaseName, standardPO2.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			flag = FlowPoListing.getInvocieIconStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.FULLY_INVOICED);
			Assert.assertTrue("Invoice is not created", flag);

			logger.info("=============== Search Budget ===============");
			flag = FlowBudgetListing.searchBudget(driver, testCaseName, IConstantsData.SEARCH_BUDGET_BY_BUDGET_NAME, budget);
			Assert.assertTrue("Error while searching budget", flag);

			// view budget
			logger.info("=============== View Budget ===============");
			FlowBudgetListing.viewBudget(driver, testCaseName);
			ActionBot.scroll(driver);

			// view audit
			BudgetAudit budgetAudit2 = FlowCreateBudget.getBudgetAuditDetails(driver, testCaseName, budget.getBudgetLines().get(0).getBudgetLineName());

			flag = CommonUtilities.getDecimalPrice(budgetAudit2.getInvoiceReserved()).equalsIgnoreCase("0");
			Assert.assertTrue("Budget was reserved on invoice submit", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				if (budgetCreatedFlag)
				{
					// search budget
					FlowBudgetListing.searchBudget(driver, testCaseName, IConstantsData.SEARCH_BUDGET_BY_BUDGET_NAME, budget);
					// deactivate budget
					FlowBudgetListing.deactivateBudget(driver, testCaseName, budget);
				}
			}
			catch (Exception e)
			{
				logger.info("Exception occurred while deactivating budget : " + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
			}
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>If PO item amount is changed during PO
	 * amendment submit; BLA Reserved should be updated - Check the case of
	 * change of tax by change multiple <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * @param testCase </font><b><br>
	 * @throws Exception </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_361263(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<>();
		User user = null;
		List<String> listOfProjects = new ArrayList<>();
		String calculatedBalanceAmount, calculatedBalanceAmountWithTolerance, itemId, poNo;
		Budget budget = null;
		boolean flag = false, budgetCreatedFlag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase, mappedTestCases);
			user = LoginLogoutServices.login(driver, testCase);

			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_361262"));
			}
			listOfProjects = CommonUtilities.getListOFProjectNamesForBU();

			budget = ObjectCreation.getDefaultObjectOfBudget();
			budget.setCurrencyType(CommonServices.getTestData(IConstantsData.CURRENCY_TYPE));
			budget.getBudgetDimension().setBusinessUnit(true);
			budget.getBudgetDimension().setCostCenter(false);
			budget.getBudgetDimension().setDepartment(false);
			budget.getBudgetDimension().setDesignation(false);
			budget.getBudgetDimension().setGlAccount(false);
			budget.getBudgetDimension().setLocation(false);
			budget.getBudgetDimension().setProject(true);

			int amount = CommonUtilities.getNonZeroRandomNumbers(3);
			// budget line 0
			budget.getBudgetLines().get(0).setLocation(null);
			budget.getBudgetLines().get(0).setCostCenter(null);
			budget.getBudgetLines().get(0).setDepartment(null);
			budget.getBudgetLines().get(0).setDesignation(null);
			budget.getBudgetLines().get(0).setPlannedAmount(Integer.toString(amount));
			budget.getBudgetLines().get(0).setProject(listOfProjects.get(0));
			budget.getBudgetLines().get(0).setIsbudgetLineSetting(true);
			BudgetLineSetting budgetLineSetting = new BudgetLineSetting();
			budgetLineSetting.setExceedPercentTolerance(10);
			budgetLineSetting.setExceedAmountToleranceToInfinite(true);
			budgetLineSetting.setNextAction(IConstantsData.SAVE);
			budget.getBudgetLines().get(0).setBudgetLineSetting(budgetLineSetting);

			// create budget
			logger.info("=============== Create Budget ===============");
			budget = FlowCreateBudget.createBudget(driver, testCaseName, budget);
			budgetCreatedFlag = true;
			// search budget
			logger.info("=============== Search Budget ===============");
			flag = FlowBudgetListing.searchBudget(driver, testCaseName, IConstantsData.SEARCH_BUDGET_BY_BUDGET_NAME, budget);
			assertTrue("Error while searching budget", flag);
			// create standard PO
			StandardPO standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.GUIDED_ITEM);
			standardPO.getItems().getGuidedItems().get(0).setUom(CommonServices.getTestData(IConstantsData.Item_UOM, 0));
			standardPO.getItems().getGuidedItems().get(0).setQuantity(2f);
			standardPO.getItems().getGuidedItems().get(0).setCurrency(CommonServices.getTestData(IConstantsData.CURRENCY_TYPE));
			standardPO.getItems().getGuidedItems().get(0).setZeroPriceItem(true);
			standardPO.getCostBookingRequisitionSummary().setProject(CommonUtilities.getProperProject(budget.getBudgetLines().get(0).getProject()));
			standardPO.getCostBookingRequisitionSummary().setBudget(budget.getBudgetLines().get(0).getBudgetLineName());
			standardPO.setRemoveAllTaxes(true);
			logger.info("=============== Create Standard PO ===============");
			standardPO = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO);

			// search PO
			logger.info("=============== Search PO ===============");
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("Error in searching PO", flag);

			logger.info("=============== Search Budget ===============");
			flag = FlowBudgetListing.searchBudget(driver, testCaseName, IConstantsData.SEARCH_BUDGET_BY_BUDGET_NAME, budget);
			Assert.assertTrue("Error while searching budget", flag);

			// view budget
			logger.info("=============== View Budget ===============");
			FlowBudgetListing.viewBudget(driver, testCaseName);
			ActionBot.scroll(driver);

			// view audit
			BudgetAudit budgetAudit = FlowCreateBudget.getBudgetAuditDetails(driver, testCaseName, budget.getBudgetLines().get(0).getBudgetLineName());

			flag = CommonUtilities.getDecimalPrice(budgetAudit.getPoReserved()).equalsIgnoreCase("0");
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(0), "Budget was reserved for a zero price item");

			calculatedBalanceAmount = Integer.toString(
				Integer.parseInt(budget.getBudgetLines().get(0).getPlannedAmount()) - Integer.parseInt(CommonUtilities.getDecimalPriceAlongWithCurrency(standardPO.getPoTotal())));
			flag = calculatedBalanceAmount.equalsIgnoreCase(CommonUtilities.getDecimalPriceAlongWithCurrency(budgetAudit.getBalanceAmount()));
			Assert.assertTrue("Balance amount was not proper when PO submitted with Zero price item", flag);

			calculatedBalanceAmountWithTolerance = Integer.toString(Integer.parseInt(budget.getBudgetLines().get(0).getPlannedAmount())
				- Integer.parseInt(CommonUtilities.getDecimalPriceAlongWithCurrency(standardPO.getPoTotal()))
				+ Integer.parseInt(budget.getBudgetLines().get(0).getPlannedAmount()) * budget.getBudgetLines().get(0).getBudgetLineSetting().getExceedPercentTolerance() / 100);
			flag = calculatedBalanceAmountWithTolerance.equalsIgnoreCase(budgetAudit.getBalanaceAmountWithTolerance().split("\\ ")[1].split("\\.")[0]);
			Assert.assertTrue("Balance amount with tolerance was not proper when PO submitted with Zero price item", flag);

			/**
			 * RTC_361262 : If PO item amount is changed during PO amendment
			 * submit; BLA Reserved should be updated - Check the case of change
			 * of tax by change multiple
			 **/
			// create new po
			StandardPO standardPO1 = ObjectCreation.getStandardPoCreation(IConstantsData.GUIDED_ITEM);
			standardPO1.getItems().getGuidedItems().get(0).setUom(CommonServices.getTestData(IConstantsData.Item_UOM, 0));
			standardPO1.getItems().getGuidedItems().get(0).setQuantity(1f);
			standardPO1.getItems().getGuidedItems().get(0).setCurrency(CommonServices.getTestData(IConstantsData.CURRENCY_TYPE));
			standardPO1.getItems().getGuidedItems().get(0).setPrice(amount / 2);
			standardPO1.getCostBookingRequisitionSummary().setProject(CommonUtilities.getProperProject(budget.getBudgetLines().get(0).getProject()));
			standardPO1.getCostBookingRequisitionSummary().setBudget(budget.getBudgetLines().get(0).getBudgetLineName());
			standardPO1.setRemoveAllTaxes(true);

			logger.info("=============== Create Standard PO ===============");
			standardPO1 = FlowStandardPo.createAndReleasedPo(driver, testCaseName, standardPO1);

			logger.info("=============== Search Budget ===============");
			flag = FlowBudgetListing.searchBudget(driver, testCaseName, IConstantsData.SEARCH_BUDGET_BY_BUDGET_NAME, budget);
			Assert.assertTrue("Error while searching budget", flag);

			// view budget
			logger.info("=============== View Budget ===============");
			FlowBudgetListing.viewBudget(driver, testCaseName);
			ActionBot.scroll(driver);

			// view audit
			BudgetAudit budgetAudit1 = FlowCreateBudget.getBudgetAuditDetails(driver, testCaseName, budget.getBudgetLines().get(0).getBudgetLineName());

			flag = CommonUtilities.getDecimalPriceAlongWithCurrency(budgetAudit1.getPoReserved())
				.equalsIgnoreCase(CommonUtilities.getDecimalPriceAlongWithCurrency(standardPO1.getPoTotal()));
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(0), "Budget was reserved for PO");

			calculatedBalanceAmount = Integer.toString(
				Integer.parseInt(budget.getBudgetLines().get(0).getPlannedAmount()) - Integer.parseInt(CommonUtilities.getDecimalPriceAlongWithCurrency(standardPO1.getPoTotal())));
			flag = calculatedBalanceAmount.equalsIgnoreCase(CommonUtilities.getDecimalPriceAlongWithCurrency(budgetAudit1.getBalanceAmount()));
			Assert.assertTrue("Balance amount was not proper when PO submitted", flag);

			calculatedBalanceAmountWithTolerance = Integer.toString(Integer.parseInt(budget.getBudgetLines().get(0).getPlannedAmount())
				- Integer.parseInt(CommonUtilities.getDecimalPriceAlongWithCurrency(standardPO1.getPoTotal()))
				+ Integer.parseInt(budget.getBudgetLines().get(0).getPlannedAmount()) * budget.getBudgetLines().get(0).getBudgetLineSetting().getExceedPercentTolerance() / 100);
			flag = calculatedBalanceAmountWithTolerance.equalsIgnoreCase(budgetAudit1.getBalanaceAmountWithTolerance().split("\\ ")[1].split("\\.")[0]);
			Assert.assertTrue("Balance amount with tolerance was not proper when PO submitted", flag);

			// search PO
			logger.info("=============== Search PO ===============");
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO1.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("Error in searching PO", flag);

			// amend po
			logger.info("=============== Amend PO ===============");
			FlowPoListing.amendPO(driver, testCaseName);
			ActionBot.scroll(driver, "600");

			// update all lines
			logger.info("=============== Update all lines ===============");
			itemId = PageStandardPO.getItemId(driver, standardPO1.getItems().getGuidedItems().get(0).getShortDescription());
			PageStandardPO.clickOnCheckBoxOfItem(driver, testCaseName, itemId);
			UpdateAllLinesApplyTax updateAllLinesApplyTax = ObjectCreation.getDefaultObjetOfUpdateAllLines();

			updateAllLinesApplyTax = FlowStandardPo.updateAllLines(driver, testCaseName, updateAllLinesApplyTax);

			standardPO1.setPoTotal(PageStandardPO.getPOTotalPrice(driver, testCaseName));

			// submit po
			poNo = FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			if (poNo != null)
			{
				standardPO1.setPoNumber(poNo);
			}

			// search PO
			logger.info("=============== Search PO ===============");
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO1.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("Error in searching amended PO", flag);

			logger.info("=============== Search Budget ===============");
			flag = FlowBudgetListing.searchBudget(driver, testCaseName, IConstantsData.SEARCH_BUDGET_BY_BUDGET_NAME, budget);
			Assert.assertTrue("Error while searching budget", flag);

			// view budget
			logger.info("=============== View Budget ===============");
			FlowBudgetListing.viewBudget(driver, testCaseName);
			ActionBot.scroll(driver);

			// view audit
			BudgetAudit budgetAudit2 = FlowCreateBudget.getBudgetAuditDetails(driver, testCaseName, budget.getBudgetLines().get(0).getBudgetLineName());

			flag = CommonUtilities.getDecimalPriceAlongWithCurrency(budgetAudit2.getPoReserved())
				.equalsIgnoreCase(CommonUtilities.getDecimalPriceAlongWithCurrency(standardPO1.getPoTotal()));
			Assert.assertTrue("Budget was not reserved after applying tax while amending po", flag);

			calculatedBalanceAmount = Integer.toString(
				Integer.parseInt(budget.getBudgetLines().get(0).getPlannedAmount()) - Integer.parseInt(CommonUtilities.getDecimalPriceAlongWithCurrency(standardPO1.getPoTotal())));
			flag = calculatedBalanceAmount.equalsIgnoreCase(CommonUtilities.getDecimalPriceAlongWithCurrency(budgetAudit2.getBalanceAmount()));
			Assert.assertTrue("Balance amount was not proper after applying tax while amending po", flag);

			calculatedBalanceAmountWithTolerance = Integer.toString(Integer.parseInt(budget.getBudgetLines().get(0).getPlannedAmount())
				- Integer.parseInt(CommonUtilities.getDecimalPriceAlongWithCurrency(standardPO1.getPoTotal()))
				+ Integer.parseInt(budget.getBudgetLines().get(0).getPlannedAmount()) * budget.getBudgetLines().get(0).getBudgetLineSetting().getExceedPercentTolerance() / 100);
			flag = calculatedBalanceAmountWithTolerance.equalsIgnoreCase(budgetAudit2.getBalanaceAmountWithTolerance().split("\\ ")[1].split("\\.")[0]);
			Assert.assertTrue("Balance amount with tolerance was not proper after applying tax while amending po", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				if (budgetCreatedFlag)
				{
					// search budget
					FlowBudgetListing.searchBudget(driver, testCaseName, IConstantsData.SEARCH_BUDGET_BY_BUDGET_NAME, budget);
					// deactivate budget
					FlowBudgetListing.deactivateBudget(driver, testCaseName, budget);
				}
			}
			catch (Exception e)
			{
				logger.info("Exception occurred while deactivating budget : " + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
			}
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Customer specific field name>>Requisition
	 * view from audit trail>>Cost center and accounting label should be
	 * replaced by its customized name when you view requisition from audit
	 * trail. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * @param testCase </font><b><br>
	 * @throws Exception </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_366215(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<>();
		User user = null;
		SystemTenantConfiguration configuration = new SystemTenantConfiguration();
		Project project = new Project();
		String testCaseName = null;
		String projectLabelValue = null, poNo = null, configuredProjectLabel = null, errorMsg = null, budget;
		boolean settingchangedFlag = false, projectFlag = false, flag = false, createdProjectFlag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_366229"));// 0
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_366228"));// 1
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_366227"));// 2
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_366230"));// 3
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_366233"));// 4

			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			user = LoginLogoutServices.login(driver, testCase);

			// system tenant configuration object
			configuration.setTenantName(CommonServices.getTestData(IConstantsData.TenantName));
			configuration.setCustomLang(CommonServices.getTestData(IConstantsData.Display_Name_For_Pre_Defined_Fields));

			// change system tenant configuration
			settingchangedFlag = true;
			configuration = FlowSystemTenantConfiguration.changeSytemTenantConfiguration(driver, testCaseName, configuration);

			// create new project
			project = ObjectCreation.getDefaultObjectsOfProject();
			project = FlowProject.createProject(driver, testCaseName, project);
			createdProjectFlag = true;
			flag = FlowProject.searchProject(driver, testCaseName, project.getProjectName(), IConstantsData.SearchCC_In_Statistical_Project_Or_Task_Name);
			assertTrue("Create project was not searched", flag);

			PageMasterDataSettings.clickOnReturnToSetUpModule(driver, testCaseName);

			MainPageHeaderLevelTab.clickOnPOTab(driver);

			/**
			 * RTC_366229 : customer specific field name>>ICW template>>PO
			 * creation>>Project label should be replaced by its customized
			 * label in PO creation screen.
			 **/
			StandardPO standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			PagePO.clickOnStandardPO(driver, testCaseName);

			logger.info("============ Create Standard PO ===============");
			// click on edit
			PageStandardPO.clickOnEdit(driver);
			TabPOSummary.clickOnCostBookingPOSummary(driver);
			projectLabelValue = ModalPOSummaryCostBooking.getLabelValueOfProjectField(driver, testCaseName);
			ModalPOSummaryCostBooking.clickOnCancel(driver, testCaseName);
			String[] temp;
			if (projectLabelValue.contains(":"))
			{
				temp = StringUtils.split(projectLabelValue, ":");
				projectLabelValue = temp[0].trim();
			}
			if (projectLabelValue.contains("*"))
			{
				temp = StringUtils.split(projectLabelValue, "*");
				projectLabelValue = temp[0].trim();
			}

			int i = 0;
			for (String str : configuration.getStandardNames())
			{
				if (str.equalsIgnoreCase(IConstantsData.Default_Project_Label_Name))
				{
					configuredProjectLabel = configuration.getCustomizedNames().get(i);
					projectFlag = projectLabelValue.equalsIgnoreCase(configuration.getCustomizedNames().get(i));
					break;
				}
				i++;
			}
			CommonServices.setMappedTestCaseResult(projectFlag, mappedTestCases.get(0), "Project label was not replaced by its customized label in PO creation screen.");

			/**
			 * RTC_366228 : customer specific field name>>ICW template>>PO
			 * creation validation error >>Project label should be replaced by
			 * its customized label in validation errors thrown on PO creation
			 * screen.
			 **/
			budget = standardPO.getCostBookingRequisitionSummary().getBudget();
			standardPO = FlowStandardPo.fillStandardPoCreationForm(driver, testCaseName, standardPO);
			// click on edit
			PageStandardPO.clickOnEdit(driver);
			TabPOSummary.clickOnCostBookingPOSummary(driver);
			ModalPOSummaryCostBooking.clearProjectField(driver, testCaseName);
			ModalPOSummaryCostBooking.clickOnSave(driver, testCaseName);
			flag = ModalPOSummaryCostBooking.isProjectErrorPresent(driver, testCaseName);
			assertTrue("Project mandatory error was not present", flag);
			projectLabelValue = ModalPOSummaryCostBooking.getLabelValueOfProjectField(driver, testCaseName);

			projectFlag = projectLabelValue.contains(configuredProjectLabel);

			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(0),
				"Project label was not replaced by its customized label in validation errors thrown on PO creation screen.");

			/**
			 * RTC_366227 : customer specific field name>>ICW template>>PO draft
			 * validation error >>Project label should be replaced by its
			 * customized label in validation errors thrown when user submits
			 * draft PO.
			 **/
			logger.info("============ Save PO as Draft ===============");
			// save po as draft
			standardPO.getCostBookingRequisitionSummary().setProject(ModalPOSummaryCostBooking.fillInProjectField(driver, testCaseName, project.getProjectName()));
			standardPO.getCostBookingRequisitionSummary().setBudget(ModalPOSummaryCostBooking.fillInBudgetField(driver, testCaseName, budget));
			ModalPOSummaryCostBooking.clickOnSave(driver, testCaseName);
			poNo = FlowStandardPo.savePOAsDraft(driver, testCaseName);
			if (poNo != null)
			{
				standardPO.setPoNumber(poNo);
			}

			// search po
			logger.info("============ Search PO ===============");
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			assertTrue("Error while searching draft po", flag);
			flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.DRAFT_FILTER_LABEL);
			assertTrue("Status of PO was not Draft", flag);

			// deactivate project
			logger.info("============ Deactivate project ===============");
			flag = FlowProject.deactivateProject(driver, testCaseName, project.getProjectName(), IConstantsData.SearchCC_In_Statistical_Project_Or_Task_Name);
			assertTrue("Error while deactivating project", flag);

			// search po
			logger.info("============ Search PO ===============");
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			assertTrue("Error while searching draft po", flag);

			// edit po
			logger.info("============ Edit PO ===============");
			FlowPoListing.viewPO(driver, testCaseName);
			ActionBot.defaultMediumSleep();

			PageStandardPO.enterBuyer(driver, CommonServices.getTestData(IConstantsData.BUYER_NAME));

			// submit PO
			logger.info("============ Submit PO =============");
			PageStandardPO.clickOnSubmitPOForProcessing(driver, testCaseName);
			ActionBot.defaultLowSleep();

			errorMsg = PageStandardPO.getErrorMsgOnAlertBoxPresentForPO(driver, testCaseName);
			flag = errorMsg.contains(configuredProjectLabel);
			PopUpAlertSubmitPO.clickOnOK(driver, testCaseName);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(2),
				"Project label was not replaced by its customized label in validation errors thrown when user submits draft PO.");

			/**
			 * RTC_366230 : customer specific field name>>ICW template>>PO
			 * view>>Project label should be replaced by its customized label in
			 * PO view.
			 **/
			// activate project
			logger.info("============ Activate project ===============");
			flag = FlowProject.activateProject(driver, testCaseName, project.getProjectName(), IConstantsData.SearchCC_In_Statistical_Project_Or_Task_Name);
			// assertTrue("Error while activating project", flag);

			// search po
			logger.info("============ Search PO ===============");
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			assertTrue("Error while searching draft po", flag);

			// edit po
			logger.info("============ Edit PO ===============");
			FlowPoListing.viewPO(driver, testCaseName);

			// submit PO
			logger.info("============ Submit PO =============");
			poNo = null;
			poNo = FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			if (poNo != null)
			{
				standardPO.setPoNumber(poNo);
			}
			// search po
			logger.info("============ Search PO ===============");
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			assertTrue("Error while searching draft po", flag);

			// view po
			logger.info("============ View PO ===============");
			FlowPoListing.viewPO(driver, testCaseName);
			ActionBot.scroll(driver);

			PageViewPurchaseOrder.clickOnCostingLink(driver, testCaseName);

			flag = PageViewPurchaseOrder.getLabelValueOfProject(driver, testCaseName).contains(configuredProjectLabel);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(3), "Project label was not replaced by its customized label in PO view.");

			/**
			 * RTC_366233 : customer specific field name>>ICW template>>PO copy
			 * screen>>Project label should be replaced by its customized label
			 * in copy PO screen.
			 **/
			// deactivate project
			logger.info("============ Deactivate project ===============");
			flag = FlowProject.deactivateProject(driver, testCaseName, project.getProjectName(), IConstantsData.SearchCC_In_Statistical_Project_Or_Task_Name);
			assertTrue("Error while deactivating project", flag);

			// search po
			logger.info("============ Search PO ===============");
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			assertTrue("Error while searching draft po", flag);

			// copy po
			logger.info("============ copy PO ===============");
			FlowPoListing.copyPO(driver, testCaseName);
			// click on edit
			PageStandardPO.clickOnEdit(driver);
			TabPOSummary.clickOnCostBookingPOSummary(driver);
			projectLabelValue = ModalPOSummaryCostBooking.getLabelValueOfProjectField(driver, testCaseName);
			ModalPOSummaryCostBooking.clickOnCancel(driver, testCaseName);
			projectFlag = projectLabelValue.contains(configuredProjectLabel);
			CommonServices.setMappedTestCaseResult(projectFlag, mappedTestCases.get(4), "Project label was not replaced by its customized label in copy PO screen.");

			/**
			 * RTC_366215 : customer specific field name>>ICW template>>PO copy
			 * validation error>>Project label should be replaced by its
			 * customized label in validation error thrown when user submits
			 * copied PO.
			 **/
			standardPO.getCustomDate().setDate(PageStandardPO.fillRequiredByDate(driver, testCaseName, standardPO.getCustomDate().getDay(), standardPO.getCustomDate().getMonth(),
				standardPO.getCustomDate().getYear()));

			// submit PO
			logger.info("============ Submit PO =============");
			PageStandardPO.clickOnSubmitPOForProcessing(driver, testCaseName);
			ActionBot.defaultLowSleep();

			errorMsg = PageStandardPO.getErrorMsgOnAlertBoxPresentForPO(driver, testCaseName);
			flag = errorMsg.contains(configuredProjectLabel);
			PopUpAlertSubmitPO.clickOnOK(driver, testCaseName);
			assertTrue("Project label was not replaced by its customized label in validation error thrown when user submits copied PO.", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				if (createdProjectFlag)
				{
					FlowProject.deleteProject(driver, testCaseName, project.getProjectName(), IConstantsData.SearchCC_In_Statistical_Project_Or_Task_Name);
				}
				if (settingchangedFlag)
				{
					configuration.setCustomLang(IConstantsData.Default_System_Tenant_Custom_Lang_Name);

					// change system tenant configuration
					configuration = FlowSystemTenantConfiguration.changeSytemTenantConfiguration(driver, testCaseName, configuration);
				}
			}
			catch (Exception e2)
			{
				logger.error("Error while changing Systen Tenant Custom Lang to Default : " + e2, e2);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
			}
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>customer specific field name>>ICW
	 * template>>BOR view>>Project label should be replaced by its customized
	 * label in BOR view. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * @param testCase </font><b><br>
	 * @throws Exception </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_366213(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<>();
		User user = null;
		SystemTenantConfiguration configuration = new SystemTenantConfiguration();
		Project project = new Project();
		String testCaseName = null;
		String projectLabelValue = null, errorMsg, configuredProjectLabel = null;
		boolean settingchangedFlag = false, projectFlag = false, flag = false, createdProjectFlag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_366212"));// 0
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_366223"));// 1

			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			user = LoginLogoutServices.login(driver, testCase);

			// system tenant configuration object
			configuration.setTenantName(CommonServices.getTestData(IConstantsData.TenantName));
			configuration.setCustomLang(CommonServices.getTestData(IConstantsData.Display_Name_For_Pre_Defined_Fields));

			// change system tenant configuration
			settingchangedFlag = true;
			configuration = FlowSystemTenantConfiguration.changeSytemTenantConfiguration(driver, testCaseName, configuration);

			// create new project
			project = ObjectCreation.getDefaultObjectsOfProject();
			project = FlowProject.createProject(driver, testCaseName, project);
			createdProjectFlag = true;
			flag = FlowProject.searchProject(driver, testCaseName, project.getProjectName(), IConstantsData.SearchCC_In_Statistical_Project_Or_Task_Name);
			assertTrue("Create project was not searched", flag);

			PageMasterDataSettings.clickOnReturnToSetUpModule(driver, testCaseName);

			MainPageHeaderLevelTab.clickOnPOTab(driver);

			BPO bpo = ObjectCreation.getBPOCreation(IConstantsData.CATALOG_ITEM);
			bpo.getCostBookingRequisitionSummary().setProject(project.getProjectName());

			logger.info("============ Create BPO ===============");
			bpo = FlowBPO.createAndReleaseBPO(driver, testCaseName, bpo);

			/**
			 * RTC_366212 : customer specific field name>>ICW template>>BOR
			 * creation>>Project label should be replaced by its customized
			 * label in BOR creation screen.
			 **/
			logger.info("============ Create Release ===============");
			PagePurchaseOrderListing.clickOnPoActionsLink(driver, testCaseName);
			ModalPOActions.clickOnReleasePOFromActions(driver, testCaseName);
			ActionBot.waitForPageLoad(driver);

			// click on edit
			PageStandardPO.clickOnEdit(driver);
			TabPOSummary.clickOnCostBookingPOSummary(driver);
			projectLabelValue = ModalPOSummaryCostBooking.getLabelValueOfProjectField(driver, testCaseName);
			ModalPOSummaryCostBooking.clickOnCancel(driver, testCaseName);
			String[] temp;
			if (projectLabelValue.contains(":"))
			{
				temp = StringUtils.split(projectLabelValue, ":");
				projectLabelValue = temp[0].trim();
			}
			if (projectLabelValue.contains("*"))
			{
				temp = StringUtils.split(projectLabelValue, "*");
				projectLabelValue = temp[0].trim();
			}

			int i = 0;
			for (String str : configuration.getStandardNames())
			{
				if (str.equalsIgnoreCase(IConstantsData.Default_Project_Label_Name))
				{
					configuredProjectLabel = configuration.getCustomizedNames().get(i);
					projectFlag = projectLabelValue.equalsIgnoreCase(configuration.getCustomizedNames().get(i));
					break;
				}
				i++;
			}
			CommonServices.setMappedTestCaseResult(projectFlag, mappedTestCases.get(0), "Project label was not replaced by its customized label in BOR creation screen.");

			/**
			 * RTC_366223 : customer specific field name>>ICW template>>BOR
			 * validation error on submit>>Project label should be replaced by
			 * its customized label in validation error thrown when user submits
			 * BOR.
			 **/
			// deactivate project
			logger.info("============ Deactivate project ===============");
			flag = FlowProject.deactivateProject(driver, testCaseName, project.getProjectName(), IConstantsData.SearchCC_In_Statistical_Project_Or_Task_Name);
			assertTrue("Error while deactivating project", flag);

			// search bpo
			logger.info("============ Search BPO ===============");
			flag = FlowPoListing.searchBPO(driver, testCaseName, bpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO, IConstantsData.BLANKET_PO_TYPE);
			assertTrue("Error while searching  BPO", flag);

			logger.info("============ Create Release ===============");
			PagePurchaseOrderListing.clickOnPoActionsLink(driver, testCaseName);
			ModalPOActions.clickOnReleasePOFromActions(driver, testCaseName);
			ActionBot.waitForPageLoad(driver);

			if (bpo.getReleaseNo() != null)
			{
				bpo.setReleaseNo(PageStandardPO.fillReleaseNo(driver, testCaseName, bpo.getReleaseNo()));
			}

			// get release no
			bpo.setReleaseNo(PageStandardPO.getAutogeneratedPoNo(driver, testCaseName));

			logger.info("Release no : " + bpo.getReleaseNo());

			// set required by date
			PageStandardPO.fillRequiredByDate(driver, testCaseName, bpo.getRequiredByDate().getDay(), bpo.getRequiredByDate().getMonth(), bpo.getRequiredByDate().getYear());

			// submit release
			logger.info("============ Submit Release =============");
			PageStandardPO.clickOnSubmitPOForProcessing(driver, testCaseName);
			ActionBot.defaultLowSleep();

			errorMsg = PageStandardPO.getErrorMsgOnAlertBoxPresentForPO(driver, testCaseName);
			flag = errorMsg.contains(configuredProjectLabel);
			PopUpAlertSubmitPO.clickOnOK(driver, testCaseName);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(2),
				"Project label was not replaced by its customized label in validation errors thrown when user submits BOR.");

			/**
			 * RTC_366213 : customer specific field name>>ICW template>>BOR
			 * view>>Project label should be replaced by its customized label in
			 * BOR view.
			 **/
			// activate project
			logger.info("============ Activate project ===============");
			flag = FlowProject.activateProject(driver, testCaseName, project.getProjectName(), IConstantsData.SearchCC_In_Statistical_Project_Or_Task_Name);
			// assertTrue("Error while activating project", flag);

			// search bpo
			logger.info("============ Search BPO ===============");
			flag = FlowPoListing.searchBPO(driver, testCaseName, bpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO, IConstantsData.BLANKET_PO_TYPE);
			assertTrue("Error while searching  BPO", flag);

			logger.info("============ Create Release ===============");
			BPO bpo_release = ObjectCreation.getDefaultObjectOfBOR();
			bpo_release.setCostBookingRequisitionSummary(null);
			bpo_release = FlowBPO.createRelease(driver, testCaseName, bpo_release);

			logger.info("============ Search Release ===============");
			flag = FlowPoListing.searchBPO(driver, testCaseName, bpo_release.getReleaseNo(), IConstantsData.SEARCH_BY_PO_NO, IConstantsData.RELEASE_PO_TYPE);
			assertTrue("Error while searching  Release", flag);

			// view po
			logger.info("============ View PO ===============");
			FlowPoListing.viewPO(driver, testCaseName);
			ActionBot.scroll(driver);

			PageViewPurchaseOrder.clickOnCostingLink(driver, testCaseName);

			flag = PageViewPurchaseOrder.getLabelValueOfProject(driver, testCaseName).contains(configuredProjectLabel);
			assertTrue("Project label was not replaced by its customized label in BOR view.", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				if (createdProjectFlag)
				{
					FlowProject.deleteProject(driver, testCaseName, project.getProjectName(), IConstantsData.SearchCC_In_Statistical_Project_Or_Task_Name);
				}
				if (settingchangedFlag)
				{
					configuration.setCustomLang(IConstantsData.Default_System_Tenant_Custom_Lang_Name);

					// change system tenant configuration
					configuration = FlowSystemTenantConfiguration.changeSytemTenantConfiguration(driver, testCaseName, configuration);
				}
			}
			catch (Exception e2)
			{
				logger.error("Error while changing Systen Tenant Custom Lang to Default : " + e2, e2);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
			}
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>User should be able to change approver in
	 * reporting manager node. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * @param testCase </font><b><br>
	 * @throws Exception </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_376569(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<>();
		User user = null;
		String managerName;
		boolean flag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			String testCaseName = testCase.getTestMethodName();
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_376573"));// 0
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_376568"));// 1
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_376570"));// 2

			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			user = LoginLogoutServices.login(driver, testCase);
			managerName = user.getUserSettings().getReportingManager();

			// std po object
			StandardPO standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.GUIDED_ITEM);
			standardPO.setMarkForAddingApprovers(true);
			standardPO.setPurchaseType(CommonServices.getTestData(IConstantsData.Purchase_Type_Used_In_Manager_Node_Workflow));

			// create std po
			standardPO = FlowStandardPo.createStandardPo(driver, testCaseName, standardPO);

			// search po
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			assertTrue("Error while searching po", flag);

			flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.READY_FOR_APPROVAL_FILTER_LABEL);
			assertTrue("Status of PO was wrong, it should be Ready For Approval", flag);

			// view po
			FlowPoListing.viewPO(driver, testCaseName);

			ActionBot.waitForPageLoad(driver);
			ActionBot.scroll(driver, "400");

			/**
			 * RTC_376573 : Reporting manager node should be displayed properly
			 * in standard purchase order workflow trail.
			 **/
			flag = PageViewPurchaseOrder.getWorkflowNodeDisplayName(driver, testCaseName, 2).equalsIgnoreCase(managerName)
				&& PageViewPurchaseOrder.getWorkflowNodeExtraInfo(driver, testCaseName, 2).equalsIgnoreCase("Reporting Manager");
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(0), "Wrong workflow is applied. Workflow with reporting manager was not applied");
			assertTrue("Wrong workflow is applied. Workflow with reporting manager was not applied", flag);

			/**
			 * RTC_376568 : User should be able to add approver before reporting
			 * manager node.
			 **/
			User user2 = UserUtilHelper.getUserWithSpecificAttribute(Enum_UserList.ROLE, "Buyer_ABD_Activity");
			AddApprover addApprover_afterPOCreator = ObjectCreation.getDefaultObjectOfAddApprover(user2.getDisplayName(), IConstantsData.Add_Approver_After_PO_Creator);
			addApprover_afterPOCreator = FlowReadyForApproval.addApproverInReadyForApprovalPO(driver, testCaseName, addApprover_afterPOCreator);

			flag = FlowReadyForApproval.verifyAddedApproverForPO(driver, testCaseName, addApprover_afterPOCreator, 2);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(1), "User was not able to add approver before reporting manager node.");
			assertTrue("User was not able to add approver before reporting manager node.", flag);

			/**
			 * RTC_376570 : User should be able to add approver after reporting
			 * manager node.
			 **/
			User user3 = UserUtilHelper.getUserWithSpecificAttribute(Enum_UserList.ROLE, "Buyer_SARS_Activity");
			AddApprover addApprover_afterReportingManager = ObjectCreation.getDefaultObjectOfAddApprover(user3.getDisplayName(),
				IConstantsData.Add_Approver_After_Reporting_Manager);
			addApprover_afterReportingManager = FlowReadyForApproval.addApproverInReadyForApprovalPO(driver, testCaseName, addApprover_afterReportingManager);

			flag = FlowReadyForApproval.verifyAddedApproverForPO(driver, testCaseName, addApprover_afterReportingManager, 4);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(2), "User was not able to add approver after reporting manager node.");
			assertTrue("User was not able to add approver after reporting manager node.", flag);

			// submit po
			PageViewPurchaseOrder.clickOnSubmitPOForApproval(driver, testCaseName);

			// search po
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			assertTrue("Error while searching po", flag);

			flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL);
			assertTrue("Status of PO was wrong, it should be In Approval", flag);

			// view po
			FlowPoListing.viewPO(driver, testCaseName);

			ActionBot.waitForPageLoad(driver);
			ActionBot.scroll(driver, "400");

			/**
			 * RTC_376569 : User should be able to change approver in reporting
			 * manager node.
			 **/
			// change approver
			User user4 = UserUtilHelper.getUserWithSpecificAttribute(Enum_UserList.ROLE, "Buyer_SRARS_Activity");
			flag = FlowViewPO.changeApprover(driver, testCaseName, user4.getDisplayName(), 3);
			assertTrue("User was not able to change approver in reporting manager node.", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>User should be able to reject the
	 * reporting manager node in standard po. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * @param testCase </font><b><br>
	 * @throws Exception </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_376571(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		String managerName;
		boolean flag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			String testCaseName = testCase.getTestMethodName();

			CommonServices.startTestCase(driver, testCase);

			user = LoginLogoutServices.login(driver, testCase);
			managerName = user.getUserSettings().getReportingManager();

			// std po object
			StandardPO standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.GUIDED_ITEM);
			standardPO.setPurchaseType(CommonServices.getTestData(IConstantsData.Purchase_Type_Used_In_Manager_Node_Workflow));

			// create std po
			standardPO = FlowStandardPo.createStandardPo(driver, testCaseName, standardPO);

			// search po
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			assertTrue("Error while searching po", flag);

			flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL);
			assertTrue("Status of PO was wrong, it should be In Approval", flag);

			// view po
			FlowPoListing.viewPO(driver, testCaseName);

			ActionBot.waitForPageLoad(driver);
			ActionBot.scroll(driver, "400");

			// check in reporting manager workflow applied or not
			flag = PageViewPurchaseOrder.getWorkflowNodeDisplayName(driver, testCaseName, 2).equalsIgnoreCase(managerName)
				&& PageViewPurchaseOrder.getWorkflowNodeExtraInfo(driver, testCaseName, 2).equalsIgnoreCase("Reporting Manager");
			assertTrue("Wrong workflow is applied. Workflow with reporting manager was not applied", flag);

			// reject po
			ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, standardPO.getPoNumber(), IConstantsData.PURCHASE_ORDER,
				IConstantsData.REJECT);
			approvalAllRequests = FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

			// search po
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			assertTrue("Error while searching po", flag);

			flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.REJECTED_FILTER_LABEL);
			assertTrue("Status of PO was wrong, it should be Rejected", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Amend po > User should be able to amend po
	 * which has reporting manager in its workflow. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * @param testCase </font><b><br>
	 * @throws Exception </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_376540(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<>();
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_378899"));// 0
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_364286"));// 1
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_376572"));// 2
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_376533"));// 3
		User user = null;
		String managerName, poNo, log = "", oldPoNo;
		boolean flag = false, flag1 = false, flag2 = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			String testCaseName = testCase.getTestMethodName();

			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			user = LoginLogoutServices.login(driver, testCase);
			managerName = user.getUserSettings().getReportingManager();

			// std po object
			StandardPO standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.GUIDED_ITEM);
			standardPO.setPurchaseType(CommonServices.getTestData(IConstantsData.Purchase_Type_Used_In_Manager_Node_Workflow));

			// create std po
			standardPO = FlowStandardPo.createStandardPo(driver, testCaseName, standardPO);

			// search po
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			CommonServices.setMappedTestCaseResult(flag2, mappedTestCases.get(0), "Unable to submit PO");
			assertTrue("Error while searching po", flag);

			flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL);
			assertTrue("Status of PO was wrong, it should be In Approval", flag);

			oldPoNo = standardPO.getPoNumber();

			// view po
			FlowPoListing.viewPO(driver, testCaseName);

			ActionBot.waitForPageLoad(driver);
			ActionBot.scroll(driver, "400");

			// check in reporting manager workflow applied or not
			flag = PageViewPurchaseOrder.getWorkflowNodeDisplayName(driver, testCaseName, 2).equalsIgnoreCase(managerName)
				&& PageViewPurchaseOrder.getWorkflowNodeExtraInfo(driver, testCaseName, 2).equalsIgnoreCase("Reporting Manager");
			assertTrue("Wrong workflow is applied. Workflow with reporting manager was not applied", flag);

			/**
			 * RTC_364286 : Test for bug 241181 - Though PO is submitted &
			 * approved still icon of pending for processing is displayed at PO
			 * creator.
			 **/
			flag1 = PageViewPurchaseOrder.getWorkflowNodeDisplayName(driver, testCaseName, 1).equalsIgnoreCase(user.getDisplayName())
				&& PageViewPurchaseOrder.getWorkflowNodeExtraInfo(driver, testCaseName, 1).equalsIgnoreCase("PO Creator")
				&& PageViewPurchaseOrder.getWorkflowNodeStatus(driver, testCaseName, 1).equalsIgnoreCase("Submitted");
			if (!flag1)
			{
				log += "Status of PO Creator node was wrong, it should be Submitted after PO is submitted for approval";
			}

			/**
			 * RTC_376572 : User should be able to approve the reporting manager
			 * node in standard po.
			 **/
			// approve po
			ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, standardPO.getPoNumber(), IConstantsData.PURCHASE_ORDER,
				IConstantsData.APPROVE);
			approvalAllRequests = FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

			// search po
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			assertTrue("Error while searching po", flag);

			flag = !PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(2), "Status of PO was wrong, it should not be In Approval");
			assertTrue("Status of PO was wrong, it should not be In Approval", flag);

			flag2 = PageViewPurchaseOrder.getWorkflowNodeDisplayName(driver, testCaseName, 1).equalsIgnoreCase(user.getDisplayName())
				&& PageViewPurchaseOrder.getWorkflowNodeExtraInfo(driver, testCaseName, 1).equalsIgnoreCase("PO Creator")
				&& PageViewPurchaseOrder.getWorkflowNodeStatus(driver, testCaseName, 1).equalsIgnoreCase("Submitted");
			if (!flag2)
			{
				log += "Status of PO Creator node was wrong, it should be Submitted after PO is approved";
			}
			CommonServices.setMappedTestCaseResult(flag1 && flag2, mappedTestCases.get(1), log);

			// copy po
			FlowPoListing.copyPO(driver, testCaseName);

			// set required by date
			CustomDate customDate = CommonUtilities.getTodaysDate();
			customDate.setDate(PageStandardPO.fillRequiredByDate(driver, testCaseName, customDate.getDay(), customDate.getMonth(), customDate.getYear()));

			standardPO.setPoNumber(PageStandardPO.getPONo(driver, testCaseName));
			// submit po
			poNo = FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			if (poNo != null)
			{
				standardPO.setPoNumber(poNo);
			}

			// search po
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			assertTrue("Error while searching po", flag);

			flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL);
			assertTrue("Status of PO was wrong, it should be In Approval", flag);

			// view po
			FlowPoListing.viewPO(driver, testCaseName);

			ActionBot.waitForPageLoad(driver);
			ActionBot.scroll(driver, "400");

			// check in reporting manager workflow applied or not
			flag = PageViewPurchaseOrder.getWorkflowNodeDisplayName(driver, testCaseName, 2).equalsIgnoreCase(managerName)
				&& PageViewPurchaseOrder.getWorkflowNodeExtraInfo(driver, testCaseName, 2).equalsIgnoreCase("Reporting Manager");
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(3), "Wrong workflow is applied. Workflow with reporting manager was not applied for copied PO");

			/**
			 * RTC_376540 : Amend po > User should be able to amend po which has
			 * reporting manager in its workflow.
			 **/
			// search po
			flag = FlowPoListing.searchPo(driver, testCaseName, oldPoNo, IConstantsData.SEARCH_BY_PO_NO);
			assertTrue("Error while searching po", flag);

			flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.COMPLETE_RELEASED_FILTER_LABEL);
			assertTrue("Status of PO was wrong, it should be Released", flag);

			// amend po
			FlowPoListing.amendPO(driver, testCaseName);
			logger.info("================ Amending PO by adding new Catalog Item ===============");

			ActionBot.scroll(driver, "650");
			Item item = ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);
			// to Amend PO
			item = FlowStandardPo.addItem(driver, testCaseName, item);
			ActionBot.waitForPageLoad(driver);

			// to submit PO for processing
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);

			// if workflow is applied.. search in amended po listing
			if (PageAmmendedPO.isViewAllPOPresent(driver, testCaseName))
			{
				PageAmmendedPO.getFirstAmendedPONo(driver, testCaseName);

				flag = false;
				List<WebElement> amendedPONos = PageAmmendedPO.getAllAmendedPONos(driver, testCaseName);
				for (WebElement element : amendedPONos)
				{
					if (element.getText().trim().equalsIgnoreCase(standardPO.getPoNumber()))
					{
						flag = true;
						element.click();
						ActionBot.defaultSleep();
						ScreenShot.screenshot(driver, testCaseName, "View Amemded PO");
						break;
					}
				}
				assertTrue("Amended PO Was not found", flag);
			}
			else
			{
				// search po
				flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
				assertTrue("Amended PO Was not found", flag);
				// view po
				FlowPoListing.viewPO(driver, testCaseName);
			}

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Reporting manager in Auto PO workflow
	 * should be predicted properly. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * @param testCase </font><b><br>
	 * @throws Exception </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_376536(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<>();
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_376534"));
		PurchaseOrderSettings purchaseOrderSettings = new PurchaseOrderSettings();
		PurchaseOrderSettings defaultPurchaseOrderSettings = new PurchaseOrderSettings();
		User user = null;
		String managerName, status, testCaseName = null;
		boolean flag = false, purchaseOrderSettingChanged = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();

			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			user = LoginLogoutServices.login(driver, testCase);
			managerName = user.getUserSettings().getReportingManager();

			// default PO Settings
			defaultPurchaseOrderSettings.setReleaseOrdersImmediately(true);
			defaultPurchaseOrderSettings.setAutomaticallyGenerateOrders(false);
			defaultPurchaseOrderSettings.setNextAction(IConstantsData.SAVE);

			// to change purchase order setting
			purchaseOrderSettings.setReleaseOrdersImmediately(true);
			purchaseOrderSettings.setAutomaticallyGenerateOrders(true);
			purchaseOrderSettings.setNextAction(IConstantsData.SAVE);
			purchaseOrderSettings = FlowPurchaseOrderSetting.changePOSetting(driver, testCaseName, purchaseOrderSettings);
			purchaseOrderSettingChanged = true;
			// to click on online store tab
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);

			// req object
			Requisition requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.GUIDED_ITEM);
			requisition.setPurchaseType(CommonServices.getTestData(IConstantsData.Purchase_Type_Used_In_Manager_Node_Workflow));

			// create req
			requisition = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			status = PageBuyersDeskListing.getFirstRowReqStatus(driver, testCaseName);
			flag = status.equalsIgnoreCase(IConstantsData.COMPLETE_RELEASED_FILTER_LABEL) || status.equalsIgnoreCase(IConstantsData.SCHEDULED_FILTER_LABEL);
			assertTrue("Status of Requisition at buyers desk was wrong. Touchless po was not generated", flag);

			/*
			 * //search po flag = FlowPoListing.searchPo(driver, testCaseName,
			 * standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);
			 * assertTrue("Error while searching po", flag);
			 * 
			 * flag = PagePurchaseOrderListing.getFirstPoStatus(driver,
			 * testCaseName).equalsIgnoreCase(
			 * IConstantsData.IN_APPROVAL_FILTER_LABEL); assertTrue(
			 * "Status of PO was wrong, it should be In Approval", flag);
			 */

			// view po
			FlowPoListing.viewPO(driver, testCaseName);

			ActionBot.waitForPageLoad(driver);
			ActionBot.scroll(driver, "400");

			// check in reporting manager workflow applied or not
			flag = PageViewPurchaseOrder.getWorkflowNodeDisplayName(driver, testCaseName, 2).equalsIgnoreCase(managerName)
				&& PageViewPurchaseOrder.getWorkflowNodeExtraInfo(driver, testCaseName, 2).equalsIgnoreCase("Reporting Manager");
			assertTrue("Wrong workflow is applied. Workflow with reporting manager was not applied", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				if (purchaseOrderSettingChanged)
				{
					// purchaseOrderSettings.setAutomaticallyGenerateOrders(false);
					defaultPurchaseOrderSettings = FlowPurchaseOrderSetting.changePOSetting(driver, testCaseName, defaultPurchaseOrderSettings);
				}
			}
			catch (Exception exception)
			{
				logger.error("Error while changing PO setting : " + exception, exception);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Multiple req to PO > For such a po if
	 * reporting manager is predicted in workflow; the workflow should work
	 * properly. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * @param testCase </font><b><br>
	 * @throws Exception </b> <br>
	 */

	@Test(dataProvider = "dataProvider", retryAnalyzer = CustomRetryListener.class)
	public void RTC_376535(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		Requisition requisition1 = new Requisition();
		Requisition requisition2 = new Requisition();
		List<PurchaseOrder> purchaseOrders = new ArrayList<PurchaseOrder>();
		String managerName;
		boolean flag = false;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			managerName = user.getUserSettings().getReportingManager();

			/** First Req **/
			// to get requisition object
			requisition1 = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.GUIDED_ITEM);
			requisition1.setPurchaseType(CommonServices.getTestData(IConstantsData.Purchase_Type_Used_In_Manager_Node_Workflow));

			// to set non mandatory fields for req
			requisition1.setCommentForSupplier(IConstantsData.COMMENT_FOR_SUPPLIER);
			requisition1.setReasonForOrdering(IConstantsData.REASON_FOR_ORDERING);
			requisition1.setRequired(true);

			// req to buyers desk
			requisition1 = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition1);

			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);

			/** Second Req **/

			// to get requisition object
			requisition2 = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.GUIDED_ITEM);
			requisition2.setPurchaseType(CommonServices.getTestData(IConstantsData.Purchase_Type_Used_In_Manager_Node_Workflow));

			// to set non mandatory fields for req
			requisition2.setCommentForSupplier(IConstantsData.COMMENT_FOR_SUPPLIER);
			requisition2.setReasonForOrdering(IConstantsData.REASON_FOR_ORDERING);

			// req to buyers desk
			requisition2 = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition2);

			// to get list of req
			MainPageHeaderLevelTab.clickOnBuyersDeskSubTab(driver, testCaseName);

			List<WebElement> listOfReq = PageBuyersDeskListing.getAllReqNos(driver, testCaseName);

			// to select two req
			for (WebElement element : listOfReq)
			{
				if (element.isDisplayed())
				{
					String reqName = element.getText().trim();
					if (reqName.equalsIgnoreCase(requisition1.getReqNo()) || reqName.equalsIgnoreCase(requisition2.getReqNo()))
					{
						WebElement parentRow = element.findElement(IPageSearchListing.ANCSESTOR_TR.getBy());
						WebElement checkboxElement = parentRow.findElement(IPageSearchListing.INPUT);
						checkboxElement.click();
						if (!checkboxElement.isSelected())
						{
							checkboxElement.click();
						}
					}
				}
			}

			ScreenShot.screenshot(driver, testCaseName, "After selecting two req");

			// convert to po
			PageBuyersDeskListing.clickOnConvertToPoButton(driver, testCaseName);

			// submit all POs
			purchaseOrders = FlowBuyersDesk.submitAllSuggestedPosForProcessing(driver, testCaseName);

			// to search po
			for (PurchaseOrder purchaseOrder : purchaseOrders)
			{
				flag = FlowPoListing.searchPo(driver, testCaseName, purchaseOrder.getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
				assertTrue("Purchase order was not created", flag);

				// view po
				FlowPoListing.viewPO(driver, testCaseName);

				ActionBot.waitForPageLoad(driver);
				ActionBot.scroll(driver, "400");

				// check in reporting manager workflow applied or not
				flag = PageViewPurchaseOrder.getWorkflowNodeDisplayName(driver, testCaseName, 2).equalsIgnoreCase(managerName)
					&& PageViewPurchaseOrder.getWorkflowNodeExtraInfo(driver, testCaseName, 2).equalsIgnoreCase("Reporting Manager");
				assertTrue("Wrong workflow is applied. Workflow with reporting manager was not applied", flag);
			}

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Copy old po such that reporting manager
	 * node is added in the predicted workflow. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * @param testCase </font><b><br>
	 * @throws Exception </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_365173(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<>();
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_365144"));
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_364408"));
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_364409"));
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_364412"));
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_364416"));
		PurchaseOrder purchaseOrder = new PurchaseOrder();
		PaymentBatch paymentbatch = new PaymentBatch();
		User user = null;
		String status;
		boolean flag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			String testCaseName = testCase.getTestMethodName();

			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			user = LoginLogoutServices.login(driver, testCase);
			user.getUserSettings().getReportingManager();

			// to get requisition object
			Requisition requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);

			// invoice object
			// Invoice invoice = ObjectCreation.getDefaultFlipInvoiceObject();
			com.zycus.eInvoice.automation.scripts.bo.Invoice invoice = com.zycus.eInvoice.automation.scripts.datacreation.ObjectCreation.getDefaultFlipInvoiceObject();

			logger.info("================= Create Req to PO ===============");
			// req to PO
			requisition = CombineFlowImpl.reqToPO(driver, testCaseName, requisition);

			purchaseOrder = requisition.getPurchaseOrdersList().get(0);

			logger.info("================= Search PO ===============");
			// search po
			flag = FlowPoListing.searchPo(driver, testCaseName, purchaseOrder.getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			assertTrue("Purchase order was not created", flag);

			logger.info("================= Create FlipInvoice ===============");
			// to create flip invoice
			PagePurchaseOrderListing.clickOnPoActionsLink(driver, testCaseName);
			ModalPOListingActions.clickOnCreateInvoiceLink(driver, testCaseName);

			invoice = com.zycus.eInvoice.automation.scripts.businessflow.flipinvoice.FlowFlipInvoice.createFlipInvoice(driver, testCaseName, invoice);

			logger.info("================= Search PO ===============");
			// search po
			flag = FlowPoListing.searchPo(driver, testCaseName, purchaseOrder.getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			assertTrue("Error while searching PO", flag);

			logger.info("================= View PO ===============");
			// view po
			FlowPoListing.viewPO(driver, testCaseName);
			// view invoice
			PageViewPurchaseOrder.clickOnViewPageTabInvoice(driver, testCaseName);

			// to check if invoice created
			flag = FlowPOInvoiceListing.checkIfInvoiceCreated(driver, testCaseName, invoice.getInvoiceNo());
			assertTrue("Invoice was not created for released po or status of invoice was wrong", flag);

			/**
			 * RTC_365144 : Invoice status should be in "Ready for approval" in
			 * invoice subtab in eproc PO when invoice is in
			 * "Ready for approval" status in eInvoice.
			 **/
			flag = PagePOInvoiceListing.getFirstInvoiceStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.READY_FOR_APPROVAL_FILTER_LABEL);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(0), "Status of invoice was wrong, it should be Ready For Approval");
			assertTrue("Status of invoice was wrong, it should be Ready For Approval", flag);

			logger.info("================= Search PO ===============");
			// search po
			flag = FlowPoListing.searchPo(driver, testCaseName, purchaseOrder.getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			assertTrue("Error while searching PO", flag);

			logger.info("================= View PO ===============");
			// view po
			FlowPoListing.viewPO(driver, testCaseName);
			// view invoice
			PageViewPurchaseOrder.clickOnViewPageTabInvoice(driver, testCaseName);

			logger.info("================= Confirm and match invoice ===============");
			// confirm and match invoice
			FlowPOInvoiceListing.confirmAndMatchInvoice(driver, testCaseName);
			status = PagePOInvoiceListing.getFirstInvoiceStatus(driver, testCaseName);
			flag = status.equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL);
			assertTrue("Status of invoice after confirm and match was wrong, it should be In Approval", flag);

			logger.info("================= Approve Invoice ===============");
			// to approve the invoice
			com.zycus.eInvoice.automation.scripts.bo.ApprovalAllRequests approvalAllRequests = com.zycus.eInvoice.automation.scripts.datacreation.ObjectCreation
				.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, invoice.getInvoiceNo(), IConstantsData.INVOICE, IConstantsData.APPROVE);
			com.zycus.eInvoice.automation.scripts.businessflow.allrequestsapprovalflow.FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

			logger.info("================= Search PO ===============");
			// search po
			flag = FlowPoListing.searchPo(driver, testCaseName, purchaseOrder.getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			assertTrue("Error while searching PO", flag);
			// view po
			FlowPoListing.viewPO(driver, testCaseName);
			// view invoice
			logger.info("================= View Invoice Tab ===============");
			PageViewPurchaseOrder.clickOnViewPageTabInvoice(driver, testCaseName);
			flag = PagePOInvoiceListing.getFirstInvoiceStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.APPROVED_FILTER_STATUS);
			assertTrue("Status of invoice after approval was wrong, it should be APPROVED", flag);

			// need to change
			logger.info("================= Create Payment Batch ===============");
			paymentbatch = com.zycus.eInvoice.automation.scripts.datacreation.ObjectCreation.getDefaultPaymentBatchObject();
			paymentbatch.setVoucherLineInvoiceNo(invoice.getInvoiceNo());
			paymentbatch.setNextAction(com.zycus.eInvoice.automation.scripts.testdata.IConstantsData.SUBMIT_VOUCHER_INVOICE);

			paymentbatch = FlowPaymentBatch.createPaymentBatch(driver, testCaseName, paymentbatch);

			logger.info("================= Issue Payment ===============");
			// perform issuepayment
			FlowPaymentBatch.performIssuePayment(driver, testCaseName, paymentbatch);
			// get paymentbatch status
			ActionBot.defaultSleep();
			FlowPaymentBatch.searchBatchNo(driver, testCaseName, paymentbatch);
			String pStatus = pagePaymentBatchListing.getPaymentStatus(driver, testCaseName);
			// verify current status
			flag = pStatus.equalsIgnoreCase(com.zycus.eInvoice.automation.scripts.testdata.IConstantsData.STATUS_PAID_PAYMENT_BATCH);
			assertTrue("Status of Payment Batch was wrong, it should be Paid", flag);

			logger.info("================= Apply Partially Paid Filter at PO ===============");
			PoStatusFilter poStatusFilter = new PoStatusFilter();
			poStatusFilter.setPartiallyPaid(true);
			List<String> statusList = new ArrayList<>();
			statusList.add(IConstantsData.COMPLETE_RELEASED_FILTER_LABEL);
			poStatusFilter.setStatus(statusList);
			FlowPoListing.applyPoStatusFilter(driver, testCaseName, poStatusFilter);
			flag = FlowPoListing.checkIfStatusFilterIsApplied(driver, testCaseName, poStatusFilter);
			assertTrue("Error while applying Partially Paid Filter", flag);

			logger.info("================= Search PO ===============");
			// search po
			flag = FlowPoListing.searchPO(driver, testCaseName, purchaseOrder.getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			assertTrue("Error while searching PO when Partially Paid Filter was applied", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 209558 - [IE9]:On editing a
	 * draft PO, delivery terms is displayed as blank <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * @param testCase </font><b><br>
	 * @throws Exception </b> <br>
	 */
	@Test(dataProvider = "dataProvider", retryAnalyzer = CustomRetryListener.class)
	public void RTC_378821(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = null;
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		Requisition requisition = new Requisition();
		boolean flag = false;
		String supplierName, poTotal, supplierName_onPOListing, poTotal_onPOListing;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();

			CommonServices.startTestCase(driver, testCase);

			user = LoginLogoutServices.login(driver, testCase);

			ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);

			// to get requisition object
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);

			// req to buyers desk
			CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			// to view the req
			FlowBuyersDeskListing.viewRequisitionAtBuyersDesk(driver, testCaseName);

			// convert To Po
			FlowBuyersDesk.convertToPo(driver, testCaseName);

			// to click on first checkbox
			PagePurchaseOrderToBeGenerated.ClikOnPurchaseOrderToBeGeneratedCheckBox(driver, testCaseName, 0);
			supplierName = PagePurchaseOrderToBeGenerated.getPurchaseOrderToBeGeneratedSupplier(driver, testCaseName, 2);
			poTotal = PagePurchaseOrderToBeGenerated.getPurchaseOrderToBeGeneratedPoTotal(driver, testCaseName, 0);

			PagePurchaseOrderToBeGenerated.clickOnSavePosAsDraft(driver, testCaseName);

			// apply draft po filter
			PoStatusFilter poStatusFilter = new PoStatusFilter();
			poStatusFilter.setDraftFilter(true);
			FlowPoListing.applyPoStatusFilter(driver, testCaseName, poStatusFilter);

			supplierName_onPOListing = PagePurchaseOrderListing.getFirstRowSupplierName(driver, testCaseName);
			poTotal_onPOListing = PagePurchaseOrderListing.getFirstRowTotalAmount(driver, testCaseName);

			flag = supplierName.equalsIgnoreCase(supplierName_onPOListing) && poTotal.equalsIgnoreCase(poTotal_onPOListing);
			assertTrue("Converted PO not saved as draft", flag);

			// view first po
			FlowPoListing.viewPO(driver, testCaseName);

			String selectedDeliveryTerm = PageStandardPO.getSelectedDeliveryTerm(driver, testCaseName);
			flag = selectedDeliveryTerm.contains(CommonServices.getTestData(IConstantsData.DELIVERY_TERMS));
			assertTrue("Delivery terms was not displayed as per Supplier", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
		}
	}

	/**
	 * ================================= Ankitas's TCs End Here
	 * =========================================================================
	 * =======
	 **/

	/*************************************
	 * KunalAshar's TestCases - Start
	 **********************************************/

	/**
	 * <b>Author: kunal.ashar </b> <b><br>
	 * <font color="blue">Method :</b>To Amend List of PO for RSL Tenant <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * @param testCase </font><b><br>
	 * @throws Exception </b> <br>
	 */
	/*
	 * @Test(dataProvider = "dataProvider", retryAnalyzer =
	 * CustomRetryListener.class) public void AmendPOList(TestCase testCase)
	 * throws Exception { WebDriver driver = null; String testCaseName = null;
	 * Map<String, String> map = new HashMap<String, String>(); List<String>
	 * poNumberList = new ArrayList<String>();
	 * CommonServices.startTestCase(driver, testCase); User user = null; int
	 * poListSize = 0; String poNo = null; String Comments =
	 * "GST_TAX FREE REMOVED"; boolean flag_isPoApproved = false; boolean
	 * flag_isRemoveTaxespresent = false; try { driver =
	 * DriverSelector.getDriver(testCase); testCaseName =
	 * testCase.getTestMethodName(); CommonServices.startTestCase(driver,
	 * testCase); user = LoginLogoutServices.login(driver, testCase);
	 * 
	 * poNumberList = ExcelReader.readPoList(); poListSize =
	 * poNumberList.size(); StandardPO stdpo = new StandardPO();
	 * 
	 * for(int a=0; a <= poListSize-1;a++){
	 * 
	 * poNo = poNumberList.get(a);
	 * 
	 * stdpo.setPoNumber(poNo);
	 * 
	 * //navigates to PO and clicks on Amend PO flag_isPoApproved =
	 * FlowStandardPo.amendPO(driver, testCaseName, stdpo);
	 * flag_isRemoveTaxespresent=
	 * ActionBot.isElementPresent(driver,IPageStandardPOImpl.
	 * LINK_REMOVE_ALL_TAXES_PO );
	 * 
	 * //Approves PO if it is under Approval and navigate back to Amend PO
	 * if(flag_isPoApproved==false && flag_isRemoveTaxespresent==false){
	 * ActionBot.findElement(driver, By.xpath(".//*[text()='OK']")).click();
	 * ApprovalAllRequests approvalAllRequests = new ApprovalAllRequests();
	 * approvalAllRequests.setDocumentNo(stdpo.getPoNumber());
	 * approvalAllRequests.setActions(IConstantsData.APPROVE);
	 * approvalAllRequests.setComment(IConstantsData.APPROVE_COMMENT);
	 * approvalAllRequests.setDocumentType(IConstantsData.PURCHASE_ORDER);
	 * FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName,
	 * approvalAllRequests); driver.navigate().refresh();
	 * ActionBot.defaultSleep(); flag_isPoApproved =
	 * FlowStandardPo.amendPO(driver, testCaseName, stdpo); }
	 * 
	 * //continue if po is not under approval if((flag_isPoApproved == true ||
	 * flag_isPoApproved == false)&& flag_isRemoveTaxespresent==true){
	 * 
	 * //click on Remove All Taxes Link
	 * PageStandardPO.clickOnRemoveAllTaxesOption(driver, testCaseName);
	 * 
	 * //fill comments and click on Submit PO for Processing Button
	 * PageStandardPO.isEditableCommentsFields(driver, Comments);
	 * PageStandardPO.clickOnSubmitPOForProcessing(driver, testCaseName);
	 * PageStandardPO.clickOnSubmitPOForApproval(driver, testCaseName); } }
	 * 
	 * CommonServices.successfulExecutionOfTestCase(driver, testCase); } catch
	 * (AssertionError e) { CommonServices.assertionMethod(driver, testCase,
	 * user, e); } catch (Exception e) { CommonServices.exceptionMethod(driver,
	 * testCase, user, e); } finally {
	 * CommonServices.afterExecutionOfTestcase(driver, testCase, map, user); } }
	 */

	/**
	 * <b>Author: kunal.ashar </b> <b><br>
	 * <font color="blue">Method :</b>CFT - Create PO with new custom address
	 * and amend with other address <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * @param testCase </font><b><br>
	 * @throws Exception </b> <br>
	 */
	@Test(dataProvider = "dataProvider", retryAnalyzer = CustomRetryListener.class)
	public void CFT_createPoWithCustomAddress(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = null;
		Map<String, String> map = new HashMap<String, String>();

		CommonServices.startTestCase(driver, testCase);
		User user = null;
		boolean flag_isCustomAddressAdded = false;
		boolean flag_isOtherAddressAdded = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			StandardPO standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO.setCurrencyType("USD");
			standardPO.setNextAction(IConstantsData.NONE);
			standardPO = FlowStandardPo.createStandardPo(driver, testCaseName, standardPO);

			// add custom address to PO
			flag_isCustomAddressAdded = FlowStandardPo.changeAddressDeliveryTab(driver, testCaseName, IConstantsData.DeliveryAddress_MyAddress);
			Assert.assertTrue("Unable to add Custom Address to PO", flag_isCustomAddressAdded);

			// submitting po
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);

			// Approve PO
			ApprovalAllRequests approvalAllRequests = new ApprovalAllRequests();
			approvalAllRequests.setActions(IConstantsData.APPROVE);
			approvalAllRequests.setComment(IConstantsData.APPROVE_COMMENT);
			approvalAllRequests.setDocumentType(IConstantsData.PURCHASE_ORDER);
			approvalAllRequests.setDocumentNo(standardPO.getPoNumber());

			FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

			// Amend po and change adress to other Address
			FlowStandardPo.amendPO(driver, testCaseName, standardPO);
			flag_isOtherAddressAdded = FlowStandardPo.changeAddressDeliveryTab(driver, testCaseName, IConstantsData.DeliveryAddress_OtherAddress);
			if (flag_isOtherAddressAdded == false)
			{
				flag_isOtherAddressAdded = true;
			}
			Assert.assertTrue("Unable to add other Address to PO", flag_isOtherAddressAdded);

			// resubmitting PO with changed address
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
		}
	}

	/**
	 * <b>Author: kunal.ashar </b> <b><br>
	 * <font color="blue">Method :</b>CFT - Create PO with other address <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * @param testCase </font><b><br>
	 * @throws Exception </b> <br>
	 */
	@Test(dataProvider = "dataProvider", retryAnalyzer = CustomRetryListener.class)
	public void CFT_createPoWithOtherAddress(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = null;
		Map<String, String> map = new HashMap<String, String>();

		CommonServices.startTestCase(driver, testCase);
		User user = null;
		boolean flag_isOtherAddressAdded = false;
		boolean flag_isCustomAddressAdded = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			CommonServices.startTestCase(driver, testCase);
			user = LoginLogoutServices.login(driver, testCase);

			StandardPO standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			standardPO.setNextAction(IConstantsData.NONE);
			standardPO = FlowStandardPo.createStandardPo(driver, testCaseName, standardPO);

			// add custom address to PO
			flag_isOtherAddressAdded = FlowStandardPo.changeAddressDeliveryTab(driver, testCaseName, IConstantsData.DeliveryAddress_OtherAddress);
			if (flag_isOtherAddressAdded == false)
			{
				flag_isOtherAddressAdded = true;
				Assert.assertTrue("Unable to add other Address to PO", flag_isOtherAddressAdded);
			}
			else
			{
				Assert.assertTrue("Unable to add other Address to PO", (flag_isOtherAddressAdded));
			}

			// submitting po
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);

			// Approve PO
			ApprovalAllRequests approvalAllRequests = new ApprovalAllRequests();
			approvalAllRequests.setActions(IConstantsData.APPROVE);
			approvalAllRequests.setComment(IConstantsData.APPROVE_COMMENT);
			approvalAllRequests.setDocumentType(IConstantsData.PURCHASE_ORDER);
			approvalAllRequests.setDocumentNo(standardPO.getPoNumber());

			FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

			// Amend po and change adress to other Address
			FlowStandardPo.amendPO(driver, testCaseName, standardPO);
			flag_isCustomAddressAdded = FlowStandardPo.changeAddressDeliveryTab(driver, testCaseName, IConstantsData.DeliveryAddress_MyAddress);
			Assert.assertTrue("Unable to add custom Address to PO", flag_isCustomAddressAdded);

			// resubmitting PO with changed address
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
		}
	}

	/**
	 * <b>Author: kunal.ashar </b> <b><br>
	 * <font color="blue">Method :</b> Create Multiple process Eform <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b>Check for the pform name in the
	 * list </font><b><br>
	 * @param testCase </font><b><br>
	 * @throws Exception </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void createMultiplePForm(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		User user = null;
		try
		{
			CommonServices.startTestCase(driver, testCase, mappedTestCases);
			user = LoginLogoutServices.login(driver, testCase);

			PEform pEform = new PEform();
			for (int i = 1; i <= 60; i++)
			{
				pEform = ObjectCreation.getDefaultPEformObject();
				pEform.setPeformName("Automation_" + CommonUtilities.getNonZeroRandomNumber(6) + "_50");

				// navigate to eForm page
				MainPageHeaderLevelTab.clickOnProcessEformTab(driver, testCaseName);
				PageCEformListing.clickOnOnlineEditor(driver, testCaseName);

				// fill eform detials
				if (pEform.getPeformName() != null)
				{
					pEform.setPeformName(PageCreatePEform.fillPEformName(driver, testCaseName, pEform.getPeformName()));
				}
				if (pEform.getProcessName() != null)
				{
					pEform.setProcessName(PageCreatePEform.selectProcessForPEform(driver, testCaseName, pEform.getProcessName()));
				}

				if (pEform.isChangeOU())
				{
					// to select OU
					PageCreateCEform.clickOnLinkSelectOUForCForm(driver, testCaseName);
					// need to change code later
					ModalSelectBUOfCEform.selectIstOrganisationUnit(driver, testCaseName);
					// select bu
					ActionBot.defaultSleep();
					ModalSelectBUOfCEform.clickTabBusinessUnit(driver, testCaseName);
					ActionBot.defaultSleep();
					ModalSelectBUOfCEform.clickLinkSelectBusinessUnit(driver, testCaseName);
					ActionBot.defaultSleep();
					ActionBot.defaultSleep();
					ModalSelectBUOfCEform.SelectCheckBoxOU(driver, testCaseName);
					// save modal
					ModalSelectBUOfCEform.clickBtnSaveSelectedOu(driver, testCaseName);
					ActionBot.defaultSleep();
					ModalSelectBUOfCEform.clickOnSaveORGUnitButton(driver, testCaseName);
				}

				// to save and continue
				PageCreatePEform.clickOnSavePEformButton(driver, testCaseName);

				// to add section
				pEform.setSectionName(CommonUtilities.getSectionName());
				PageCreateCEform.clickOnAddSectionLink(driver, testCaseName);
				// to fill section details
				pEform.setSectionName(ModalCreateSectionOfCEform.fillSectionName(driver, testCaseName, pEform.getSectionName()));
				ModalCreateSectionOfCEform.clickOnSaveSectionButton(driver, testCaseName);

				// to add multiple fields on eform
				for (int a = 1; a <= 50; a++)
				{
					if (pEform.isAddSectionAndField())
					{
						pEform.setFieldName(CommonUtilities.getFieldName() + "_" + a);
						// to add field
						PageCreateCEform.clickOnAddFieldLink(driver, testCaseName);

						// to add text field
						ModalCreateFieldOfCEform.clickOnAddTextField(driver, testCaseName);
						// to fill field properties
						pEform.setFieldName(ModalFieldPropertiesOfCEform.fillFieldName(driver, testCaseName, pEform.getFieldName()));
						ModalFieldPropertiesOfCEform.clickOnSaveFieldButton(driver, testCaseName);
					}
				}

				// publish eform
				PageCreateCEform.clickOnPublishCEformButton(driver, testCaseName);
				ActionBot.waitForPageLoad(driver);
			}

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/*************************************
	 * KunalAshar's TestCases - End
	 **********************************************/

	/*************************************
	 * RohiniShinge's TestCases - Start
	 **********************************************/

	/**
	 * <b>Author: Rohini Shinge </b> <b><br>
	 * <font color="blue">Method :</b>PO >>PO listing>> Sort Purchase Orders using following fields.
	 * PO number.
	 * PO date.
	 * Amount
	 */

	@Test(dataProvider = "dataProvider")
	public void EPROC_22416(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		User user = null;

		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase, mappedTestCases);
			user = LoginLogoutServices.login(driver, testCase);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			PagePurchaseOrderListing.clickOnPONumberSorting(driver, testCaseName);
			PagePurchaseOrderListing.clickOnPoDateSorting(driver, testCaseName);
			PagePurchaseOrderListing.clickOnPOAmountSorting(driver, testCaseName);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: Rohini Shinge </b> <b><br>
	 * <font color="blue">Method :</b>PO listing>> Search for Purchase Orders using following fields.
	 * 1.PO number
	 * 2.Order Description
	 * 3.Supplier
	 * 4.Buyer
	 */

	@Test(dataProvider = "dataProvider")
	public void EPROC_22415(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		{
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("EPROC_22611"));
		}
		User user = null;
		BPO bpo = null;
		boolean EPROC_22415_flag_PONumber = false;
		boolean EPROC_22415_flag_OrderDescription = false;
		boolean EPROC_22415_flag_Supplier = false;
		boolean EPROC_22415_flag_Buyer = false;

		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase, mappedTestCases);
			user = LoginLogoutServices.login(driver, testCase);

			//To get object
			bpo = ObjectCreation.getBPOCreation(IConstantsData.CATALOG_ITEM);

			//Create  PO and Release
			bpo = FlowBPO.createAndReleaseBPO(driver, testCaseName, bpo);

			//Search PO by PO Number
			//EPROC_22415_flag_PONumber = FlowPoListing.searchPO(driver, testCaseName, "OU_1-001/18/759", IConstantsData.SEARCH_BY_PO_NO);
			EPROC_22415_flag_PONumber = FlowPoListing.searchPO(driver, testCaseName, bpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);

			Assert.assertTrue("Unable To Search PO", EPROC_22415_flag_PONumber);

			//Search PO by order description
			//EPROC_22415_flag_OrderDescription = FlowPoListing.searchPO(driver, testCaseName, "abcd", IConstantsData.SEARCH_BY_ORDER_DESCRIPTION);
			EPROC_22415_flag_OrderDescription = FlowPoListing.searchPO(driver, testCaseName, bpo.getOrderDescription(), IConstantsData.SEARCH_BY_ORDER_DESCRIPTION);
			Assert.assertTrue("Unable To Search PO", EPROC_22415_flag_OrderDescription);

			//Search PO by supplier name
			PagePurchaseOrderListing.fillSupplier(driver, testCaseName, bpo.getSupplierName());
			String sup = PagePurchaseOrderListing.getFirstRowSupplierName(driver, testCaseName);
			if (sup.equalsIgnoreCase(bpo.getSupplierAddress()))
			{
				EPROC_22415_flag_Supplier = true;
			}
			Assert.assertTrue("Unable To Search PO", EPROC_22415_flag_Supplier);

			//Search PO by buyer
			//EPROC_22415_flag_Buyer = FlowPoListing.searchPO(driver, testCaseName, "Automation Approver User", IConstantsData.SEARCH_BY_BUYER);
			EPROC_22415_flag_Buyer = FlowPoListing.searchPO(driver, testCaseName, bpo.getBuyer(), IConstantsData.SEARCH_BY_BUYER);

			Assert.assertTrue("Unable To Search PO", EPROC_22415_flag_Buyer);

			mappedTestCases.get(0).setTestResult(EPROC_22415_flag_PONumber && EPROC_22415_flag_OrderDescription && EPROC_22415_flag_Supplier && EPROC_22415_flag_Buyer);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: Rohini Shinge </b> <b><br>
	 * <font color="blue">Method :</b>PO listing>> Supplier name field should be auto completed
	 */

	@Test(dataProvider = "dataProvider")
	public void EPROC_22422(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		User user = null;

		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase, mappedTestCases);
			user = LoginLogoutServices.login(driver, testCase);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			//fill supplier field
			driver.findElement(By.xpath("//*[@id=\"txtFltrSupplier\"]")).sendKeys(CommonServices.getTestData(IConstantsData.SUPPLIER_NAME));
			String poNumber = PagePurchaseOrderListing.getFirstPoNo(driver, testCaseName);
			String supplierName = PagePurchaseOrderListing.getSupplierName(driver, testCaseName, poNumber);
			Assert.assertTrue("Supplier field not autocompleted", supplierName.equals(CommonServices.getTestData(IConstantsData.SUPPLIER_NAME)));

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: Rohini Shinge </b> <b><br>
	 * <font color="blue">Method :</b>PO >>PO listing>> Sort Purchase Orders using following fields.
	 * PO number.
	 * PO date.
	 * Amount
	 */

	@Test(dataProvider = "dataProvider")
	public void EPROC_22612(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		User user = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase, mappedTestCases);
			user = LoginLogoutServices.login(driver, testCase);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			PagePurchaseOrderListing.clickOnPONumberSorting(driver, testCaseName);
			PagePurchaseOrderListing.clickOnPoDateSorting(driver, testCaseName);
			PagePurchaseOrderListing.clickOnPOAmountSorting(driver, testCaseName);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: Rohini Shinge </b> <b><br>
	 * <font color="blue">Method :</b>PO listing>> Supplier name field should be auto completed
	 */

	@Test(dataProvider = "dataProvider")
	public void EPROC_22618(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		User user = null;

		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase, mappedTestCases);
			user = LoginLogoutServices.login(driver, testCase);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			//fill supplier field
			driver.findElement(By.xpath("//*[@id=\"txtFltrSupplier\"]")).sendKeys(CommonServices.getTestData(IConstantsData.SUPPLIER_NAME));
			String poNumber = PagePurchaseOrderListing.getFirstPoNo(driver, testCaseName);
			String supplierName = PagePurchaseOrderListing.getSupplierName(driver, testCaseName, poNumber);

			Assert.assertTrue("Supplier field not autocompleted", supplierName.equals(CommonServices.getTestData(IConstantsData.SUPPLIER_NAME)));

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

}
