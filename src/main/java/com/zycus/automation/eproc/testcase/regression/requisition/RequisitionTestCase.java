package com.zycus.automation.eproc.testcase.regression.requisition;

import static org.junit.Assert.assertTrue;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.exec.util.StringUtils;
import org.apache.log4j.Logger;
import org.junit.Assert;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.logging.LogEntries;
import org.openqa.selenium.logging.LogEntry;
import org.openqa.selenium.logging.LogType;
import org.openqa.selenium.support.ui.Select;
import org.testng.annotations.Test;

import com.zycus.automation.bo.AddApprover;
import com.zycus.automation.bo.ApprovalAllRequests;
import com.zycus.automation.bo.AssetCodeSettings;
import com.zycus.automation.bo.AuditTrail;
import com.zycus.automation.bo.BPO;
import com.zycus.automation.bo.Basket;
import com.zycus.automation.bo.BillingRequisitionSummary;
import com.zycus.automation.bo.BuyersDeskFilter;
import com.zycus.automation.bo.CEform;
import com.zycus.automation.bo.Catalog;
import com.zycus.automation.bo.CategoryManagerMap;
import com.zycus.automation.bo.CatelogItem;
import com.zycus.automation.bo.ChangeMultiple;
import com.zycus.automation.bo.CostBookingItemSummary;
import com.zycus.automation.bo.CostBookingRequisitionSummary;
import com.zycus.automation.bo.CostCenterSplitInfo;
import com.zycus.automation.bo.CustomDate;
import com.zycus.automation.bo.DeliveryItemSummary;
import com.zycus.automation.bo.DeliveryRequisitionSummary;
import com.zycus.automation.bo.DeliverySplitInfo;
import com.zycus.automation.bo.DocumentInformation;
import com.zycus.automation.bo.EmailDetails;
import com.zycus.automation.bo.EmailResult;
import com.zycus.automation.bo.EntityOwnership;
import com.zycus.automation.bo.ExistingSupplier;
import com.zycus.automation.bo.GLMap;
import com.zycus.automation.bo.GuidedItem;
import com.zycus.automation.bo.GuidedItemSuggestSupplier;
import com.zycus.automation.bo.Invoice;
import com.zycus.automation.bo.Item;
import com.zycus.automation.bo.MappedTestCase;
import com.zycus.automation.bo.MasterDataTenantConfig;
import com.zycus.automation.bo.ModalGuidedItemSelectCategory;
import com.zycus.automation.bo.MyRequisitionFilter;
import com.zycus.automation.bo.OnlineStore;
import com.zycus.automation.bo.PEform;
import com.zycus.automation.bo.PoStatusFilter;
import com.zycus.automation.bo.ProjectsSettings;
import com.zycus.automation.bo.PunchoutItem;
import com.zycus.automation.bo.PurchaseOrder;
import com.zycus.automation.bo.PurchaseOrderSettings;
import com.zycus.automation.bo.Receipt;
import com.zycus.automation.bo.Requisition;
import com.zycus.automation.bo.RequisitionSettings;
import com.zycus.automation.bo.StandardPO;
import com.zycus.automation.bo.SystemTenantConfiguration;
import com.zycus.automation.bo.User;
import com.zycus.automation.bo.UserSettings;
import com.zycus.automation.boutils.MappedTestCaseUtil;
import com.zycus.automation.boutilshelper.UserUtilHelper;
import com.zycus.automation.constants.IConstants;
import com.zycus.automation.datacreation.ObjectCreation;
import com.zycus.automation.eproc.businessflow.allrequestsapprovalflow.FlowAllRequestsApproval;
import com.zycus.automation.eproc.businessflow.assetCodesFlow.FlowAssetCodes;
import com.zycus.automation.eproc.businessflow.bpoflow.FlowBPO;
import com.zycus.automation.eproc.businessflow.buyersdesk.FlowBuyersDesk;
import com.zycus.automation.eproc.businessflow.buyersdesklistingflow.FlowBuyersDeskListing;
import com.zycus.automation.eproc.businessflow.catalogflow.FlowCatalog;
import com.zycus.automation.eproc.businessflow.ceformflow.FlowCEform;
import com.zycus.automation.eproc.businessflow.combineflow.CombineFlowImpl;
import com.zycus.automation.eproc.businessflow.comparecatalogitems.FlowCompareCatalogItems;
import com.zycus.automation.eproc.businessflow.costcentermasterdatasettingflow.FlowCostCenterMasterDataSetting;
import com.zycus.automation.eproc.businessflow.emailTesting.FlowEmailTesting;
import com.zycus.automation.eproc.businessflow.entityownershipflow.FlowEntityOwnership;
import com.zycus.automation.eproc.businessflow.fillGuidedItemflow.FlowFillGuidedItem;
import com.zycus.automation.eproc.businessflow.fillGuidedItemflow.IFlowFillGuidedItemImpl;
import com.zycus.automation.eproc.businessflow.flipinvoice.FlowFlipInvoice;
import com.zycus.automation.eproc.businessflow.masterdatatenantconfigflow.FlowMasterDataTenantConfig;
import com.zycus.automation.eproc.businessflow.mybasketflow.FlowMyBasket;
import com.zycus.automation.eproc.businessflow.myfavoritesflow.FlowMyFavorites;
import com.zycus.automation.eproc.businessflow.myrequisitionsflow.FlowMyRequisitions;
import com.zycus.automation.eproc.businessflow.myrequisitionsflow.IFlowMyRequisitionUtil;
import com.zycus.automation.eproc.businessflow.onlinestoreflow.FlowOnlineStore;
import com.zycus.automation.eproc.businessflow.peformflow.FlowPEform;
import com.zycus.automation.eproc.businessflow.poinvoicelistingflow.FlowPOInvoiceListing;
import com.zycus.automation.eproc.businessflow.polistingflow.FlowPoListing;
import com.zycus.automation.eproc.businessflow.projectFlow.FlowProject;
import com.zycus.automation.eproc.businessflow.projectssettingsflow.FlowProjectsSettings;
import com.zycus.automation.eproc.businessflow.punchoutflow.FlowPunchout;
import com.zycus.automation.eproc.businessflow.purchaseordersetting.FlowPurchaseOrderSetting;
import com.zycus.automation.eproc.businessflow.readyforapporvalflow.FlowReadyForApproval;
import com.zycus.automation.eproc.businessflow.receiptflow.FlowReceipt;
import com.zycus.automation.eproc.businessflow.requisitionflow.FlowRequisition;
import com.zycus.automation.eproc.businessflow.requisitionsettingsflow.FlowRequisitionSettings;
import com.zycus.automation.eproc.businessflow.searchlistingpageflow.FlowSearchListing;
import com.zycus.automation.eproc.businessflow.shoppingcartflow.FlowShoppingCart;
import com.zycus.automation.eproc.businessflow.standardpoflow.FlowStandardPo;
import com.zycus.automation.eproc.businessflow.systemtenantconfigurationflow.FlowSystemTenantConfiguration;
import com.zycus.automation.eproc.businessflow.upcomingrequisitionlistingflow.FlowUpcomingRequisitionListing;
import com.zycus.automation.eproc.businessflow.usermanagementflow.FlowUserManagement;
import com.zycus.automation.eproc.businessflow.viewpoflow.FlowViewPO;
import com.zycus.automation.eproc.businessflow.viewreqflow.FlowViewRequisition;
import com.zycus.automation.eproc.pageobjects.modals.addassignedbuyer.ModalAddAssignedBuyer;
import com.zycus.automation.eproc.pageobjects.modals.additemfromreq.ModalAddItemFromRequisition;
import com.zycus.automation.eproc.pageobjects.modals.blanketorderforfreetextitem.ModalBlanketOrdersForFreeTextItem;
import com.zycus.automation.eproc.pageobjects.modals.buyersdesklistingactions.ModalBuersDeskListingActions;
import com.zycus.automation.eproc.pageobjects.modals.buyersdesklistingreturnreq.IModalBuyersDeskReturnRequisition;
import com.zycus.automation.eproc.pageobjects.modals.buyersdesklistingreturnreq.ModalBuyersDeskReturnRequisition;
import com.zycus.automation.eproc.pageobjects.modals.checkoutChangeMultiple.ModelChangeMultiple;
import com.zycus.automation.eproc.pageobjects.modals.checkoutGuidedItemDetails.IModalGuidedItemDetails;
import com.zycus.automation.eproc.pageobjects.modals.checkoutGuidedItemDetails.ModalGuidedItemDetails;
import com.zycus.automation.eproc.pageobjects.modals.checkoutItemSummaryCommon.ModelItemSummaryCommon;
import com.zycus.automation.eproc.pageobjects.modals.checkoutItemSummaryCostBooking.ModelItemSummaryCostBooking;
import com.zycus.automation.eproc.pageobjects.modals.checkoutItemSummaryDelivery.ModelItemSummaryDelivery;
import com.zycus.automation.eproc.pageobjects.modals.checkoutRequisitionSummaryBilling.ModelRequisitionSummaryBilling;
import com.zycus.automation.eproc.pageobjects.modals.checkoutRequisitionSummaryCommon.IModelRequisitionSummaryCommon;
import com.zycus.automation.eproc.pageobjects.modals.checkoutRequisitionSummaryCommon.ModelRequisitionSummaryCommon;
import com.zycus.automation.eproc.pageobjects.modals.checkoutRequisitionSummaryCostBooking.IModelRequisitionSummaryCostBooking;
import com.zycus.automation.eproc.pageobjects.modals.checkoutRequisitionSummaryCostBooking.ModelRequisitionSummaryCostBooking;
import com.zycus.automation.eproc.pageobjects.modals.closepo.ModalClosePO;
import com.zycus.automation.eproc.pageobjects.modals.closereq.ModalCloseReq;
import com.zycus.automation.eproc.pageobjects.modals.freeTextForm_ReadyToCheckout.ModalFreeTextReadyToCheckOut;
import com.zycus.automation.eproc.pageobjects.modals.freeTextForm_SelectCategory.ModalSelectCategory;
import com.zycus.automation.eproc.pageobjects.modals.itemdetails.ModalItemDetails;
import com.zycus.automation.eproc.pageobjects.modals.itemsummarycostallocation.ModalItemSummaryCostAllocation;
import com.zycus.automation.eproc.pageobjects.modals.myreqactionsrecallapprovalrequest.ModalRecallApprovalRequest;
import com.zycus.automation.eproc.pageobjects.modals.myrequisitionactions.ModalMyRequisitionActions;
import com.zycus.automation.eproc.pageobjects.modals.poactions.ModalPOActions;
import com.zycus.automation.eproc.pageobjects.modals.polistingactions.ModalPOListingActions;
import com.zycus.automation.eproc.pageobjects.modals.requisitionApprovalWorkflow.ModalRequisitionApprovalWorkflow;
import com.zycus.automation.eproc.pageobjects.modals.shoppingcart.ModalShoppingCart;
import com.zycus.automation.eproc.pageobjects.modals.showallpos.ModalShowAllPos;
import com.zycus.automation.eproc.pageobjects.modals.viewpoactions.ModalViewPOActions;
import com.zycus.automation.eproc.pageobjects.pages.BuyersDesk.IPageBuyersDesk;
import com.zycus.automation.eproc.pageobjects.pages.BuyersDesk.PageBuyersDesk;
import com.zycus.automation.eproc.pageobjects.pages.FreeTextItemForm.IPageFreeTextForm;
import com.zycus.automation.eproc.pageobjects.pages.FreeTextItemForm.PageFreeTextForm;
import com.zycus.automation.eproc.pageobjects.pages.approval.PageAllRequestsApproval;
import com.zycus.automation.eproc.pageobjects.pages.buyersdesklisting.PageBuyersDeskListing;
import com.zycus.automation.eproc.pageobjects.pages.comparecatalogitems.PageCompareCatalogItems;
import com.zycus.automation.eproc.pageobjects.pages.mybasket.IPageMyBasket;
import com.zycus.automation.eproc.pageobjects.pages.mybasket.PageMyBasket;
import com.zycus.automation.eproc.pageobjects.pages.myfavorites.IPageMyFavoritesImpl;
import com.zycus.automation.eproc.pageobjects.pages.myfavorites.PageMyFavorites;
import com.zycus.automation.eproc.pageobjects.pages.myrequisition.IPageMyRequisition;
import com.zycus.automation.eproc.pageobjects.pages.myrequisition.PageMyRequisition;
import com.zycus.automation.eproc.pageobjects.pages.onlinestore.IPageOnlineStore;
import com.zycus.automation.eproc.pageobjects.pages.onlinestore.PageOnlineStore;
import com.zycus.automation.eproc.pageobjects.pages.purchaseorderlisting.PagePurchaseOrderListing;
import com.zycus.automation.eproc.pageobjects.pages.purchaseordertobegenerated.PagePurchaseOrderToBeGenerated;
import com.zycus.automation.eproc.pageobjects.pages.requisitionCheckOut.IPageRequisitionCheckOut;
import com.zycus.automation.eproc.pageobjects.pages.requisitionCheckOut.PageRequisitionCheckOut;
import com.zycus.automation.eproc.pageobjects.pages.requisitionForking.PageRequisitionForking;
import com.zycus.automation.eproc.pageobjects.pages.searchlisting.IPageSearchListing;
import com.zycus.automation.eproc.pageobjects.pages.searchlisting.PageSearchListing;
import com.zycus.automation.eproc.pageobjects.pages.settings.cusomizesettings.PageCustomizeSettings;
import com.zycus.automation.eproc.pageobjects.pages.settings.masterdatasettings.PageMasterDataSettings;
import com.zycus.automation.eproc.pageobjects.pages.settings.masterdatatenantlevelconfig.PageMasterDataTenantLevelConfigSettings;
import com.zycus.automation.eproc.pageobjects.pages.settings.projectssettings.IPageProjectsSettings;
import com.zycus.automation.eproc.pageobjects.pages.settings.projectssettings.PageProjectsSettings;
import com.zycus.automation.eproc.pageobjects.pages.settings.requisitionsettings.IPageRequisitionSettings;
import com.zycus.automation.eproc.pageobjects.pages.settings.requisitionsettings.PageRequisitionSettings;
import com.zycus.automation.eproc.pageobjects.pages.settings.usermanagement.PageUserManagement;
import com.zycus.automation.eproc.pageobjects.pages.standardpo.PageStandardPO;
import com.zycus.automation.eproc.pageobjects.pages.viewpurchaseorder.PageViewPurchaseOrder;
import com.zycus.automation.eproc.pageobjects.pages.viewrequisition.IPageRequisitionView;
import com.zycus.automation.eproc.pageobjects.pages.viewrequisition.PageRequisitionView;
import com.zycus.automation.eproc.pageobjects.popups.FreeTextSelectCategoryEForm.PopUpSelectCategoryEForm;
import com.zycus.automation.eproc.pageobjects.popups.checkoutsendforapproval.PopUpSendForApproval;
import com.zycus.automation.eproc.pageobjects.popups.defaultalert.PopUpDefalutAlert;
import com.zycus.automation.eproc.pageobjects.popups.defaultconfirmation.PopUpDefaultConfirmation;
import com.zycus.automation.eproc.pageobjects.popups.requestadditionalitems.PopupRequestAdditiondalItems;
import com.zycus.automation.eproc.pageobjects.tabs.checkoutTabItemSummary.TabCheckoutItemSummary;
import com.zycus.automation.eproc.pageobjects.tabs.checkoutTabRequisitionSummary.TabCheckoutReqSummary;
import com.zycus.automation.eproc.pageobjects.tabs.mainpageheaderleveltabs.MainPageHeaderLevelTab;
import com.zycus.automation.eproc.testdata.IConstantsData;
import com.zycus.automation.eproc.testdata.IEmailTestingConstants;
import com.zycus.automation.eproc.validation.VerifyComparedCatalogItems;
import com.zycus.automation.eproc.validation.VerifyShoppingItemsWithShoppingCarts;
import com.zycus.automation.services.CommonServices;
import com.zycus.automation.services.LoginLogoutServices;
import com.zycus.automation.utilities.actionbot.ActionBot;
import com.zycus.automation.utilities.common.CommonUtilities;
import com.zycus.automation.utilities.screenshot.ScreenShot;
import com.zycus.framework.framework_version_2_4.bo.TestCase;
import com.zycus.framework.framework_version_2_4.framework.ConfigProperty;
import com.zycus.framework.framework_version_2_4.framework.DriverSelector;
import com.zycus.framework.framework_version_2_4.framework.Helper;
import com.zycus.framework.framework_version_2_4.framework.TestDataProvider;
import com.zycus.framework.framework_version_2_4.listener.CustomRetryListener;

import net.jsourcerer.webdriver.jserrorcollector.JavaScriptError;

/**
 * @author ankita.sawant
 */
public class RequisitionTestCase extends TestDataProvider
{
	static Logger logger = Logger.getLogger(RequisitionTestCase.class);

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Requisition Checkout Page>>Item details
	 * modal: Verify Item details modal with multilingual characters in the
	 * following fields: Short Description; Supplier Part Id; Price; Item image;
	 * Quantity box; UOM; Description; Manufacturer; Category; SPSC Code;
	 * Supplier; Delivery Lead Time (days); Contract No; Specification Name;
	 * Specification Key; Specification Value; Attachment files and web links
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * 
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_282624(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		User user = null;
		String itemName;
		List<String> itemNames = new ArrayList<String>();
		List<String> dataItemIds = new ArrayList<String>();
		List<CatelogItem> catelogItems = new ArrayList<CatelogItem>();
		CatelogItem catelogItem1, catelogItem2, catelogItem3, catelogItem4, catelogItem5, catelogItem6;
		int quantity = 0, enteredQuantity1 = 0, enteredQuantity2 = 0;
		boolean flag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			String testCaseName = testCase.getTestMethodName();
			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_266778"));//0
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_266779"));//1
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_266786"));//2
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_266787"));//3
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_282583"));//4
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_282582"));//5
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_282584"));//6
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_282585"));//7
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_282620"));//8
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_282621"));//9
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_282622"));//10
			}
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			/** Case RTC_266778 : Multilingual Character **/
			logger.info("================ Comparing multilingual character =====================");
			itemName = CommonServices.getTestData(IConstantsData.MULTILINGUAL_CHARACTER_ITEMNAME, 0).trim();
			itemNames.add(itemName);
			//itemNames.add(CommonServices.getTestData(IConstantsData.MULTILINGUAL_CHARACTER_ITEMNAME,0).trim());
			itemNames.add(CommonServices.getTestData(IConstantsData.MULTILINGUAL_CHARACTER_ITEMNAME, 1).trim());

			for (int i = 0; i < itemNames.size(); i++)
				logger.info("/nitem at index " + i + ": " + itemNames.get(i) + " :");
			// search for the item
			FlowSearchListing.searchItem(driver, testCaseName, itemNames.get(1));

			dataItemIds = FlowSearchListing.compareCatalogItems(driver, testCaseName, itemNames);

			assertTrue("The selected items are not compared.", VerifyComparedCatalogItems.verifyIfItemsAreCompared(driver, testCaseName, dataItemIds));

			// to get item details from property file
			catelogItem1 = ObjectCreation.getCatalogItemFromPropertyFile(itemNames.get(0));
			catelogItem1.setItemName(itemNames.get(0));
			catelogItem1.setDescription(catelogItem1.getItemName());

			catelogItem2 = ObjectCreation.getCatalogItemFromPropertyFile(itemNames.get(1));
			catelogItem2.setItemName(itemNames.get(1));
			catelogItem2.setDescription(catelogItem2.getItemName());

			// to get item details from compare screen
			List<CatelogItem> comparedCatalogItems = FlowCompareCatalogItems.getDetailsOfComparedItems(driver, testCaseName, 2);

			flag = FlowCompareCatalogItems.verifyIfItemsAreCompared(comparedCatalogItems.get(0), catelogItem1);
			assertTrue("Item details of " + comparedCatalogItems.get(0).getItemName() + " item on compare screen were wrong", flag);

			//flag = comparedCatalogItems.get(1).getItemName().equalsIgnoreCase(catelogItem2.getItemName());

			flag = FlowCompareCatalogItems.verifyIfItemsAreCompared(comparedCatalogItems.get(1), catelogItem2);
			assertTrue("Item details of " + comparedCatalogItems.get(0).getItemName() + " item on compare screen were wrong", flag);

			mappedTestCases.get(0).setTestResult(flag);
			itemNames.removeAll(itemNames);
			dataItemIds.removeAll(dataItemIds);
			comparedCatalogItems.removeAll(comparedCatalogItems);

			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);

			/** Case RTC_266779 : Special Character **/
			logger.info("================ Comparing special character =====================");
			itemName = CommonServices.getTestData(IConstantsData.SPECIAL_CHARACTER_ITEMNAME);

			itemNames.add(itemName);
			itemNames.add(CommonServices.getTestData(IConstantsData.SPECIAL_CHARACTER_ITEMNAME));

			// search for the item
			FlowSearchListing.searchItem(driver, testCaseName, itemName);

			dataItemIds = FlowSearchListing.compareCatalogItems(driver, testCaseName, itemNames);

			assertTrue("The selected items are not compared.", VerifyComparedCatalogItems.verifyIfItemsAreCompared(driver, testCaseName, dataItemIds));

			// to get item details from property file
			catelogItem3 = ObjectCreation.getCatalogItemFromPropertyFile(itemNames.get(0).substring(0, 12));
			catelogItem3.setItemName(itemNames.get(0));
			catelogItem3.setDescription(catelogItem3.getItemName());

			catelogItem4 = ObjectCreation.getCatalogItemFromPropertyFile(itemNames.get(1).substring(0, 12));
			catelogItem4.setItemName(itemNames.get(0));
			catelogItem4.setDescription(catelogItem4.getItemName());

			// to get item details from compare screen
			comparedCatalogItems = FlowCompareCatalogItems.getDetailsOfComparedItems(driver, testCaseName, 2);

			flag = FlowCompareCatalogItems.verifyIfItemsAreCompared(comparedCatalogItems.get(0), catelogItem3);
			//flag = comparedCatalogItems.get(0).getItemName().equalsIgnoreCase(catelogItem3.getItemName());
			assertTrue("Item details of " + comparedCatalogItems.get(0).getItemName() + " item on compare screen were wrong", flag);

			//flag = comparedCatalogItems.get(1).getItemName().equalsIgnoreCase(catelogItem4.getItemName());
			flag = FlowCompareCatalogItems.verifyIfItemsAreCompared(comparedCatalogItems.get(1), catelogItem4);
			assertTrue("Item details of " + comparedCatalogItems.get(0).getItemName() + " item on compare screen were wrong", flag);

			mappedTestCases.get(1).setTestResult(flag);
			mappedTestCases.get(3).setTestResult(flag);

			/** Case RTC_266786 : Checking entered quantity **/
			logger.info("================ Checking entered quantity =====================");
			itemName = PageCompareCatalogItems.getComparedItemName(driver, testCaseName, 2);
			quantity = CommonUtilities.getNonZeroRandomNumbers(2);
			enteredQuantity1 = PageCompareCatalogItems.fillQuantity(driver, testCaseName, dataItemIds.get(0), quantity, 1);
			ActionBot.scroll(driver, "250");
			enteredQuantity2 = PageCompareCatalogItems.getQuantity(driver, testCaseName, dataItemIds.get(0), 2);
			flag = enteredQuantity1 == enteredQuantity2;
			assertTrue("Cart quantity entered vanishes while scrolling the item comparison screen", flag);
			mappedTestCases.get(2).setTestResult(flag);

			CatelogItem catelogItem = new CatelogItem();
			catelogItem.setItemName(itemName);
			catelogItem.setQuantity(quantity);
			catelogItem.setItemID(dataItemIds.get(0));

			catelogItems.add(catelogItem);

			/** Case 3 : Verifying item details **/
			logger.info("=================== Verifying Item Details ===================");
			itemName = CommonServices.getTestData(IConstantsData.MULTILINGUAL_CHARACTER_ITEMNAME);

			// search for the item
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			itemName = FlowSearchListing.searchItem(driver, testCaseName, itemName);
			// view item
			String itemId = FlowSearchListing.viewItemDetails(driver, testCaseName, itemName.trim());

			flag = ModalItemDetails.isItemDetailsTabPresent(driver, testCaseName, itemId) && ModalItemDetails.isItemSpecificationsTabPresent(driver, testCaseName, itemId)
				&& ModalItemDetails.isItemAttachmentsTabPresent(driver, testCaseName, itemId);
			mappedTestCases.get(4).setTestResult(flag);
			// assertTrue("Item details, specification, attachments tab were not
			// present is item details pop up",
			// flag);

			// to get item details
			catelogItem5 = FlowSearchListing.getItemDetails(driver, testCaseName, itemId);
			catelogItem6 = ObjectCreation.getCatalogItemFromPropertyFile(catelogItem5.getItemName());
			//flag = FlowCompareCatalogItems.verifyIfItemsAreCompared(comparedCatalogItems.get(0), catelogItem1);
			//flag = catelogItem5.getDescription().equalsIgnoreCase(catelogItem6.getDescription());
			assertTrue("Item details of " + catelogItem5.getItemName() + " item on compare screen were wrong", flag);
			mappedTestCases.get(5).setTestResult(flag);

			flag = catelogItem5.getCategory().trim().equalsIgnoreCase(catelogItem6.getCategory());

			flag = FlowSearchListing.verifyItemDetails(catelogItem5, catelogItem6);

			ModalItemDetails.clickOnCloseItemDetailsMdoal(driver, testCaseName, itemId);
			mappedTestCases.get(6).setTestResult(flag);
			mappedTestCases.get(7).setTestResult(flag);
			mappedTestCases.get(8).setTestResult(flag);
			mappedTestCases.get(9).setTestResult(flag);
			mappedTestCases.get(10).setTestResult(flag);
			assertTrue("Item details on pop up was wrong", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Verify on modifying ready for approval
	 * requisition; the new added approvers should not be displayed in workflow
	 * section of the requisition <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_289871(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		Requisition requisition = new Requisition();
		String status, userDisplayName;
		boolean flag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			String testCaseName = testCase.getTestMethodName();
			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_289886"));//0
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_289830"));//1
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_289868"));//2
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_289884"));//3
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_289889"));//4
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_289869"));//5
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_289873"));//6
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_289874"));//7
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_289875"));//8
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_289876"));//9
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_289878"));//10
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_294340"));//11
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_289922"));//12
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_323360"));//13
			}
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();
			userDisplayName = user.getDisplayName();
			logger.info("User display name : " + userDisplayName);

			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			requisition.setModifyWorkflowSettings(true);

			// to set non mandatory fields
			requisition.setCommentForSupplier(IConstantsData.COMMENT_FOR_SUPPLIER);
			requisition.setReasonForOrdering(IConstantsData.REASON_FOR_ORDERING);
			requisition.setRequired(true);

			// to create req
			FlowRequisition.createRequisition(driver, testCaseName, requisition);

			/**
			 * RTC_289886: Test for bug 225029 - On submitting a requisition
			 * with "Modify workflow to add approvers" setting checked, user is
			 * directed to requisition listing
			 **/
			{
				flag = PageRequisitionView.isSubmitForApprovalButtonPresent(driver, testCaseName);
				mappedTestCases.get(0).setTestResult(flag);
				assertTrue("On submitting a requisition with Modify workflow to add approvers setting checked, user was not directed to Ready for approval page", flag);
			}

			/**
			 * RTC_289830 : Verify If 'Modify workflow to add approvers' setting
			 * is checked; the requisition on submission should be in ready for
			 * approval stage
			 **/
			// to search req in my req tab 
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Requisition was not Searched in my requisition tab", requisition.isResult());

			status = PageMyRequisition.getStatusOfFirstReq(driver, testCaseName);
			mappedTestCases.get(1).setTestResult(flag);

			assertTrue("If 'Modify workflow to add approvers' setting is checked; the status of requisition on submission was not Ready for Approval",
				status.contains(IConstantsData.READY_FOR_APPROVAL_FILTER_LABEL));

			// to view the req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);

			flag = requisition.getReqName().equalsIgnoreCase(PageRequisitionView.getRequisitionName(driver, testCaseName));
			assertTrue("Requisition name on view page was wrong", flag);

			/**
			 * RTC_289868 : Verify User should be able to add approver with
			 * special characters in 'Ready for approval' requisition
			 **/
			/**
			 * RTC_289884 : Test for bug 225025 - Error 500 is displayed on
			 * adding approvers after the requester node in ready for approval
			 * requisition
			 **/
			/**
			 * RTC_289889 : Test for bug 224976 - [Intermittent]: Error 500 is
			 * displayed on adding approvers in ready for approval state
			 **/

			AddApprover addApprover_withSpecialChar = new AddApprover();
			//addApprover_withSpecialChar.setApproverName(CommonServices.getTestData(IConstantsData.MAX_CHAR_USER));
			addApprover_withSpecialChar.setApproverName(CommonServices.getTestData(IConstantsData.BUYER_NAME));

			addApprover_withSpecialChar.setAddApproverAfter(IConstantsData.Requester);
			addApprover_withSpecialChar.setNextAction(IConstantsData.SAVE);

			// add approver
			addApprover_withSpecialChar = FlowReadyForApproval.addApproverInReadyForApprovalRequisition(driver, testCaseName, addApprover_withSpecialChar);
			// verify added approver
			flag = FlowReadyForApproval.verifyAddedApprover(driver, testCaseName, addApprover_withSpecialChar);
			mappedTestCases.get(2).setTestResult(flag);
			mappedTestCases.get(3).setTestResult(flag);
			mappedTestCases.get(4).setTestResult(flag);
			assertTrue("Information displayed on req view page of added approver containing special character was wrong", flag);

			/**
			 * RTC_289869 : Verify User should be able to add approver with
			 * multilingual characters in 'Ready for approval' requisition
			 **/
			AddApprover addApprover_withMultilingualChar = new AddApprover();
			addApprover_withMultilingualChar.setApproverName(CommonServices.getTestData(IConstantsData.MULTILINGUAL_CHAR_USER, 0));
			addApprover_withMultilingualChar.setAddApproverAfter(IConstantsData.Requester);
			addApprover_withMultilingualChar.setNextAction(IConstantsData.SAVE);

			// add approver
			addApprover_withMultilingualChar = FlowReadyForApproval.addApproverInReadyForApprovalRequisition(driver, testCaseName, addApprover_withMultilingualChar);
			// verify added approver
			flag = FlowReadyForApproval.verifyAddedApprover(driver, testCaseName, addApprover_withMultilingualChar);
			mappedTestCases.get(5).setTestResult(flag);
			assertTrue("Information displayed on req view page of added approver containing multilingual character was wrong", flag);

			ScreenShot.screenshot(driver, testCaseName, "Audit Trail Information after adding approver");
			SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
			Date date = new Date();
			String todaysDate = dateFormat.format(date);
			logger.info("Todays Date : " + todaysDate);

			/**
			 * RTC_289873 : Verify audit trail in ready for approval requisition
			 * in case of 'Modify workflow to add approvers' setting
			 **/
			/**
			 * RTC_289874 : Verify audit trail in ready for approval requisition
			 * in case of empty assigned buyer
			 **/
			ActionBot.refreshPage(driver, testCaseName);
			AuditTrail auditTrail = FlowReadyForApproval.getAuditTrailInformation(driver, testCaseName, 3);

			flag = auditTrail.getAction().trim().equalsIgnoreCase(IConstantsData.Items_Ready_For_Approval);

			flag = FlowReadyForApproval.verifyAuditTrailInformation(driver, testCaseName, auditTrail, userDisplayName, IConstantsData.Items_Ready_For_Approval, null);

			mappedTestCases.get(6).setTestResult(flag);
			mappedTestCases.get(7).setTestResult(flag);
			assertTrue("Audit trail information in ready for approval requisition in case of 'Modify workflow to add approvers' setting was wrong ", flag);

			/**
			 * RTC_289875 : Verify audit trail in ready for approval requisition
			 * when a new actor is added in the workflow
			 **/

			// verify for special char approver
			AuditTrail auditTrail_afterAdditionOfSpecialCharApprover = FlowReadyForApproval.getAuditTrailInformation(driver, testCaseName, 2);

			flag = FlowReadyForApproval.verifyAuditTrailInformation(driver, testCaseName, auditTrail_afterAdditionOfSpecialCharApprover, userDisplayName,
				IConstantsData.Added_Approver_In_Ready_For_Approval_Requisition, addApprover_withSpecialChar.getApproverName());
			assertTrue("Audit trail information in ready for approval requisition when approver with special character is added was wrong ", flag);

			// verify for multilingual char
			AuditTrail auditTrail_afterAdditionOfMultilingualCharApprover = FlowReadyForApproval.getAuditTrailInformation(driver, testCaseName, 1);

			flag = FlowReadyForApproval.verifyAuditTrailInformation(driver, testCaseName, auditTrail_afterAdditionOfMultilingualCharApprover, userDisplayName,
				IConstantsData.Added_Approver_In_Ready_For_Approval_Requisition, addApprover_withMultilingualChar.getApproverName());

			mappedTestCases.get(8).setTestResult(flag);
			assertTrue("Audit trail information in ready for approval requisition when approver with multilingual character is added was wrong ", flag);

			/**
			 * RTC_289876 : Verify audit trail in ready for approval requisition
			 * when an actor is removed from the workflow
			 **/
			flag = FlowReadyForApproval.removeFirstAddedApprover(driver, testCaseName);
			assertTrue("First added approver was not removed", flag);

			ScreenShot.screenshot(driver, testCaseName, "Audit Trail Information after removing approver");

			ActionBot.refreshPage(driver, testCaseName);
			AuditTrail auditTrail_afterRemovalOfApprover = FlowReadyForApproval.getAuditTrailInformation(driver, testCaseName, 1);

			flag = FlowReadyForApproval.verifyAuditTrailInformation(driver, testCaseName, auditTrail_afterRemovalOfApprover, userDisplayName,
				IConstantsData.Removed_Approver_From_Ready_For_Approval_Requisition, addApprover_withMultilingualChar.getApproverName());

			mappedTestCases.get(9).setTestResult(flag);
			assertTrue("Audit trail information in ready for approval requisition when approver with multilingual character is removed was wrong ", flag);

			/**
			 * RTC_289871 : Verify on modifying ready for approval requisition;
			 * the new added approvers should not be displayed in workflow
			 * section of the requisition
			 **/

			//			PageRequisitionView.clickOnModifyRequisitionLink(driver, testCaseName);
			//			PopUpDefaultConfirmation.clickOnConfirmYesButton(driver, testCaseName);
			//			ActionBot.findElement(driver, IPageRequisitionCheckOut.TEXTBOX_REQUISITION_NAME);
			//			ActionBot.waitForPageLoad(driver);
			//			ActionBot.scroll(driver, "400");

			String firstApproverName = PageRequisitionCheckOut.getFirstApproverNameFromWorkflow(driver, testCaseName);
			flag = firstApproverName.equalsIgnoreCase(addApprover_withSpecialChar.getApproverName());
			assertTrue("On modifying ready for approval requisition; the new added approvers displayed in workflow section of the requisition", flag);

			/**
			 * RTC_289878 : Test for bug 224978 - Error 500 is displayed on
			 * viewing any previous requisition in ready for approval state
			 **/
			/**
			 * RTC_294340 : Test for bug 224085 - Error 500 [WorkflowException]
			 * is displayed on clicking on any previous requisition in ready for
			 * approval state
			 **/
			// saerch req - status - READY_FOR_APPROVAL_FILTER_LABEL
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			assertTrue("Ready for approval was not applied properly", requisition.isResult());
			Assert.assertTrue("req status is not on approval", requisition.getStatus().contains(IConstantsData.READY_FOR_APPROVAL_FILTER_LABEL));

			// to view the req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);
			// String firstReqName =
			// PageMyRequisition.getFirstReqName(driver,
			// testCaseName);
			// logger.info("View Requisition " + firstReqName);

			// flag =
			// firstReqName.equalsIgnoreCase(PageRequisitionView.getRequisitionName(driver,
			// testCaseName));
			// System.out.println("@@@ Flag : " + flag);
			// assertTrue("Requisition name on view page was wrong", flag);

			flag = PageRequisitionView.isSubmitForApprovalButtonPresent(driver, testCaseName);
			mappedTestCases.get(10).setTestResult(flag);
			mappedTestCases.get(11).setTestResult(flag);
			assertTrue("Error present on viewing any previous requisition in ready for approval state", flag);

			/**
			 * RTC_323360 : Test for bug 233343 - Assigned buyer is shown
			 * mandatory even though its optional in following scenario
			 **/
			PageRequisitionView.clickOnItemSummaryViewItemWise(driver, testCaseName, requisition.getItems().getCatelogItems().get(0).getItemID());
			TabCheckoutItemSummary.clickItemSummaryAssignedBuyerTab(driver, testCaseName);
			flag = !ModalAddAssignedBuyer.isAssignedBuyerIsMandatoryPresent(driver, testCaseName);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(13),
				"Assigned buyer was shown mandatory even though its optional while changing assigned buyer in ready for approval requisition");
			//			ModalAddAssignedBuyer.clickOnCancelAssignedBuyerButton(driver, testCaseName);
			ActionBot.refreshPage(driver, testCaseName);

			/**
			 * RTC_289922 : Test for bug 225121 - Error 500 is displayed on
			 * adding approvers in any previous requisition in ready for
			 * approval state
			 **/
			// add approver
			ActionBot.scroll(driver, "700");
			addApprover_withMultilingualChar = FlowReadyForApproval.addApproverInReadyForApprovalRequisition(driver, testCaseName, addApprover_withMultilingualChar);
			// verify added approver
			flag = FlowReadyForApproval.verifyAddedApprover(driver, testCaseName, addApprover_withMultilingualChar);
			mappedTestCases.get(12).setTestResult(flag);
			assertTrue("Information displayed on req view page of added approver in any previous requisition in ready for approval state was wrong", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Verify on editing a returned requisition;
	 * 'Modify workflow to add approvers' setting should be retained <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_289857(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		String testCaseName = null;
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		Requisition requisition = new Requisition();
		GuidedItem guidedItem = new GuidedItem();
		Item item = new Item();
		List<GuidedItem> guidedItems = new ArrayList<GuidedItem>();
		RequisitionSettings requisitionSettings = new RequisitionSettings();
		String status = null;
		boolean flag = false, forkingSettingFlag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_289842"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_289843"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_289855"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_289858"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_289856"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_289859"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_289860"));
			}
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();
			guidedItem = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.EXISTING_SUPPLIER);
			guidedItem.setSourcingStatus(IConstantsData.Need_a_Quote);
			guidedItems.add(guidedItem);

			item.setGuidedItems(guidedItems);
			requisition.setItems(item);
			requisition.setNextAction(IConstantsData.NONE);

			/**
			 * RTC_289842 : Verify Requisitions with 'need a quote' items should
			 * not be able to view 'Modify workflow to add approvers' setting in
			 * requisition checkout page
			 **/
			FlowRequisition.createRequisition(driver, testCaseName, requisition);
			ActionBot.scroll(driver, "400");
			flag = !PageRequisitionCheckOut.isModifyWorkFlowSettingPresent(driver, testCaseName);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(0),
				"Modify workflow setting present in requisition checkout page in requisition having need a quote item");

			/**
			 * RTC_289843 : Verify Requisitions with 'need a quote' items should
			 * not be able to view 'Modify workflow to add approvers' setting in
			 * 'View workflow' modal in Forking screen
			 **/
			//			requisitionSettings.setEnableReqForking(true);
			//			requisitionSettings.setForReqByCategory(true);
			//			requisitionSettings.setForReqBySourcingStatus(true);

			// to enable req forking
			//requisitionSettings = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings);
			forkingSettingFlag = true;

			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			requisition = ObjectCreation.getRequisition(driver);
			item.getGuidedItems().get(0).setCategory(null);
			requisition.setItems(item);
			// create requisition
			// to checkout
			PageSearchListing.clickOnCheckOutButton(driver, testCaseName);

			// to fill checkout form and submit
			requisition = FlowRequisition.fillcheckoutForm(driver, testCaseName, requisition, requisition.getItems());

			// submit req
			PageRequisitionCheckOut.clickIAmDone(driver, testCaseName);
			ScreenShot.screenshot(driver, testCaseName, "After clicking on I AM DONE");
			PageRequisitionCheckOut.isConfirmReqPresent(driver, testCaseName);
			// to view workflow
			PageRequisitionForking.clickViewWorkflow(driver, testCaseName, 0);

			flag = !ModalRequisitionApprovalWorkflow.isModifyWorkFlowSettingPresent(driver, testCaseName);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(1),
				"'Modify workflow to add approvers' setting present in 'View workflow' modal in Forking screen in Requisition with 'need a quote' items");
			ModalRequisitionApprovalWorkflow.clickOnSaveReqApprovalWorkflowButton(driver, testCaseName);

			// to revert req forking setting
			requisitionSettings.setEnableReqForking(false);
			//requisitionSettings = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings);
			forkingSettingFlag = false;

			/**
			 * RTC_289855 : Verify on editing a draft requisition; 'Modify
			 * workflow to add approvers' setting should be retained
			 **/
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.BOTH);
			requisition.setModifyWorkflowSettings(true);
			requisition.setNextAction(IConstantsData.SAVE_AS_DRAFT_REQ);

			// create req in draft state
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);
			// search req
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Requisition is not saved as draft", requisition.isResult());
			// view req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);
			ActionBot.scroll(driver, "400");
			flag = PageRequisitionCheckOut.isModifyWorkFlowSettingSelected(driver, testCaseName);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(2), "'Modify workflow to add approvers' setting not retained on editing a draft requisition");

			/**
			 * RTC_289858 : Verify on editing a recalled requisition; 'Modify
			 * workflow to add approvers' setting should be retained
			 **/
			// submit req
			FlowRequisition.submitReq(driver, testCaseName, true);
			// recall req
			FlowMyRequisitions.recallApprovalRequest(driver, testCaseName, requisition);

			// check req is recalled or not
			assertTrue("Recalled requisition not in drafts status", IFlowMyRequisitionUtil.checkIfRequisitionRecalled(driver, testCaseName, requisition));

			// view req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);
			ActionBot.scroll(driver, "400");
			flag = PageRequisitionCheckOut.isModifyWorkFlowSettingSelected(driver, testCaseName);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(3), "'Modify workflow to add approvers' setting not retained on editing a recalled requisition");

			/**
			 * RTC_289856 : Verify on editing a rejected requisition; 'Modify
			 * workflow to add approvers' setting should be retained
			 **/
			// submit req
			FlowRequisition.submitReq(driver, testCaseName, true);
			// search req
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Requisition was not created", requisition.isResult());
			// to approve req
			ApprovalAllRequests approvalAllRequests = new ApprovalAllRequests();
			approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, requisition.getReqNo(), IConstantsData.REQUISITION, IConstantsData.REJECT);

			FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);
			status = PageAllRequestsApproval.getDocumentStatus(driver, testCaseName);
			assertTrue("Requisition was not rejected", status.equalsIgnoreCase(IConstantsData.REJECTED_FILTER_LABEL));

			// search req
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Requisition was not searched in my requisition tab", requisition.isResult());
			status = PageMyRequisition.getStatusOfFirstReq(driver, testCaseName);
			assertTrue("Status of Requisition was not rejected", status.equalsIgnoreCase(IConstantsData.REJECTED_FILTER_LABEL));

			// edit req
			PageMyRequisition.clickOnActionBtnOfFirstReq(driver, testCaseName);
			ModalMyRequisitionActions.clickOnEditLink(driver, testCaseName);
			ActionBot.defaultHighSleep();

			ActionBot.scroll(driver, "400");
			flag = PageRequisitionCheckOut.isModifyWorkFlowSettingSelected(driver, testCaseName);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(4), "'Modify workflow to add approvers' setting not retained on editing a rejected requisition");

			/**
			 * RTC_289859 : Verify on copying a requisition; 'Modify workflow to
			 * add approvers' setting should be reset
			 **/
			// submit req
			FlowRequisition.submitReq(driver, testCaseName, true);
			// search req
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Requisition was not created", requisition.isResult());

			// copy req
			PageMyRequisition.clickOnActionBtnOfFirstReq(driver, testCaseName);
			ModalMyRequisitionActions.clickOnCopyLink(driver, testCaseName);
			ActionBot.defaultHighSleep();

			ActionBot.scroll(driver, "400");
			flag = !PageRequisitionCheckOut.isModifyWorkFlowSettingSelected(driver, testCaseName);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(5), "'Modify workflow to add approvers' setting not reseted on copying a requisition");

			/**
			 * RTC_289860 : Verify 'Modify workflow to add approvers' setting
			 * should not be displayed in requisition view
			 **/
			// search req
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Requisition was not searched in my requisition tab", requisition.isResult());

			// view req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);
			ActionBot.scroll(driver, "400");
			flag = !PageRequisitionCheckOut.isModifyWorkFlowSettingPresent(driver, testCaseName);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(6), "'Modify workflow to add approvers' setting displayed in requisition view");

			/**
			 * RTC_289857 : Verify on editing a returned requisition; 'Modify
			 * workflow to add approvers' setting should be retained
			 **/
			// to approve req
			approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, requisition.getReqNo(), IConstantsData.REQUISITION, IConstantsData.APPROVE);

			FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);
			// search req
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Requisition was not searched in my requisition tab", requisition.isResult());
			status = PageMyRequisition.getStatusOfFirstReq(driver, testCaseName);
			assertTrue("Status of Requisition was not With Buyer", status.equalsIgnoreCase(IConstantsData.WITH_BUYER_FILTER_LABEL));

			// search at buyers desk
			requisition = FlowBuyersDeskListing.searchAtBuyersDeskListing(driver, testCaseName, requisition);
			assertTrue("Requisition was not searched at buyers desk", requisition.isResult());

			// to return req from buyers desk
			flag = FlowBuyersDeskListing.returnRequisitionFromBuyersDesk(driver, testCaseName, requisition, true);
			assertTrue("Pending Requisition was not returned", flag);

			// edit req
			PageMyRequisition.clickOnActionBtnOfFirstReq(driver, testCaseName);
			ModalMyRequisitionActions.clickOnEditLink(driver, testCaseName);
			ActionBot.defaultHighSleep();

			ActionBot.scroll(driver, "400");
			flag = PageRequisitionCheckOut.isModifyWorkFlowSettingSelected(driver, testCaseName);
			assertTrue("'Modify workflow to add approvers' setting not retained on editing a returned requisition", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				if (forkingSettingFlag)
				{
					requisitionSettings.setEnableReqForking(false);
					requisitionSettings = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings);
				}
			}
			catch (Exception e)
			{
				logger.error("Exception occurred while changing Requisition setting to default value" + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
			}
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Category-PT-GL Map >> Checkout >> Change
	 * Company: Accounting details should be reset as per new Company selected
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_271409(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		String testCaseName = null;
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		User user = null;
		//RequisitionSettings requisitionSettings = new RequisitionSettings();
		GLMap glMapC1P1GLAcc1Company1 = new GLMap();
		GLMap glMapC1P2GLAcc2Company1 = new GLMap();
		GLMap glMapC1AnyPurchaseTypeGLAcc3Company1 = new GLMap();
		GLMap glMapC2P2GLAcc1Company1 = new GLMap();
		GLMap glMapC2P1GLAcc2Company1 = new GLMap();
		GLMap glMapC2AnyPurchaseTypeGLAcc3Company1 = new GLMap();
		GLMap glMapC2AnyPurchaseTypeGLAcc5Company2 = new GLMap();
		GuidedItem guidedItem = new GuidedItem();
		List<GuidedItem> guidedItems = new ArrayList<GuidedItem>();
		Item item = new Item();
		String purchaseTypeName, defaultedGLAccount, itemId, errorMsg = "";
		boolean flag = false, flag1 = false, flag2 = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_291867"));//0
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_271406"));//1
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_271393"));//2
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_271396"));//3
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_292170"));//4
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_271395"));//5
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_271394"));//6
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_271397"));//7
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_271407"));//8
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_271398"));//9
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_271399"));//10
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_271405"));//11
			}
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();
			// AllowRequesterToOverrideDefaultGLAccount
			//requisitionSettings.setAllowRequesterToOverrideDefaultGLAccountOption(IConstants.YES);

			// to change req settings
			//requisitionSettings = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings);

			// GL Maps

			//for 2. existing PT1, GL account1 , Category 1	: Passenger transport,Automation_PT,Any,0,GLTYPE001,Automation_GL,Automation_Company1
			glMapC1P1GLAcc1Company1 = ObjectCreation.getGLMapObject(IConstantsData.Category1_PurchaseType1_AnyCC_Amount_GLType1_GLAccount1_Company1);

			//for 3. select other PT2, GL ACC2	, Category 1 : Passenger transport,Automation_Other_PT,Any,0,GLTYPE002,Automation_Other_GL2,Automation_Company1			
			glMapC1P2GLAcc2Company1 = ObjectCreation.getGLMapObject(IConstantsData.Category1_PurchaseType2_AnyCC_Amount_GLType2_GLAccount2_Company1);

			//for 1. NO PT ,default GL account , Category 1	: Passenger transport,Automation_Other_PT,Any,0,GLTYPE002,Automation_Other_GL2,Automation_Company1
			glMapC1AnyPurchaseTypeGLAcc3Company1 = ObjectCreation.getGLMapObject(IConstantsData.Category1_AnyPurchaseType_AnyCC_Amount_GLType3_GLAccount3_Company1);

			// : Vehicle rental,Automation_Other_PT,Any,0,GLTYPE001,Automation_GL,Automation_Company1
			glMapC2P2GLAcc1Company1 = ObjectCreation.getGLMapObject(IConstantsData.Category2_PurchaseType2_AnyCC_Amount_GLType1_GLAccount1_Company1);

			// : Vehicle rental,Automation_PT,Any,0,GLTYPE002,Automation_GL2,Automation_Company
			glMapC2P1GLAcc2Company1 = ObjectCreation.getGLMapObject(IConstantsData.Category2_PurchaseType1_AnyCC_Amount_GLType2_GLAccount2_Company1);

			// : Vehicle rental,Automation_PT,Any,0,GLTYPE003,Automation_GL3,Automation_Company1
			glMapC2AnyPurchaseTypeGLAcc3Company1 = ObjectCreation.getGLMapObject(IConstantsData.Category2_AnyPurchaseType_AnyCC_Amount_GLType3_GLAccount3_Company1);

			// : Category2,AnyPurchaseType,AnyCC,Amount,GLType2,GLAccount5,Company2
			glMapC2AnyPurchaseTypeGLAcc5Company2 = ObjectCreation.getGLMapObject(IConstantsData.Category2_AnyPurchaseType_AnyCC_Amount_GLType2_GLAccount5_Company2);

			// guided item with specified category
			guidedItem = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.EXISTING_SUPPLIER);
			ModalGuidedItemSelectCategory categoryModal = new ModalGuidedItemSelectCategory();
			categoryModal.setCategory(glMapC1P1GLAcc1Company1.getCategory());
			guidedItem.setCategory(categoryModal);

			guidedItems.add(guidedItem);
			item.setGuidedItems(guidedItems);

			// Online store tab
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			// to add item and checkout
			item = FlowRequisition.addItemAndCheckout(driver, testCaseName, item);

			/**
			 * RTC_291867 : Verify When multiple Purchase types are present in
			 * master; Purchase type should NOT be defaulted in Requisition
			 * checkout page
			 **/
			purchaseTypeName = PageRequisitionCheckOut.getSelectedPurchaseType(driver, testCaseName);
			flag = purchaseTypeName.equalsIgnoreCase(IConstantsData.SELECT_OPTION_DEFAULT_VALUE);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(0),
				"Purchase type was not defaulted to '--Select--', when multiple Purchase types are present in master ");

			itemId = item.getGuidedItems().get(0).getItemID();

			/**
			 * RTC_271406 : Category-PT-GL Map >> Checkout >> Accounting details
			 * should be defaulted with maps having Purchase Type as *
			 * (recursively) when Purchase Type is not selected.
			 **/
			ActionBot.scroll(driver, "400");
			PageRequisitionCheckOut.clickExpandAll(driver, testCaseName);
			itemId = PageRequisitionCheckOut.getItemId(driver, testCaseName, guidedItem.getShortDescription());

			defaultedGLAccount = PageRequisitionCheckOut.getGLAccountInfoInExpandAll(driver, testCaseName);
			//			defaultedGLAccount = CommonUtilities.getProperGLAccount(defaultedGLAccount);
			flag1 = defaultedGLAccount.equalsIgnoreCase("-");
			errorMsg = "GL Account defaulted when Purchase Type is Any ('--Select--') ";
			CommonServices.setMappedTestCaseResult(flag1, mappedTestCases.get(1), errorMsg);

			/**
			 * RTC_271393 : Category-PT-GL Map >> Checkout >> Accounting details
			 * should be defaulted recursively.
			 **/
			/**
			 * RTC_271396 : Category-PT-GL Map &gt;&gt; Checkout &gt;&gt;
			 * Accounting details should be changed on clicking Yes button post
			 * Purchase Type Change.
			 **/
			/**
			 * RTC_292170 : Verify If purchase type is loaded in the
			 * REQUISITION, GL will be defaulted also taking into consideration
			 * the purchase type.
			 **/
			ActionBot.scroll(driver, "400");
			PageRequisitionCheckOut.clickExpandAll(driver, testCaseName);

			defaultedGLAccount = PageRequisitionCheckOut.getAccountingInExpandAll(driver, testCaseName, itemId);
			//			defaultedGLAccount = CommonUtilities.getProperGLAccount(defaultedGLAccount);
			flag1 = defaultedGLAccount.equalsIgnoreCase("-");
			errorMsg = "GL Account  defaulted when Purchase Type is Any ('--Select--') ";

			// 2.  select purchase type P1 , category 1

			List<GLMap> glMaps = new ArrayList<>();
			glMaps.add(glMapC1AnyPurchaseTypeGLAcc3Company1);
			glMaps.add(glMapC2AnyPurchaseTypeGLAcc3Company1);
			glMaps.add(glMapC2AnyPurchaseTypeGLAcc5Company2);
			glMaps.add(glMapC1P1GLAcc1Company1);
			glMaps.add(glMapC1P2GLAcc2Company1);
			glMaps.add(glMapC2P1GLAcc2Company1);
			glMaps.add(glMapC2P2GLAcc1Company1);

			// list of Purchase Type 1 related GL Accounts nad Category 1
			List<String> PT1_C1_GLAccounts = new ArrayList<>();
			for (int i = 0; i < glMaps.size(); i++)
				if (glMaps.get(i).getPurchaseType().equalsIgnoreCase(glMapC1P1GLAcc1Company1.getPurchaseType())
					&& glMaps.get(i).getCategory().equalsIgnoreCase(glMapC1P1GLAcc1Company1.getCategory()))
					PT1_C1_GLAccounts.add(glMaps.get(i).getGlAccount());

			PageRequisitionCheckOut.selectPurchaseType(driver, testCaseName, glMapC1P1GLAcc1Company1.getPurchaseType());
			// override gl account
			FlowRequisition.overrideGLAccount(driver, testCaseName, true);

			defaultedGLAccount = PageRequisitionCheckOut.getAccountingInExpandAll(driver, testCaseName, itemId);
			defaultedGLAccount = CommonUtilities.getProperGLAccount(defaultedGLAccount);

			for (int i = 0; i < PT1_C1_GLAccounts.size(); i++)
				if (defaultedGLAccount.equalsIgnoreCase(PT1_C1_GLAccounts.get(i)))
					flag2 = true;

			flag = flag1 && flag2;
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(2), errorMsg + "Accounting details was not changed on clicking Yes button post Purchase Type Change.");
			CommonServices.setMappedTestCaseResult(flag2, mappedTestCases.get(3), "Accounting details was not changed on clicking Yes button post Purchase Type Change.");
			CommonServices.setMappedTestCaseResult(flag2, mappedTestCases.get(4), "Accounting details was not changed on Purchase Type Change.");

			/**
			 * RTC_271395 : Category-PT-GL Map &gt;&gt; Checkout &gt;&gt;
			 * Accounting details should be retained on clicking No button post
			 * Purchase Type Change.
			 **/

			// 3. select purchase type P2, category 1		
			// change purchase type

			// list of Purchase Type 1 related GL Accounts and category 1
			List<String> PT2_C1_GLAccounts = new ArrayList<>();
			for (int i = 0; i < glMaps.size(); i++)
				if (glMaps.get(i).getPurchaseType().equalsIgnoreCase(glMapC1P2GLAcc2Company1.getPurchaseType())
					&& glMaps.get(i).getCategory().equalsIgnoreCase(glMapC1P2GLAcc2Company1.getCategory()))
					PT2_C1_GLAccounts.add(glMaps.get(i).getGlAccount());

			PageStandardPO.enterPurchaseType(driver, glMapC1P2GLAcc2Company1.getPurchaseType());
			// dont override gl account
			FlowRequisition.overrideGLAccount(driver, testCaseName, false);
			ActionBot.scroll(driver, "400");

			defaultedGLAccount = PageRequisitionCheckOut.getAccountingInExpandAll(driver, testCaseName, itemId);
			logger.info("@@@defaultedGLAccount" + defaultedGLAccount + "@@@");
			defaultedGLAccount = CommonUtilities.getProperGLAccount(defaultedGLAccount);

			logger.info("@@@defaultedGLAccount" + defaultedGLAccount + "@@@");

			flag = defaultedGLAccount.equalsIgnoreCase(glMapC1P1GLAcc1Company1.getGlAccount()) && !defaultedGLAccount.equalsIgnoreCase(glMapC1P2GLAcc2Company1.getGlAccount());

			logger.info("@@@ gl acc 1" + glMapC1P1GLAcc1Company1.getGlAccount() + "@@@");
			logger.info("@@@ gl acc 1" + glMapC1P2GLAcc2Company1.getGlAccount() + "@@@");
			logger.info("flag :" + flag);

			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(5), "Accounting details was not retained on clicking No button post Purchase Type Change.");

			// 4. category change: Category 2 , it should lead to P1(default PT)
			/**
			 * RTC_271394 : Category-PT-GL Map >> Checkout >> Accounting details
			 * should be redefaulted on Category change.
			 **/

			List<String> PT2_C2_GLAccounts = new ArrayList<>();
			for (int i = 0; i < glMaps.size(); i++)
				if (glMaps.get(i).getPurchaseType().equalsIgnoreCase(glMapC2P2GLAcc1Company1.getPurchaseType())
					&& glMaps.get(i).getCategory().equalsIgnoreCase(glMapC2P2GLAcc1Company1.getCategory()))
					PT2_C2_GLAccounts.add(glMaps.get(i).getGlAccount());

			// view item details
			FlowRequisition.viewItemDetails(driver, testCaseName, itemId);
			// change category
			GuidedItem guidedItem2 = new GuidedItem();
			ModalGuidedItemSelectCategory guidedItemSelectCategory = new ModalGuidedItemSelectCategory();
			guidedItemSelectCategory.setCategory(glMapC2P2GLAcc1Company1.getCategory());
			guidedItem2.setCategory(guidedItemSelectCategory);
			guidedItem2.setNextAction(IConstantsData.SAVE);

			guidedItem2 = FlowRequisition.changeGuidedItemDetailsOnCheckoutPage(driver, testCaseName, guidedItem2);
			//Automation_Other_GL2code
			defaultedGLAccount = PageRequisitionCheckOut.getAccountingInExpandAll(driver, testCaseName, itemId);
			defaultedGLAccount = CommonUtilities.getProperGLAccount(defaultedGLAccount);

			//			for (int i = 0; i < PT2_C2_GLAccounts.size(); i++)
			//				if (defaultedGLAccount.equalsIgnoreCase(PT2_C2_GLAccounts.get(i)))
			//					flag = true;

			flag = defaultedGLAccount.equalsIgnoreCase(glMapC1P1GLAcc1Company1.getGlAccount());

			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(6), "Accounting details was not redefaulted on Category change.");

			/**
			 * RTC_271397 : Category-PT-GL Map >> Checkout >> Accounting details
			 * should be redefaulted automatically on PT change.
			 **/
			/**
			 * RTC_271407 : Category-PT-GL Map >> Checkout >> Accounting details
			 * should be defaulted from Cat-PT-GL map configured for document
			 * company.
			 **/

			//5. category 2, select PT1, it hsould get GL ACC1			
			// change purchase type

			List<String> PT1_C2_GLAccounts = new ArrayList<>();
			for (int i = 0; i < glMaps.size(); i++)
				if (glMaps.get(i).getPurchaseType().equalsIgnoreCase(glMapC2P1GLAcc2Company1.getPurchaseType())
					&& glMaps.get(i).getCategory().equalsIgnoreCase(glMapC2P1GLAcc2Company1.getCategory()))
					PT1_C2_GLAccounts.add(glMaps.get(i).getGlAccount());

			PageRequisitionCheckOut.selectPurchaseType(driver, testCaseName, glMapC2P1GLAcc2Company1.getPurchaseType());
			// dont override gl account
			FlowRequisition.overrideGLAccount(driver, testCaseName, true);
			ActionBot.scroll(driver, "400");

			defaultedGLAccount = PageRequisitionCheckOut.getAccountingInExpandAll(driver, testCaseName, itemId);
			defaultedGLAccount = CommonUtilities.getProperGLAccount(defaultedGLAccount);
			flag = defaultedGLAccount.equalsIgnoreCase(glMapC2P1GLAcc2Company1.getGlAccount());
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(7), "Accounting details was not redefaulted on PT change.");
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(8), "Accounting details should be defaulted from Cat-PT-GL map configured for document company.");

			/**
			 * RTC_271398 : Category-PT-GL Map &gt;&gt; Checkout &gt;&gt; User
			 * should be able to select all the GL Types and Accounts.
			 **/
			/**
			 * RTC_271399 : Category-PT-GL Map &gt;&gt; Checkout &gt;&gt; User
			 * should be able to select only GL Types\Accounts coming from
			 * Defaulting maps [Defaulting Maps are those where Category is not
			 * *]
			 **/
			// check available gl accounts
			PageRequisitionCheckOut.clickEditItemSummary(driver, testCaseName, itemId);
			TabCheckoutItemSummary.clickItemSummaryCostBookingTab(driver, testCaseName);
			ModelItemSummaryCostBooking.clearGLAccounts(driver, testCaseName, itemId, 0);

			List<String> availableGlAccounts = ModelItemSummaryCostBooking.getListOfNamesAvailableGLAccounts(driver, testCaseName);
			ModelItemSummaryCommon.clickItemSummaryCancle(driver, testCaseName);

			//6. in dropdown all GL of PT1 should come (checking for 3)			
			flag = false;
			for (String glAccount : availableGlAccounts)
			{
				if (glAccount != null)
				{
					for (int i = 0; i < PT1_C2_GLAccounts.size(); i++)
					{
						glAccount = CommonUtilities.getProperGLAccount(glAccount);
						if (glAccount != null)
						{
							if (glAccount.equalsIgnoreCase(PT1_C2_GLAccounts.get(i)))
							{
								flag = true;
							}
							else if (glAccount.length() != 0)
							{
								flag = true;
							}
						}
					}
				}
			}
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(9), "User should was not able to select all the GL Accounts.");
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(10),
				"User should was not able to select only Accounts coming from Defaulting maps [Defaulting Maps are those where Category is not *]");

			/**
			 * RTC_271405 : Category-PT-GL Map &gt;&gt; Checkout &gt;&gt; Change
			 * Multiple should have all GL Types and Accounts available for
			 * selection.
			 **/

			//7. in change multiple all the GL should be present	
			if (ActionBot.isElementDisplayed(driver, IPageRequisitionCheckOut.CHECKBOX_ALL_ITEMS))
			{
				ActionBot.click(driver, IPageRequisitionCheckOut.CHECKBOX_ALL_ITEMS);
			}

			PageRequisitionCheckOut.clickChangeMultiple(driver, testCaseName);
			ModelChangeMultiple.clearChangeMultipleGLAccount(driver, testCaseName);
			availableGlAccounts = ModelChangeMultiple.getListOfNamesAvailableGLAccounts(driver, testCaseName);
			flag = false;

			for (String glAccount1 : availableGlAccounts)
			{
				if (glAccount1 != null)
				{
					glAccount1 = CommonUtilities.getProperGLAccount(glAccount1);
					if (glAccount1 != null)
					{
						for (int i = 0; i < PT1_C2_GLAccounts.size(); i++)
							if (glAccount1.equalsIgnoreCase(PT1_C2_GLAccounts.get(i)))
							{
								flag = true;
							}
							else if (glAccount1.length() != 0)
							{
								flag = true;
							}
					}
				}
			}

			errorMsg = "Change Multiple not has all the GL Accounts available for selection.";

			//8. fill any GL (GL2)			
			ModelChangeMultiple.fillChangeMultipleGLAccount(driver, testCaseName, glMapC2P1GLAcc2Company1.getGlAccount());
			ModelChangeMultiple.clickChangeMultipleApply(driver, testCaseName);

			FlowRequisition.overrideGLAccount(driver, testCaseName, true);
			ActionBot.scroll(driver, "400");

			defaultedGLAccount = PageRequisitionCheckOut.getGLAccountInfoInExpandAll(driver, testCaseName);
			defaultedGLAccount = CommonUtilities.getProperGLAccount(defaultedGLAccount);
			flag1 = defaultedGLAccount.equalsIgnoreCase(glMapC2P1GLAcc2Company1.getGlAccount());
			CommonServices.setMappedTestCaseResult(flag && flag1, mappedTestCases.get(11),
				errorMsg + "Wrong Accounting details shown after changing GL Accounts from Change Multiple");

			/**
			 * RTC_271409 : Category-PT-GL Map >> Checkout >> Change Company:
			 * Accounting details should be reset as per new Company selected
			 **/
			CustomDate customDate = CommonUtilities.getTodaysDate();
			// required by date
			PageRequisitionCheckOut.selectRequiredByDate(driver, testCaseName, customDate.getDay(), customDate.getMonth(), customDate.getYear());

			BillingRequisitionSummary billingRequisitionSummary = new BillingRequisitionSummary();
			billingRequisitionSummary.setCompany(glMapC2AnyPurchaseTypeGLAcc5Company2.getCompany());
			//billingRequisitionSummary.setCompany(CommonServices.getTestData(IConstantsData.ORGANIZATION_UNIT_OR_COMPANY_NAME));
			billingRequisitionSummary.setBusinessUnit(CommonServices.getTestData(IConstantsData.Other_BusinessUnit));
			billingRequisitionSummary.setLocation(CommonServices.getTestData(IConstantsData.LOCATION_NAME));
			billingRequisitionSummary.setNextAction(IConstantsData.NONE);

			PageRequisitionCheckOut.clickEditHeaderInfo(driver, testCaseName);
			TabCheckoutReqSummary.clickBillingTab(driver, testCaseName);
			billingRequisitionSummary = FlowRequisition.fillBillingRequisitionSummary(driver, testCaseName, billingRequisitionSummary);

			CostBookingRequisitionSummary costBookingRequisitionSummary = ObjectCreation.getDefaultObjectOfCostBookingOfOtherCompany();
			TabCheckoutReqSummary.clickCostBookingTab(driver, testCaseName);
			FlowRequisition.fillCostBookingRequisitionSummary(driver, testCaseName, costBookingRequisitionSummary);

			ActionBot.scroll(driver, "400");

			defaultedGLAccount = PageRequisitionCheckOut.getAccountingInExpandAll(driver, testCaseName, itemId);
			defaultedGLAccount = CommonUtilities.getProperGLAccount(defaultedGLAccount);
			flag = defaultedGLAccount.equalsIgnoreCase(glMapC2AnyPurchaseTypeGLAcc5Company2.getGlAccount());
			assertTrue("Accounting details was not reset as per new Company selected", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Category-PT-GL Map >> Edit Requisition >>
	 * Change Company: Accounting details should be reset as per new Company
	 * selected <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_271427(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		String testCaseName = null;
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		User user = null;
		//RequisitionSettings requisitionSettings = new RequisitionSettings();
		GLMap glMapC1P1GLAcc1Company1 = new GLMap();
		GLMap glMapC1P2GLAcc2Company1 = new GLMap();
		GLMap glMapC1AnyPurchaseTypeGLAcc3Company1 = new GLMap();
		GLMap glMapC2P2GLAcc1Company1 = new GLMap();
		GLMap glMapC2P1GLAcc2Company1 = new GLMap();
		//GLMap glMapC2AnyPurchaseTypeGLAcc3Company1 = new GLMap();
		GLMap glMapC2AnyPurchaseTypeGLAcc5Company2 = new GLMap();
		GuidedItem guidedItem = new GuidedItem();
		List<GuidedItem> guidedItems = new ArrayList<GuidedItem>();
		Item item = new Item();
		String defaultedGLAccount, itemId, itemId1, errorMsg = "", status = null;
		boolean flag = false, flag1 = false, flag2 = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_271424"));//0
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_271411"));//1
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_271414"));//2
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_271413"));//3
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_271412"));//4
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_271415"));//5
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_271426"));//6
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_271416"));//7
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_271434"));//8
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_271417"));//9
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_271421"));//10
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_271509"));//11
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_289277"));//12
			}
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();
			// AllowRequesterToOverrideDefaultGLAccount
			//requisitionSettings.setAllowRequesterToOverrideDefaultGLAccountOption(IConstants.YES);

			// to change req settings
			//requisitionSettings = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings);

			// GL Maps
			//Passenger transport,Test_PurchaseType,Any,0,GLTYPE008,Automation_GL,Automation_Company1
			glMapC1P1GLAcc1Company1 = ObjectCreation.getGLMapObject(IConstantsData.Category1_PurchaseType1_AnyCC_Amount_GLType1_GLAccount1_Company1);
			glMapC1P2GLAcc2Company1 = ObjectCreation.getGLMapObject(IConstantsData.Category1_PurchaseType2_AnyCC_Amount_GLType2_GLAccount2_Company1);
			glMapC1AnyPurchaseTypeGLAcc3Company1 = ObjectCreation.getGLMapObject(IConstantsData.Category1_AnyPurchaseType_AnyCC_Amount_GLType3_GLAccount3_Company1);
			glMapC2P2GLAcc1Company1 = ObjectCreation.getGLMapObject(IConstantsData.Category2_PurchaseType2_AnyCC_Amount_GLType1_GLAccount1_Company1);
			glMapC2P1GLAcc2Company1 = ObjectCreation.getGLMapObject(IConstantsData.Category2_PurchaseType1_AnyCC_Amount_GLType2_GLAccount2_Company1);
			//	glMapC2AnyPurchaseTypeGLAcc3Company1 = ObjectCreation.getGLMapObject(IConstantsData.Category2_AnyPurchaseType_AnyCC_Amount_GLType3_GLAccount3_Company1);
			glMapC2AnyPurchaseTypeGLAcc5Company2 = ObjectCreation.getGLMapObject(IConstantsData.Category2_AnyPurchaseType_AnyCC_Amount_GLType2_GLAccount5_Company2);

			List<GLMap> glMaps = new ArrayList<>();
			glMaps.add(glMapC1AnyPurchaseTypeGLAcc3Company1);
			//	glMaps.add(glMapC2AnyPurchaseTypeGLAcc3Company1);
			glMaps.add(glMapC2AnyPurchaseTypeGLAcc5Company2);
			glMaps.add(glMapC1P1GLAcc1Company1);
			glMaps.add(glMapC1P2GLAcc2Company1);
			glMaps.add(glMapC2P1GLAcc2Company1);
			glMaps.add(glMapC2P2GLAcc1Company1);

			// list of ( Purchase Type 1, Category 1 ,Company 1) GL accounts
			List<String> PT1_C1_Company1_GLAccounts = new ArrayList<>();
			for (int i = 0; i < glMaps.size(); i++)
				if (glMaps.get(i).getPurchaseType().equalsIgnoreCase(glMapC1P1GLAcc1Company1.getPurchaseType())
					&& glMaps.get(i).getCategory().equalsIgnoreCase(glMapC1P1GLAcc1Company1.getCategory())
					&& glMaps.get(i).getCompany().equalsIgnoreCase(glMapC1P1GLAcc1Company1.getCompany()))
					PT1_C1_Company1_GLAccounts.add(glMaps.get(i).getGlAccount());

			// list of ( Purchase Type 1, Category 2 ,Company 1) GL accounts
			List<String> PT1_C2_Company1_GLAccounts = new ArrayList<>();
			for (int i = 0; i < glMaps.size(); i++)
				if (glMaps.get(i).getPurchaseType().equalsIgnoreCase(glMapC2P1GLAcc2Company1.getPurchaseType())
					&& glMaps.get(i).getCategory().equalsIgnoreCase(glMapC2P1GLAcc2Company1.getCategory())
					&& glMaps.get(i).getCompany().equalsIgnoreCase(glMapC2P1GLAcc2Company1.getCompany()))
					PT1_C2_Company1_GLAccounts.add(glMaps.get(i).getGlAccount());

			// list of ( Purchase Type 2, Category 1 ,Company 1) GL accounts
			List<String> PT2_C1_Company1_GLAccounts = new ArrayList<>();
			for (int i = 0; i < glMaps.size(); i++)
				if (glMaps.get(i).getPurchaseType().equalsIgnoreCase(glMapC1P2GLAcc2Company1.getPurchaseType())
					&& glMaps.get(i).getCategory().equalsIgnoreCase(glMapC1P2GLAcc2Company1.getCategory())
					&& glMaps.get(i).getCompany().equalsIgnoreCase(glMapC1P1GLAcc1Company1.getCompany()))
					PT2_C1_Company1_GLAccounts.add(glMaps.get(i).getGlAccount());

			// guided item with specified category
			guidedItem = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.EXISTING_SUPPLIER);
			ModalGuidedItemSelectCategory categoryModal = new ModalGuidedItemSelectCategory();
			categoryModal.setCategory(glMapC1P1GLAcc1Company1.getCategory());
			guidedItem.setCategory(categoryModal);

			guidedItems.add(guidedItem);
			item.setGuidedItems(guidedItems);

			Requisition requisition = ObjectCreation.getRequisition(driver);
			requisition.setItems(item);
			requisition.setNextAction(IConstantsData.SAVE_AS_DRAFT_REQ);

			// Online store tab
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			// create req
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// to search req

			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			assertTrue("Requisition was not searched in my requisition tab", requisition.isResult());

			// check status of req
			status = PageMyRequisition.getStatusOfFirstReq(driver, testCaseName);
			assertTrue("Status of requisition was wrong, it should be Draft", status.equalsIgnoreCase(IConstantsData.DRAFT_FILTER_LABEL));

			// edit the req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);

			/**
			 * RTC_271424 : Category-PT-GL Map >> Edit Requisition >> Accounting
			 * details should be defaulted with maps having Purchase Type as *
			 * (recursively) when Purchase Type is not selected.
			 **/

			//1. not selecting any PT - should not have aby GL account ( - ) : category 1		
			// changing pt to default value
			PageRequisitionCheckOut.selectPurchaseType(driver, testCaseName, IConstantsData.SELECT_OPTION_DEFAULT_VALUE);
			// override gl account
			FlowRequisition.overrideGLAccount(driver, testCaseName, true);

			itemId = item.getGuidedItems().get(0).getItemID();

			ActionBot.scroll(driver, "400");
			PageRequisitionCheckOut.clickExpandAll(driver, testCaseName);

			defaultedGLAccount = PageRequisitionCheckOut.getAccountingInExpandAll(driver, testCaseName, itemId);
			//defaultedGLAccount = CommonUtilities.getProperGLAccount(defaultedGLAccount);
			flag1 = defaultedGLAccount.equalsIgnoreCase("-");
			errorMsg = "GL Account not defaulted when Purchase Type is Any";
			CommonServices.setMappedTestCaseResult(flag1, mappedTestCases.get(0), errorMsg);

			/**
			 * RTC_271411 : Category-PT-GL Map >> Edit Requisition >> Accounting
			 * details should be defaulted recursively
			 **/
			/**
			 * RTC_271414 : Category-PT-GL Map &gt;&gt; Edit Requisition
			 * &gt;&gt; Accounting details should be changed on clicking Yes
			 * button post Purchase Type Change.
			 **/

			// 2. select Purchase Type: PT1 , category 1			
			// select purchase type
			PageRequisitionCheckOut.selectPurchaseType(driver, testCaseName, glMapC1P1GLAcc1Company1.getPurchaseType());
			// override gl account
			FlowRequisition.overrideGLAccount(driver, testCaseName, true);
			ActionBot.scroll(driver, "400");

			defaultedGLAccount = PageRequisitionCheckOut.getAccountingInExpandAll(driver, testCaseName, itemId);
			defaultedGLAccount = CommonUtilities.getProperGLAccount(defaultedGLAccount);

			PageRequisitionCheckOut.selectPurchaseType(driver, testCaseName, glMapC1P1GLAcc1Company1.getPurchaseType());
			// override gl account
			FlowRequisition.overrideGLAccount(driver, testCaseName, true);
			//Automation_GL
			defaultedGLAccount = PageRequisitionCheckOut.getAccountingInExpandAll(driver, testCaseName, itemId);
			defaultedGLAccount = CommonUtilities.getProperGLAccount(defaultedGLAccount);

			flag2 = defaultedGLAccount.equalsIgnoreCase(glMapC1P1GLAcc1Company1.getGlAccount());

			flag = flag1 && flag2;
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(1), errorMsg + "Accounting details was not changed on clicking Yes button post Purchase Type Change.");
			CommonServices.setMappedTestCaseResult(flag2, mappedTestCases.get(2), "Accounting details was not changed on clicking Yes button post Purchase Type Change.");

			/**
			 * RTC_271413 : Category-PT-GL Map &gt;&gt; Edit Requisition
			 * &gt;&gt; Accounting details should be retained on clicking No
			 * button post Purchase Type Change.
			 **/
			// 3. change Purchase type : PT2			
			// change purchase type : PT2
			//PageRequisitionCheckOut.selectPurchaseType(driver, testCaseName, glMapC1P2GLAcc2Company1.getPurchaseType());
			// dont override gl account
			PageStandardPO.enterPurchaseType(driver, glMapC1P2GLAcc2Company1.getPurchaseType());
			FlowRequisition.overrideGLAccount(driver, testCaseName, false);
			ActionBot.scroll(driver, "400");
			//Automation_Other_GL_2
			defaultedGLAccount = PageRequisitionCheckOut.getAccountingInExpandAll(driver, testCaseName, itemId);
			defaultedGLAccount = CommonUtilities.getProperGLAccount(defaultedGLAccount);

			flag = defaultedGLAccount.equalsIgnoreCase(glMapC1P1GLAcc1Company1.getGlAccount()) && !defaultedGLAccount.equalsIgnoreCase(glMapC1P2GLAcc2Company1.getGlAccount());

			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(3), "Accounting details was not retained on clicking No button post Purchase Type Change.");

			/**
			 * RTC_271412 : Category-PT-GL Map >> Edit Requisition >> Accounting
			 * details should be redefaulted on Category change
			 **/
			// view item details
			FlowRequisition.viewItemDetails(driver, testCaseName, itemId);

			// 4.  change category : category 2
			GuidedItem guidedItem2 = new GuidedItem();
			ModalGuidedItemSelectCategory guidedItemSelectCategory = new ModalGuidedItemSelectCategory();
			guidedItemSelectCategory.setCategory(glMapC2P1GLAcc2Company1.getCategory());
			guidedItem2.setCategory(guidedItemSelectCategory);
			guidedItem2.setNextAction(IConstantsData.SAVE);

			guidedItem2 = FlowRequisition.changeGuidedItemDetailsOnCheckoutPage(driver, testCaseName, guidedItem2);

			defaultedGLAccount = PageRequisitionCheckOut.getAccountingInExpandAll(driver, testCaseName, itemId);
			defaultedGLAccount = CommonUtilities.getProperGLAccount(defaultedGLAccount);
			flag = defaultedGLAccount.equalsIgnoreCase(glMapC1P1GLAcc1Company1.getGlAccount());

			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(4), "Accounting details was not redefaulted on Category change.");

			/**
			 * RTC_271415 : Category-PT-GL Map >> Edit Requisition >> Accounting
			 * details should be redefaulted automatically on PT change.
			 **/
			/**
			 * RTC_271426 : Category-PT-GL Map >> Edit Requisition >> Accounting
			 * details should be defaulted from Cat-PT-GL map configured for
			 * document company.
			 **/

			// 5.  change purchase type : PT1 ,category 2 ,company 1
			PageRequisitionCheckOut.selectPurchaseType(driver, testCaseName, glMapC2P1GLAcc2Company1.getPurchaseType());
			// dont override gl account
			FlowRequisition.overrideGLAccount(driver, testCaseName, true);
			ActionBot.scroll(driver, "400");

			defaultedGLAccount = PageRequisitionCheckOut.getAccountingInExpandAll(driver, testCaseName, itemId);
			defaultedGLAccount = CommonUtilities.getProperGLAccount(defaultedGLAccount);
			flag = defaultedGLAccount.equalsIgnoreCase(glMapC2P1GLAcc2Company1.getGlAccount());
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(5), "Accounting details not redefaulted automatically on PT change.");
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(6), "Accounting details should be defaulted from Cat-PT-GL map configured for document company.");

			/**
			 * RTC_271416 : Category-PT-GL Map &gt;&gt; Edit Requisition
			 * &gt;&gt; User should be able to select all the GL Types and
			 * Accounts.
			 **/
			/**
			 * RTC_271434 : Category-PT-GL Map &gt;&gt; Edit Requisition
			 * &gt;&gt; Override Setting Change: All GL Types and accounts
			 * should be allowed for selection on setting change [No To Yes]
			 **/
			/**
			 * RTC_271417 : Category-PT-GL Map &gt;&gt; Edit Requisition
			 * &gt;&gt; User should be able to select only GL Types\Accounts
			 * coming from Defaulting maps [Defaulting Maps are those where
			 * Category is not *]
			 **/

			// 6. check available gl accounts
			PageRequisitionCheckOut.clickEditItemSummary(driver, testCaseName, itemId);
			TabCheckoutItemSummary.clickItemSummaryCostBookingTab(driver, testCaseName);
			ModelItemSummaryCostBooking.clearGLAccounts(driver, testCaseName, itemId, 0);

			List<String> availableGlAccounts = ModelItemSummaryCostBooking.getListOfNamesAvailableGLAccounts(driver, testCaseName);
			ModelItemSummaryCommon.clickItemSummaryCancle(driver, testCaseName);

			flag = false;
			for (String glAccount : availableGlAccounts)
			{
				if (glAccount != null)
				{
					for (String gLAcc : PT1_C2_Company1_GLAccounts)
					{
						glAccount = CommonUtilities.getProperGLAccount(glAccount);
						if (glAccount != null)
						{
							if (glAccount.equalsIgnoreCase(gLAcc))
							{
								flag = true;
							}
							else if (glAccount.length() != 0)
							{
								flag = true;
							}
						}
					}
				}
			}
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(7), "User  was not able to select all the GL Accounts.");
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(8),
				"Override Setting Change: All GL Types and accounts was not allowed for selection on setting change  [No To Yes]");
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(9),
				"User should was not able to select only Accounts coming from Defaulting maps [Defaulting Maps are those where Category is not *]");

			// 7. change multiple list verification			
			/**
			 * RTC_271421 : Category-PT-GL Map &gt;&gt; Edit Requisition
			 * &gt;&gt; Change Multiple should have all GL Types and Accounts
			 * available for selection.
			 **/
			if (ActionBot.isElementDisplayed(driver, IPageRequisitionCheckOut.CHECKBOX_ALL_ITEMS))
			{
				ActionBot.click(driver, IPageRequisitionCheckOut.CHECKBOX_ALL_ITEMS);
			}
			PageRequisitionCheckOut.clickChangeMultiple(driver, testCaseName);
			ModelChangeMultiple.clearChangeMultipleGLAccount(driver, testCaseName);
			availableGlAccounts = ModelChangeMultiple.getListOfNamesAvailableGLAccounts(driver, testCaseName);
			flag = false;
			for (String glAccount : availableGlAccounts)
			{
				if (glAccount != null)
				{
					for (String gLAcc : PT1_C2_Company1_GLAccounts)
					{
						if (glAccount.equalsIgnoreCase(gLAcc))
						{
							flag = true;
						}
						else if (glAccount.length() != 0)
						{
							flag = true;
						}
					}
				}
			}
			errorMsg = "Change Multiple not has all the GL Accounts available for selection.";

			// 8. change multiple GL account should reflect in item GL account			
			ModelChangeMultiple.fillChangeMultipleGLAccount(driver, testCaseName, glMapC2P1GLAcc2Company1.getGlAccount());
			ModelChangeMultiple.clickChangeMultipleApply(driver, testCaseName);

			FlowRequisition.overrideGLAccount(driver, testCaseName, true);
			ActionBot.scroll(driver, "400");

			defaultedGLAccount = PageRequisitionCheckOut.getAccountingInExpandAll(driver, testCaseName, itemId);
			defaultedGLAccount = CommonUtilities.getProperGLAccount(defaultedGLAccount);
			flag1 = defaultedGLAccount.equalsIgnoreCase(glMapC2P1GLAcc2Company1.getGlAccount());
			CommonServices.setMappedTestCaseResult(flag && flag1, mappedTestCases.get(10),
				errorMsg + "Wrong Accounting details shown after changing GL Accounts from Change Multiple");

			/**
			 * RTC_271509 : Test for bug 222747 - Accounting details is blank
			 * when user adds new item inside a draft requisition, even though
			 * category-PT gl map is defined.
			 **/
			/**
			 * RTC_289277 : Test for bug 225019 - Requisition draft>>Accounting
			 * details are not defaulted when user Adds new item in draft
			 * requisition.
			 **/

			//9. add new item

			PageRequisitionCheckOut.clickAddItemOnCheckout(driver, testCaseName);
			// to save as draft
			PopUpDefaultConfirmation.clickOnConfirmYesButton(driver, testCaseName);

			ModalGuidedItemSelectCategory category = new ModalGuidedItemSelectCategory();
			category.setCategory(glMapC2P1GLAcc2Company1.getCategory());
			Item item2 = ObjectCreation.getItem(IConstantsData.GUIDED_ITEM);
			item2.getGuidedItems().get(0).setCategory(category);
			item2.setEmptyCart(false);

			// add item and checkout
			item2 = FlowRequisition.addItemAndCheckout(driver, testCaseName, item2);

			ActionBot.waitForPageLoad(driver);
			ActionBot.defaultSleep();
			itemId1 = item2.getGuidedItems().get(0).getItemID();

			ActionBot.scroll(driver, "400");
			PageRequisitionCheckOut.clickExpandAll(driver, testCaseName);

			// verify GL Accounts for newly added item
			defaultedGLAccount = PageRequisitionCheckOut.getAccountingInExpandAll(driver, testCaseName, itemId1);
			defaultedGLAccount = CommonUtilities.getProperGLAccount(defaultedGLAccount);
			flag1 = defaultedGLAccount.equalsIgnoreCase(glMapC2P1GLAcc2Company1.getGlAccount());

			// verify GL Accounts for already added item
			defaultedGLAccount = PageRequisitionCheckOut.getAccountingInExpandAll(driver, testCaseName, itemId);
			defaultedGLAccount = CommonUtilities.getProperGLAccount(defaultedGLAccount);
			flag = defaultedGLAccount.equalsIgnoreCase(glMapC2P1GLAcc2Company1.getGlAccount());

			errorMsg = "Accounting details is blank when user adds  new item inside a draft requisition";
			CommonServices.setMappedTestCaseResult(flag1 && flag, mappedTestCases.get(11), errorMsg);

			errorMsg = "Accounting details are not defaulted when user Adds new item in draft requisition.";
			CommonServices.setMappedTestCaseResult(flag1 && flag, mappedTestCases.get(12), errorMsg);

			/**
			 * RTC_271427 : Category-PT-GL Map >> Edit Requisition >> Change
			 * Company: Accounting details should be reset as per new Company
			 * selected
			 **/
			CustomDate customDate = CommonUtilities.getTodaysDate();
			// required by date
			PageRequisitionCheckOut.selectRequiredByDate(driver, testCaseName, customDate.getDay(), customDate.getMonth(), customDate.getYear());

			BillingRequisitionSummary billingRequisitionSummary = new BillingRequisitionSummary();
			billingRequisitionSummary.setCompany(glMapC2AnyPurchaseTypeGLAcc5Company2.getCompany());
			billingRequisitionSummary.setNextAction(IConstantsData.NONE);

			PageRequisitionCheckOut.clickEditHeaderInfo(driver, testCaseName);
			TabCheckoutReqSummary.clickBillingTab(driver, testCaseName);
			billingRequisitionSummary = FlowRequisition.fillBillingRequisitionSummary(driver, testCaseName, billingRequisitionSummary);

			CostBookingRequisitionSummary costBookingRequisitionSummary = ObjectCreation.getDefaultObjectOfCostBookingOfOtherCompany();
			TabCheckoutReqSummary.clickCostBookingTab(driver, testCaseName);
			FlowRequisition.fillCostBookingRequisitionSummary(driver, testCaseName, costBookingRequisitionSummary);

			ActionBot.scroll(driver, "400");

			defaultedGLAccount = PageRequisitionCheckOut.getAccountingInExpandAll(driver, testCaseName, itemId);
			defaultedGLAccount = CommonUtilities.getProperGLAccount(defaultedGLAccount);
			flag = defaultedGLAccount.equalsIgnoreCase(glMapC2AnyPurchaseTypeGLAcc5Company2.getGlAccount());
			assertTrue("Accounting details was not reset as per new Company selected", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Category-PT-GL Map >> Copy Requisition >>
	 * Change Company: Accounting details should be reset as per new Company
	 * selected <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_271461(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		String testCaseName = null;
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		User user = null;
		//RequisitionSettings requisitionSettings = new RequisitionSettings();
		GLMap glMapC1P1GLAcc1Company1 = new GLMap();
		GLMap glMapC1P2GLAcc2Company1 = new GLMap();
		GLMap glMapC1AnyPurchaseTypeGLAcc3Company1 = new GLMap();
		GLMap glMapC2P2GLAcc1Company1 = new GLMap();
		GLMap glMapC2P1GLAcc2Company1 = new GLMap();
		GLMap glMapC2AnyPurchaseTypeGLAcc3Company1 = new GLMap();
		GLMap glMapC2AnyPurchaseTypeGLAcc5Company2 = new GLMap();
		GuidedItem guidedItem = new GuidedItem();
		List<GuidedItem> guidedItems = new ArrayList<GuidedItem>();
		Item item = new Item();
		String defaultedGLAccount, itemId, errorMsg = "", status = null;
		boolean flag = false, flag1 = false, flag2 = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_271457"));//0
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_271437"));//1
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_271443"));//2
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_271441"));//3
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_271439"));//4
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_271445"));//5
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_271459"));//6
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_271448"));//7
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_271450"));//8
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_271455"));//9
			}
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();
			// AllowRequesterToOverrideDefaultGLAccount
			//requisitionSettings.setAllowRequesterToOverrideDefaultGLAccountOption(IConstants.YES);

			// to change req settings
			//requisitionSettings = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings);

			// GL Maps
			glMapC1P1GLAcc1Company1 = ObjectCreation.getGLMapObject(IConstantsData.Category1_PurchaseType1_AnyCC_Amount_GLType1_GLAccount1_Company1);
			glMapC1P2GLAcc2Company1 = ObjectCreation.getGLMapObject(IConstantsData.Category1_PurchaseType2_AnyCC_Amount_GLType2_GLAccount2_Company1);
			glMapC1AnyPurchaseTypeGLAcc3Company1 = ObjectCreation.getGLMapObject(IConstantsData.Category1_AnyPurchaseType_AnyCC_Amount_GLType3_GLAccount3_Company1);
			glMapC2P2GLAcc1Company1 = ObjectCreation.getGLMapObject(IConstantsData.Category2_PurchaseType2_AnyCC_Amount_GLType1_GLAccount1_Company1);
			glMapC2P1GLAcc2Company1 = ObjectCreation.getGLMapObject(IConstantsData.Category2_PurchaseType1_AnyCC_Amount_GLType2_GLAccount2_Company1);
			glMapC2AnyPurchaseTypeGLAcc3Company1 = ObjectCreation.getGLMapObject(IConstantsData.Category2_AnyPurchaseType_AnyCC_Amount_GLType3_GLAccount3_Company1);
			glMapC2AnyPurchaseTypeGLAcc5Company2 = ObjectCreation.getGLMapObject(IConstantsData.Category2_AnyPurchaseType_AnyCC_Amount_GLType2_GLAccount5_Company2);

			// guided item with specified category
			guidedItem = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.EXISTING_SUPPLIER);
			ModalGuidedItemSelectCategory categoryModal = new ModalGuidedItemSelectCategory();
			categoryModal.setCategory(glMapC1P1GLAcc1Company1.getCategory());
			guidedItem.setCategory(categoryModal);

			guidedItems.add(guidedItem);
			item.setGuidedItems(guidedItems);

			Requisition requisition = ObjectCreation.getRequisition(driver);
			requisition.setItems(item);

			// Online store tab
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			// create req
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// to search req 	
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			assertTrue("Requisition was not searched in my requisition tab", requisition.isResult());

			// check status of req
			status = PageMyRequisition.getStatusOfFirstReq(driver, testCaseName);
			assertTrue("Status of requisition was wrong, it should be In Approval", status.contains(IConstantsData.IN_APPROVAL_FILTER_LABEL));

			// copy the req
			FlowMyRequisitions.copyReq(driver, testCaseName, false);

			/**
			 * RTC_271457 : Category-PT-GL Map >> Copy Requisition >> Accounting
			 * details should be defaulted with maps having Purchase Type as *
			 * (recursively) when Purchase Type is not selected.
			 **/

			// 1. changing pt to default value
			PageRequisitionCheckOut.selectPurchaseType(driver, testCaseName, IConstantsData.SELECT_OPTION_DEFAULT_VALUE);
			// override gl account
			FlowRequisition.overrideGLAccount(driver, testCaseName, true);

			//itemId = item.getGuidedItems().get(0).getItemID();
			//guidedItem.setShortDescription("lcd<%^&$*>1521542458056567");
			ActionBot.scroll(driver, "400");
			PageRequisitionCheckOut.clickExpandAll(driver, testCaseName);
			itemId = PageRequisitionCheckOut.getItemId(driver, testCaseName, guidedItem.getShortDescription());

			defaultedGLAccount = PageRequisitionCheckOut.getGLAccountInfoInExpandAll(driver, testCaseName);
			flag1 = defaultedGLAccount.equalsIgnoreCase("-");
			errorMsg = "GL Account not defaulted when Purchase Type is Any";
			CommonServices.setMappedTestCaseResult(flag1, mappedTestCases.get(0), errorMsg);

			/**
			 * RTC_271437 : Category-PT-GL Map >> Copy Requisition >> Accounting
			 * details should be defaulted recursively
			 **/
			/**
			 * RTC_271443 : Category-PT-GL Map &gt;&gt; Copy Requisition
			 * &gt;&gt; Accounting details should be changed on clicking Yes
			 * button post Purchase Type Change.
			 **/

			// 2.  Company 1, select purchase type P1
			PageRequisitionCheckOut.selectPurchaseType(driver, testCaseName, glMapC1P1GLAcc1Company1.getPurchaseType());
			// override gl account
			FlowRequisition.overrideGLAccount(driver, testCaseName, true);
			ActionBot.scroll(driver, "400");

			defaultedGLAccount = PageRequisitionCheckOut.getGLAccountInfoInExpandAll(driver, testCaseName);
			defaultedGLAccount = CommonUtilities.getProperGLAccount(defaultedGLAccount);
			flag2 = defaultedGLAccount.equalsIgnoreCase(glMapC1P1GLAcc1Company1.getGlAccount());
			flag = flag1 && flag2;
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(1), errorMsg + "Accounting details was not changed on clicking Yes button post Purchase Type Change.");
			CommonServices.setMappedTestCaseResult(flag2, mappedTestCases.get(2), "Accounting details was not changed on clicking Yes button post Purchase Type Change.");

			/**
			 * RTC_271441 : Category-PT-GL Map &gt;&gt; Copy Requisition
			 * &gt;&gt; Accounting details should be retained on clicking No
			 * button post Purchase Type Change.
			 **/

			// 3. change purchase type - P2 but do not override GL account
			//PageRequisitionCheckOut.selectPurchaseType(driver, testCaseName, glMapC1P2GLAcc2Company1.getPurchaseType());
			PageStandardPO.enterPurchaseType(driver, glMapC1P2GLAcc2Company1.getPurchaseType());
			// dont override gl account
			FlowRequisition.overrideGLAccount(driver, testCaseName, false);
			ActionBot.scroll(driver, "400");

			defaultedGLAccount = PageRequisitionCheckOut.getGLAccountInfoInExpandAll(driver, testCaseName);
			defaultedGLAccount = CommonUtilities.getProperGLAccount(defaultedGLAccount);
			flag = defaultedGLAccount.equalsIgnoreCase(glMapC1P1GLAcc1Company1.getGlAccount()) && !defaultedGLAccount.equalsIgnoreCase(glMapC1P2GLAcc2Company1.getGlAccount());
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(3), "Accounting details was not retained on clicking No button post Purchase Type Change.");

			/**
			 * RTC_271439 : Category-PT-GL Map >> Copy Requisition >> Accounting
			 * details should be redefaulted on Category change
			 **/
			// view item details
			FlowRequisition.viewItemDetails(driver, testCaseName, itemId);

			// 4. change category c2
			GuidedItem guidedItem2 = new GuidedItem();
			ModalGuidedItemSelectCategory guidedItemSelectCategory = new ModalGuidedItemSelectCategory();
			guidedItemSelectCategory.setCategory(glMapC2P2GLAcc1Company1.getCategory());
			guidedItem2.setCategory(guidedItemSelectCategory);
			guidedItem2.setNextAction(IConstantsData.SAVE);

			guidedItem2 = FlowRequisition.changeGuidedItemDetailsOnCheckoutPage(driver, testCaseName, guidedItem2);

			defaultedGLAccount = PageRequisitionCheckOut.getGLAccountInfoInExpandAll(driver, testCaseName);
			defaultedGLAccount = CommonUtilities.getProperGLAccount(defaultedGLAccount);

			flag = defaultedGLAccount.equalsIgnoreCase(glMapC1P1GLAcc1Company1.getGlAccount());

			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(4), "Accounting details was not redefaulted on Category change.");

			/**
			 * RTC_271445 : Category-PT-GL Map >> Copy Requisition >> Accounting
			 * details should be redefaulted automatically on PT change.
			 **/
			/**
			 * RTC_271459 : Category-PT-GL Map >> Copy Requisition >> Accounting
			 * details should be defaulted from Cat-PT-GL map configured for
			 * document company.
			 **/

			// 5. change purchase type - P1
			PageRequisitionCheckOut.selectPurchaseType(driver, testCaseName, glMapC2P1GLAcc2Company1.getPurchaseType());
			// dont override gl account
			FlowRequisition.overrideGLAccount(driver, testCaseName, true);
			ActionBot.scroll(driver, "400");

			defaultedGLAccount = PageRequisitionCheckOut.getGLAccountInfoInExpandAll(driver, testCaseName);
			defaultedGLAccount = CommonUtilities.getProperGLAccount(defaultedGLAccount);
			flag = defaultedGLAccount.equalsIgnoreCase(glMapC2P1GLAcc2Company1.getGlAccount());
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(5), "Accounting details not redefaulted automatically on PT change.");
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(6), "Accounting details should be defaulted from Cat-PT-GL map configured for document company.");

			/**
			 * RTC_271448 : Category-PT-GL Map &gt;&gt; Copy Requisition
			 * &gt;&gt; User should be able to select all the GL Types and
			 * Accounts.
			 **/
			/**
			 * RTC_271450 : Category-PT-GL Map &gt;&gt; Copy Requisition
			 * &gt;&gt; User should be able to select only GL Types\Accounts
			 * coming from Defaulting maps [Defaulting Maps are those where
			 * Category is not *]
			 **/
			// check available gl accounts
			PageRequisitionCheckOut.clickEditItemSummary(driver, testCaseName, itemId);
			TabCheckoutItemSummary.clickItemSummaryCostBookingTab(driver, testCaseName);
			ModelItemSummaryCostBooking.clearGLAccounts(driver, testCaseName, itemId, 0);

			List<String> availableGlAccounts = ModelItemSummaryCostBooking.getListOfNamesAvailableGLAccounts(driver, testCaseName);
			ModelItemSummaryCommon.clickItemSummaryCancle(driver, testCaseName);

			flag = false;
			for (String glAccount : availableGlAccounts)
			{
				if (glAccount.length() > 0)
				{
					glAccount = CommonUtilities.getProperGLAccount(glAccount);
					if (glAccount.equalsIgnoreCase(glMapC2P1GLAcc2Company1.getGlAccount()) || glAccount.equalsIgnoreCase(glMapC2P2GLAcc1Company1.getGlAccount())
						|| glAccount.equalsIgnoreCase(glMapC2AnyPurchaseTypeGLAcc3Company1.getGlAccount()))
					{
						flag = true;
					}
					else if (glAccount.length() != 0)
					{
						flag = true;
					}
				}
			}
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(7), "User  was not able to select all the GL Accounts.");
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(8),
				"User should was not able to select only Accounts coming from Defaulting maps [Defaulting Maps are those where Category is not *]");

			/**
			 * RTC_271455 : Category-PT-GL Map &gt;&gt; Copy Requisition
			 * &gt;&gt; Change Multiple should have all GL Types and Accounts
			 * available for selection.
			 **/
			if (ActionBot.isElementDisplayed(driver, IPageRequisitionCheckOut.CHECKBOX_ALL_ITEMS))
			{
				ActionBot.click(driver, IPageRequisitionCheckOut.CHECKBOX_ALL_ITEMS);
			}
			PageRequisitionCheckOut.clickChangeMultiple(driver, testCaseName);
			ModelChangeMultiple.clearChangeMultipleGLAccount(driver, testCaseName);
			availableGlAccounts = ModelChangeMultiple.getListOfNamesAvailableGLAccounts(driver, testCaseName);
			flag = false;
			for (String glAccount : availableGlAccounts)
			{
				logger.info("\n GL account :" + glAccount);
				if (glAccount.length() > 0)
				{
					glAccount = CommonUtilities.getProperGLAccount(glAccount);
					if (glAccount != null)
					{
						if (glAccount.equalsIgnoreCase(glMapC2P1GLAcc2Company1.getGlAccount()) || glAccount.equalsIgnoreCase(glMapC2P2GLAcc1Company1.getGlAccount())
							|| glAccount.equalsIgnoreCase(glMapC2AnyPurchaseTypeGLAcc3Company1.getGlAccount()))
						{
							flag = true;
						}
						else if (glAccount.length() != 0)
						{
							flag = true;
						}
					}
				}
			}
			errorMsg = "Change Multiple not has all the GL Accounts available for selection.";

			ModelChangeMultiple.fillChangeMultipleGLAccount(driver, testCaseName, glMapC2P1GLAcc2Company1.getGlAccount());
			ModelChangeMultiple.clickChangeMultipleApply(driver, testCaseName);

			FlowRequisition.overrideGLAccount(driver, testCaseName, true);
			ActionBot.scroll(driver, "400");

			defaultedGLAccount = PageRequisitionCheckOut.getGLAccountInfoInExpandAll(driver, testCaseName);
			defaultedGLAccount = CommonUtilities.getProperGLAccount(defaultedGLAccount);
			flag1 = defaultedGLAccount.equalsIgnoreCase(glMapC2P1GLAcc2Company1.getGlAccount());
			CommonServices.setMappedTestCaseResult(flag && flag1, mappedTestCases.get(9),
				errorMsg + "Wrong Accounting details shown after changing GL Accounts from Change Multiple");

			/**
			 * RTC_271461 : Category-PT-GL Map >> Copy Requisition >> Change
			 * Company: Accounting details should be reset as per new Company
			 * selected
			 **/
			CustomDate customDate = CommonUtilities.getTodaysDate();
			// required by date
			PageRequisitionCheckOut.selectRequiredByDate(driver, testCaseName, customDate.getDay(), customDate.getMonth(), customDate.getYear());

			BillingRequisitionSummary billingRequisitionSummary = new BillingRequisitionSummary();
			billingRequisitionSummary.setCompany(glMapC2AnyPurchaseTypeGLAcc5Company2.getCompany());
			billingRequisitionSummary.setNextAction(IConstantsData.NONE);

			PageRequisitionCheckOut.clickEditHeaderInfo(driver, testCaseName);
			TabCheckoutReqSummary.clickBillingTab(driver, testCaseName);
			billingRequisitionSummary = FlowRequisition.fillBillingRequisitionSummary(driver, testCaseName, billingRequisitionSummary);

			CostBookingRequisitionSummary costBookingRequisitionSummary = ObjectCreation.getDefaultObjectOfCostBookingOfOtherCompany();
			TabCheckoutReqSummary.clickCostBookingTab(driver, testCaseName);
			FlowRequisition.fillCostBookingRequisitionSummary(driver, testCaseName, costBookingRequisitionSummary);

			ActionBot.scroll(driver, "400");

			defaultedGLAccount = PageRequisitionCheckOut.getGLAccountInfoInExpandAll(driver, testCaseName);
			defaultedGLAccount = CommonUtilities.getProperGLAccount(defaultedGLAccount);
			flag = defaultedGLAccount.equalsIgnoreCase(glMapC2AnyPurchaseTypeGLAcc5Company2.getGlAccount());
			assertTrue("Accounting details was not reset as per new Company selected", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 223183 - Unable to submit a
	 * requisition linked to a PO in the following scenario <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_275812(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		String testCaseName = null;
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		ProjectsSettings projectsSettings = new ProjectsSettings();
		User user = null;
		Item item = new Item();
		Requisition requisition = new Requisition();
		boolean flag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_275813"));//0
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_275804"));//1
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_283847 "));//2
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_289829"));//3
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_289890"));//4
			}
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();
			projectsSettings.setAssignProjecttoPurchaseCost(IPageProjectsSettings.LET_USERS_DECIDE);

			// to change project setting to let user decide
			FlowProjectsSettings.changeProjectsSettings(driver, projectsSettings, testCaseName);

			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);

			item = ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);

			// add item in cart
			FlowSearchListing.addItem(driver, testCaseName, item);

			// check if item added to cart or not
			flag = VerifyShoppingItemsWithShoppingCarts.checkIfItemsAddedToCart(driver, testCaseName, item);
			assertTrue("Item added to cart are wrong", flag);
			ModalShoppingCart.continueWithCart(driver, testCaseName);

			// to checkout
			PageSearchListing.clickOnCheckOutButton(driver, testCaseName);

			requisition = ObjectCreation.getRequisition(driver);

			/**
			 * RTC_275813 : Test for bug 223198 - On changing project setting
			 * and cancelling the modal, the project setting is saved for the
			 * requisition
			 **/
			// to change project setting to No in cost booking section
			PageRequisitionCheckOut.clickEditHeaderInfo(driver, testCaseName);
			TabCheckoutReqSummary.clickCostBookingTab(driver, testCaseName);
			ModelRequisitionSummaryCostBooking.clickYesAssignToPurchaseCost(driver, testCaseName);
			ModelRequisitionSummaryCommon.clickCancleReqSummary(driver, testCaseName);

			// verify
			PageRequisitionCheckOut.clickEditHeaderInfo(driver, testCaseName);
			TabCheckoutReqSummary.clickCostBookingTab(driver, testCaseName);
			flag = !ModelRequisitionSummaryCostBooking.isAssingToPurchasOrderRedioBtnYesSelected(driver, testCaseName);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(0),
				"On changing project setting and cancelling the modal, the project setting is saved for the requisition");
			ModelRequisitionSummaryCommon.clickCancleReqSummary(driver, testCaseName);
			/**
			 * RTC_275804 : Test for bug 223101 - Error 500 is displayed on
			 * submitting a requisition without project
			 **/
			/**
			 * RTC_283847 : Test for bug 223916 - Unable to submit any document,
			 * error is displayed and document is saved as draft
			 **/
			/**
			 * RTC_289829 : Verify If 'Modify workflow to add approvers' setting
			 * is unchecked; the requisition on submission should not halt in
			 * 'ready for approval' stage and should get submitted
			 **/
			// to fill checkout form and submit
			requisition.getCostBookingRequisitionSummary().setAssignedProjectToPurchaseCost(IConstants.NO);
			requisition.setItems(item);
			requisition.getCostBookingRequisitionSummary().setBookCostToSingleCostCenter(true);
			requisition = FlowRequisition.fillcheckoutForm(driver, testCaseName, requisition, item);

			// save req
			FlowRequisition.saveReqAsDraft(driver, testCaseName);

			// search req
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);

			flag = PageMyRequisition.getStatusOfFirstReq(driver, testCaseName).equalsIgnoreCase(IConstantsData.DRAFT_FILTER_LABEL);
			assertTrue("Status of requisition was not draft", flag);

			// edit req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);

			// verify
			PageRequisitionCheckOut.clickEditHeaderInfo(driver, testCaseName);
			TabCheckoutReqSummary.clickCostBookingTab(driver, testCaseName);
			flag = ModelRequisitionSummaryCostBooking.isAssingToPurchasOrderRedioBtnNOSelected(driver, testCaseName);
			assertTrue("on editing the draft requisition 'Assign cost to project' setting was not set to NO", flag);
			ModelRequisitionSummaryCommon.clickCancleReqSummary(driver, testCaseName);
			// submit req
			FlowRequisition.submitReq(driver, testCaseName, false);

			// search req
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);

			CommonServices.setMappedTestCaseResult(requisition.isResult(), mappedTestCases.get(1), "Requisition is not searched on submitting a it without project");

			flag = PageMyRequisition.getStatusOfFirstReq(driver, testCaseName).contains(IConstantsData.IN_APPROVAL_FILTER_LABEL);
			CommonServices.setMappedTestCaseResult(requisition.isResult() && flag, mappedTestCases.get(2),
				"Requisition is not searched on submitting a it or status of req was not In Approval ");

			CommonServices.setMappedTestCaseResult(requisition.isResult() && flag, mappedTestCases.get(3),
				"Verify If 'Modify workflow to add approvers' setting is unchecked; the requisition on submission not in IN Approval State");

			/**
			 * RTC_275812 : Test for bug 223183 - Unable to submit a requisition
			 * linked to a PO in the following scenario
			 **/
			ApprovalAllRequests approvalAllRequests = new ApprovalAllRequests();
			approvalAllRequests.setDocumentNo(requisition.getReqNo());
			approvalAllRequests.setComment(IConstantsData.APPROVE_COMMENT);
			approvalAllRequests.setActions(IConstantsData.APPROVE);
			approvalAllRequests.setDocumentType(IConstantsData.REQUISITION);

			// approve req
			FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

			// search at buyer desk
			FlowBuyersDeskListing.searchAtBuyersDeskListing(driver, testCaseName, requisition);

			// to view the req
			FlowBuyersDeskListing.viewRequisitionAtBuyersDesk(driver, testCaseName);

			// convert To Po
			FlowBuyersDesk.convertToPo(driver, testCaseName);

			// submit all POs
			List<PurchaseOrder> purchaseOrders = FlowBuyersDesk.submitAllSuggestedPosForProcessing(driver, testCaseName);

			// to search po
			for (PurchaseOrder purchaseOrder : purchaseOrders)
			{
				flag = FlowPoListing.searchPo(driver, testCaseName, purchaseOrder.getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
				assertTrue("Purchase order was not created", flag);
			}

			approvalAllRequests.setDocumentNo(purchaseOrders.get(0).getPoNo());
			approvalAllRequests.setComment(IConstantsData.APPROVE_COMMENT);
			approvalAllRequests.setActions(IConstantsData.APPROVE);
			approvalAllRequests.setDocumentType(IConstantsData.PURCHASE_ORDER);

			// approve po
			FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

			// search po
			flag = FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			assertTrue("Purchase order was not searched", flag);

			// check status of po
			flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.COMPLETE_RELEASED_FILTER_LABEL);
			assertTrue("Status of PO was not released", flag);

			// add item
			Item item3 = ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			FlowSearchListing.addItem(driver, testCaseName, item3);

			// search req
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);

			flag = PageMyRequisition.getStatusOfFirstReq(driver, testCaseName).contains(IConstantsData.COMPLETE_RELEASED_FILTER_LABEL);
			assertTrue("Status of requisition was not released", flag);

			// view req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);

			// to add additional items
			PageRequisitionView.clickOnActionsReqViewOrderTab(driver, testCaseName);
			PageRequisitionView.clickOnRequestAdditionalItemActionsReqViewOrderTab(driver, testCaseName);

			/**
			 * RTC_289890 : Test for bug 225110 - Error 500 thrown on clicking
			 * on create a draft requisition while requesting additional items
			 * from released requisition .
			 **/
			PopupRequestAdditiondalItems.clickOnCreateDraftReauisition(driver, testCaseName);
			flag = PageRequisitionCheckOut.isRequisitionNameTextBoxPresent(driver, testCaseName);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(4),
				"No redirected to checkout page on clicking on create a draft requisition while requesting additional items from released requisition");

			Requisition requisition2 = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			requisition2.getItems().getCatelogItems().get(0).setItemName(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 0));

			// to fill checkout form and submit
			requisition2.getCostBookingRequisitionSummary().setAssignedProjectToPurchaseCost(IConstants.NO);
			requisition2.setNextAction(IConstantsData.NONE);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			requisition2 = FlowRequisition.createRequisition(driver, testCaseName, requisition2);

			// to add items
			// ActionBot.scroll(driver);
			PageRequisitionCheckOut.clickAddItemOnCheckout(driver, testCaseName);
			PopUpDefaultConfirmation.clickOnConfirmYesButton(driver, testCaseName);

			Item item2 = ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);
			item2.getCatelogItems().get(0).setItemName(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));

			// add item in cart
			FlowSearchListing.addItem(driver, testCaseName, item2);
			//item2.getCatelogItems().add(item.getCatelogItems().get(0));
			//item2.getCatelogItems().add(requisition2.getItems().getCatelogItems().get(0));

			// check if item added to cart or not
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			flag = VerifyShoppingItemsWithShoppingCarts.checkIfItemsAddedToCart(driver, testCaseName, item2);
			assertTrue("Item added to cart are wrong", flag);
			ModalShoppingCart.continueWithCart(driver, testCaseName);

			// to checkout
			PageSearchListing.clickOnCheckOutButton(driver, testCaseName);

			// submit req
			FlowRequisition.submitReq(driver, testCaseName, false);

			// search req
			requisition2 = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition2);
			assertTrue("Unable to submit a requisition linked to a PO ", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				//projectsSettings.setAssignProjecttoPurchaseCost(IPageProjectsSettings.ALWAYS);

				// to change project setting to let user decide
				//FlowProjectsSettings.changeProjectsSettings(driver, projectsSettings, testCaseName);
			}
			catch (Exception e)
			{
				logger.error("Error while changing project setting : " + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
			}
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 220375 - Requisition: User is
	 * able to add free text item when setting states Never allow <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_272083(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		String testCaseName = testCase.getTestMethodName();
		User user = null;
		RequisitionSettings requisitionSettings = new RequisitionSettings();
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			requisitionSettings.setAllowRequetserToOrderFreeTextItemsType(IPageRequisitionSettings.NEVER);

			// change req setting : order freetext item never
			FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings);

			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);

			// search item
			FlowSearchListing.searchItem(driver, testCaseName, CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING));

			boolean flag = PageSearchListing.isGuideMeExpandPresent(driver);
			assertTrue("User is able to add free text item, when it is not allowed to do it", !flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				requisitionSettings.setAllowRequetserToOrderFreeTextItemsType(IPageProjectsSettings.ALWAYS);
				// change req setting : order freetext item always
				FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings);
			}
			catch (Exception e)
			{
				logger.error("Error while changing req settings : " + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 220532 - Intermittent: Error
	 * 500- On clicking requisition number to view details <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_272113(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		String testCaseName = testCase.getTestMethodName();
		User user = null;
		boolean flag = false;

		Requisition requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
		try
		{

			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			BuyersDeskFilter buyersDeskFilter = new BuyersDeskFilter();
			buyersDeskFilter.setPartiallyOrderFilter(true);
			List<String> statusOfFilter = new ArrayList<String>();
			statusOfFilter.add(IConstantsData.PENDIN_ORDER_FILTER_LABEL);
			buyersDeskFilter.setStatusOfFilter(statusOfFilter);

			requisition.setVerifyWorkflow(false);
			requisition.setModifyWorkflowSettings(false);
			requisition.getItems().getCatelogItems().get(0).setItemName(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 0));

			CatelogItem catelogItem = new CatelogItem();
			catelogItem = ObjectCreation.getDefaultCatalogItemObject();
			catelogItem.setItemName(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			requisition.getItems().getCatelogItems().add(catelogItem);

			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition at my requisition", requisition.isResult());

			ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, requisition.getReqNo(), IConstantsData.REQUISITION,
				IConstantsData.APPROVE);

			approvalAllRequests = FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

			requisition = FlowBuyersDeskListing.searchAtBuyersDeskListing(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition at Buyers Desk", requisition.isResult());

			FlowBuyersDeskListing.viewRequisitionAtBuyersDesk(driver, testCaseName);

			List<String> listOfItemIDs = new ArrayList<>();

			listOfItemIDs.add(requisition.getItems().getCatelogItems().get(0).getItemID());
			FlowBuyersDesk.convertToPo(driver, testCaseName, listOfItemIDs);

			List<PurchaseOrder> purchaseOrders = FlowBuyersDesk.submitAllSuggestedPosForProcessing(driver, testCaseName);
			requisition.setPurchaseOrdersList(purchaseOrders);

			ApprovalAllRequests approvalAllRequests2 = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, purchaseOrders.get(0).getPoNo(),
				IConstantsData.PURCHASE_ORDER, IConstantsData.APPROVE);

			approvalAllRequests2 = FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests2);

			FlowBuyersDeskListing.searchAtBuyersDeskListing(driver, testCaseName, requisition);
			Assert.assertTrue("req not searched", requisition != null);

			String status = PageBuyersDeskListing.getFirstRowReqStatus(driver, testCaseName);
			flag = status.contains(IConstantsData.PENDING_ORDER);
			Assert.assertTrue("req is not in pending order status", flag);

			String reqName = PageBuyersDeskListing.getFirstRowReqName(driver, testCaseName);
			// view req
			FlowBuyersDeskListing.viewRequisitionAtBuyersDesk(driver, testCaseName);

			flag = PageBuyersDesk.getRequistionName(driver, testCaseName).equalsIgnoreCase(reqName);
			assertTrue("Requisition name after viewing req details at buyers desk was wrong", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 223734 - Requisition: On
	 * editing rejected requistion and Saving it, error 500 occurs. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_282082(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		String testCaseName = testCase.getTestMethodName();
		User user = null;
		try
		{
			Requisition requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			Assert.assertTrue("req not searched", requisition.isResult());

			ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, requisition.getReqNo(), IConstantsData.REQUISITION,
				IConstantsData.REJECT);

			approvalAllRequests = FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);

			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			Assert.assertTrue("req not searched", requisition.isResult());
			Assert.assertTrue("req was not rejected", requisition.getStatus().contains(IConstantsData.REJECTED_FILTER_LABEL));

			// edit first req
			PageMyRequisition.clickOnActionBtnOfFirstReq(driver, testCaseName);
			ModalMyRequisitionActions.clickOnEditLink(driver, testCaseName);

			// update draft
			FlowRequisition.saveReqAsDraft(driver, testCaseName);

			// search req in my req tab
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			assertTrue("Error while searching updated draft requisition", requisition.isResult());

			assertTrue("Status of updated draft requisition was not Rejected",
				PageMyRequisition.getStatusOfFirstReq(driver, testCaseName).equalsIgnoreCase(IConstantsData.REJECTED_FILTER_LABEL));

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 222528 - Change approver
	 * option is shown on versions of requisition . <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_269495(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		String testCaseName = testCase.getTestMethodName();
		User user = null;
		Requisition requisition = new Requisition();
		boolean flag = false;
		String costCenterOnReqViewPage = null, winHandleBefore;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_269459"));
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_319118"));
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_298067"));
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_291703"));

			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);

			// create req
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			/**
			 * RTC_269459 : Test for bug 222504 - User is not able to submit
			 * requisition .
			 **/
			/**
			 * RTC_319118 : Test for bug 228463 - Error 500 displayed on taking
			 * any action in the product.
			 **/
			/**
			 * RTC_298067 : Test for bug 228038 - Requisition screen is
			 * unresponsive until the workflow trail is loaded, though no loader
			 * is present to indicate the same.
			 **/
			// search req in my req tab
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			CommonServices.setMappedTestCaseResult(requisition.isResult(), mappedTestCases.get(0), "Requisition was not allowed to submit");
			CommonServices.setMappedTestCaseResult(requisition.isResult(), mappedTestCases.get(1), "Error 500 displayed on taking any action in the product.");
			CommonServices.setMappedTestCaseResult(requisition.isResult(), mappedTestCases.get(2),
				"Requisition screen is unresponsive until the workflow trail is loaded, though no loader is present to indicate the same.");

			flag = PageMyRequisition.getStatusOfFirstReq(driver, testCaseName).contains(IConstantsData.IN_PROCESS_FILTER_LABEL);
			logger.info("@@@@@@@@@@@@@@@@@@@@@" + PageMyRequisition.getStatusOfFirstReq(driver, testCaseName) + "@@@@@@@@@@");
			logger.info("@@@@@@@@@@@@@@@@@@@@@" + IConstantsData.IN_PROCESS_FILTER_LABEL + "@@@@@@@@@@");
			assertTrue("Status of requisition was not In Process", flag);

			// view req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);

			/**
			 * RTC_291703 : Test for bug 225605 - Cost center unique code is
			 * displayed instead of cost center code in requisition view page
			 **/
			ActionBot.scroll(driver);

			PageRequisitionCheckOut.clickExpandAll(driver, testCaseName);

			PageRequisitionView.clickOnExpandCostBooking(driver, testCaseName);
			costCenterOnReqViewPage = PageRequisitionView.getSingleCostCenter(driver, testCaseName);
			costCenterOnReqViewPage = StringUtils.split(costCenterOnReqViewPage, ":")[0].trim();

			String[] temp = StringUtils.split(requisition.getCostBookingRequisitionSummary().getCostCenter(), ":");
			flag = costCenterOnReqViewPage.equalsIgnoreCase(temp[0].trim());
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(3), "Wrong cost center was displayed on requisition view page");
			ActionBot.click(driver, IPageRequisitionView.CLOSE_ITEM_SUMMARY_MODAL);

			/**
			 * RTC_269495 : Test for bug 222528 - Change approver option is
			 * shown on versions of requisition .
			 **/
			ActionBot.scroll(driver, "400");
			winHandleBefore = driver.getWindowHandle();
			// PageRequisitionView.clickOnAuditTrailVersion(driver,
			// testCaseName, 1);
			Set<String> winHandles = driver.getWindowHandles();
			for (String winHandle : winHandles)
			{
				driver.switchTo().window(winHandle);
			}
			driver.manage().window().maximize();
			ActionBot.scroll(driver, "400");
			ScreenShot.screenshot(driver, testCaseName, "Requisition version");
			flag = PageRequisitionView.isChangeApproverPresent(driver, testCaseName);
			driver.switchTo().window(winHandleBefore);
			assertTrue("Change approver option was shown in versions of requisition", !flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 233298 - Requisition not
	 * reached to buyers desk even after getting fully approved <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")

	public void RTC_323363(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		String testCaseName = testCase.getTestMethodName();
		User user = null;
		Requisition requisition = new Requisition();
		List<GuidedItem> guidedItems = new ArrayList<GuidedItem>();
		Item item = new Item();
		GuidedItem guidedItem = null;
		boolean flag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_320567"));
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_320568"));
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_320569"));

			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			requisition = ObjectCreation.getRequisition(driver);
			guidedItem = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.EXISTING_SUPPLIER);
			guidedItem.setSourcingStatus(IConstantsData.Need_a_Quote);
			guidedItems.add(guidedItem);

			item.setGuidedItems(guidedItems);
			requisition.setItems(item);
			requisition.setNextAction(IConstantsData.SAVE_AS_DRAFT_REQ);
			requisition.setVerifyWorkflow(false);
			/**
			 * RTC_320567 : Test for bug 224486 - [Oracle]:Checkout
			 * requisition:Error in saving a requisition
			 **/
			/**
			 * RTC_320568 : Test for bug 224560 - [Oracle]:Checkout
			 * requisition:Script error in saving a requisition
			 **/
			/**
			 * RTC_320569 : Test for bug 224561 - [oracle]:error 500 in saving a
			 * requisition
			 **/
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// search req
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition in my requisition tab", requisition.isResult());

			flag = PageMyRequisition.getStatusOfFirstReq(driver, testCaseName).equalsIgnoreCase(IConstantsData.DRAFT_FILTER_LABEL);

			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(0), "Requisition was not saved as draft");
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(1), "Requisition was not saved as draft");
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(2), "Requisition was not saved as draft");
			assertTrue("Status of requisition was wrong", flag);

			// view req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);
			// submit req
			FlowRequisition.submitReq(driver, testCaseName, true);

			// search req
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition in my requisition tab", requisition.isResult());

			flag = PageMyRequisition.getStatusOfFirstReq(driver, testCaseName).contains(IConstantsData.SENT_FOR_QUOTE_FILTER_LABEL);
			assertTrue("Status of requisition was wrong, it should be Sent for Quote ", flag);

			// search at buyers desk
			requisition = FlowBuyersDeskListing.searchAtBuyersDeskListing(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition at buyers desk", requisition.isResult());

			flag = PageBuyersDeskListing.getFirstRowReqStatus(driver, testCaseName).contains(IConstantsData.AWAITING_QUOTE_FILTER_LABEL);
			assertTrue("Status of requisition at buyers desk was wrong, it should be Awaiting Quote", flag);

			GuidedItem guidedItem2 = new GuidedItem();
			guidedItem2.setSourcingStatus(IConstantsData.BUYER_NEGOTIATED_PRICE);
			guidedItem2.setNextAction(IConstantsData.SAVE);

			// view req
			FlowBuyersDeskListing.viewRequisitionAtBuyersDesk(driver, testCaseName);
			ActionBot.scroll(driver, "350");

			// view item details
			PageBuyersDesk.clickOnItemName(driver, testCaseName, requisition.getItems().getGuidedItems().get(0).getItemID());

			// change item details
			guidedItem2 = FlowBuyersDesk.editGuidedItemDetailsatBuyersDesk(driver, testCaseName, guidedItem2);

			// send for apporval
			PageBuyersDesk.fillReqChangeComment(driver, testCaseName, IConstantsData.CONVERT_TO_PO_COMMENT);
			FlowBuyersDesk.sendReqForApproval(driver, testCaseName);

			// approve req
			ApprovalAllRequests approvalAllRequests = new ApprovalAllRequests();
			approvalAllRequests.setDocumentType(IConstantsData.REQUISITION);
			approvalAllRequests.setDocumentNo(requisition.getReqNo());
			approvalAllRequests.setActions(IConstantsData.APPROVE);

			approvalAllRequests = FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);
			assertTrue("Error while Approving requisition", approvalAllRequests.isResult());

			// search in my req tab
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Requisition was not found at my requisition page", requisition.isResult());

			// check status
			flag = PageMyRequisition.getStatusOfFirstReq(driver, testCaseName).toLowerCase().contains(IConstantsData.WITH_BUYER_FILTER_LABEL.toLowerCase());
			assertTrue("Status of requisition was wrong, it should be With Buyer", flag);

			// search at buyers desk
			requisition = FlowBuyersDeskListing.searchAtBuyersDeskListing(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition at buyers desk", requisition.isResult());

			flag = PageBuyersDeskListing.getFirstRowReqStatus(driver, testCaseName).contains(IConstantsData.PENDIN_ORDER_FILTER_LABEL);
			assertTrue("Status of requisition at buyers desk was wrong, it should be Pending Order", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Verify In case of copy requisition, if
	 * selected purchase type in document is deleted from masters and new one is
	 * added, the new one will not get loaded automatically. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_292163(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		String testCaseName = testCase.getTestMethodName();
		User user = null;
		Requisition requisition = new Requisition();
		String purchaseType = null, selectedPurchaseType = null;
		MasterDataTenantConfig masterDataTenantConfig = new MasterDataTenantConfig();
		boolean flag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_291866"));
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_292164"));

			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			purchaseType = CommonServices.getTestData(IConstantsData.SET_PURCHASE_TYPE);
			String[] temp = StringUtils.split(purchaseType, ",");
			masterDataTenantConfig.setPurchaseType(temp[0].trim());

			// change purchase type from master data
			masterDataTenantConfig = FlowMasterDataTenantConfig.changeMasterDataTenantConfig(driver, testCaseName, masterDataTenantConfig);

			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);

			requisition.setNextAction(IConstantsData.SAVE_AS_DRAFT_REQ);

			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			// add item
			requisition.setItems(FlowSearchListing.addItem(driver, testCaseName, requisition.getItems()));

			// verify added item
			flag = VerifyShoppingItemsWithShoppingCarts.checkIfItemsAddedToCart(driver, testCaseName, requisition.getItems());
			assertTrue("Item added to cart were wrong", flag);
			ModalShoppingCart.continueWithCart(driver, testCaseName);

			// to checkout
			PageSearchListing.clickOnCheckOutButton(driver, testCaseName);

			/**
			 * RTC_291866 : Verify When a single Purchase type is present in
			 * master; it should be defaulted in Requisition checkout page
			 **/
			flag = PageRequisitionCheckOut.getSelectedPurchaseType(driver, testCaseName).equalsIgnoreCase(temp[0].trim());
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(0),
				"Purchase Type is not defaulted in Requisition checkout page,when a single Purchase type is present in master");

			/**
			 * RTC_292164 : Verify In case of edit draft requisition, if
			 * selected purchase type in document is deleted from masters and
			 * new one is added, the new one will not get loaded automatically.
			 **/
			requisition.setPurchaseType(temp[0].trim());
			requisition = FlowRequisition.fillcheckoutForm(driver, testCaseName, requisition, requisition.getItems());

			// save as draft
			FlowRequisition.saveReqAsDraft(driver, testCaseName);

			// search req in my req tab
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			assertTrue("Requisition was not searched in my requisition tab", requisition.isResult());

			// check status
			flag = PageMyRequisition.getStatusOfFirstReq(driver, testCaseName).equalsIgnoreCase(IConstantsData.DRAFT_FILTER_LABEL);
			assertTrue("Status of requisition was not draft", flag);

			// change purchase type from master data
			masterDataTenantConfig.setPurchaseType(temp[1].trim());
			masterDataTenantConfig = FlowMasterDataTenantConfig.changeMasterDataTenantConfig(driver, testCaseName, masterDataTenantConfig);

			// search req in my req tab
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Requisition was not searched in my requisition tab", requisition.isResult());

			// edit req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);

			selectedPurchaseType = PageRequisitionCheckOut.getSelectedPurchaseType(driver, testCaseName);
			flag = !selectedPurchaseType.equalsIgnoreCase(temp[1].trim()) && selectedPurchaseType.equalsIgnoreCase(IConstantsData.SELECT_OPTION_DEFAULT_VALUE);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(1),
				"New purchase type was get loaded automatically, when selected purchase type in document is deleted from masters and new one is added, in case of edit draft requisition");

			/**
			 * RTC_292163 : Verify In case of copy requisition, if selected
			 * purchase type in document is deleted from masters and new one is
			 * added, the new one will not get loaded automatically.
			 **/
			PageRequisitionCheckOut.selectPurchaseType(driver, testCaseName, temp[1].trim());

			// to overrideGLAccount
			FlowRequisition.overrideGLAccount(driver, testCaseName, requisition.isOverrideGlAccount());
			// submit req
			FlowRequisition.submitReq(driver, testCaseName, true);

			// search req in my req tab
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			assertTrue("Requisition was not searched in my requisition tab", requisition.isResult());

			// check status
			flag = PageMyRequisition.getStatusOfFirstReq(driver, testCaseName).contains(IConstantsData.IN_APPROVAL_FILTER_LABEL);
			assertTrue("Status of requisition was not In approval", flag);

			// change purchase type from master data
			masterDataTenantConfig.setPurchaseType(temp[2].trim());
			masterDataTenantConfig = FlowMasterDataTenantConfig.changeMasterDataTenantConfig(driver, testCaseName, masterDataTenantConfig);

			// search req in my req tab
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Requisition was not searched in my requisition tab", requisition.isResult());

			// copy req
			FlowMyRequisitions.copyReq(driver, testCaseName, false);

			selectedPurchaseType = PageRequisitionCheckOut.getSelectedPurchaseType(driver, testCaseName);
			flag = !selectedPurchaseType.equalsIgnoreCase(temp[1].trim()) && selectedPurchaseType.equalsIgnoreCase(IConstantsData.SELECT_OPTION_DEFAULT_VALUE);
			assertTrue(
				"New purchase type was get loaded automatically, when selected purchase type in document is deleted from masters and new one is added, in case of copy requisition",
				flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				masterDataTenantConfig.setPurchaseType(purchaseType);
				masterDataTenantConfig = FlowMasterDataTenantConfig.changeMasterDataTenantConfig(driver, testCaseName, masterDataTenantConfig);
			}
			catch (Exception e)
			{
				logger.error("Exception while changing purchase type to default value : " + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
			}
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 230385 - Error 500 is
	 * displayed on adding approver for a requisition after change/assign buyer
	 * for requisition in ready for approval state <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_306295(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		// List<MappedTestCase> mappedTestCases = new
		// ArrayList<MappedTestCase>();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		Requisition requisition = new Requisition();
		String testCaseName = testCase.getTestMethodName();
		String userDisplayName, status, itemId;
		boolean flag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			/*
			 * { mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase(
			 * "RTC_268145")); } CommonServices.startTestCase(driver, testCase,
			 * mappedTestCases);
			 */
			CommonServices.startTestCase(driver, testCase);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();
			userDisplayName = user.getDisplayName();
			logger.info("User display name : " + userDisplayName);

			/*
			 * RequisitionSettings requisitionSettings = new
			 * RequisitionSettings();
			 * requisitionSettings.setEnableReqForking(true);
			 * requisitionSettings.setForReqByCategory(true);
			 * requisitionSettings
			 * .setRequesterRequiredToAssignBuyerOption(IConstantsData
			 * .REQUIRED); //to change req settings requisitionSettings =
			 * FlowRequisitionSettings.changeRequisitionSettings(driver,
			 * testCaseName, requisitionSettings);
			 * MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			 */

			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			requisition.setModifyWorkflowSettings(true);

			// to set non mandatory fields
			requisition.setCommentForSupplier(IConstantsData.COMMENT_FOR_SUPPLIER);
			requisition.setReasonForOrdering(IConstantsData.REASON_FOR_ORDERING);
			requisition.setRequired(true);
			requisition.setModifyWorkflowSettings(true);

			// to create req
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			itemId = requisition.getItems().getCatelogItems().get(0).getItemID();
			// to search req in my req tab requisition
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Requisition was not Searched in my requisition tab", requisition.isResult());

			status = PageMyRequisition.getStatusOfFirstReq(driver, testCaseName);
			assertTrue("If 'Modify workflow to add approvers' setting is checked; the status of requisition on submission was not Ready for Approval",
				status.contains(IConstantsData.READY_FOR_APPROVAL_FILTER_LABEL));
			//view req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);

			PageRequisitionView.clickOnModifyRequisitionLink(driver, testCaseName);
			PopUpDefaultConfirmation.clickOnConfirmYesButton(driver, testCaseName);
			//PageRequisitionCheckOut.clickOnItemNameToViewItemDetails(driver, testCaseName, requisition.getItems().getCatelogItems().get(0).getItemID());
			PageRequisitionCheckOut.clickEditItemSummary(driver, testCaseName, itemId);

			// change buyer
			TabCheckoutItemSummary.clickItemSummaryAssignedBuyerTab(driver, testCaseName);
			PageRequisitionCheckOut.clickOnAssignedBuyerDropdown(driver, testCaseName);
			PageRequisitionCheckOut.clickOnGroupAssignedBuyer(driver, testCaseName);
			PageRequisitionCheckOut.fillAssignedBuyerGroup(driver, testCaseName, CommonServices.getTestData(IConstantsData.ASSIGNED_BUYER_USER_GROUP, 0));
			ModelItemSummaryCommon.clickItemSummarySave(driver, testCaseName);

			//FlowReadyForApproval.addAssignBuyer(driver, testCaseName, null, CommonServices.getTestData(IConstantsData.ASSIGNED_BUYER_USER_GROUP));

			// check assigned buyer link
			//PageRequisitionCheckOut.clickOnItemNameToViewItemDetails(driver, testCaseName, requisition.getItems().getCatelogItems().get(0).getItemID());
			PageRequisitionCheckOut.clickEditItemSummary(driver, testCaseName, itemId);

			//PageRequisitionView.clickOnAssignBuyerlink(driver, testCaseName);
			TabCheckoutItemSummary.clickItemSummaryAssignedBuyerTab(driver, testCaseName);

			String labelValue = PageRequisitionView.getLabelValueOfAssignBuyer(driver, testCaseName);
			logger.info("\nlabelValue :" + labelValue + ":");
			logger.info("\nIConstantsData.Label_Change_Buyer :" + CommonServices.getTestData(IConstantsData.ASSIGNED_BUYER_USER_GROUP, 0) + ":");

			//PageRequisitionView.clickOnSaveAssignBuyer(driver, testCaseName);
			ModelItemSummaryCommon.clickItemSummarySave(driver, testCaseName);

			assertTrue("After assigning the buyer,the link of assign buyer should not change to Change buyer",
				labelValue.trim().equalsIgnoreCase(CommonServices.getTestData(IConstantsData.ASSIGNED_BUYER_USER_GROUP, 0)));

			FlowRequisition.submitReq(driver, testCaseName, false);
			/**
			 * RTC_306295 : Test for bug 230385 - Error 500 is displayed on
			 * adding approver for a requisition after change/assign buyer for
			 * requisition in ready for approval state
			 **/

			AddApprover addApprover_withSpecialChar = new AddApprover();
			addApprover_withSpecialChar.setApproverName(CommonServices.getTestData(IConstantsData.MULTILINGUAL_CHAR_USER, 0));
			addApprover_withSpecialChar.setAddApproverAfter(IConstantsData.Requester);
			addApprover_withSpecialChar.setNextAction(IConstantsData.SAVE);

			// add approver
			addApprover_withSpecialChar = FlowReadyForApproval.addApproverInReadyForApprovalRequisition(driver, testCaseName, addApprover_withSpecialChar);
			// verify added approver
			flag = FlowReadyForApproval.verifyAddedApprover(driver, testCaseName, addApprover_withSpecialChar);
			assertTrue("Information displayed on req view page of added approver containing special character was wrong", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			/*
			 * RequisitionSettings requisitionSettings = new
			 * RequisitionSettings();
			 * requisitionSettings.setEnableReqForking(false);
			 * requisitionSettings
			 * .setRequesterRequiredToAssignBuyerOption(IConstantsData
			 * .OPTIONAL); //to change req settings to default values
			 * requisitionSettings =
			 * FlowRequisitionSettings.changeRequisitionSettings(driver,
			 * testCaseName, requisitionSettings);
			 */

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 233201 - Currency is
	 * displayed as blank on copying a requisition <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_321115(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		Requisition requisition = new Requisition();
		String userDisplayName, poType, supplierName, log = "", itemId, currency, userCurrency;
		float price = 0, price1, price2;
		boolean flag = false, flag1 = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			String testCaseName = testCase.getTestMethodName();
			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_324361")); //0
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_292124")); //1
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_292172")); //2
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_320544")); //3
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_324763")); //4
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_324368")); //5
			}
			CommonServices.startTestCase(driver, testCase, mappedTestCases);
			user = LoginLogoutServices.login(driver, testCase);

			//userCurrency = user.getUserSettings().getUserCurrency();

			// userCurrency = user.getUserSettings().getUserCurrency();
			userCurrency = FlowBuyersDesk.getUserDefaultCurrency(driver, testCaseName);

			userDisplayName = user.getDisplayName();
			logger.info("User display name : " + userDisplayName);

			Item item = ObjectCreation.getItem(IConstantsData.GUIDED_ITEM);
			Float quantiy = item.getGuidedItems().get(0).getQuantity();
			// to create req
			item = FlowRequisition.addItemAndCheckout(driver, testCaseName, item);
			itemId = item.getGuidedItems().get(0).getItemID();

			/**
			 * RTC_324361 : Test for bug 229787 - PO type search field hidden on
			 * clicking "show all POs" button on checkout page,and search
			 * supplier text field available under the "type" filed
			 **/
			PageRequisitionCheckOut.clickOnShowAllPosBtn(driver, testCaseName);

			flag = ModalShowAllPos.isPoTypeHeaderPresent(driver, testCaseName) && ModalShowAllPos.isPoTypeLabelPresent(driver, testCaseName)
				&& ModalShowAllPos.isSupplierLabelPresent(driver, testCaseName) && ModalShowAllPos.isSupplierTextBoxPresent(driver, testCaseName);

			if (!flag)
			{
				log += "PO Type and Supplier Header on show all pos modal was not present";
			}

			flag = true;
			poType = ModalShowAllPos.getFirstPOType(driver, testCaseName);
			if (poType.equalsIgnoreCase(IConstantsData.STANDARD_PO_TYPE) || poType.equalsIgnoreCase(IConstantsData.RELEASE_PO_TYPE))
			{
				flag1 = true;
			}
			else
			{
				flag1 = false;
				log += "Type of PO on show all pos modal was wrong \n";
			}

			supplierName = ModalShowAllPos.getFirstSupplierName(driver, testCaseName);
			if (supplierName != null && supplierName.length() != 0)
			{
				flag1 = true;
			}
			else
			{
				flag1 = false;
				log += "Supplier Name on show all pos modal was wrong";
			}
			ModalShowAllPos.clickOnCloseShowAllPOs(driver, testCaseName);
			CommonServices.setMappedTestCaseResult(flag1 && flag, mappedTestCases.get(0), log);

			/**
			 * RTC_292124 : Test for bug 224665 - Price is not changing in split
			 * when user changes price from top of cost booking pop up while
			 * editing cost booking information of item .
			 **/
			requisition = ObjectCreation.getRequisition(driver);
			requisition.setItems(item);
			// req with item level cc split
			requisition.getCostBookingRequisitionSummary().setBookCostToSingleCostCenter(false);
			requisition.getCostBookingRequisitionSummary().setSplitCostAtLineItemLevel(true);

			// to set CostBookingItemSummary in guided items - with %
			CostBookingItemSummary costBookingItemSummary = ObjectCreation.getDefaultObjectOfCCSplitAtItemLevel(false, 10);
			requisition.getItems().getGuidedItems().get(0).setCostBookingItemSummary(costBookingItemSummary);
			requisition.setCostBookingItemSummary(costBookingItemSummary);

			// to fill req
			requisition = FlowRequisition.fillcheckoutForm(driver, testCaseName, requisition, requisition.getItems());

			// view item details
			FlowRequisition.viewItemDetails(driver, testCaseName, itemId);

			// update price of free text item
			GuidedItem guidedItem = new GuidedItem();
			price = item.getGuidedItems().get(0).getPrice() + 5;

			guidedItem.setPrice(price);
			guidedItem.setCurrency(CommonServices.getTestData(IConstantsData.CURRENCY_TYPE, 0));
			guidedItem.setNextAction(IConstantsData.SAVE);

			//			PageRequisitionCheckOut.clickEditItemSummary(driver, testCaseName, itemId);
			//			TabCheckoutItemSummary.clickItemSummaryCostBookingTab(driver, testCaseName);
			//			

			guidedItem = FlowRequisition.changeGuidedItemDetailsOnCheckoutPage(driver, testCaseName, guidedItem);

			// to get cc split data on checkout page for guided item
			List<CostCenterSplitInfo> centerSplitInfosOnCheckoutPage = FlowRequisition.getCostCenterSplitInfoOnCheckoutPage(driver, testCaseName,
				requisition.getItems().getGuidedItems().get(0).getItemID(), 2);

			price1 = CommonUtilities.calculatePercentageOf(price * quantiy,
				requisition.getItems().getGuidedItems().get(0).getCostBookingItemSummary().getCostCenterSplitInfo().get(0).getPercentage());
			price2 = CommonUtilities.calculatePercentageOf(price * quantiy,
				requisition.getItems().getGuidedItems().get(0).getCostBookingItemSummary().getCostCenterSplitInfo().get(1).getPercentage());

			// to verify CC split data -- remove USD from number
			flag = CommonUtilities.getDecimalPrice(centerSplitInfosOnCheckoutPage.get(0).getPrice().split(" ")[1].trim())
				.equalsIgnoreCase(CommonUtilities.getDecimalPrice(Float.toString(price1)))
				&& CommonUtilities.getDecimalPrice(centerSplitInfosOnCheckoutPage.get(1).getPrice().split(" ")[1].trim())
					.equalsIgnoreCase(CommonUtilities.getDecimalPrice(Float.toString(price2)));

			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(1),
				"Cost Center Split information on checkout page for guided item after price of item changed was wrong");

			/**
			 * RTC_292172 : Test for bug 225753 - Wrong amount is shown in case
			 * of item level split with different item and requisition currency
			 * .
			 **/
			/**
			 * RTC_320544 : Test for bug 232969 - Updated currency is not shown
			 * on changing the currency of free text item on checkout screen .
			 **/
			// update currency of free text item

			if (!userCurrency.equalsIgnoreCase("USD") && !item.getGuidedItems().get(0).getCurrency().equalsIgnoreCase("USD"))
			{
				currency = "USD";
			}
			else
			{
				currency = "INR";
			}

			GuidedItem guidedItem1 = new GuidedItem();
			guidedItem1.setCurrency(currency);
			guidedItem1.setNextAction(IConstantsData.SAVE);
			FlowRequisition.viewItemDetails(driver, testCaseName, itemId);
			guidedItem1 = FlowRequisition.changeGuidedItemDetailsOnCheckoutPage(driver, testCaseName, guidedItem1);

			// to get cc split data on checkout page for guided item
			List<CostCenterSplitInfo> centerSplitInfosOnCheckoutPage_afterCurrencyChange = FlowRequisition.getCostCenterSplitInfoOnCheckoutPage(driver, testCaseName,
				requisition.getItems().getGuidedItems().get(0).getItemID(), 2);

			// to verify CC split data
			flag = !CommonUtilities.getDecimalPrice(centerSplitInfosOnCheckoutPage_afterCurrencyChange.get(0).getPrice()).equalsIgnoreCase(Float.toString(price1))
				&& !CommonUtilities.getDecimalPrice(centerSplitInfosOnCheckoutPage_afterCurrencyChange.get(1).getPrice()).equalsIgnoreCase(Float.toString(price2));
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(2), "Wrong amount is shown in case of item level split with different item and requisition currency");

			flag = PageRequisitionCheckOut.getItemLevelCurrency(driver, testCaseName, itemId).equalsIgnoreCase(currency);

			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(3), "Updated currency is not shown on changing the currency of free text item on checkout screen.");

			/**
			 * RTC_324763 : Test for bug 233452 - Requester can submit free text
			 * item without category even though category is mandatory.
			 **/
			GuidedItem guidedItem2 = new GuidedItem();
			ModalGuidedItemSelectCategory category = new ModalGuidedItemSelectCategory();
			category.setCategory("");
			guidedItem2.setCategory(category);
			guidedItem2.setNextAction(IConstantsData.SAVE);
			FlowRequisition.viewItemDetails(driver, testCaseName, itemId);
			guidedItem2 = FlowRequisition.changeGuidedItemDetailsOnCheckoutPage(driver, testCaseName, guidedItem2);

			flag = ModalGuidedItemDetails.isProductCategoryErrorPresent(driver, testCaseName);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(4), "Requester can submit free text item without category even though category is mandatory.");

			guidedItem2 = new GuidedItem();
			guidedItem2.setNextAction(IConstantsData.SAVE);
			category.setCategory(CommonServices.getTestData(IConstantsData.Item_Product_Category, 2));
			guidedItem2.setCategory(category);
			//	ModalGuidedItemDetails.fillProductCategory(driver, testCaseName, category.getCategory());
			//guidedItem2 = FlowRequisition.changeGuidedItemDetailsOnCheckoutPage(driver, testCaseName, guidedItem2);

			ModalGuidedItemDetails.fillProductCategory(driver, testCaseName, category.getCategory());
			if (PageBuyersDesk.isEformDialogPresent(driver, testCaseName))
			{
				ActionBot.defaultSleep();
				if (category.getCategoryEFormName() != null)
					PageBuyersDesk.selectEFormForCategoryNamewise(driver, testCaseName, category.getCategoryEFormName());

				else
				{
					ActionBot.click(driver, IModalGuidedItemDetails.FIRST_EFORM_NAME_LINK);
					ActionBot.defaultSleep();
				}
			}
			/**
			 * RTC_324368 : Test for bug 229875 - On opening the item details of
			 * the free text item on the checkout page and going to its supplier
			 * tab,on clicking the "show all "contracts the modal apprears at
			 * the top left corner
			 **/
			ModalGuidedItemDetails.clickOnSupplierDetailsTab(driver, testCaseName);
			ModalGuidedItemDetails.clickOnShowAllContractsButton(driver, testCaseName);
			flag = ModalBlanketOrdersForFreeTextItem.isTextboxBPONoPresent(driver, testCaseName);

			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(5),
				"On opening the item details of the free text item on the checkout page and going to its supplier tab,on clicking the show all contracts the modal apprears at the top left corner");

			// to close blanket order modal
			ModalBlanketOrdersForFreeTextItem.clickOnCloseBPOButton(driver, testCaseName);

			// to save item details
			ModalGuidedItemDetails.clickOnOkButton(driver, testCaseName);

			/**
			 * RTC_321115 : Test for bug 233201 - Currency is displayed as blank
			 * on copying a requisition
			 **/
			// to submit req
			FlowRequisition.submitReq(driver, testCaseName, true);

			// search req
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			Assert.assertTrue("req not searched", requisition != null);

			// copy req
			FlowMyRequisitions.copyReq(driver, testCaseName, true);

			//			// search req
			//			FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			//			Assert.assertTrue("req not searched", requisition != null);
			//
			//			// copy req
			//			FlowMyRequisitions.copyReq(driver, testCaseName, true);

			ActionBot.scroll(driver);
			itemId = PageRequisitionCheckOut.getItemId(driver, testCaseName, requisition.getItems().getGuidedItems().get(0).getShortDescription());
			// view item details
			//PageRequisitionView.clickOnItemName(driver, testCaseName, itemId); --failed
			PageRequisitionCheckOut.clickOnItemNameToViewItemDetails(driver, testCaseName, itemId);

			//FlowRequisition.viewItemDetails(driver, testCaseName, itemId);

			flag = currency.equalsIgnoreCase(ModalGuidedItemDetails.getCurrency(driver, testCaseName));
			assertTrue("Currency of guided item was displayed as blank on copying a requisition", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 225111 - Script error is
	 * displayed on viewing a rejected requisition in approval tab in the
	 * following scenario <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_289897(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		Requisition requisition = new Requisition();
		String testCaseName = testCase.getTestMethodName();
		String errorMsg = "";
		int i = 1;
		boolean flag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);

			// to set non mandatory fields
			requisition.setCommentForSupplier(IConstantsData.COMMENT_FOR_SUPPLIER);
			requisition.setReasonForOrdering(IConstantsData.REASON_FOR_ORDERING);
			requisition.setRequired(true);
			requisition.setModifyWorkflowSettings(true);
			requisition.setNextAction(IConstantsData.SUBMIT_REQ_FOR_APPROVAL);

			// to create req
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// search req
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);

			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			Assert.assertTrue("req not searched", requisition != null);

			ApprovalAllRequests approvalAllRequests = new ApprovalAllRequests();
			approvalAllRequests.setDocumentNo(requisition.getReqNo());

			approvalAllRequests.setDocumentType(IConstantsData.REQUISITION);
			approvalAllRequests.setActions(IConstantsData.REJECT);

			// search and perform reject in approval all requests
			approvalAllRequests = FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);
			assertTrue("Requisition was not rejected from approval all requests", approvalAllRequests.isResult());

			// to view req from approval all requests
			PageAllRequestsApproval.clickOnFirstRowApprovalDocumentNo(driver, testCaseName);

			flag = PageRequisitionView.getRequisitionNo(driver, testCaseName).equalsIgnoreCase(requisition.getReqNo());
			assertTrue("User not able to view requisition from approval tab", flag);

			List<JavaScriptError> errors = JavaScriptError.readErrors(driver);
			logger.info("Total no of java script errors : " + errors.size());

			// if errors list is not empty the mark testcase as fail
			flag = errors.isEmpty();
			assertTrue("Script error is displayed on viewing a rejected requisition in approval tab in the following scenario", flag);
			map.put("No of java script errors ", Integer.toString(errors.size()));

			logger.info("Error Message                  Line Number                Source Name");
			for (JavaScriptError error : errors)
			{
				errorMsg += error.getErrorMessage() + " " + error.getLineNumber() + " " + error.getSourceName() + "\n";
				map.put("Error Msg " + i++, errorMsg);
			}
			logger.info(errorMsg);

			logger.info("@@@@@ Script Error : ");
			LogEntries logEntries = driver.manage().logs().get(LogType.BROWSER);
			for (LogEntry entry : logEntries)
			{
				System.out.println(new Date(entry.getTimestamp()) + " " + entry.getLevel() + " " + entry.getMessage());
			}

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 227699 - Item status in
	 * requisition is shown with buyer if any one item in requisition is with
	 * buyer . <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_295877(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		Requisition requisition = new Requisition();
		String testCaseName = testCase.getTestMethodName(), catalogItemId, guidedItemId;
		boolean flag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			CommonServices.startTestCase(driver, testCase);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.BOTH);
			//requisition.getItems().getGuidedItems().get(0).setActivity(IConstantsData.Checkout);

			requisition = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			catalogItemId = requisition.getItems().getCatelogItems().get(0).getItemID();
			guidedItemId = requisition.getItems().getGuidedItems().get(0).getItemID();

			// to view the req
			FlowBuyersDeskListing.viewRequisitionAtBuyersDesk(driver, testCaseName);

			// to remove catalog item from convert to po
			List<String> itemIds = new ArrayList<String>();
			itemIds.add(catalogItemId);

			// convert To Po
			FlowBuyersDesk.convertToPo(driver, testCaseName, itemIds);

			// submit all POs
			List<PurchaseOrder> purchaseOrders = FlowBuyersDesk.submitAllSuggestedPosForProcessing(driver, testCaseName);

			// to search po
			flag = FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			assertTrue("Purchase order was not created", flag);
			if (PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL))
			{
				ApprovalAllRequests approvalAllRequests = new ApprovalAllRequests();
				approvalAllRequests.setDocumentNo(purchaseOrders.get(0).getPoNo());
				approvalAllRequests.setActions(IConstantsData.APPROVE);
				approvalAllRequests.setDocumentType(IConstantsData.PURCHASE_ORDER);
				FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);
			}

			// to search po
			flag = FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			assertTrue("Error while searching Purchase order", flag);

			flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.COMPLETE_RELEASED_FILTER_LABEL);
			assertTrue("Status of PO should be released", flag);

			//			requisition.setReqNo("OU_1-001/PR/3361");
			//			catalogItemId="d8b912a7-7c10-43ae-bfe3-0be93d67122c";
			//			guidedItemId="33c9c09e-e427-415e-b5b4-623505238239";
			// search req
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());

			// view req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);

			PageRequisitionView.clickOnRequisitionTab(driver, testCaseName);
			//1.Ordered //In_Progress_Status

			String status1 = PageRequisitionView.getItemStatus(driver, testCaseName, catalogItemId);
			logger.info("\nPageRequisitionView.getItemStatus(driver, testCaseName, catalogItemId) :" + status1);
			String status2 = PageRequisitionView.getItemStatus(driver, testCaseName, guidedItemId);
			logger.info("\nPageRequisitionView.getItemStatus(driver, testCaseName, guidedItemId) :" + status2);

			flag = status1.trim().equalsIgnoreCase(IConstantsData.ORDERED_FILTER_LABEL);
			Assert.assertTrue("status of item is wrong it should be 'Ordered'", flag);

			flag = status2.trim().equalsIgnoreCase(IConstantsData.PENDING_FILTER_STATUS);
			Assert.assertTrue("status of item is wrong it should be 'pending'", flag);

			ActionBot.scroll(driver, "500");

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 228019 - Amount is displayed
	 * in negative as delivery split when need a quote item is added in
	 * checkout. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider", retryAnalyzer = CustomRetryListener.class)
	public void RTC_298057(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		Requisition requisition = new Requisition();
		DeliveryItemSummary deliveryItemSummary = new DeliveryItemSummary();
		Item item = new Item();
		String amount;
		boolean flag = false;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			item = ObjectCreation.getItem(IConstantsData.GUIDED_ITEM);
			requisition = ObjectCreation.getRequisition(driver);
			requisition.setItems(item);

			// to set delivery split object
			deliveryItemSummary.setSplitDeliveryToMultipleLocations(true);
			deliveryItemSummary.setNextAction(IConstantsData.NONE);
			requisition.setDeliveryItemSummary(deliveryItemSummary);

			// to set non mandatory fields
			requisition.setCommentForSupplier(IConstantsData.COMMENT_FOR_SUPPLIER);
			requisition.setReasonForOrdering(IConstantsData.REASON_FOR_ORDERING);
			requisition.setRequired(true);
			requisition.setVerifyWorkflow(false);
			requisition.setNextAction(IConstantsData.NONE);

			requisition.getItems().getGuidedItems().get(0).setSourcingStatus(IConstantsData.Need_a_Quote);
			// to create req
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			requisition.getDeliveryItemSummary().getDeliverySplitInfo();

			// to check amount
			PageRequisitionCheckOut.clickEditItemSummary(driver, testCaseName, requisition.getItems().getGuidedItems().get(0).getItemID());

			amount = ModelItemSummaryDelivery.getDeliveryMultiSplitAmount(driver, testCaseName, requisition.getItems().getGuidedItems().get(0).getItemID(), 0);

			flag = !amount.contains("-");
			assertTrue("Amount is displayed in negative as delivery split when need a quote item is added in checkout", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 228514 - Requisition eform
	 * does not get loaded when purchase type gets defaulted. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider", retryAnalyzer = CustomRetryListener.class)
	public void RTC_301529(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		Requisition requisition = new Requisition();
		PEform pEform = new PEform();
		String sectionName, fieldName;
		String[] temp;
		MasterDataTenantConfig masterDataTenantConfig = new MasterDataTenantConfig();
		boolean flag = false, pEformCreatedFlag = false;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// requisition object
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);

			// to set non mandatory fields
			requisition.setCommentForSupplier(IConstantsData.COMMENT_FOR_SUPPLIER);
			requisition.setReasonForOrdering(IConstantsData.REASON_FOR_ORDERING);
			requisition.setRequired(true);
			requisition.setNextAction(IConstantsData.NONE);

			// peform object
			pEform = ObjectCreation.getDefaultPEformObject();
			pEform.setPurchaseType(CommonServices.getTestData(IConstantsData.PURCHASE_TYPE, 0));
			// master data opject
			//masterDataTenantConfig.setPurchaseType(CommonServices.getTestData(IConstantsData.PURCHASE_TYPE));

			// change purchase type from master data
			//	masterDataTenantConfig = FlowMasterDataTenantConfig.changeMasterDataTenantConfig(driver, testCaseName, masterDataTenantConfig);

			// create PEform
			pEform = FlowPEform.createPEForm(driver, testCaseName, pEform);
			pEformCreatedFlag = true;

			// check if PEform created
			flag = FlowPEform.checkIfPEformSearched(driver, testCaseName, pEform.getPeformName());
			assertTrue("PForm was not created", flag);
			requisition.setPurchaseType(CommonServices.getTestData(IConstantsData.PURCHASE_TYPE, 0));
			requisition.setNextAction(IConstantsData.NONE);

			// to create req
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			sectionName = PageRequisitionCheckOut.getSectionNameOfPEForm(driver, testCaseName);
			fieldName = PageRequisitionCheckOut.getFieldNameOfPEForm(driver, testCaseName);
			if (fieldName.contains(":"))
			{
				temp = StringUtils.split(fieldName, ":");
				fieldName = temp[0].trim();
			}

			flag = sectionName.equalsIgnoreCase(pEform.getSectionName()) && fieldName.equalsIgnoreCase(pEform.getFieldName());
			assertTrue("Peform loaded on checkout page was wrong", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				if (pEformCreatedFlag)
				{
					// to delete the PEform
					FlowPEform.deactivateNdeleteCEform(driver, testCaseName, pEform.getPeformName());
				}
			}
			catch (Exception e)
			{
				logger.error("Error while deactivating PEform : " + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 229542 - Relevance filter is
	 * not on Favorites listing in all Browsers. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider", retryAnalyzer = CustomRetryListener.class)
	public void RTC_302812(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			//MainPageHeaderLevelTab.clickOnMyFavoritesSubTab(driver);
			PageMyFavorites.selectFavoriteSortByFilter(driver, testCaseName, IConstantsData.Relevance_SortBy_Option);
			PageMyFavorites.selectFavoriteSortByFilter(driver, testCaseName, IConstantsData.Price_Low_To_High_SortBy_Option);
			//PageMyFavorites.selectFavoriteSortByFilter(driver, testCaseName, IConstantsData.Relevance_SortBy_Option);

			logger.info("@@@@@ Script Error : ");

			LogEntries logEntries = driver.manage().logs().get(LogType.BROWSER);
			for (LogEntry entry : logEntries)
			{
				logger.info(new Date(entry.getTimestamp()) + " " + entry.getLevel() + " " + entry.getMessage());
			}

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 226560 - Unable to submit a
	 * requisition, cost center error is displayed in the following scenario
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider", retryAnalyzer = CustomRetryListener.class)
	public void RTC_294041(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_320562"));
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase, mappedTestCases);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			Requisition requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.BOTH);

			// billing req summary
			BillingRequisitionSummary billingRequisitionSummary = new BillingRequisitionSummary();
			billingRequisitionSummary.setBusinessUnit(CommonServices.getTestData(IConstantsData.BusinessUnit_Name1));
			billingRequisitionSummary.setLocation(CommonServices.getTestData(IConstantsData.LOCATION_NAME));
			billingRequisitionSummary.setNextAction(IConstantsData.NONE);

			// cost booking req summary
			requisition.getCostBookingRequisitionSummary().setBookCostToSingleCostCenter(false);
			requisition.getCostBookingRequisitionSummary().setSplitCostAtLineItemLevel(true);
			requisition.getCostBookingRequisitionSummary().setNextAction(IConstantsData.SAVE);
			requisition.getCostBookingRequisitionSummary().setAssignedProjectToPurchaseCost(IConstants.YES);

			requisition.setEditItemLevelInfo(false);
			requisition.setChangeMultiple(true);

			// change multiple object
			ChangeMultiple changeMultiple = new ChangeMultiple();
			changeMultiple.setGlAccount(CommonServices.getTestData(IConstantsData.GL_ACCOUNT));
			Map<String, String> ccBudgetProject = ObjectCreation.getCostCenterProjectAndBudget();
			changeMultiple.setCostCenter(ccBudgetProject.get(IConstantsData.costCenter));
			changeMultiple.setProject(ccBudgetProject.get(IConstantsData.project));
			changeMultiple.setBudget(ccBudgetProject.get(IConstantsData.budget));
			changeMultiple.setRequiredByDate(requisition.getCustomDate());

			requisition.setChangeMultiple(changeMultiple);

			// create req
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// search req
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			CommonServices.setMappedTestCaseResult(requisition.isResult(), mappedTestCases.get(0),
				"GL account type given shown as inactive during req submit even when it is active");
			assertTrue("Requisition was not created, Error while searching requisition.", requisition.isResult());

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 226730 - On submitting a
	 * requisition, requisition is displayed in scheduled state even though
	 * "Release PO immediately setting" is YES <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider", retryAnalyzer = CustomRetryListener.class)
	public void RTC_294126(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		boolean settingsChangedFlag = false, flag = false;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			Requisition requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.BOTH);

			PurchaseOrderSettings purchaseOrderSettings = new PurchaseOrderSettings();
			purchaseOrderSettings.setReleaseOrdersImmediately(true);
			purchaseOrderSettings.setAutomaticallyGenerateOrders(true);
			purchaseOrderSettings.setNextAction(IConstantsData.SAVE);

			// change po settings
			settingsChangedFlag = true;
			FlowPurchaseOrderSetting.changePOSetting(driver, testCaseName, purchaseOrderSettings);

			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			// create req
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// search req
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			assertTrue("Requisition was not created, Error while searching requisition.", requisition.isResult());

			flag = PageMyRequisition.getStatusOfFirstReq(driver, testCaseName).equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL);
			assertTrue("Status of requisition was wrong, it should be In Apporval", flag);

			// approve req
			ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, requisition.getReqNo(), IConstantsData.REQUISITION,
				IConstantsData.APPROVE);
			FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

			// search req
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition.", requisition.isResult());

			flag = PageMyRequisition.getStatusOfFirstReq(driver, testCaseName).equalsIgnoreCase(IConstantsData.COMPLETE_RELEASED_FILTER_LABEL);
			assertTrue("Status of requisition was wrong, it should be Released", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				if (settingsChangedFlag)
				{
					PurchaseOrderSettings purchaseOrderSettings = new PurchaseOrderSettings();
					purchaseOrderSettings.setReleaseOrdersImmediately(true);
					purchaseOrderSettings.setAutomaticallyGenerateOrders(false);

					// change po settings
					FlowPurchaseOrderSetting.changePOSetting(driver, testCaseName, purchaseOrderSettings);
				}
			}
			catch (Exception e)
			{
				logger.error("Exception occurred while changing Pruchase Order setting to default value" + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 228336 - Requisition>>in the
	 * audit trail of a released requisition,entry of a released PO is shown
	 * twice and together with the amendment entry shown after both release
	 * entry <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider", retryAnalyzer = CustomRetryListener.class)
	public void RTC_319853(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_307756"));
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase, mappedTestCases);
		User user = null;
		boolean flag = false;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			Requisition requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);

			// req to buyers desk
			requisition = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			// view req at buyers d0esk
			requisition = FlowBuyersDeskListing.searchAtBuyersDeskListing(driver, testCaseName, requisition);
			Assert.assertTrue("req not searched at buyers desk", requisition != null);
			FlowBuyersDeskListing.viewRequisitionAtBuyersDesk(driver, testCaseName);

			ActionBot.scroll(driver);

			flag = PageBuyersDesk.isItemNameLinkPresent(driver, testCaseName, requisition.getItems().getCatelogItems().get(0).getItemID());
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(0), "On editing a requisition in buyers desk, no items were present in the requisition");

			// convert To Po
			FlowBuyersDesk.convertToPo(driver, testCaseName);

			// submit all POs
			List<PurchaseOrder> purchaseOrders = FlowBuyersDesk.submitAllSuggestedPosForProcessing(driver, testCaseName);

			// to search po
			flag = FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			assertTrue("Purchase order was not created", flag);

			if (PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL))
			{
				ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, purchaseOrders.get(0).getPoNo(),
					IConstantsData.PURCHASE_ORDER, IConstantsData.APPROVE);
				FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

				// to search po
				flag = FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
				assertTrue("Purchase order was not created", flag);

				flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.COMPLETE_RELEASED_FILTER_LABEL);
				assertTrue("Status of PO was wrong, it should be Released", flag);
			}

			flag = FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			assertTrue("Purchase order was not created", flag);

			// view po
			FlowPoListing.viewPO(driver, testCaseName);

			// to amend the PO
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			ModalViewPOActions.clickOnAmendPoLink(driver, testCaseName);

			logger.info("Amending PO by adding new Catalog Item");

			ActionBot.scroll(driver, "650");
			// to Amend PO
			Item item = ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);
			item.getCatelogItems().get(0).setItemName(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 0));

			item = FlowStandardPo.addItem(driver, testCaseName, item);
			ActionBot.waitForPageLoad(driver);

			// to submit PO for processing
			String poNo = FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			if (poNo != null)
			{
				purchaseOrders.get(0).setPoNo(poNo);
			}

			// search req
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Requsition was not searched", requisition.isResult());

			// view req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);

			PageRequisitionView.clickOnRequisitionTab(driver, testCaseName);

			ActionBot.scroll(driver, "400");

			String action = PageRequisitionView.getAuditTrailAction(driver, testCaseName, 1);
			flag = action.contains("released");
			assertTrue(
				"Requisition>>in the audit trail of a released requisition,entry of a released PO is shown twice and together with the amendment entry shown after both release entry",
				flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Requisition >> Created by field while
	 * viewing requisition should change to new owner for transferred
	 * requisitions . Check for transferred requisitions in all different
	 * statuses . <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider", retryAnalyzer = CustomRetryListener.class)
	public void RTC_375463(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		User user2 = null;
		User newOwner = new User();
		User newOwner1 = new User();
		String requester, message;
		boolean flag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_375469"));//0
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_375449"));//1
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_375461"));//2
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_375465"));//3
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_375450"));//4
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_375462"));//5
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_375467"));//6
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_375464"));//7

			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			user2 = LoginLogoutServices.login(driver, testCase);
			user = user2;
			newOwner = UserUtilHelper.getAvailableUserFromList();
			newOwner1 = UserUtilHelper.getAvailableUserFromList();

			Requisition requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			requisition.setNextAction(IConstantsData.SAVE_AS_DRAFT_REQ);
			requisition.setEditHeaderLevelInfo(false);
			requisition.setEditItemLevelInfo(false);
			requisition.setVerifyWorkflow(false);
			// create req
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// search req
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());

			flag = requisition.getStatus().equalsIgnoreCase(IConstantsData.DRAFT_FILTER_LABEL);
			assertTrue("Status of requisition was wrong, it should be Draft", flag);

			// to change requisiton ownership
			EntityOwnership entityOwnership = ObjectCreation.getDefaultObjectOfEnityOwnerShip(user.getUsername(), newOwner.getUsername(),
				IConstantsData.search_entity_in_req_number, requisition.getReqNo());
			FlowEntityOwnership.changeOwner(driver, testCaseName, entityOwnership);
			ActionBot.defaultSleep();
			PageMasterDataSettings.clickOnReturnToSetUpModule(driver, testCaseName);

			// logout
			LoginLogoutServices.logout(driver, testCase, user2);
			UserUtilHelper.addUserToList(user2);

			// login with new owner
			user = newOwner;
			LoginLogoutServices.login(driver, testCase, newOwner);

			/**
			 * RTC_375469 : Requisition >> "Transferred to me" filter should
			 * show all the requisition which has been transferred to logged in
			 * user .
			 **/
			//		MyRequisitionFilter myRequisitionFilter = new MyRequisitionFilter();
			//			myRequisitionFilter.setTransferredToMe(true);
			//			List<String> statusOfFilter = new ArrayList<String>();
			//			statusOfFilter.add(IConstantsData.DRAFT_FILTER_LABEL);
			//			myRequisitionFilter.setStatusOfFilter(statusOfFilter);

			// assertTrue("Transferred To Me filtered was not applied properly",
			// myRequisitionFilter.isResult());
			//MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			// search req
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			flag = requisition.getStatus().equalsIgnoreCase(IConstantsData.DRAFT_FILTER_LABEL);

			CommonServices.setMappedTestCaseResult(flag && requisition.isResult(), mappedTestCases.get(0), "Error while searching transferred requisition in new owner");

			/**
			 * RTC_375449 : Requisition >>Transferred requisition should be
			 * shown in requisition listing of new owner . Check for draft
			 * requisition .
			 **/
			CommonServices.setMappedTestCaseResult(flag && requisition.isResult(), mappedTestCases.get(1), "Error while searching Draft transferred requisition in new owner");

			assertTrue("Error while searching transferred requisition in new owner", requisition.isResult());
			assertTrue("Status of transeferred requisition was wrong, it should be in Draft status", flag);

			/**
			 * RTC_375461 : Requisition >>If there is no on behalf user in
			 * transferred requisitions then new owner should be shown in
			 * requester column of requisition listing .
			 **/
			requester = PageMyRequisition.getFirstRequester(driver, testCaseName);
			flag = requester.equalsIgnoreCase(newOwner.getDisplayName());
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(2),
				"If there is no on behalf user in transferred requisitions then new owner was not shown in requester column of requisition listing");

			// view req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);

			/**
			 * RTC_375465 : Requisition >>Requester in workflow trail should be
			 * new onwer on editing transferred draft requisition if on behalf
			 * user is not present for that requisition .
			 **/
			requester = PageRequisitionCheckOut.getRequesterInWorkflowTrail(driver, testCaseName);
			flag = requester.equalsIgnoreCase(newOwner.getDisplayName());
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(3),
				"Requester in workflow trail was not new onwer on editing transferred draft requisition if on behalf user is not present for that requisition");

			// fill req details
			PageRequisitionCheckOut.clickEditHeaderInfo(driver, testCaseName);
			TabCheckoutReqSummary.clickCostBookingTab(driver, testCaseName);
			FlowRequisition.fillCostBookingRequisitionSummary(driver, testCaseName, requisition.getCostBookingRequisitionSummary());

			// submit req
			FlowRequisition.submitReq(driver, testCaseName, true);

			// search req
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());

			flag = requisition.getStatus().contains(IConstantsData.IN_APPROVAL_FILTER_LABEL);
			assertTrue("Status of requisition was wrong, it should be In Approval", flag);

			// to change requisiton ownership
			entityOwnership = ObjectCreation.getDefaultObjectOfEnityOwnerShip(newOwner.getUsername(), newOwner1.getUsername(), IConstantsData.search_entity_in_req_number,
				requisition.getReqNo());
			FlowEntityOwnership.changeOwner(driver, testCaseName, entityOwnership);
			PageMasterDataSettings.clickOnReturnToSetUpModule(driver, testCaseName);

			// logout
			LoginLogoutServices.logout(driver, testCase, newOwner);
			UserUtilHelper.addUserToList(newOwner);

			// login with new owner
			user = newOwner1;
			LoginLogoutServices.login(driver, testCase, newOwner1);

			//			myRequisitionFilter = new MyRequisitionFilter();
			//			myRequisitionFilter.setTransferredToMe(true);
			//			List<String> statusOfFilter1 = new ArrayList<String>();
			//			statusOfFilter1.add(IConstantsData.IN_APPROVAL_FILTER_LABEL);
			//			myRequisitionFilter.setStatusOfFilter(statusOfFilter1);

			//myRequisitionFilter = FlowMyRequisitions.applyMyRequisitionStatusFilter(driver, testCaseName,	myRequisitionFilter);

			// assertTrue("Transferred To Me filtered was not applied properly",
			// myRequisitionFilter.isResult());

			/**
			 * RTC_375450 : Requisition >>Transferred requisition should be
			 * shown in requisition listing of new owner . Check for in approval
			 * requisition .
			 **/
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			// search req
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			flag = requisition.getStatus().contains(IConstantsData.IN_APPROVAL_FILTER_LABEL);

			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(4), "Error while searching In Approval transferred requisition in new owne");

			assertTrue("Error while searching transferred requisition in new owner", requisition.isResult());
			assertTrue("Status of transeferred requisition was wrong, it should be in IN Approval status", flag);

			// view req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);

			/**
			 * RTC_375462 : Requisition >> Created by field while viewing
			 * requisition should change to new owner for transferred
			 * requisitions . Check for transferred requisitions in all
			 * different statuses .
			 **/
			requester = PageRequisitionView.getRequesterInWorkflowNode(driver, testCaseName);
			flag = requester.equalsIgnoreCase(newOwner1.getDisplayName());
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(5),
				"Created by field while viewing requisition was not change to new owner for transferred requisitions");

			ActionBot.scroll(driver, "400");

			/**
			 * RTC_375467 : Requisition >>Requester in workflow trail will not
			 * change to new owner if submitted requisition is transferred .
			 **/
			requester = PageRequisitionView.getRequesterInWorkflowNode(driver, testCaseName);
			flag = requester.equalsIgnoreCase(newOwner.getDisplayName()) && !requester.equalsIgnoreCase(newOwner1.getDisplayName());
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(6), "Requester in workflow trail was changed to new owner if submitted requisition is transferred");

			// to clear audit trail filter
			PageRequisitionView.clickOnClearFilterLink(driver, testCaseName);

			// to get audit trail info
			AuditTrail auditTrail = FlowViewRequisition.getAuditTrailInfo(driver, testCaseName, 1);

			/**
			 * RTC_375464 : Requisition >>New version of requisition must be
			 * created with requisition ownership changed audit trail entry .
			 **/
			flag = auditTrail.getVersion().equalsIgnoreCase("v3");
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(7),
				"New version of requisition was not created with requisition ownership changed audit trail entry .");

			/**
			 * RTC_375463 : Requisition >>Once an ownership of a requisition is
			 * changed there should be an audit trail entry : Requisition
			 * ownership changed | Admin user name performing this action | |
			 * Admin | Date/Time | v2 | New Owner: A; Previous owner: B . Check
			 * for requisitions in all different statuses .
			 **/
			Date date = new Date();
			SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
			String currentDate = dateFormat.format(date);

			message = "New Owner: " + newOwner1.getDisplayName() + "; Previous owner: " + newOwner.getDisplayName();
			logger.info("Message to be shown on Audit Trail : " + message);

			flag = auditTrail.getAction().equalsIgnoreCase(IConstantsData.AUDIT_TRAIL_REQ_OWNERSHIP_CHANGED) && auditTrail.getRole().equalsIgnoreCase("Admin")
				&& auditTrail.getDateTime().contains(currentDate) && auditTrail.getVersion().equalsIgnoreCase("v3") && auditTrail.getMessage().equalsIgnoreCase(message);
			assertTrue("Audit trail entry in requisition view page for Requisition ownership changed was wrong", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Requisition >>Transferred requisition
	 * should be shown in requisition listing of new owner . Check for Returned
	 * with Quote requisition . <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider", retryAnalyzer = CustomRetryListener.class)
	public void RTC_375459(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		User user2 = null;
		User newOwner = new User();
		User newOwner1 = new User();
		new User();
		boolean flag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_375460"));

			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			user2 = LoginLogoutServices.login(driver, testCase);
			user = user2;
			newOwner = UserUtilHelper.getAvailableUserFromList();
			newOwner1 = UserUtilHelper.getAvailableUserFromList();

			Requisition requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.GUIDED_ITEM);
			requisition.getItems().getGuidedItems().get(0).setSourcingStatus(IConstantsData.Need_a_Quote);

			// create req
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// search req
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());

			flag = requisition.getStatus().toLowerCase().contains(IConstantsData.SENT_FOR_QUOTE_FILTER_LABEL.toLowerCase());
			assertTrue("Status of requisition was wrong, it should be Sent For Quote", flag);

			// to change requisiton ownership
			EntityOwnership entityOwnership = ObjectCreation.getDefaultObjectOfEnityOwnerShip(user.getUsername(), newOwner.getUsername(),
				IConstantsData.search_entity_in_req_number, requisition.getReqNo());
			FlowEntityOwnership.changeOwner(driver, testCaseName, entityOwnership);
			PageMasterDataSettings.clickOnReturnToSetUpModule(driver, testCaseName);

			// logout
			LoginLogoutServices.logout(driver, testCase, user2);
			UserUtilHelper.addUserToList(user2);

			// login with new owner
			user = newOwner;
			LoginLogoutServices.login(driver, testCase, newOwner);

			/**
			 * RTC_375460 : Requisition >>Transferred requisition should be
			 * shown in requisition listing of new owner . Check for Sent for
			 * Quote requisition .
			 **/
			MyRequisitionFilter myRequisitionFilter = new MyRequisitionFilter();
			myRequisitionFilter.setTransferredToMe(true);
			List<String> statusOfFilter = new ArrayList<String>();
			statusOfFilter.add(IConstantsData.SENT_FOR_QUOTE_FILTER_LABEL);
			myRequisitionFilter.setStatusOfFilter(statusOfFilter);

			//myRequisitionFilter = FlowMyRequisitions.applyMyRequisitionStatusFilter(driver, testCaseName, myRequisitionFilter);

			// search req
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			flag = requisition.getStatus().toLowerCase().contains(IConstantsData.SENT_FOR_QUOTE_FILTER_LABEL.toLowerCase());

			CommonServices.setMappedTestCaseResult(flag && requisition.isResult(), mappedTestCases.get(0),
				"Error while searching transferred requisition which is in Sent For Quote status in new owner");

			assertTrue("Error while searching transferred requisition in new owner", requisition.isResult());
			assertTrue("Status of transeferred requisition was wrong, it should be in Draft status", flag);

			// search at buyers desk
			requisition = FlowBuyersDeskListing.searchAtBuyersDeskListing(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition at buyers desk", requisition.isResult());

			// view req
			FlowBuyersDeskListing.viewRequisitionAtBuyersDesk(driver, testCaseName);

			GuidedItem guidedItem = requisition.getItems().getGuidedItems().get(0);
			guidedItem.setSourcingStatus(IConstantsData.BUYER_NEGOTIATED_PRICE);
			guidedItem.setPrice(263.693f);
			guidedItem.setNextAction(IConstantsData.SAVE);

			// view item details
			PageBuyersDesk.clickOnItemName(driver, testCaseName, guidedItem.getItemID());

			// edit item with quote
			guidedItem = FlowBuyersDesk.editGuidedItemDetailsatBuyersDesk(driver, testCaseName, guidedItem);

			// return req
			FlowBuyersDesk.returnReqWithQuote(driver, testCaseName);

			// search at buyers desk
			requisition = FlowBuyersDeskListing.searchAtBuyersDeskListing(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition at buyers desk", requisition.isResult());

			flag = PageBuyersDeskListing.getFirstRowReqStatus(driver, testCaseName).toLowerCase().contains(IConstantsData.RETURNED_WITH_QUOTE_FILTER_LABEL.toLowerCase());
			assertTrue("Status of requisition was wrong, it should be Returned With Quote", flag);

			// to change requisiton ownership
			entityOwnership = ObjectCreation.getDefaultObjectOfEnityOwnerShip(newOwner.getUsername(), newOwner1.getUsername(), IConstantsData.search_entity_in_req_number,
				requisition.getReqNo());
			FlowEntityOwnership.changeOwner(driver, testCaseName, entityOwnership);
			PageMasterDataSettings.clickOnReturnToSetUpModule(driver, testCaseName);

			// logout
			LoginLogoutServices.logout(driver, testCase, newOwner);
			UserUtilHelper.addUserToList(newOwner);

			// login with new owner
			user = newOwner1;
			LoginLogoutServices.login(driver, testCase, newOwner1);

			/**
			 * RTC_375460 : Requisition >>Transferred requisition should be
			 * shown in requisition listing of new owner . Check for Sent for
			 * Quote requisition .
			 **/
			myRequisitionFilter.setTransferredToMe(true);
			List<String> statusOfFilter1 = new ArrayList<String>();
			statusOfFilter1.add(IConstantsData.RETURNED_WITH_QUOTE_FILTER_LABEL);
			myRequisitionFilter.setStatusOfFilter(statusOfFilter1);

			//	myRequisitionFilter = FlowMyRequisitions.applyMyRequisitionStatusFilter(driver, testCaseName, myRequisitionFilter);

			// search req
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			assertTrue("Error while searching Returned With Quote transferred requisition in new owner", requisition.isResult());

			flag = requisition.getStatus().toLowerCase().contains(IConstantsData.RETURNED_WITH_QUOTE_FILTER_LABEL.toLowerCase());
			assertTrue("Status of transeferred requisition was wrong, it should be in Returned With Quote", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Requisition >>Transferred requisition
	 * should be shown in requisition listing of new owner . Check for Returned
	 * with Quote requisition . <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider", retryAnalyzer = CustomRetryListener.class)
	public void RTC_375457(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		User user2 = null;
		User newOwner = new User();
		boolean flag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_375451")); //0
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_375456")); //1
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_375452")); //2
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_375453")); //3
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_375458")); //4
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_375455")); //5

			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			user2 = LoginLogoutServices.login(driver, testCase);
			user = user2;
			newOwner = UserUtilHelper.getAvailableUserFromList();
			UserUtilHelper.getAvailableUserFromList();

			/** Ready for Approval **/
			Requisition requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			requisition.setModifyWorkflowSettings(true);

			// create req
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// search req
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());

			flag = requisition.getStatus().contains(IConstantsData.READY_FOR_APPROVAL_FILTER_LABEL);
			assertTrue("Status of requisition was wrong, it should be Ready For Approval", flag);

			// to change requisiton ownership
			EntityOwnership entityOwnership = ObjectCreation.getDefaultObjectOfEnityOwnerShip(user.getUsername(), newOwner.getUsername(),
				IConstantsData.search_entity_in_req_number, requisition.getReqNo());
			FlowEntityOwnership.changeOwner(driver, testCaseName, entityOwnership);
			PageMasterDataSettings.clickOnReturnToSetUpModule(driver, testCaseName);

			// logout
			LoginLogoutServices.logout(driver, testCase, user2);
			// UserUtilHelper.addUserToList(user2);

			// login with new owner
			user = newOwner;
			LoginLogoutServices.login(driver, testCase, newOwner);
			ActionBot.defaultSleep();
			/**
			 * RTC_375451 : Requisition >>Transferred requisition should be
			 * shown in requisition listing of new owner . Check for ready for
			 * approval requisition .
			 **/
			//			MyRequisitionFilter myRequisitionFilter = new MyRequisitionFilter();
			//			myRequisitionFilter.setTransferredToMe(true);
			//			List<String> statusOfFilter = new ArrayList<String>();
			//			statusOfFilter.add(IConstantsData.READY_FOR_APPROVAL_FILTER_LABEL);
			//			myRequisitionFilter.setStatusOfFilter(statusOfFilter);

			//			myRequisitionFilter = FlowMyRequisitions.applyMyRequisitionStatusFilter(driver, testCaseName, myRequisitionFilter);

			//MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			// search req
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			flag = requisition.getStatus().contains(IConstantsData.READY_FOR_APPROVAL_FILTER_LABEL);

			CommonServices.setMappedTestCaseResult(flag && requisition.isResult(), mappedTestCases.get(0),
				"Error while searching transferred requisition which is in Ready For Approval status in new owner");
			assertTrue("Error while searching transferred requisition which is in Ready For Approval status in new owner", flag && requisition.isResult());

			// view req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);

			// submit req
			if (PageRequisitionView.isSubmitForApprovalButtonPresent(driver, testCaseName))
			{
				PageRequisitionView.clickOnSubmitForApproval(driver, testCaseName);
			}
			//FlowRequisition.submitReq(driver, testCaseName, true);

			// search req
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());
			flag = requisition.getStatus().contains(IConstantsData.IN_APPROVAL_FILTER_LABEL);
			assertTrue("Status of requisition was wrong, it should be in In Approval status", flag);

			/** reject req **/
			ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, requisition.getReqNo(), IConstantsData.REQUISITION,
				IConstantsData.REJECT);
			approvalAllRequests = FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);
			assertTrue("Requisition was not rejected", approvalAllRequests.isResult());

			// search req
			//MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());
			flag = requisition.getStatus().trim().equalsIgnoreCase(IConstantsData.REJECTED_FILTER_LABEL);
			assertTrue("Status of requisition in My Requisition Tab was wrong, it should be in Rejected status", flag);

			entityOwnership = ObjectCreation.getDefaultObjectOfEnityOwnerShip(newOwner.getUsername(), user2.getUsername(), IConstantsData.search_entity_in_req_number,
				requisition.getReqNo());
			FlowEntityOwnership.changeOwner(driver, testCaseName, entityOwnership);
			PageMasterDataSettings.clickOnReturnToSetUpModule(driver, testCaseName);

			// logout
			LoginLogoutServices.logout(driver, testCase, newOwner);
			// UserUtilHelper.addUserToList(newOwner);

			// login with new owner
			user = user2;
			LoginLogoutServices.login(driver, testCase, user2);
			ActionBot.defaultSleep();
			/**
			 * RTC_375456 : Requisition >>Transferred requisition should be
			 * shown in requisition listing of new owner . Check for rejected
			 * requisition .
			 **/
			//			myRequisitionFilter.setTransferredToMe(true);
			//			List<String> statusOfFilter1 = new ArrayList<String>();
			//			statusOfFilter1.add(IConstantsData.REJECTED_FILTER_LABEL);
			//			myRequisitionFilter.setStatusOfFilter(statusOfFilter1);

			//myRequisitionFilter = FlowMyRequisitions.applyMyRequisitionStatusFilter(driver, testCaseName, myRequisitionFilter);
			//MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			// search req
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			flag = requisition.getStatus().trim().equalsIgnoreCase(IConstantsData.REJECTED_FILTER_LABEL);

			CommonServices.setMappedTestCaseResult(flag && requisition.isResult(), mappedTestCases.get(1), "Error while searching Rejected transferred requisition in new owner");

			assertTrue("Error while searching Rejected transferred requisition in new owner", requisition.isResult());
			assertTrue("Status of transeferred requisition was wrong, it should be in Rejected", flag);

			// copy req
			FlowMyRequisitions.copyReq(driver, testCaseName, false);

			// fill req details
			requisition.setReqNo(null);
			requisition.setReqName(CommonUtilities.getReqName());
			//requisition = FlowRequisition.fillcheckoutForm(driver, testCaseName, requisition, requisition.getItems());
			requisition.setReqName(PageRequisitionCheckOut.fillCheckoutReqName(driver, testCaseName, requisition.getReqName()));
			requisition.getCustomDate().setDate(PageRequisitionCheckOut.selectRequiredByDate(driver, testCaseName, requisition.getCustomDate().getDay(),
				requisition.getCustomDate().getMonth(), requisition.getCustomDate().getYear()));

			// submit req
			FlowRequisition.submitReq(driver, testCaseName, true);

			// search req
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());
			flag = requisition.getStatus().contains(IConstantsData.IN_APPROVAL_FILTER_LABEL);
			assertTrue("Status of requisition was wrong, it should be in In Approval status", flag);

			approvalAllRequests.setDocumentNo(requisition.getReqNo());
			approvalAllRequests.setActions(IConstantsData.APPROVE);
			approvalAllRequests = FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);
			assertTrue("Requisition was not approved", approvalAllRequests.isResult());

			// search req
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());
			flag = requisition.getStatus().toLowerCase().contains(IConstantsData.WITH_BUYER_FILTER_LABEL.toLowerCase());
			assertTrue("Status of requisition in My Requisition Tab was wrong, it should be in With Buyer status", flag);

			entityOwnership = ObjectCreation.getDefaultObjectOfEnityOwnerShip(user2.getUsername(), newOwner.getUsername(), IConstantsData.search_entity_in_req_number,
				requisition.getReqNo());
			FlowEntityOwnership.changeOwner(driver, testCaseName, entityOwnership);
			PageMasterDataSettings.clickOnReturnToSetUpModule(driver, testCaseName);

			// logout
			LoginLogoutServices.logout(driver, testCase, user2);

			// login with new owner
			user = newOwner;
			LoginLogoutServices.login(driver, testCase, newOwner);
			ActionBot.defaultSleep();
			/**
			 * RTC_375452 : Requisition >>Transferred requisition should be
			 * shown in requisition listing of new owner . Check for with buyer
			 * requisition .
			 **/
			//			myRequisitionFilter = new MyRequisitionFilter();
			//			myRequisitionFilter.setTransferredToMe(true);
			//			List<String> statusOfFilter2 = new ArrayList<String>();
			//			statusOfFilter2.add(IConstantsData.WITH_BUYER_FILTER_LABEL);
			//			myRequisitionFilter.setStatusOfFilter(statusOfFilter2);

			//	myRequisitionFilter = FlowMyRequisitions.applyMyRequisitionStatusFilter(driver, testCaseName, myRequisitionFilter);

			// search req
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			flag = requisition.getStatus().toLowerCase().contains(IConstantsData.WITH_BUYER_FILTER_LABEL.toLowerCase());

			CommonServices.setMappedTestCaseResult(flag && requisition.isResult(), mappedTestCases.get(2),
				"Error while searching transferred requisition which is in With Buyer status in new owner");

			// search at buyers desk
			requisition = FlowBuyersDeskListing.searchAtBuyersDeskListing(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition at buyers desk", requisition.isResult());

			/** return req for amendment **/
			flag = FlowBuyersDeskListing.returnRequisitionFromBuyersDesk(driver, testCaseName, requisition, true);
			assertTrue("Pending Requisition was not returned", flag);

			entityOwnership = ObjectCreation.getDefaultObjectOfEnityOwnerShip(newOwner.getUsername(), user2.getUsername(), IConstantsData.search_entity_in_req_number,
				requisition.getReqNo());
			FlowEntityOwnership.changeOwner(driver, testCaseName, entityOwnership);
			PageMasterDataSettings.clickOnReturnToSetUpModule(driver, testCaseName);

			// logout
			LoginLogoutServices.logout(driver, testCase, newOwner);

			// login with new owner
			user = user2;
			LoginLogoutServices.login(driver, testCase, user2);
			ActionBot.defaultSleep();

			/**
			 * RTC_375453 : Requisition >>Transferred requisition should be
			 * shown in requisition listing of new owner . Check for Returned
			 * For Amendment requisition .
			 **/
			//			myRequisitionFilter = new MyRequisitionFilter();
			//			myRequisitionFilter.setTransferredToMe(true);
			//			List<String> statusOfFilter3 = new ArrayList<String>();
			//			statusOfFilter3.add(IConstantsData.RETURNED_FOR_AMENDMENT_FILTER_LABEL);
			//			myRequisitionFilter.setStatusOfFilter(statusOfFilter3);

			//	myRequisitionFilter = FlowMyRequisitions.applyMyRequisitionStatusFilter(driver, testCaseName, myRequisitionFilter);

			// search req
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			flag = requisition.getStatus().toLowerCase().contains(IConstantsData.RETURNED_FOR_AMENDMENT_FILTER_LABEL.toLowerCase());

			CommonServices.setMappedTestCaseResult(flag && requisition.isResult(), mappedTestCases.get(3),
				"Error while searching transferred requisition which is in Returned For Amendment status in new owner");
			assertTrue("Error while searching transferred requisition which is in Returned For Amendment status in new owner", flag && requisition.isResult());

			/** Cancel req **/
			flag = FlowMyRequisitions.cancelRequisition(driver, testCaseName);
			assertTrue("Requisition was not cancelled", flag);

			entityOwnership = ObjectCreation.getDefaultObjectOfEnityOwnerShip(user2.getUsername(), newOwner.getUsername(), IConstantsData.search_entity_in_req_number,
				requisition.getReqNo());
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			FlowEntityOwnership.changeOwner(driver, testCaseName, entityOwnership);
			PageMasterDataSettings.clickOnReturnToSetUpModule(driver, testCaseName);

			// logout
			LoginLogoutServices.logout(driver, testCase, user2);

			// login with new owner
			user = newOwner;
			LoginLogoutServices.login(driver, testCase, newOwner);

			/**
			 * RTC_375458 : Requisition >>Transferred requisition should be
			 * shown in requisition listing of new owner . Check for cancelled
			 * requisition .
			 **/
			//			myRequisitionFilter = new MyRequisitionFilter();
			//			myRequisitionFilter.setTransferredToMe(true);
			//			List<String> statusOfFilter33 = new ArrayList<String>();
			//			statusOfFilter33.add(IConstantsData.CANCELLED_FILTER_LABEL);
			//			myRequisitionFilter.setStatusOfFilter(statusOfFilter33);

			//	myRequisitionFilter = FlowMyRequisitions.applyMyRequisitionStatusFilter(driver, testCaseName, myRequisitionFilter);

			// search req
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			flag = requisition.getStatus().trim().equalsIgnoreCase(IConstantsData.CANCELLED_FILTER_LABEL);

			CommonServices.setMappedTestCaseResult(flag && requisition.isResult(), mappedTestCases.get(4),
				"Error while searching transferred requisition which is in Cancelled status in new owner");
			assertTrue("Error while searching transferred requisition which is in Cancelled status in new owner", flag && requisition.isResult());

			// copy req
			FlowMyRequisitions.copyReq(driver, testCaseName, true);

			requisition = FlowRequisition.fillcheckoutForm(driver, testCaseName, requisition, requisition.getItems());

			// submit req
			FlowRequisition.submitReq(driver, testCaseName, true);

			// search req
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition.", requisition.isResult());
			flag = requisition.getStatus().contains(IConstantsData.IN_APPROVAL_FILTER_LABEL);
			assertTrue("Status of Requisition was wrong, it should be In Approval", flag);

			// approve req
			approvalAllRequests.setActions(IConstantsData.APPROVE);

			approvalAllRequests = FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);
			assertTrue("Requisition was not approved", approvalAllRequests.isResult());

			// search at buyes desk
			requisition = FlowBuyersDeskListing.searchAtBuyersDeskListing(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition at buyers desk", requisition.isResult());

			// to view the req
			FlowBuyersDeskListing.viewRequisitionAtBuyersDesk(driver, testCaseName);

			// convert To Po
			FlowBuyersDesk.convertToPo(driver, testCaseName);

			// submit all POs
			List<PurchaseOrder> purchaseOrders = FlowBuyersDesk.submitAllSuggestedPosForProcessing(driver, testCaseName);

			// to search po
			flag = FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			assertTrue("Purchase order was not created", flag);

			if (PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).contains(IConstantsData.IN_APPROVAL_FILTER_LABEL))
			{
				// approve po
				ApprovalAllRequests allRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, purchaseOrders.get(0).getPoNo(),
					IConstantsData.PURCHASE_ORDER, IConstantsData.APPROVE);
				allRequests = FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, allRequests);
				assertTrue("PO was not approved", allRequests.isResult());

				// search po
				flag = FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
				assertTrue("Error while searching Purchase order", flag);
				flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.COMPLETE_RELEASED_FILTER_LABEL);
				assertTrue("Status of Purchase Order was wrong, it should be Released", flag);
			}

			// search req
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Error while searching released requisition in my requisition tab", requisition.isResult());
			flag = requisition.getStatus().equalsIgnoreCase(IConstantsData.COMPLETE_RELEASED_FILTER_LABEL);
			assertTrue("Status of requisition was wrong, it should be Released", flag);

			entityOwnership = ObjectCreation.getDefaultObjectOfEnityOwnerShip(newOwner.getUsername(), user2.getUsername(), IConstantsData.search_entity_in_req_number,
				requisition.getReqNo());
			FlowEntityOwnership.changeOwner(driver, testCaseName, entityOwnership);
			PageMasterDataSettings.clickOnReturnToSetUpModule(driver, testCaseName);

			// logout
			LoginLogoutServices.logout(driver, testCase, newOwner);

			// login with new owner
			user = user2;
			LoginLogoutServices.login(driver, testCase, user2);

			/**
			 * RTC_375455 : Requisition >>Transferred requisition should be
			 * shown in requisition listing of new owner . Check for released
			 * requisition .
			 **/
			//			myRequisitionFilter = new MyRequisitionFilter();
			//			myRequisitionFilter.setTransferredToMe(true);
			//			List<String> statusOfFilter4 = new ArrayList<String>();
			//			statusOfFilter4.add(IConstantsData.COMPLETE_RELEASED_FILTER_LABEL);
			//			myRequisitionFilter.setStatusOfFilter(statusOfFilter4);

			//myRequisitionFilter = FlowMyRequisitions.applyMyRequisitionStatusFilter(driver, testCaseName, myRequisitionFilter);

			// search req
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			flag = requisition.getStatus().equalsIgnoreCase(IConstantsData.COMPLETE_RELEASED_FILTER_LABEL);

			CommonServices.setMappedTestCaseResult(flag && requisition.isResult(), mappedTestCases.get(5),
				"Error while searching transferred requisition which is in Released status in new owner");
			assertTrue("Error while searching transferred requisition which is in Released status in new owner", flag && requisition.isResult());

			// search po
			flag = FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			assertTrue("Error while searching Purchase order", flag);

			// view po
			FlowPoListing.viewPO(driver, testCaseName);

			// to close the PO
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			ModalViewPOActions.clickOnClosePoLink(driver, testCaseName);

			// to close PO
			FlowViewPO.closePO(driver, testCaseName);

			// search po
			flag = FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			assertTrue("Error while searching PO", flag);

			// check status
			flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.CLOSED_FILTER_LABEL);
			assertTrue("Status of PO was wrong, PO was not closed", flag);

			// search req
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Error while searching released requisition in my requisition tab", requisition.isResult());
			flag = requisition.getStatus().equalsIgnoreCase(IConstantsData.COMPLETE_RELEASED_FILTER_LABEL);
			assertTrue("Status of requisition was wrong, it should be Released", flag);

			// close req
			flag = FlowMyRequisitions.closeRequisition(driver, testCaseName);
			assertTrue("Error while closing requisition", flag);

			entityOwnership = ObjectCreation.getDefaultObjectOfEnityOwnerShip(user2.getUsername(), newOwner.getUsername(), IConstantsData.search_entity_in_req_number,
				requisition.getReqNo());
			FlowEntityOwnership.changeOwner(driver, testCaseName, entityOwnership);
			PageMasterDataSettings.clickOnReturnToSetUpModule(driver, testCaseName);

			// logout
			LoginLogoutServices.logout(driver, testCase, user2);
			UserUtilHelper.addUserToList(user2);

			// login with new owner
			user = newOwner;
			LoginLogoutServices.login(driver, testCase, newOwner);

			/**
			 * RTC_375457 : Requisition >>Transferred requisition should be
			 * shown in requisition listing of new owner . Check for closed
			 * requisition .
			 **/
			//			myRequisitionFilter = new MyRequisitionFilter();
			//			myRequisitionFilter.setTransferredToMe(true);
			//			List<String> statusOfFilter5 = new ArrayList<String>();
			//			statusOfFilter5.add(IConstantsData.CLOSED_FILTER_LABEL);
			//			myRequisitionFilter.setStatusOfFilter(statusOfFilter5);
			//
			//			myRequisitionFilter = FlowMyRequisitions.applyMyRequisitionStatusFilter(driver, testCaseName, myRequisitionFilter);

			// search req
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			flag = requisition.getStatus().trim().equalsIgnoreCase(IConstantsData.CLOSED_FILTER_LABEL);

			assertTrue("Error while searching transferred requisition which is in Closed status in new owner", flag && requisition.isResult());

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Requisition >>Transferred requisition
	 * should be shown in requisition listing of new owner . Check for Scheduled
	 * requisition . <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_375454(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		User newOwner = null;
		Requisition requisition = new Requisition();
		PurchaseOrderSettings purchaseOrderSettings = new PurchaseOrderSettings();
		PurchaseOrderSettings defaultPurchaseOrderSettings = new PurchaseOrderSettings();
		String testCaseName = null;
		boolean flag = false, settingchangedFlag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			CommonServices.startTestCase(driver, testCase);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();
			newOwner = UserUtilHelper.getAvailableUserFromList();

			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);

			purchaseOrderSettings.setReleaseOrdersImmediately(false);
			purchaseOrderSettings.setReleaseOrderDays(1);
			purchaseOrderSettings.setNextAction(IConstantsData.SAVE);

			// change PO setting : Released Order Immediately : NO
			settingchangedFlag = true;
			FlowPurchaseOrderSetting.changePOSetting(driver, testCaseName, purchaseOrderSettings);

			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);

			// req to buyers desk
			requisition = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			// to view the req
			FlowBuyersDeskListing.viewRequisitionAtBuyersDesk(driver, testCaseName);

			// convert To Po
			FlowBuyersDesk.convertToPo(driver, testCaseName);

			// submit all POs
			List<PurchaseOrder> purchaseOrders = FlowBuyersDesk.submitAllSuggestedPosForProcessing(driver, testCaseName);

			// to search po
			flag = FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			assertTrue("Purchase order was not created", flag);

			if (PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL))
			{
				// approve po
				ApprovalAllRequests allRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, purchaseOrders.get(0).getPoNo(),
					IConstantsData.PURCHASE_ORDER, IConstantsData.APPROVE);
				allRequests = FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, allRequests);
				assertTrue("PO was not approved", allRequests.isResult());

				// search po
				flag = FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
				assertTrue("Error while searching Purchase order", flag);
				flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.PARKED_FILTER_LABEL);
				assertTrue("Status of Purchase Order was wrong, it should be Parked", flag);
			}

			// search req
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Error while searching released requisition in my requisition tab", requisition.isResult());
			flag = requisition.getStatus().equalsIgnoreCase(IConstantsData.SCHEDULED_FILTER_LABEL);
			assertTrue("Status of requisition was wrong, it should be Scheduled", flag);

			EntityOwnership entityOwnership = ObjectCreation.getDefaultObjectOfEnityOwnerShip(user.getUsername(), newOwner.getUsername(), IConstantsData.search_entity_in_name,
				requisition.getReqName());
			FlowEntityOwnership.changeOwner(driver, testCaseName, entityOwnership);
			PageMasterDataSettings.clickOnReturnToSetUpModule(driver, testCaseName);

			// logout
			LoginLogoutServices.logout(driver, testCase, user);

			// login with new owner
			user = newOwner;
			LoginLogoutServices.login(driver, testCase, newOwner);

			MyRequisitionFilter myRequisitionFilter = new MyRequisitionFilter();
			myRequisitionFilter.setTransferredToMe(true);
			List<String> statusOfFilter4 = new ArrayList<String>();
			statusOfFilter4.add(IConstantsData.SCHEDULED_FILTER_LABEL);
			myRequisitionFilter.setStatusOfFilter(statusOfFilter4);

			myRequisitionFilter = FlowMyRequisitions.applyMyRequisitionStatusFilter(driver, testCaseName, myRequisitionFilter);

			// search req
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			flag = requisition.getStatus().equalsIgnoreCase(IConstantsData.SCHEDULED_FILTER_LABEL);

			assertTrue("Error while searching transferred requisition which is in Scheduled status in new owner", flag && requisition.isResult());

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				if (settingchangedFlag)
				{
					defaultPurchaseOrderSettings.setReleaseOrdersImmediately(true);
					defaultPurchaseOrderSettings.setNextAction(IConstantsData.SAVE);
					FlowPurchaseOrderSetting.changePOSetting(driver, testCaseName, defaultPurchaseOrderSettings);
				}
			}
			catch (Exception e)
			{
				logger.error("Exception occurred while changing Purchase Order setting to default value" + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b> Test for bug 241393 - Error 500 thrown on
	 * submitting requisition . <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_365855(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		User user = null;
		Requisition requisition = new Requisition();
		UserSettings userSettings = new UserSettings();
		String testCaseName = null;
		boolean flag = false;
		try
		{
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_375125"));
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// change User settings
			user.setSearchUserByOption(IConstantsData.SEARCH_USER_BY_EMAIL_ID);
			userSettings.setDeliveryScopeName(IConstantsData.DELIVERY_SCOPE_PS);
			userSettings.setPurchasingScopeName(CommonServices.getTestData(IConstantsData.PurchasingScope_WithOneLocation));
			userSettings = FlowUserManagement.changeUserSettings(driver, testCaseName, user, userSettings);

			// req object
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);

			// to set deliver to
			DeliveryRequisitionSummary deliveryRequisitionSummary = new DeliveryRequisitionSummary();
			deliveryRequisitionSummary.setDeliverTo(user.getUsername());
			deliveryRequisitionSummary.setNextAction(IConstantsData.NONE);
			requisition.setDeliveryRequisitionSummary(deliveryRequisitionSummary);

			// create req
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			/**
			 * RTC_375125 : Test for bug 242213 - Error 500 thrown on selecting
			 * deliver to person on checkout screen with user having delivery
			 * scope as purchasing scope .
			 **/
			flag = requisition.getDeliveryRequisitionSummary().getDeliverTo().equalsIgnoreCase(user.getDisplayName());
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(0), "Deliver to users not coming for selection based on purchasing scope.");

			// search req
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				userSettings.setDeliveryScopeName(IConstantsData.DELIVERY_SCOPE_COMPANY);
				userSettings.setPurchasingScopeName(user.getUserSettings().getPurchasingScopeName());
				FlowUserManagement.changeUserSettings(driver, testCaseName, user, userSettings);
			}
			catch (Exception e)
			{
				logger.error("Exception occurred while changing User setting to default value" + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
			}
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 241402 - Draft requisition
	 * goes infinite when PT selected in requisition is no longer present in
	 * Master config <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_366240(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		User user = null;
		Requisition requisition = new Requisition();
		MasterDataTenantConfig config = new MasterDataTenantConfig();
		String testCaseName = null, defaultPurchaseType = null, newPurchaseType = "", errorMsg = null;
		boolean flag = false;
		try
		{
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_374213"));
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// req object
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.GUIDED_ITEM);
			requisition.setNextAction(IConstantsData.SAVE_AS_DRAFT_REQ);

			// create req
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// search req
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);

			/**
			 * RTC_374213 : Test for bug 238030 - Guided item is displayed as
			 * striked out in the cart in demo setup
			 **/
			CommonServices.setMappedTestCaseResult(requisition.isResult(), mappedTestCases.get(0), "Deliver to users not coming for selection based on purchasing scope.");

			assertTrue("Error while searching requisition", requisition.isResult());
			flag = requisition.getStatus().equalsIgnoreCase(IConstantsData.DRAFT_FILTER_LABEL);
			assertTrue("Status of requisition was wrong, it should be Draft", flag);

			// remove PT from Master Data
			config = FlowMasterDataTenantConfig.getMasterDataTenantConfig(driver, testCaseName);
			defaultPurchaseType = config.getPurchaseType();
			if (defaultPurchaseType.contains(","))
			{
				String[] temp = StringUtils.split(defaultPurchaseType, ",");
				for (String str : temp)
				{
					if (!str.equalsIgnoreCase(requisition.getPurchaseType()))
					{
						newPurchaseType = newPurchaseType + "," + str;
					}
				}
			}

			// change PT
			config.setPurchaseType(newPurchaseType);
			config = FlowMasterDataTenantConfig.changeMasterDataTenantConfig(driver, testCaseName, config);

			// check draft req
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());
			flag = requisition.getStatus().equalsIgnoreCase(IConstantsData.DRAFT_FILTER_LABEL);
			assertTrue("Status of requisition was wrong, it should be Draft", flag);

			// view req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);

			List<JavaScriptError> errors = JavaScriptError.readErrors(driver);
			logger.info("Total no of java script errors : " + errors.size());

			// if errors list is not empty the mark testcase as fail
			flag = errors.isEmpty();
			assertTrue("Script error is displayed on viewing a Draft requisition", flag);
			map.put("No of java script errors ", Integer.toString(errors.size()));

			logger.info("Error Message                  Line Number                Source Name");
			for (JavaScriptError error : errors)
			{
				errorMsg += error.getErrorMessage() + " " + error.getLineNumber() + " " + error.getSourceName() + "\n";
				int i = 1;
				map.put("Error Msg " + i++, errorMsg);
			}
			logger.info(errorMsg);

			logger.info("@@@@@ Script Error : ");
			LogEntries logEntries = driver.manage().logs().get(LogType.BROWSER);
			for (LogEntry entry : logEntries)
			{
				logger.info(new Date(entry.getTimestamp()) + " " + entry.getLevel() + " " + entry.getMessage());
			}

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				// change PT
				config.setPurchaseType(defaultPurchaseType);
				config = FlowMasterDataTenantConfig.changeMasterDataTenantConfig(driver, testCaseName, config);
			}
			catch (Exception e)
			{
				logger.error("Exception occurred while changing master data setting to default value" + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
			}
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Custom business rule>>Audit trail>>
	 * "Requisition ordered" action should be logged in audit trail if
	 * requisition is converted to PO. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_365543(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		User user = null;
		Requisition requisition = new Requisition();
		String testCaseName = null;
		boolean flag = false;
		try
		{
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_365544"));
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// req object
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			requisition.setPurchaseType(CommonServices.getTestData(IConstantsData.PurchaseType_Used_In_Custom_Business_Rule));

			// create req
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// search req
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());
			flag = requisition.getStatus().equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL);
			assertTrue("Status of requisition was wrong, it should be In Approval", flag);

			// approve req
			ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, requisition.getReqNo(), IConstantsData.REQUISITION,
				IConstantsData.APPROVE);
			FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

			ActionBot.defaultHighSleep();
			// search req
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Requisition was not searched in my requisition tab after approval", requisition.isResult());
			flag = requisition.getStatus().equalsIgnoreCase(IConstantsData.COMPLETE_RELEASED_FILTER_LABEL);
			assertTrue("Status of requisition was wrong, it should be Released", flag);

			// view req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);

			ActionBot.scroll(driver, "400");
			// to clear audit trail filter
			PageRequisitionView.clickOnAuditTrail(driver, testCaseName);
			PageRequisitionView.clickOnClearFilterLink(driver, testCaseName);

			AuditTrail auditTrail_req_ordered = FlowViewRequisition.getAuditTrailInfo(driver, testCaseName, 2);
			AuditTrail auditTrail_req_approved = FlowViewRequisition.getAuditTrailInfo(driver, testCaseName, 3);

			flag = auditTrail_req_ordered.getAction().equalsIgnoreCase(IConstantsData.AUDIT_TRAIL_REQ_ORDERED) && auditTrail_req_ordered.getUser().equalsIgnoreCase("System")
				&& auditTrail_req_ordered.getRole().equalsIgnoreCase("System");
			assertTrue("Audit Trail information for Requisition Ordered was wrong", flag);

			flag = auditTrail_req_approved.getAction().equalsIgnoreCase(IConstantsData.AUDIT_TRAIL_REQ_APPROVED) && auditTrail_req_approved.getUser().equalsIgnoreCase("System")
				&& auditTrail_req_approved.getRole().equalsIgnoreCase("System");
			assertTrue("Audit Trail information for Requisition Approved was wrong", flag);

			/**
			 * RTC_365544 : Custom business rule>>Alerts and email>>Waiting on
			 * buyers desk mail should not be sent when requisition is auto
			 * converted to PO as per configured rule.
			 **/
			logger.info("============================= Email Testing =============================");
			DocumentInformation documentInformation = ObjectCreation.getObjectOfDocumentInformation(DocumentInformation.docType_Requisition, requisition, null, null, null);
			documentInformation.setUser(user);
			documentInformation.setCommentForActionPerformed(IConstantsData.APPROVE_COMMENT);

			// req approved
			EmailDetails emailDetails_reqApproved = ObjectCreation.getEmailDetailsObject(IConstantsData.Email_Testing_Username, IConstantsData.Email_Testing_Password,
				IConstantsData.Email_Testing_Default_Folder_Of_Emails, IEmailTestingConstants.EventType_Document_Approved, documentInformation);

			EmailDetails emailDetails = FlowEmailTesting.readEmail(emailDetails_reqApproved);
			flag = FlowEmailTesting.checkIfEmailSend(emailDetails, emailDetails_reqApproved);

			map.put("Subject of Email for requisition approved", emailDetails.getSubject());
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(0), "Subject of email for requisition approved was wrong");
			assertTrue("ubject of email for requisition approved was wrong", flag);

			// email body testing
			emailDetails = FlowEmailTesting.readContentsOfMail(emailDetails);
			logger.info("Email body created from file : " + IEmailTestingConstants.Body_Document_Approved);

			String emailBody = FlowEmailTesting.getBodyOfEmailFromBodyTemplate(IEmailTestingConstants.Body_Document_Approved, documentInformation);

			EmailResult emailResult = FlowEmailTesting.checkIfBodyOfEmailIsRight(emailDetails.getEmailBody(), emailBody, "\n");
			map.put("Email body for Requisition approved : ", emailDetails.getEmailBody() + ",");
			CommonServices.setMappedTestCaseResult(emailResult.isResult(), mappedTestCases.get(0), "Email body for Requisition approved was wrong");
			assertTrue("Email body for Requisition approved was wrong", flag);

			// waiting at buyers desk
			EmailDetails emailDetails_remindBuyer = ObjectCreation.getEmailDetailsObject(IConstantsData.Email_Testing_Username, IConstantsData.Email_Testing_Password,
				IConstantsData.Email_Testing_Default_Folder_Of_Emails, IEmailTestingConstants.EventType_Remind_Buyer, documentInformation);

			emailDetails = FlowEmailTesting.readEmail(emailDetails_remindBuyer);
			flag = FlowEmailTesting.checkIfEmailSend(emailDetails, emailDetails_remindBuyer);
			CommonServices.setMappedTestCaseResult(!flag, mappedTestCases.get(0), "Email was sent for Waiting at buyers desk");
			assertTrue("Email was sent for Waiting at buyers desk", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Custom business rule>>Audit
	 * trail>>Incomplete info in Requisition>> "Requisition waiting on buyers
	 * desk" action should be logged in audit trail in following scenario. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_365542(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		User user = null;
		Requisition requisition = new Requisition();
		String testCaseName = null;
		boolean flag = false;
		try
		{
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_365546"));
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// req object
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);

			// create req
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// search req
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());
			flag = requisition.getStatus().equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL);
			assertTrue("Status of requisition was wrong, it should be In Approval", flag);

			// approve req
			ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, requisition.getReqNo(), IConstantsData.REQUISITION,
				IConstantsData.APPROVE);
			FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

			ActionBot.defaultHighSleep();
			// search req
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Requisition was not searched in my requisition tab after approval", requisition.isResult());
			flag = requisition.getStatus().equalsIgnoreCase(IConstantsData.WITH_BUYER_FILTER_LABEL);
			assertTrue("Status of requisition was wrong, it should be With Buyer", flag);

			// view req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);

			ActionBot.scroll(driver, "400");
			// to clear audit trail filter
			PageRequisitionView.clickOnAuditTrail(driver, testCaseName);
			PageRequisitionView.clickOnClearFilterLink(driver, testCaseName);

			AuditTrail auditTrail_req_waiting_on_buyers_desk = FlowViewRequisition.getAuditTrailInfo(driver, testCaseName, 2);
			AuditTrail auditTrail_req_approved = FlowViewRequisition.getAuditTrailInfo(driver, testCaseName, 3);

			flag = auditTrail_req_waiting_on_buyers_desk.getAction().equalsIgnoreCase(IConstantsData.AUDIT_TRAIL_REQ_WAITING_ON_BUYERS_DESK)
				&& auditTrail_req_waiting_on_buyers_desk.getUser().equalsIgnoreCase("System") && auditTrail_req_waiting_on_buyers_desk.getRole().equalsIgnoreCase("System");
			assertTrue("Audit Trail information for Requisition Waiting On Buyers Desk was wrong", flag);

			flag = auditTrail_req_approved.getAction().equalsIgnoreCase(IConstantsData.AUDIT_TRAIL_REQ_APPROVED) && auditTrail_req_approved.getUser().equalsIgnoreCase("System")
				&& auditTrail_req_approved.getRole().equalsIgnoreCase("System");
			assertTrue("Audit Trail information for Requisition Approved was wrong", flag);

			/**
			 * RTC_365546 : Custom business rule>>Alerts and email>>Waiting on
			 * buyers desk mail should be sent to user even if rule is
			 * configured in following scenario.(PT mismatch)
			 **/
			logger.info("============================= Email Testing =============================");
			DocumentInformation documentInformation = ObjectCreation.getObjectOfDocumentInformation(DocumentInformation.docType_Requisition, requisition, null, null, null);
			documentInformation.setUser(user);
			// waiting at buyers desk
			EmailDetails emailDetails_remindBuyer = ObjectCreation.getEmailDetailsObject(IConstantsData.Email_Testing_Username, IConstantsData.Email_Testing_Password,
				IConstantsData.Email_Testing_Default_Folder_Of_Emails, IEmailTestingConstants.EventType_Remind_Buyer, documentInformation);

			EmailDetails emailDetails = FlowEmailTesting.readEmail(emailDetails_remindBuyer);
			flag = FlowEmailTesting.checkIfEmailSend(emailDetails, emailDetails_remindBuyer);
			map.put("Subject of Email for waiting at buyers desk", emailDetails.getSubject() + ",");

			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(0), "Subject of email for waiting at buyers desk was wrong");
			assertTrue("Subject of email for waiting at buyers desk was wrong", flag);

			// email body testing
			emailDetails = FlowEmailTesting.readContentsOfMail(emailDetails);
			logger.info("Email body created from file : " + FlowEmailTesting.Email_Body_For_BuyersDesk);

			String emailBody = FlowEmailTesting.getBodyOfEmailFromBodyTemplate(FlowEmailTesting.Email_Body_For_BuyersDesk, documentInformation);

			EmailResult emailResult = FlowEmailTesting.checkIfBodyOfEmailIsRight(emailDetails.getEmailBody(), emailBody, "\n");
			map.put("Email body for waiting at buyers desk : ", emailDetails.getEmailBody() + ",");
			assertTrue("Email body for waiting at buyers desk was wrong", emailResult.isResult());

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Custom business rule>>Audit trail>>
	 * "Requisition waiting on buyers desk" action should be logged in Audit
	 * trail in following scenario. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_365541(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		User user = null;
		Requisition requisition = new Requisition();
		DocumentInformation documentInformation = new DocumentInformation();
		String testCaseName = null, emailBody;
		boolean flag = false;
		try
		{
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_365545"));
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// req setting object
			RequisitionSettings requisitionSettings = new RequisitionSettings();
			requisitionSettings.setAllowReqToBeSubmittedWithoutRequiredByDateOption(IConstants.YES);
			requisitionSettings.setRequesterIsRequiredToProvideAccountingInfoOption(IConstants.NO);

			// req object
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			requisition.setPurchaseType(CommonServices.getTestData(IConstantsData.PurchaseType_Used_In_Custom_Business_Rule));
			requisition.setCustomDate(null);

			// change req setting
			requisitionSettings = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);

			// create req
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// search req
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());
			flag = requisition.getStatus().equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL);
			assertTrue("Status of requisition was wrong, it should be In Approval", flag);

			// approve req
			ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, requisition.getReqNo(), IConstantsData.REQUISITION,
				IConstantsData.APPROVE);
			FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

			ActionBot.defaultHighSleep();
			// search req
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Requisition was not searched in my requisition tab after approval", requisition.isResult());
			flag = requisition.getStatus().equalsIgnoreCase(IConstantsData.WITH_BUYER_FILTER_LABEL);
			assertTrue("Status of requisition was wrong, it should be With Buyer", flag);

			// view req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);

			ActionBot.scroll(driver, "400");
			// to clear audit trail filter
			PageRequisitionView.clickOnAuditTrail(driver, testCaseName);
			PageRequisitionView.clickOnClearFilterLink(driver, testCaseName);

			AuditTrail auditTrail_req_waiting_on_buyers_desk = FlowViewRequisition.getAuditTrailInfo(driver, testCaseName, 2);
			AuditTrail auditTrail_req_approved = FlowViewRequisition.getAuditTrailInfo(driver, testCaseName, 3);

			flag = auditTrail_req_waiting_on_buyers_desk.getAction().equalsIgnoreCase(IConstantsData.AUDIT_TRAIL_REQ_WAITING_ON_BUYERS_DESK)
				&& auditTrail_req_waiting_on_buyers_desk.getUser().equalsIgnoreCase("System") && auditTrail_req_waiting_on_buyers_desk.getRole().equalsIgnoreCase("System");
			assertTrue("Audit Trail information for Requisition Waiting On Buyers Desk was wrong", flag);

			flag = auditTrail_req_approved.getAction().equalsIgnoreCase(IConstantsData.AUDIT_TRAIL_REQ_APPROVED) && auditTrail_req_approved.getUser().equalsIgnoreCase("System")
				&& auditTrail_req_approved.getRole().equalsIgnoreCase("System");
			assertTrue("Audit Trail information for Requisition Approved was wrong", flag);

			/**
			 * RTC_365545 : Custom business rule>>Alerts and email>>Waiting on
			 * buyers desk mail should be sent to user in following scenario.
			 **/
			logger.info("============================= Email Testing =============================");
			documentInformation = ObjectCreation.getObjectOfDocumentInformation(DocumentInformation.docType_Requisition, requisition, null, null, null);
			documentInformation.setUser(user);
			// waiting at buyers desk
			EmailDetails emailDetails_remindBuyer = ObjectCreation.getEmailDetailsObject(IConstantsData.Email_Testing_Username, IConstantsData.Email_Testing_Password,
				IConstantsData.Email_Testing_Default_Folder_Of_Emails, IEmailTestingConstants.EventType_Remind_Buyer, documentInformation);

			EmailDetails emailDetails = FlowEmailTesting.readEmail(emailDetails_remindBuyer);
			flag = FlowEmailTesting.checkIfEmailSend(emailDetails, emailDetails_remindBuyer);
			map.put("Subject of Email for waiting at buyers desk", emailDetails.getSubject() + ",");

			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(0), "Subject of email for waiting at buyers desk was wrong");
			assertTrue("Subject of email for waiting at buyers desk was wrong", flag);

			// email body testing
			emailDetails = FlowEmailTesting.readContentsOfMail(emailDetails);
			logger.info("Email body created from file : " + FlowEmailTesting.Email_Body_For_BuyersDesk);

			emailBody = FlowEmailTesting.getBodyOfEmailFromBodyTemplate(FlowEmailTesting.Email_Body_For_BuyersDesk, documentInformation);

			EmailResult emailResult = FlowEmailTesting.checkIfBodyOfEmailIsRight(emailDetails.getEmailBody(), emailBody, "\n");
			map.put("Email body for waiting at buyers desk : ", emailDetails.getEmailBody() + ",");
			assertTrue("Email body for waiting at buyers desk was wrong", emailResult.isResult());

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Buyer name and email id having
	 * multilingual data should be shown in the assigned buyer drop down all
	 * over the product <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_358830(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		User user = null;
		Requisition requisition = new Requisition();
		Requisition requisition_copy = new Requisition();
		String testCaseName = null, assignedBuyerName_onViewPage, assignedBuyerName_withMultilingual, assignedBuyerName_withScript;
		boolean flag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_358829"));
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();
			assignedBuyerName_withMultilingual = CommonServices.getTestData(IConstantsData.MULTILINGUAL_CHAR_USER);
			assignedBuyerName_withScript = CommonServices.getTestData(IConstantsData.SPECIAL_CHAR_USER);

			// req object
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			requisition.setAssignedBuyer(user.getUsername());
			requisition.setVerifyWorkflow(false);
			String assignedBuyer = user.getDisplayName();
			// create req
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// search req
			//requisition.setReqNo("OU_1-001/PR/5663");
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());
			flag = requisition.getStatus().contains(IConstantsData.IN_APPROVAL_FILTER_LABEL);
			assertTrue("Status of requisition was wrong, it should be In Approval", flag);

			logger.info("Assigned Buyer Name : " + requisition.getAssignedBuyer());
			// view req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);
			PageRequisitionView.clickOnItemSummaryViewItemWise(driver, testCaseName, requisition.getItems().getCatelogItems().get(0).getItemID());
			TabCheckoutItemSummary.clickItemSummaryAssignedBuyerTab(driver, testCaseName);

			assignedBuyerName_onViewPage = PageRequisitionView.getAssignBuyerField(driver, testCaseName);
			flag = assignedBuyerName_onViewPage.equalsIgnoreCase(assignedBuyer);
			assertTrue("Assigned Buyer with Multilingual Username was shown wrong on Requisition View Page", flag);
			ActionBot.refreshPage(driver, testCaseName);

			// copy req
			PageRequisitionView.clickOnCopyActionsLink(driver, testCaseName);

			if (PageMyRequisition.isPopUpProceedOnlyWithReqItems(driver, testCaseName))
			{
				PageMyRequisition.clickProceedOnlyWithReqItems(driver, testCaseName);
			}
			if (PopUpDefaultConfirmation.isConfirmYesButtonPresent(driver, testCaseName))
			{
				PopUpDefaultConfirmation.clickOnConfirmYesButton(driver, testCaseName);
			}

			requisition_copy = requisition;
			requisition_copy.setReqName(CommonUtilities.getReqName());
			requisition_copy.setAssignedBuyer(user.getUsername());
			requisition_copy.setNextAction(IConstantsData.SUBMIT_REQ);
			requisition_copy.setEditHeaderLevelInfo(false);
			Item item = new Item();
			requisition_copy.setItems(item);
			requisition_copy.setEditItemLevelInfo(false);

			// to fill checkout form and submit
			requisition_copy = FlowRequisition.fillcheckoutForm(driver, testCaseName, requisition_copy, item);

			// submit req
			FlowRequisition.submitReq(driver, testCaseName, true);

			// search req
			requisition_copy = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition_copy);
			assertTrue("Error while searching requisition", requisition_copy.isResult());
			flag = requisition_copy.getStatus().contains(IConstantsData.IN_APPROVAL_FILTER_LABEL);
			assertTrue("Status of requisition was wrong, it should be In Approval", flag);

			// view req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);

			PageRequisitionView.clickOnItemSummaryViewItemWise(driver, testCaseName, requisition.getItems().getCatelogItems().get(0).getItemID());
			TabCheckoutItemSummary.clickItemSummaryAssignedBuyerTab(driver, testCaseName);

			assignedBuyerName_onViewPage = PageRequisitionView.getAssignBuyerField(driver, testCaseName);

			flag = assignedBuyerName_onViewPage.equalsIgnoreCase(assignedBuyer);
			ActionBot.refreshPage(driver, testCaseName);

			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(0), "Assigned Buyer with Script Username was shown wrong on Requisition View Page");

			assertTrue("Assigned Buyer with Script Username was shown wrong on Requisition View Page", flag);

			// standard PO object
			StandardPO standardPO = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			//standardPO.setBuyer(assignedBuyerName_withScript);
			standardPO.setBuyer(user.getUsername());

			// create standard PO
			standardPO = FlowStandardPo.createStandardPo(driver, testCaseName, standardPO);

			// search po
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);

			assertTrue("Error while searching created standard po", flag);

			// view po
			FlowPoListing.viewPO(driver, testCaseName);

			assignedBuyerName_onViewPage = PageViewPurchaseOrder.getBuyerName(driver, testCaseName);
			flag = assignedBuyerName_onViewPage.equalsIgnoreCase(standardPO.getBuyer());
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(0), "Assigned Buyer with Script Username was shown wrong on PO View Page");
			assertTrue("Assigned Buyer with Script Username was shown wrong on PO View Page", flag);

			// standard PO object
			StandardPO standardPO_copy = ObjectCreation.getStandardPoCreation(IConstantsData.CATALOG_ITEM);
			//standardPO_copy=standardPO;
			CustomDate customDate = CommonUtilities.getTodaysDate();
			standardPO_copy.setBuyer(user.getUsername());
			standardPO_copy.setCustomDate(customDate);
			standardPO_copy.setNextAction(IConstantsData.SUBMIT_PO_FOR_PROCESSING);

			// create standard PO
			standardPO_copy = FlowStandardPo.createStandardPo(driver, testCaseName, standardPO_copy);

			// search po
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			flag = FlowPoListing.searchPo(driver, testCaseName, standardPO_copy.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO);

			assertTrue("Error while searching created standard po", flag);

			// view po
			FlowPoListing.viewPO(driver, testCaseName);

			assignedBuyerName_onViewPage = PageViewPurchaseOrder.getBuyerName(driver, testCaseName);
			flag = assignedBuyerName_onViewPage.equalsIgnoreCase(standardPO_copy.getBuyer());
			logger.info("\n assignedBuyerName_onViewPage :" + assignedBuyerName_onViewPage + ":");
			logger.info("\n standardPO_copy.getBuyer() :" + standardPO_copy.getBuyer() + ":");
			logger.info("\n flag " + flag);
			assertTrue("Assigned Buyer with Multilingual Username was shown wrong on PO View Page", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 239467 - Error is not shown
	 * on submitting requisition having cost center and business unit which are
	 * not linked to each other . <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_358468(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		User user = null;
		Requisition requisition = new Requisition();
		String testCaseName = null, validationMsg = null, costCenter = null;
		boolean flag = false, settingchangedFlag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_358453"));
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_358452"));
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			user = LoginLogoutServices.login(driver, testCase);

			// req object
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			requisition.setNextAction(IConstantsData.SAVE_AS_DRAFT_REQ);

			//for filling it first time
			BillingRequisitionSummary billingRequisitionSummary1 = new BillingRequisitionSummary();
			billingRequisitionSummary1.setCompany(CommonServices.getTestData(IConstantsData.ORGANIZATION_UNIT_OR_COMPANY_NAME));
			billingRequisitionSummary1.setBusinessUnit(CommonServices.getTestData(IConstantsData.BUSINESS_UNIT_NAME));
			billingRequisitionSummary1.setLocation(CommonServices.getTestData(IConstantsData.LOCATION_NAME));
			billingRequisitionSummary1.setNextAction(IConstantsData.NONE);

			// create req
			requisition.setBillingRequisitionSummary(billingRequisitionSummary1);
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// search req
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());
			flag = requisition.getStatus().equalsIgnoreCase(IConstantsData.DRAFT_FILTER_LABEL);
			assertTrue("Status of requisition was wrong, it should be Draft", flag);

			//after viewing drafted req
			BillingRequisitionSummary billingRequisitionSummary2 = new BillingRequisitionSummary();
			billingRequisitionSummary2.setCompany(CommonServices.getTestData(IConstantsData.Other_Company_Name));
			billingRequisitionSummary2.setBusinessUnit(CommonServices.getTestData(IConstantsData.Other_BusinessUnit));
			billingRequisitionSummary2.setLocation(CommonServices.getTestData(IConstantsData.LOCATION_NAME));
			billingRequisitionSummary2.setNextAction(IConstantsData.NONE);

			CostBookingRequisitionSummary bookingRequisitionSummary = ObjectCreation.getDefaultObjectOfCostBookingOfOtherCompany();
			bookingRequisitionSummary.setCostCenter(CommonServices.getTestData(IConstantsData.OTHER_COMPANY_CC));

			// view req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);
			PageRequisitionCheckOut.clickEditHeaderInfo(driver, testCaseName);
			billingRequisitionSummary1 = FlowRequisition.fillBillingRequisitionSummary(driver, testCaseName, billingRequisitionSummary1);
			TabCheckoutReqSummary.clickCostBookingTab(driver, testCaseName);
			FlowRequisition.fillCostBookingRequisitionSummary(driver, testCaseName, bookingRequisitionSummary);
			ModelRequisitionSummaryCostBooking.fillCostBookingSingleBudget(driver, testCaseName, bookingRequisitionSummary.getBudget());
			ActionBot.defaultSleep();

			//check for error
			flag = PageRequisitionCheckOut.isErrorMessagePresentInRequisitionSummaryPopUp(driver, testCaseName, IConstantsData.COST_CENTER);
			Assert.assertTrue("error message is not displayed after putting unavailable cost center value corresponnding to BU", flag);

			/**
			 * RTC_358453 : Requisition>>Error should be shown on submitting
			 * requisition whose business unit and cost center are no more
			 * linked to each other . Check case of submitting draft req .
			 **/
			/**
			 * RTC_358452 : Requisition>>Error should be shown on submitting
			 * requisition whose business unit and cost center are no more
			 * linked to each other .
			 **/
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(0),
				"Error was not shown on submitting draft requisition having cost center and business unit which are not linked to each other .");
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(1),
				"Error was not shown on submitting requisition having cost center and business unit which are not linked to each other .");
			assertTrue("Error was not shown on submitting draft requisition having cost center and business unit which are not linked to each other .", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Requisition>>Error should be shown on
	 * submitting requisition whose business unit and cost center are no more
	 * linked to each other . Check case of submitting rejected req . <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_358454(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		Requisition requisition = new Requisition();
		String testCaseName = null, validationMsg = null, costCenter = null;
		boolean flag = false, settingchangedFlag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			CommonServices.startTestCase(driver, testCase);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// req object
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);

			// create req
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// search req
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());
			flag = requisition.getStatus().contains(IConstantsData.IN_APPROVAL_FILTER_LABEL);
			assertTrue("Status of requisition was wrong, it should be In Approval", flag);

			costCenter = requisition.getCostBookingRequisitionSummary().getCostCenter().trim();
			String[] temp = StringUtils.split(costCenter, ":");
			costCenter = temp[0].trim();

			// remove bu from cc
			settingchangedFlag = true;
			FlowCostCenterMasterDataSetting.searchAndRemoveBUFromCostCenter(driver, testCaseName, costCenter, IConstantsData.SearchCC_In_Name,
				requisition.getBillingRequisitionSummary().getBusinessUnit());

			// reject req
			ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, requisition.getReqNo(), IConstantsData.REQUISITION,
				IConstantsData.REJECT);
			approvalAllRequests = FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);
			assertTrue("Requisition was not rejected", approvalAllRequests.isResult());

			// search req
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", flag);
			flag = requisition.getStatus().equalsIgnoreCase(IConstantsData.REJECTED_FILTER_LABEL);
			assertTrue("Status of requisition was wrong, it should be Rejected", flag);

			// edit req
			FlowMyRequisitions.editReq(driver, testCaseName);

			// submit req
			FlowRequisition.submitReq(driver, testCaseName, false);

			// check validation error msg
			validationMsg = PopUpDefalutAlert.getAlertMsg(driver, testCaseName);
			flag = validationMsg.equalsIgnoreCase(IConstantsData.CostCenter_Bu_not_linked_Validation_Error_Msg1 + " s"
				+ requisition.getCostBookingRequisitionSummary().getCostCenter() + IConstantsData.CostCenter_Bu_not_linked_Validation_Error_Msg2);

			assertTrue("Error was not shown on submitting rejected requisition having cost center and business unit which are not linked to each other .", flag);

			PopUpDefalutAlert.clickOnAlertOkButton(driver, testCaseName);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				if (settingchangedFlag)
				{
					FlowCostCenterMasterDataSetting.searchAndAddBUToCostCenter(driver, testCaseName, costCenter, IConstantsData.SearchCC_In_Name,
						requisition.getBillingRequisitionSummary().getBusinessUnit());
				}
			}
			catch (Exception e)
			{
				logger.error("Exception occurred while adding BU to cost center" + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Requisition>>Error should be shown on
	 * submitting requisition whose business unit and cost center are no more
	 * linked to each other . Check case of submitting recalled req . <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_358455(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		Requisition requisition = new Requisition();
		String testCaseName = null, validationMsg = null, costCenter = null;
		boolean flag = false, settingchangedFlag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			CommonServices.startTestCase(driver, testCase);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// req object
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);

			// create req
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// search req
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());
			flag = requisition.getStatus().equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL);
			assertTrue("Status of requisition was wrong, it should be In Approval", flag);

			costCenter = requisition.getCostBookingRequisitionSummary().getCostCenter().trim();
			String[] temp = StringUtils.split(costCenter, ":");
			costCenter = temp[0].trim();

			// remove bu from cc
			settingchangedFlag = true;
			FlowCostCenterMasterDataSetting.searchAndRemoveBUFromCostCenter(driver, testCaseName, costCenter, IConstantsData.SearchCC_In_Name,
				requisition.getBillingRequisitionSummary().getBusinessUnit());

			// recall req
			FlowMyRequisitions.recallApprovalRequest(driver, testCaseName, requisition);
			flag = PageMyRequisition.getStatusOfFirstReq(driver, testCaseName).equalsIgnoreCase(IConstantsData.DRAFT_FILTER_LABEL);
			assertTrue("Requisition was not recalled, status of requisition was not Draft", flag);

			// view req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);

			// submit req
			FlowRequisition.submitReq(driver, testCaseName, false);

			// check validation error msg
			validationMsg = PopUpDefalutAlert.getAlertMsg(driver, testCaseName);
			flag = validationMsg.equalsIgnoreCase(IConstantsData.CostCenter_Bu_not_linked_Validation_Error_Msg1 + " s"
				+ requisition.getCostBookingRequisitionSummary().getCostCenter() + IConstantsData.CostCenter_Bu_not_linked_Validation_Error_Msg2);

			assertTrue("Error was not shown on submitting rejected requisition having cost center and business unit which are not linked to each other .", flag);

			PopUpDefalutAlert.clickOnAlertOkButton(driver, testCaseName);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				if (settingchangedFlag)
				{
					FlowCostCenterMasterDataSetting.searchAndAddBUToCostCenter(driver, testCaseName, costCenter, IConstantsData.SearchCC_In_Name,
						requisition.getBillingRequisitionSummary().getBusinessUnit());
				}
			}
			catch (Exception e)
			{
				logger.error("Exception occurred while adding BU to cost center" + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Requisition>>Error should be shown on
	 * submitting requisition whose business unit and cost center are no more
	 * linked to each other . Check case of submitting returned req . <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_358456(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		Requisition requisition = new Requisition();
		String testCaseName = null, validationMsg = null, costCenter = null;
		boolean flag = false, settingchangedFlag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			CommonServices.startTestCase(driver, testCase);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// req object
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);

			// req to buyers desk
			requisition = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			costCenter = requisition.getCostBookingRequisitionSummary().getCostCenter().trim();
			String[] temp = StringUtils.split(costCenter, ":");
			costCenter = temp[0].trim();

			// remove bu from cc
			settingchangedFlag = true;
			FlowCostCenterMasterDataSetting.searchAndRemoveBUFromCostCenter(driver, testCaseName, costCenter, IConstantsData.SearchCC_In_Name,
				requisition.getBillingRequisitionSummary().getBusinessUnit());

			// search req at buyers desk
			requisition = FlowBuyersDeskListing.searchAtBuyersDeskListing(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition at Buyers Desk", requisition.isResult());

			// return req from buyers desk
			flag = FlowBuyersDeskListing.returnRequisitionFromBuyersDesk(driver, testCaseName, requisition, true);
			assertTrue("Requisition was not returned from buyers desk", flag);

			// view req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);

			// submit req
			FlowRequisition.submitReq(driver, testCaseName, false);

			// check validation error msg
			validationMsg = PopUpDefalutAlert.getAlertMsg(driver, testCaseName);
			flag = validationMsg.equalsIgnoreCase(IConstantsData.CostCenter_Bu_not_linked_Validation_Error_Msg1 + " s"
				+ requisition.getCostBookingRequisitionSummary().getCostCenter() + IConstantsData.CostCenter_Bu_not_linked_Validation_Error_Msg2);

			assertTrue("Error was not shown on submitting rejected requisition having cost center and business unit which are not linked to each other .", flag);

			PopUpDefalutAlert.clickOnAlertOkButton(driver, testCaseName);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				if (settingchangedFlag)
				{
					FlowCostCenterMasterDataSetting.searchAndAddBUToCostCenter(driver, testCaseName, costCenter, IConstantsData.SearchCC_In_Name,
						requisition.getBillingRequisitionSummary().getBusinessUnit());
				}
			}
			catch (Exception e)
			{
				logger.error("Exception occurred while adding BU to cost center" + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Requisition>>Cost center should get reset
	 * on changing business unit while creating requisition . Check case of item
	 * level costing . <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_358451(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		User user = null;
		String testCaseName = null, log = "", other_bu, location, costCenter, defaultCC;
		boolean flag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_358447"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_358448"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_358449"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_358450"));
			}
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			user = LoginLogoutServices.login(driver, testCase);

			Item items = ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);
			CostCenterSplitInfo costCenterSplitInfo = CommonUtilities.getCostCenterInfoFromTestData();
			// add item and checkout
			items = FlowRequisition.addItemAndCheckout(driver, testCaseName, items);
			// add required by date
			CustomDate customDate = CommonUtilities.getTodaysDate();
			PageRequisitionCheckOut.selectRequiredByDate(driver, testCaseName, customDate.getDay(), customDate.getMonth(), customDate.getYear());

			/**
			 * RTC_358447 : Requisition>>While creating requisition user should
			 * be allowed to select cost center only after selecting business
			 * unit .
			 **/
			PageRequisitionCheckOut.clickEditHeaderInfo(driver, testCaseName);
			ModelRequisitionSummaryBilling.clearBU(driver, testCaseName);
			TabCheckoutReqSummary.clickCostBookingTab(driver, testCaseName);
			// fill cc name
			String enteredCC = ModelRequisitionSummaryCostBooking.fillCostBookingSingleCC(driver, testCaseName, costCenterSplitInfo.getCostCenter());
			flag = enteredCC.trim().length() == 0;
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(0), "Cost Center was allowed to select without selecting Business Unit");
			ModelRequisitionSummaryCommon.clickCancleReqSummary(driver, testCaseName);
			/**
			 * RTC_358448 : Requisition>>While creating requisition cost center
			 * should come based on the selected business unit .
			 **/
			List<String> listOfCCNamesFromTestData = CommonUtilities.getListOFCCNamesForBU();
			PageRequisitionCheckOut.clickEditHeaderInfo(driver, testCaseName);
			TabCheckoutReqSummary.clickCostBookingTab(driver, testCaseName);
			ModelRequisitionSummaryCostBooking.fillCostBookingSingleCC(driver, testCaseName, "");
			List<String> listOfCcNames = ModelRequisitionSummaryCostBooking.getListOfCostCentersNames(driver, testCaseName);
			flag = false;
			for (String str : listOfCcNames)
			{
				str = CommonUtilities.getProperCostCenter(str);
				for (String str_testData : listOfCCNamesFromTestData)
				{
					if (str.equalsIgnoreCase(str_testData))
					{
						flag = true;
					}
				}
				if (!flag)
				{
					log += "Cost Center : " + str + " Not found \n";
				}
			}
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(1),
				"While creating requisition cost center was not coming based on the selected business unit \n" + log);
			/**
			 * RTC_358449 : Requisition>>While creating requisition cost center
			 * should come based on the selected business unit . Check case of
			 * item level costing .
			 **/
			ModelRequisitionSummaryCostBooking.selectCostBookingOptionLineItemCC(driver, testCaseName);
			ModelRequisitionSummaryCommon.clickSaveReqSummary(driver, testCaseName);
			ActionBot.scroll(driver, "400");
			PageRequisitionCheckOut.clickExpandAll(driver, testCaseName);
			PageRequisitionCheckOut.clickEditItemSummary(driver, testCaseName, items.getCatelogItems().get(0).getItemID());
			TabCheckoutItemSummary.clickItemSummaryCostBookingTab(driver, testCaseName);
			ModelItemSummaryCostBooking.clearCostCenterWithSpace(driver, testCaseName, items.getCatelogItems().get(0).getItemID(), 0);
			ActionBot.defaultSleep();
			List<String> listOfCcNames_itemLevel = ModelItemSummaryCostBooking.getListOfCostCentersNames(driver, testCaseName);
			flag = false;
			for (String str : listOfCcNames_itemLevel)
			{
				str = CommonUtilities.getProperCostCenter(str);
				for (String str_testData : listOfCCNamesFromTestData)
				{
					if (str.equalsIgnoreCase(str_testData))
					{
						flag = true;
					}
				}
				if (!flag)
				{
					log += "Cost Center : " + str + " Not found";
				}
			}
			ModelItemSummaryCommon.clickItemSummaryCancle(driver, testCaseName);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(2),
				"While creating requisition cost center was not coming based on the selected business unit : case of item level costing .\n" + log);

			/**
			 * RTC_358450 : Requisition>>Cost center should get reset on
			 * changing business unit while creating requisition .
			 **/
			other_bu = CommonServices.getTestData(IConstantsData.BusinessUnit_Name1);
			location = CommonServices.getTestData(IConstantsData.LOCATION_NAME);
			PageRequisitionCheckOut.clickEditHeaderInfo(driver, testCaseName);
			// single cc
			TabCheckoutReqSummary.clickCostBookingTab(driver, testCaseName);
			ModelRequisitionSummaryCostBooking.selectCostBookingOptionSingleCC(driver, testCaseName);
			defaultCC = ModelRequisitionSummaryCostBooking.getCostCenterName(driver, testCaseName);
			// change bu
			TabCheckoutReqSummary.clickBillingTab(driver, testCaseName);
			ModelRequisitionSummaryBilling.fillBillingBU(driver, testCaseName, other_bu);
			ModelRequisitionSummaryBilling.fillBillingLocation(driver, testCaseName, location);
			TabCheckoutReqSummary.clickCostBookingTab(driver, testCaseName);
			costCenter = ModelRequisitionSummaryCostBooking.getCostCenterName(driver, testCaseName);
			flag = costCenter.trim().length() == 0 && !defaultCC.equalsIgnoreCase(costCenter);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(3), "Cost center was not get reset on changing business unit while creating requisition");
			ModelRequisitionSummaryCommon.clickCancleReqSummary(driver, testCaseName);
			/**
			 * RTC_358451 : Requisition>>Cost center should get reset on
			 * changing business unit while creating requisition . Check case of
			 * item level costing .
			 **/
			PageRequisitionCheckOut.clickEditHeaderInfo(driver, testCaseName);
			TabCheckoutReqSummary.clickCostBookingTab(driver, testCaseName);
			ModelRequisitionSummaryCostBooking.selectCostBookingOptionLineItemCC(driver, testCaseName);
			ModelRequisitionSummaryCommon.clickSaveReqSummary(driver, testCaseName);
			// to get default cc
			ActionBot.scroll(driver);
			PageRequisitionCheckOut.clickExpandAll(driver, testCaseName);
			PageRequisitionCheckOut.clickEditItemSummary(driver, testCaseName, items.getCatelogItems().get(0).getItemID());
			TabCheckoutItemSummary.clickItemSummaryCostBookingTab(driver, testCaseName);
			defaultCC = ModelItemSummaryCostBooking.getCostBookingItemSplitCostCenter(driver, testCaseName, items.getCatelogItems().get(0).getItemID(), 0);
			ModelItemSummaryCommon.clickItemSummaryCancle(driver, testCaseName);

			// change Bu
			PageRequisitionCheckOut.clickEditHeaderInfo(driver, testCaseName);
			ModelRequisitionSummaryBilling.fillBillingBU(driver, testCaseName, other_bu);
			ModelRequisitionSummaryBilling.fillBillingLocation(driver, testCaseName, location);
			ModelRequisitionSummaryCommon.clickSaveReqSummary(driver, testCaseName);
			// to get rested cc
			ActionBot.scroll(driver);
			PageRequisitionCheckOut.clickExpandAll(driver, testCaseName);
			PageRequisitionCheckOut.clickEditItemSummary(driver, testCaseName, items.getCatelogItems().get(0).getItemID());
			TabCheckoutItemSummary.clickItemSummaryCostBookingTab(driver, testCaseName);
			costCenter = ModelItemSummaryCostBooking.getCostBookingItemSplitCostCenter(driver, testCaseName, items.getCatelogItems().get(0).getItemID(), 0);
			ModelItemSummaryCommon.clickItemSummaryCancle(driver, testCaseName);
			flag = costCenter.trim().length() == 0 && !costCenter.equalsIgnoreCase(defaultCC);
			assertTrue("Cost center was not get reset on changing business unit while creating requisition : case of item level costing.", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Requisition>>project should get reset on
	 * changing business unit while creating requisition . Check case of item
	 * level costing . <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_358462(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		User user = null;
		String testCaseName = null, log = "", other_bu, location, project, defaultProject, enteredProject;
		boolean flag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_358458"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_358459"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_358460"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_358461"));
			}
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			user = LoginLogoutServices.login(driver, testCase);

			// change project settings
			ProjectsSettings projectsSettings = new ProjectsSettings();
			projectsSettings.setAssignProjecttoPurchaseCost(IPageProjectsSettings.ALWAYS);
			FlowProjectsSettings.changeProjectsSettings(driver, projectsSettings, testCaseName);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);

			Item items = ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);
			CostCenterSplitInfo costCenterSplitInfo = CommonUtilities.getCostCenterInfoFromTestData();
			// add item and checkout
			items = FlowRequisition.addItemAndCheckout(driver, testCaseName, items);

			// add required by date
			CustomDate customDate = CommonUtilities.getTodaysDate();
			PageRequisitionCheckOut.selectRequiredByDate(driver, testCaseName, customDate.getDay(), customDate.getMonth(), customDate.getYear());
			/**
			 * RTC_358458 : Requisition>>While creating requisition user should
			 * be allowed to select project only after selecting business unit .
			 **/
			PageRequisitionCheckOut.clickEditHeaderInfo(driver, testCaseName);
			ModelRequisitionSummaryBilling.clearBU(driver, testCaseName);
			TabCheckoutReqSummary.clickCostBookingTab(driver, testCaseName);

			// fill cc name
			ModelRequisitionSummaryCostBooking.fillCostBookingSingleCC(driver, testCaseName, costCenterSplitInfo.getCostCenter());
			enteredProject = ModelRequisitionSummaryCostBooking.fillCostBookingSingleProject(driver, testCaseName, costCenterSplitInfo.getProject());
			flag = enteredProject.trim().length() == 0;
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(0), "Project was allowed to select without selecting Business Unit");
			ModelRequisitionSummaryCommon.clickCancleReqSummary(driver, testCaseName);
			/**
			 * RTC_358459 : Requisition>>While creating requisition project
			 * should come based on the selected business unit.
			 **/
			List<String> listOfProjectNamesFromTestData = CommonUtilities.getListOFProjectNamesForBU();
			PageRequisitionCheckOut.clickEditHeaderInfo(driver, testCaseName);
			TabCheckoutReqSummary.clickCostBookingTab(driver, testCaseName);
			ModelRequisitionSummaryCostBooking.fillCostBookingSingleCC(driver, testCaseName, costCenterSplitInfo.getCostCenter());
			ModelRequisitionSummaryCostBooking.clearProjectWithSpace(driver, testCaseName);
			List<String> listOfProjectNames = ModelRequisitionSummaryCostBooking.getListOfProjectNames(driver, testCaseName);
			flag = false;
			for (String str : listOfProjectNames)
			{
				if (str.trim().length() > 0)
				{
					str = CommonUtilities.getProperProject(str);
					for (String str_testData : listOfProjectNamesFromTestData)
					{
						if (str.equalsIgnoreCase(str_testData))
						{
							flag = true;
						}
					}
				}
				if (!flag)
				{
					log += "Project : " + str + " Not found \n";
				}
			}
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(1), "While creating requisition project was not coming based on the selected business unit \n" + log);

			/**
			 * RTC_358460 : Requisition>>While creating requisition project
			 * should come based on the selected business unit . Check case of
			 * item level costing .
			 **/
			ModelRequisitionSummaryCostBooking.selectCostBookingOptionLineItemCC(driver, testCaseName);
			ModelRequisitionSummaryCommon.clickSaveReqSummary(driver, testCaseName);
			ActionBot.scroll(driver, "400");
			PageRequisitionCheckOut.clickExpandAll(driver, testCaseName);
			PageRequisitionCheckOut.clickEditItemSummary(driver, testCaseName, items.getCatelogItems().get(0).getItemID());
			TabCheckoutItemSummary.clickItemSummaryCostBookingTab(driver, testCaseName);
			ModelItemSummaryCostBooking.fillCostBookingItemSplitCostCenter(driver, testCaseName, costCenterSplitInfo.getCostCenter(), items.getCatelogItems().get(0).getItemID(),
				0);
			ModelItemSummaryCostBooking.clearProjectWithSpace(driver, testCaseName, items.getCatelogItems().get(0).getItemID(), 0);
			ActionBot.defaultSleep();
			List<String> listOfProjectNames_itemLevel = ModelItemSummaryCostBooking.getListOfProjectNames(driver, testCaseName);
			flag = false;
			for (String str : listOfProjectNames_itemLevel)
			{
				if (str.trim().length() > 0)
				{
					str = CommonUtilities.getProperProject(str);
					for (String str_testData : listOfProjectNamesFromTestData)
					{
						if (str.equalsIgnoreCase(str_testData))
						{
							flag = true;
						}
					}
				}
				if (!flag)
				{
					log += "Project : " + str + " Not found";
				}
			}
			ModelItemSummaryCommon.clickItemSummaryCancle(driver, testCaseName);
			ActionBot.defaultSleep();
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(2),
				"While creating requisition project was not coming based on the selected business unit : case of item level costing .\n" + log);

			/**
			 * RTC_358461 : Requisition>>project should get reset on changing
			 * business unit while creating requisition.
			 **/
			other_bu = CommonServices.getTestData(IConstantsData.BusinessUnit_Name1);
			location = CommonServices.getTestData(IConstantsData.LOCATION_NAME);

			PageRequisitionCheckOut.clickEditHeaderInfo(driver, testCaseName);
			// single cc
			TabCheckoutReqSummary.clickCostBookingTab(driver, testCaseName);
			ModelRequisitionSummaryCostBooking.selectCostBookingOptionSingleCC(driver, testCaseName);
			defaultProject = ModelRequisitionSummaryCostBooking.getProjectName(driver, testCaseName);
			// change bu
			TabCheckoutReqSummary.clickBillingTab(driver, testCaseName);
			ModelRequisitionSummaryBilling.fillBillingBU(driver, testCaseName, other_bu);
			ModelRequisitionSummaryBilling.fillBillingLocation(driver, testCaseName, location);
			TabCheckoutReqSummary.clickCostBookingTab(driver, testCaseName);
			project = ModelRequisitionSummaryCostBooking.getProjectName(driver, testCaseName);
			flag = project.trim().length() == 0 && !(defaultProject.equalsIgnoreCase(project));
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(3), "Project was not get reset on changing business unit while creating requisition");
			ModelRequisitionSummaryCommon.clickCancleReqSummary(driver, testCaseName);

			/**
			 * RTC_358462 : Requisition>>project should get reset on changing
			 * business unit while creating requisition . Check case of item
			 * level costing .
			 **/
			PageRequisitionCheckOut.clickEditHeaderInfo(driver, testCaseName);
			TabCheckoutReqSummary.clickCostBookingTab(driver, testCaseName);
			ModelRequisitionSummaryCostBooking.selectCostBookingOptionLineItemCC(driver, testCaseName);
			ModelRequisitionSummaryCommon.clickSaveReqSummary(driver, testCaseName);
			// to get default project
			ActionBot.scroll(driver);
			PageRequisitionCheckOut.clickExpandAll(driver, testCaseName);
			PageRequisitionCheckOut.clickEditItemSummary(driver, testCaseName, items.getCatelogItems().get(0).getItemID());
			TabCheckoutItemSummary.clickItemSummaryCostBookingTab(driver, testCaseName);
			defaultProject = ModelItemSummaryCostBooking.getCostBookingItemSplitProject(driver, testCaseName, items.getCatelogItems().get(0).getItemID(), 0);
			ModelItemSummaryCommon.clickItemSummaryCancle(driver, testCaseName);

			// change Bu
			PageRequisitionCheckOut.clickEditHeaderInfo(driver, testCaseName);
			ModelRequisitionSummaryBilling.fillBillingBU(driver, testCaseName, other_bu);
			ModelRequisitionSummaryBilling.fillBillingLocation(driver, testCaseName, location);
			ModelRequisitionSummaryCommon.clickSaveReqSummary(driver, testCaseName);
			// to get rested project
			ActionBot.scroll(driver);
			PageRequisitionCheckOut.clickExpandAll(driver, testCaseName);
			PageRequisitionCheckOut.clickEditItemSummary(driver, testCaseName, items.getCatelogItems().get(0).getItemID());
			TabCheckoutItemSummary.clickItemSummaryCostBookingTab(driver, testCaseName);

			project = ModelItemSummaryCostBooking.getCostBookingItemSplitProject(driver, testCaseName, items.getCatelogItems().get(0).getItemID(), 0);
			ModelItemSummaryCommon.clickItemSummaryCancle(driver, testCaseName);

			flag = (project.trim().length() == 0) && !(project.equalsIgnoreCase(defaultProject));
			assertTrue("Project was not get reset on changing business unit while creating requisition : case of item level costing.", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			// navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);
			ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");
			MainPageHeaderLevelTab.clickOnTMSMasterDataTab(driver, testCaseName);
			MainPageHeaderLevelTab.clickOnTMSCustomizeSubTab(driver, testCaseName);
			PageCustomizeSettings.clickOnCostBookingLink(driver, testCaseName);
			ActionBot.defaultSleep();
			PageProjectsSettings.clickOnLetUsersDecide(driver);
			ScreenShot.screenshot(driver, testCaseName, "change in settings");
			PageProjectsSettings.clickOnSave(driver);
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Requisition>>Error should be shown on
	 * submitting requisition whose business unit and project are no more linked
	 * to each other . Check case of submitting draft req . <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_358464(TestCase testCase) throws Exception
	{
		//BU-Project
		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		User user = null;
		Requisition requisition = new Requisition();
		String testCaseName = null, validationMsg = null, project = null;
		boolean flag = false, settingchangedFlag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_358463"));
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// req object
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			requisition.setNextAction(IConstantsData.SAVE_AS_DRAFT_REQ);

			//Automation_Comp1_BU2
			// create req
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);
			// search req
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());
			flag = requisition.getStatus().equalsIgnoreCase(IConstantsData.DRAFT_FILTER_LABEL);
			assertTrue("Status of requisition was wrong, it should be Draft", flag);

			project = CommonUtilities.getProperProject(requisition.getCostBookingRequisitionSummary().getProject().trim());

			// remove bu from project
			settingchangedFlag = true;
			FlowProject.searchAndRemoveBUFromProject(driver, testCaseName, project, IConstantsData.SearchCC_In_Project_Or_Task_Name,
				requisition.getBillingRequisitionSummary().getBusinessUnit());

			// search req
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", flag);

			// view req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);

			// submit req
			FlowRequisition.submitReq(driver, testCaseName, false);

			// check validation error msg
			validationMsg = PopUpDefalutAlert.getAlertMsg(driver, testCaseName);
			flag = validationMsg.equalsIgnoreCase(IConstantsData.Project_Bu_not_linked_Validation_Error_Msg1 + " " + requisition.getCostBookingRequisitionSummary().getCostCenter()
				+ IConstantsData.CostCenter_Bu_not_linked_Validation_Error_Msg2);

			/**
			 * RTC_358463 : Requisition>>Error should be shown on submitting
			 * requisition whose business unit and project are no more linked to
			 * each other .
			 **/
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(0),
				"Error was not shown on submitting requisition having Project and business unit which are not linked to each other .");

			assertTrue("Error was not shown on submitting draft requisition having Project and business unit which are not linked to each other .", flag);

			PopUpDefalutAlert.clickOnAlertOkButton(driver, testCaseName);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				if (settingchangedFlag)
				{
					FlowProject.searchAndAddBUToProject(driver, testCaseName, project, IConstantsData.SearchCC_In_Project_Or_Task_Name,
						requisition.getBillingRequisitionSummary().getBusinessUnit());
				}
			}
			catch (Exception ex)
			{
				logger.error("Error while Adding BU to project" + ex, ex);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Requisition>>Error should be shown on
	 * submitting requisition whose business unit and project are no more linked
	 * to each other . Check case of submitting rejected req . <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_358465(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		Requisition requisition = new Requisition();
		String testCaseName = null, validationMsg = null, project = null;
		boolean flag = false, settingchangedFlag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			CommonServices.startTestCase(driver, testCase);

			user = LoginLogoutServices.login(driver, testCase);

			//for filling it first time
			BillingRequisitionSummary billingRequisitionSummary = new BillingRequisitionSummary();
			billingRequisitionSummary.setCompany(CommonServices.getTestData(IConstantsData.ORGANIZATION_UNIT_OR_COMPANY_NAME)); //Automation_Company1
			billingRequisitionSummary.setBusinessUnit(CommonServices.getTestData(IConstantsData.BUSINESS_UNIT_NAME)); //Automation_Comp1_BU1
			billingRequisitionSummary.setLocation(CommonServices.getTestData(IConstantsData.LOCATION_NAME)); //Automation_Location1
			billingRequisitionSummary.setNextAction(IConstantsData.NONE);

			// create req
			requisition.setBillingRequisitionSummary(billingRequisitionSummary);

			// req object
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);

			// create req
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// search req
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());
			flag = requisition.getStatus().equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL);
			assertTrue("Status of requisition was wrong, it should be Draft", flag);

			project = CommonUtilities.getProperProject(requisition.getCostBookingRequisitionSummary().getProject().trim());

			// reject req
			ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, requisition.getReqNo(), IConstantsData.REQUISITION,
				IConstantsData.REJECT);
			approvalAllRequests = FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);
			assertTrue("Error while rejecting requisition", approvalAllRequests.isResult());

			// search req
			ActionBot.waitForPageLoad(driver);
			ActionBot.defaultSleep();
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition after it has been rejected by Approver", flag);
			flag = requisition.getStatus().equalsIgnoreCase(IConstantsData.REJECTED_FILTER_LABEL);
			assertTrue("Status of requisition was wrong, it should be Rejected", flag);

			CostBookingRequisitionSummary bookingRequisitionSummary = ObjectCreation.getDefaultObjectOfCostBookingOfOtherCompany();
			bookingRequisitionSummary.setProject(CommonServices.getTestData(IConstantsData.OTHER_PROJECT));

			// view req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);

			PageRequisitionCheckOut.clickEditHeaderInfo(driver, testCaseName);
			FlowRequisition.fillBillingRequisitionSummary(driver, testCaseName, billingRequisitionSummary);
			TabCheckoutReqSummary.clickCostBookingTab(driver, testCaseName);
			FlowRequisition.fillCostBookingRequisitionSummary(driver, testCaseName, bookingRequisitionSummary);
			ModelRequisitionSummaryCostBooking.fillCostBookingSingleBudget(driver, testCaseName, bookingRequisitionSummary.getBudget());
			ActionBot.defaultSleep();

			//check for error
			flag = PageRequisitionCheckOut.isErrorMessagePresentInRequisitionSummaryPopUp(driver, testCaseName, IConstantsData.project);
			assertTrue("Error was not shown on submitting Rejected requisition having Project and business unit which are not linked to each other .", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Requisition>>Error should be shown on
	 * submitting requisition whose business unit and project are no more linked
	 * to each other . Check case of submitting recalled req . <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_358466(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		Requisition requisition = new Requisition();
		String testCaseName = null, validationMsg = null, project = null;
		boolean flag = false, settingchangedFlag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			CommonServices.startTestCase(driver, testCase);

			user = LoginLogoutServices.login(driver, testCase);

			// req object
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);

			//for filling it first time
			BillingRequisitionSummary billingRequisitionSummary = new BillingRequisitionSummary();
			billingRequisitionSummary.setCompany(CommonServices.getTestData(IConstantsData.ORGANIZATION_UNIT_OR_COMPANY_NAME)); //Automation_Company1
			billingRequisitionSummary.setBusinessUnit(CommonServices.getTestData(IConstantsData.BUSINESS_UNIT_NAME)); //Automation_Comp1_BU1
			billingRequisitionSummary.setLocation(CommonServices.getTestData(IConstantsData.LOCATION_NAME)); //Automation_Location1
			billingRequisitionSummary.setNextAction(IConstantsData.NONE);

			// create req
			requisition.setBillingRequisitionSummary(billingRequisitionSummary);

			// create req
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// search req
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());
			flag = requisition.getStatus().contains(IConstantsData.IN_APPROVAL_FILTER_LABEL);
			assertTrue("Status of requisition was wrong, it should be Draft", flag);

			// recall req
			FlowMyRequisitions.recallApprovalRequest(driver, testCaseName, requisition);

			flag = requisition.getStatus().equalsIgnoreCase(IConstantsData.DRAFT_FILTER_LABEL);
			assertTrue("Status of requisition was wrong, it should be Draft", flag);

			CostBookingRequisitionSummary bookingRequisitionSummary = ObjectCreation.getDefaultObjectOfCostBookingOfOtherCompany();
			bookingRequisitionSummary.setProject(CommonServices.getTestData(IConstantsData.OTHER_PROJECT));

			// view req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);

			PageRequisitionCheckOut.clickEditHeaderInfo(driver, testCaseName);
			FlowRequisition.fillBillingRequisitionSummary(driver, testCaseName, billingRequisitionSummary);
			TabCheckoutReqSummary.clickCostBookingTab(driver, testCaseName);
			FlowRequisition.fillCostBookingRequisitionSummary(driver, testCaseName, bookingRequisitionSummary);
			ModelRequisitionSummaryCostBooking.fillCostBookingSingleBudget(driver, testCaseName, bookingRequisitionSummary.getBudget());
			ActionBot.defaultSleep();

			//check for error
			flag = PageRequisitionCheckOut.isErrorMessagePresentInRequisitionSummaryPopUp(driver, testCaseName, IConstantsData.project);
			assertTrue("Error was not shown on submitting Recalled requisition having Project and business unit which are not linked to each other .", flag);

			PopUpDefalutAlert.clickOnAlertOkButton(driver, testCaseName);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Requisition>>Error should be shown on
	 * submitting requisition whose business unit and project are no more linked
	 * to each other . Check case of submitting returned req . <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_358467(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		Requisition requisition = new Requisition();
		String testCaseName = null, validationMsg = null, project = null;
		boolean flag = false, settingchangedFlag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			CommonServices.startTestCase(driver, testCase);

			user = LoginLogoutServices.login(driver, testCase);

			// req object
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);

			//for filling it first time
			BillingRequisitionSummary billingRequisitionSummary = new BillingRequisitionSummary();
			billingRequisitionSummary.setCompany(CommonServices.getTestData(IConstantsData.ORGANIZATION_UNIT_OR_COMPANY_NAME)); //Automation_Company1
			billingRequisitionSummary.setBusinessUnit(CommonServices.getTestData(IConstantsData.BUSINESS_UNIT_NAME)); //Automation_Comp1_BU1
			billingRequisitionSummary.setLocation(CommonServices.getTestData(IConstantsData.LOCATION_NAME)); //Automation_Location1
			billingRequisitionSummary.setNextAction(IConstantsData.NONE);

			// create req
			requisition.setBillingRequisitionSummary(billingRequisitionSummary);

			CostBookingRequisitionSummary bookingRequisitionSummary = ObjectCreation.getDefaultObjectOfCostBookingOfOtherCompany();

			// create req
			requisition = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			// search req at buyers desk
			requisition = FlowBuyersDeskListing.searchAtBuyersDeskListing(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition at Buyers Desk", requisition.isResult());

			// return req from buyers desk
			flag = FlowBuyersDeskListing.returnRequisitionFromBuyersDesk(driver, testCaseName, requisition, true);
			assertTrue("Requisition was not returned from buyers desk", flag);

			bookingRequisitionSummary.setProject(CommonServices.getTestData(IConstantsData.OTHER_PROJECT));

			// view req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);
			PageRequisitionCheckOut.clickEditHeaderInfo(driver, testCaseName);
			FlowRequisition.fillBillingRequisitionSummary(driver, testCaseName, billingRequisitionSummary);
			TabCheckoutReqSummary.clickCostBookingTab(driver, testCaseName);
			FlowRequisition.fillCostBookingRequisitionSummary(driver, testCaseName, bookingRequisitionSummary);
			ModelRequisitionSummaryCostBooking.fillCostBookingSingleBudget(driver, testCaseName, bookingRequisitionSummary.getBudget());
			ActionBot.defaultSleep();

			//check for error
			flag = PageRequisitionCheckOut.isErrorMessagePresentInRequisitionSummaryPopUp(driver, testCaseName, IConstantsData.project);
			Assert.assertTrue("error message is not displayed after putting unavailable cost center value corresponnding to BU", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Customer specific field name>>Requisition
	 * view from audit trail>>Cost center and accounting label should be
	 * replaced by its customized name when you view requisition from audit
	 * trail. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_353059(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		User user = null;
		SystemTenantConfiguration configuration = new SystemTenantConfiguration();
		String testCaseName = null, costCenterLabelAtHeaderLevel, costCenterLabelAtHeaderSummary, glAccountLabel, error = "", windowHandleBefore;
		Set<String> windowHandles;
		boolean settingchangedFlag = false, costCenterFlag = false, glAccountFlag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_352997"));
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_353052"));

			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// system tenant configuration object
			configuration.setTenantName(CommonServices.getTestData(IConstantsData.TenantName));
			configuration.setCustomLang(CommonServices.getTestData(IConstantsData.System_Tenant_Custom_Lang_Name));

			// change system tenant configuration
			settingchangedFlag = true;
			configuration = FlowSystemTenantConfiguration.changeSytemTenantConfiguration(driver, testCaseName, configuration);

			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);

			/**
			 * RTC_352997 : Customer specific field name>>Requisition>>Cost
			 * center and accounting label should be replaced by its customized
			 * name for requisitions which open in edit mode.
			 **/
			// apply draft filter
			MyRequisitionFilter myRequisitionFilter = new MyRequisitionFilter();
			myRequisitionFilter.setDraftFilter(true);
			List<String> statusOfFilter = new ArrayList<String>();
			statusOfFilter.add(IConstantsData.DRAFT_FILTER_LABEL);
			myRequisitionFilter.setStatusOfFilter(statusOfFilter);

			myRequisitionFilter = FlowMyRequisitions.applyMyRequisitionStatusFilter(driver, testCaseName, myRequisitionFilter);
			assertTrue("Error while applying draft filter", myRequisitionFilter.isResult());

			// view req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);
			// get cost center and gl account label
			PageRequisitionCheckOut.clickEditHeaderInfo(driver, testCaseName);
			TabCheckoutReqSummary.clickCostBookingTab(driver, testCaseName);
			costCenterLabelAtHeaderLevel = ModelRequisitionSummaryCostBooking.getCostCenterLabelAtHeaderLevel(driver, testCaseName);
			ModelRequisitionSummaryCommon.clickCancleReqSummary(driver, testCaseName);
			costCenterLabelAtHeaderSummary = PageRequisitionCheckOut.getCostCenterLabelInHeaderSummary(driver, testCaseName);
			ActionBot.scroll(driver);
			PageRequisitionCheckOut.clickExpandAll(driver, testCaseName);
			PageRequisitionCheckOut.clickEditItemSummary(driver, testCaseName);
			TabCheckoutItemSummary.clickItemSummaryCostBookingTab(driver, testCaseName);
			glAccountLabel = ModelItemSummaryCostBooking.getGLAccountHeaderAtItemLevel(driver, testCaseName);
			ModelItemSummaryCommon.clickItemSummaryCancle(driver, testCaseName);
			String[] temp;
			if (costCenterLabelAtHeaderLevel.contains(":"))
			{
				temp = StringUtils.split(costCenterLabelAtHeaderLevel, ":");
				costCenterLabelAtHeaderLevel = temp[0].trim();
			}
			if (costCenterLabelAtHeaderLevel.contains("*"))
			{
				temp = StringUtils.split(costCenterLabelAtHeaderLevel, "*");
				costCenterLabelAtHeaderLevel = temp[0].trim();
			}
			if (costCenterLabelAtHeaderSummary.contains(":"))
			{
				temp = StringUtils.split(costCenterLabelAtHeaderSummary, ":");
				costCenterLabelAtHeaderSummary = temp[0].trim();
			}
			if (costCenterLabelAtHeaderSummary.contains("*"))
			{
				temp = StringUtils.split(costCenterLabelAtHeaderSummary, "*");
				costCenterLabelAtHeaderSummary = temp[0].trim();
			}
			if (glAccountLabel.contains(":"))
			{
				temp = StringUtils.split(glAccountLabel, ":");
				glAccountLabel = temp[0].trim();
			}

			int i = 0;
			for (String str : configuration.getStandardNames())
			{
				if (str.equalsIgnoreCase(IConstantsData.Default_CostCenter_Label_Name))
				{
					costCenterFlag = (costCenterLabelAtHeaderLevel.equalsIgnoreCase(configuration.getCustomizedNames().get(i)))
						&& (costCenterLabelAtHeaderSummary.equalsIgnoreCase(configuration.getCustomizedNames().get(i)));
				}
				else if (str.equalsIgnoreCase(IConstantsData.Default_GL_Account_Label_Name))
				{
					glAccountFlag = glAccountLabel.equalsIgnoreCase(configuration.getCustomizedNames().get(i));
				}
				i++;
			}

			if (!costCenterFlag)
			{
				error += "Cost center label was not updated according to Custom Labels at header level and header summary \n";
			}
			if (!glAccountFlag)
			{
				error += "Gl Account label was not updated according to Custom Labels at Item Summary";
			}
			CommonServices.setMappedTestCaseResult(costCenterFlag && glAccountFlag, mappedTestCases.get(0), error);

			/**
			 * RTC_353052 : Customer specific field name>>Requisition view>>Cost
			 * center and accounting label should be replaced by its customized
			 * name in requisition view.
			 **/
			// apply draft filter
			myRequisitionFilter.setDraftFilter(false);
			myRequisitionFilter.setInApprovalFilter(true);
			statusOfFilter.remove(0);
			statusOfFilter.add(IConstantsData.IN_APPROVAL_FILTER_LABEL);
			myRequisitionFilter.setStatusOfFilter(statusOfFilter);

			myRequisitionFilter = FlowMyRequisitions.applyMyRequisitionStatusFilter(driver, testCaseName, myRequisitionFilter);
			assertTrue("Error while applying In Approval filter", myRequisitionFilter.isResult());

			// view req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);
			ActionBot.scroll(driver, "400");
			// to get cost center info
			PageRequisitionView.clickOnExpandCostBooking(driver, testCaseName);
			costCenterLabelAtHeaderLevel = PageRequisitionView.getCostCenterLabel(driver, testCaseName);

			// to get gl account info
			PageRequisitionView.clickOnExpandAccounting(driver, testCaseName);
			glAccountLabel = PageRequisitionView.getGLAccountLabel(driver, testCaseName);
			ScreenShot.screenshot(driver, testCaseName, "Requisition View");

			if (costCenterLabelAtHeaderLevel.contains(":"))
			{
				temp = StringUtils.split(costCenterLabelAtHeaderLevel, ":");
				costCenterLabelAtHeaderLevel = temp[0].trim();
			}
			if (costCenterLabelAtHeaderLevel.contains("*"))
			{
				temp = StringUtils.split(costCenterLabelAtHeaderLevel, "*");
				costCenterLabelAtHeaderLevel = temp[0].trim();
			}
			if (glAccountLabel.contains(":"))
			{
				temp = StringUtils.split(glAccountLabel, ":");
				glAccountLabel = temp[0].trim();
			}
			i = 0;
			for (String str : configuration.getStandardNames())
			{
				if (str.equalsIgnoreCase(IConstantsData.Default_CostCenter_Label_Name))
				{
					costCenterFlag = costCenterLabelAtHeaderLevel.equalsIgnoreCase(configuration.getCustomizedNames().get(i));
				}
				else if (str.equalsIgnoreCase(IConstantsData.Default_GL_Account_Label_Name))
				{
					glAccountFlag = glAccountLabel.equalsIgnoreCase(configuration.getCustomizedNames().get(i));
				}
				i++;
			}

			if (!costCenterFlag)
			{
				error += "Cost center label was not updated according to Custom Labels on Requisition view page \n";
			}
			if (!glAccountFlag)
			{
				error += "Gl Account label was not updated according to Custom Labels on Requisition view page";
			}
			CommonServices.setMappedTestCaseResult(costCenterFlag && glAccountFlag, mappedTestCases.get(1), error);

			/**
			 * RTC_353059 : Customer specific field name>>Requisition view from
			 * audit trail>>Cost center and accounting label should be replaced
			 * by its customized name when you view requisition from audit
			 * trail.
			 **/
			ActionBot.scroll(driver, "450");
			windowHandleBefore = driver.getWindowHandle();
			PageRequisitionView.clickOnAuditTrailVersion(driver, testCaseName, 1);
			windowHandles = driver.getWindowHandles();
			for (String winHandle : windowHandles)
			{
				driver.switchTo().window(winHandle);
			}
			ActionBot.waitForPageLoad(driver);
			driver.manage().window().maximize();
			ScreenShot.screenshot(driver, testCaseName, "Requisition Version");
			ActionBot.scroll(driver, "400");
			// to get cost center info
			PageRequisitionView.clickOnExpandCostBooking(driver, testCaseName);
			costCenterLabelAtHeaderLevel = PageRequisitionView.getCostCenterLabel(driver, testCaseName);

			// to get gl account info
			PageRequisitionView.clickOnExpandAccounting(driver, testCaseName);
			glAccountLabel = PageRequisitionView.getGLAccountLabel(driver, testCaseName);
			ScreenShot.screenshot(driver, testCaseName, "Requisition Version");
			driver.switchTo().window(windowHandleBefore);

			if (costCenterLabelAtHeaderLevel.contains(":"))
			{
				temp = StringUtils.split(costCenterLabelAtHeaderLevel, ":");
				costCenterLabelAtHeaderLevel = temp[0].trim();
			}
			if (costCenterLabelAtHeaderLevel.contains("*"))
			{
				temp = StringUtils.split(costCenterLabelAtHeaderLevel, "*");
				costCenterLabelAtHeaderLevel = temp[0].trim();
			}
			if (glAccountLabel.contains(":"))
			{
				temp = StringUtils.split(glAccountLabel, ":");
				glAccountLabel = temp[0].trim();
			}
			i = 0;
			for (String str : configuration.getStandardNames())
			{
				if (str.equalsIgnoreCase(IConstantsData.Default_CostCenter_Label_Name))
				{
					costCenterFlag = costCenterLabelAtHeaderLevel.equalsIgnoreCase(configuration.getCustomizedNames().get(i));
				}
				else if (str.equalsIgnoreCase(IConstantsData.Default_GL_Account_Label_Name))
				{
					glAccountFlag = glAccountLabel.equalsIgnoreCase(configuration.getCustomizedNames().get(i));
				}
				i++;
			}

			if (!costCenterFlag)
			{
				error += "Cost center label was not updated according to Custom Labels on Requisition Version View \n";
			}
			if (!glAccountFlag)
			{
				error += "Gl Account label was not updated according to Custom Labels on Requisition Version View";
			}
			assertTrue(error, costCenterFlag && glAccountFlag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				if (settingchangedFlag)
				{
					configuration.setCustomLang(IConstantsData.Default_System_Tenant_Custom_Lang_Name);

					// change system tenant configuration
					configuration = FlowSystemTenantConfiguration.changeSytemTenantConfiguration(driver, testCaseName, configuration);
				}
			}
			catch (Exception e2)
			{
				logger.error("Error while changing Systen Tenant Custom Lang to Default : " + e2, e2);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
			}
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Requisition>>Error should be shown on
	 * submitting requisition whose business unit and project are no more linked
	 * to each other . Check case of submitting returned req . <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_352951(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		User user = null;
		Requisition requisition = new Requisition();
		CategoryManagerMap categoryManagerMap = new CategoryManagerMap();
		CategoryManagerMap categoryManagerMap2 = new CategoryManagerMap();
		String testCaseName = null, assignedBuyerName = null;
		boolean flag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_352956"));
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// category manager map
			categoryManagerMap = ObjectCreation.getObjectOfCategoryManagerMap(IConstantsData.Category1_Buyer1_Purpose1);
			categoryManagerMap2 = ObjectCreation.getObjectOfCategoryManagerMap(IConstantsData.Category2_Buyer2_Purpose1);

			// Guided Item
			GuidedItem guidedItem = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.EXISTING_SUPPLIER);
			ModalGuidedItemSelectCategory category = new ModalGuidedItemSelectCategory();
			category.setCategory(categoryManagerMap.getCategory());
			guidedItem.setCategory(category);

			// Guided Item1
			GuidedItem guidedItem1 = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.EXISTING_SUPPLIER);
			ModalGuidedItemSelectCategory category1 = new ModalGuidedItemSelectCategory();
			category1.setCategory(categoryManagerMap2.getCategory());
			guidedItem1.setCategory(category1);

			List<GuidedItem> guidedItems = new ArrayList<GuidedItem>();
			guidedItems.add(guidedItem);
			guidedItems.add(guidedItem1);

			// req object
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			requisition.getItems().setGuidedItems(guidedItems);
			requisition.setModifyWorkflowSettings(true);

			// create req
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// search req in my req
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());
			assertTrue("Status of requisition was wrong, it should be Ready For Approval",
				requisition.getStatus().equalsIgnoreCase(IConstantsData.READY_FOR_APPROVAL_FILTER_LABEL));

			/**
			 * RTC_352956 : Commodity manager wise buyer>>Ready for
			 * approval>>Multiple buyers as per configured maps should not be
			 * evaluated in assigned buyer when requisition is submitted with
			 * buyer.
			 **/
			// view req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);

			assignedBuyerName = PageRequisitionView.getAssignBuyerField(driver, testCaseName);
			flag = assignedBuyerName.equalsIgnoreCase(requisition.getAssignedBuyer()) && !(assignedBuyerName.equalsIgnoreCase(categoryManagerMap.getBuyer()))
				&& !(assignedBuyerName.equalsIgnoreCase(categoryManagerMap2.getBuyer()));
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(0), "Assigned buyer was not retained in Ready for approval requisitions, it was evaluated as per map");
			assertTrue("Assigned buyer was not retained in Ready for approval requisitions, it was evaluated as per map", flag);

			/**
			 * RTC_352951 : Commodity manager wise buyer>>Multiple buyers as per
			 * configured maps should not be evaluated in assigned buyer when
			 * requisition is submitted with buyer.
			 **/
			// submit for approval
			PageRequisitionView.clickOnSubmitForApproval(driver, testCaseName);
			PageRequisitionCheckOut.waitTillReqSubmitProcessingDivPresent(driver, testCaseName);

			// search req
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());
			assertTrue("Status of requisition was wrong, it should be In Approval", requisition.getStatus().equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL));

			// view req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);

			assignedBuyerName = PageRequisitionView.getAssignBuyerField(driver, testCaseName);
			flag = assignedBuyerName.equalsIgnoreCase(requisition.getAssignedBuyer()) && !(assignedBuyerName.equalsIgnoreCase(categoryManagerMap.getBuyer()))
				&& !(assignedBuyerName.equalsIgnoreCase(categoryManagerMap2.getBuyer()));

			assertTrue("Assigned buyer was not retained for In Approval requisitions, it was evaluated as per map", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Commodity manager wise buyer>>Auto PO :
	 * ON>>Tenant buyer should be evaluated in assigned buyer field when
	 * Assigned buyer is evaluated to be multiple buyer/ buyer group as per
	 * configured maps. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_352955(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		Requisition requisition = new Requisition();
		CategoryManagerMap categoryManagerMap = new CategoryManagerMap();
		PurchaseOrderSettings purchaseOrderSettings = new PurchaseOrderSettings();
		RequisitionSettings requisitionSettings = new RequisitionSettings();
		String testCaseName = null, assignedBuyerName = null;
		boolean flag = false, settingChangedFlag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			CommonServices.startTestCase(driver, testCase);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// category manager map
			categoryManagerMap = ObjectCreation.getObjectOfCategoryManagerMap(IConstantsData.Category1_Buyer1_Purpose1);

			// Guided Item
			GuidedItem guidedItem = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.EXISTING_SUPPLIER);
			ModalGuidedItemSelectCategory category = new ModalGuidedItemSelectCategory();
			category.setCategory(categoryManagerMap.getCategory());
			guidedItem.setCategory(category);

			List<GuidedItem> guidedItems = new ArrayList<GuidedItem>();
			guidedItems.add(guidedItem);
			Item item = new Item();
			item.setGuidedItems(guidedItems);

			// req object
			requisition = ObjectCreation.getRequisition(driver);
			requisition.setItems(item);
			requisition.setAssignedBuyer("");

			// purchase order settings object
			purchaseOrderSettings.setReleaseOrdersImmediately(true);
			purchaseOrderSettings.setAutomaticallyGenerateOrders(true);
			purchaseOrderSettings.setNextAction(IConstantsData.SAVE);

			// change po settings
			settingChangedFlag = true;
			purchaseOrderSettings = FlowPurchaseOrderSetting.changePOSetting(driver, testCaseName, purchaseOrderSettings);

			// req settings
			requisitionSettings.setRequesterRequiredToAssignBuyerOption(IConstantsData.OPTIONAL);

			// change req settings
			FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings);

			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			// create req
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// search req
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());
			assertTrue("Status of requisition was wrong, it should be In Approval", requisition.getStatus().equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL));

			// approve req
			ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, requisition.getReqNo(), IConstantsData.REQUISITION,
				IConstantsData.APPROVE);
			approvalAllRequests = FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);
			assertTrue("Error while approving requisition", approvalAllRequests.isResult());

			// check if auto po generated- search in my req tab
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());
			flag = (requisition.getStatus().equalsIgnoreCase(IConstantsData.COMPLETE_RELEASED_FILTER_LABEL))
				|| (requisition.getStatus().equalsIgnoreCase(IConstantsData.SCHEDULED_FILTER_LABEL));
			assertTrue("Status of Requisition in My Requisition Tab was wrong. Auto po was not generated", flag);

			// view req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);

			assignedBuyerName = PageRequisitionView.getAssignBuyerField(driver, testCaseName);
			flag = assignedBuyerName.equalsIgnoreCase(purchaseOrderSettings.getDefaultBuyerForAutoPO());
			assertTrue("Tenant buyer was not evaluated in assigned buyer field in Auto PO", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				if (settingChangedFlag)
				{
					// change po settings
					purchaseOrderSettings.setReleaseOrdersImmediately(true);
					purchaseOrderSettings.setAutomaticallyGenerateOrders(false);
					purchaseOrderSettings.setNextAction(IConstantsData.SAVE);
					FlowPurchaseOrderSetting.changePOSetting(driver, testCaseName, purchaseOrderSettings);
				}
			}
			catch (Exception e)
			{
				logger.error("Error while reverting PO settings to default : " + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Commodity manager wise buyer>>Auto PO :
	 * ON>>Tenant buyer should be evaluated in assigned buyer field when
	 * Assigned buyer of requisition contains multiple buyer/ buyer group. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_352950(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		User user = null;
		Requisition requisition = new Requisition();
		PurchaseOrderSettings purchaseOrderSettings = new PurchaseOrderSettings();
		RequisitionSettings requisitionSettings = new RequisitionSettings();
		String testCaseName = null, assignedBuyerName = null;
		boolean flag = false, settingChangedFlag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_352946"));
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// req object
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			requisition.setAssignedBuyer("");

			// purchase order settings object
			purchaseOrderSettings.setReleaseOrdersImmediately(true);
			purchaseOrderSettings.setAutomaticallyGenerateOrders(true);
			purchaseOrderSettings.setNextAction(IConstantsData.SAVE);

			// change po settings
			settingChangedFlag = true;
			purchaseOrderSettings = FlowPurchaseOrderSetting.changePOSetting(driver, testCaseName, purchaseOrderSettings);

			// req settings
			requisitionSettings.setRequesterRequiredToAssignBuyerOption(IConstantsData.OPTIONAL);

			// change req settings
			FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings);

			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);

			/**
			 * RTC_352946 : Commodity manager wise buyer>>Auto PO : ON>>Tenant
			 * buyer should be evaluated in assigned buyer field when Assigned
			 * buyer of requisition is blank.
			 **/
			// create req
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// search req
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());
			assertTrue("Status of requisition was wrong, it should be In Approval", requisition.getStatus().equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL));

			// approve req
			ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, requisition.getReqNo(), IConstantsData.REQUISITION,
				IConstantsData.APPROVE);
			approvalAllRequests = FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);
			assertTrue("Error while approving requisition", approvalAllRequests.isResult());

			// check if auto po generated- search in my req tab
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());
			flag = (requisition.getStatus().equalsIgnoreCase(IConstantsData.COMPLETE_RELEASED_FILTER_LABEL))
				|| (requisition.getStatus().equalsIgnoreCase(IConstantsData.SCHEDULED_FILTER_LABEL));
			assertTrue("Status of Requisition in My Requisition Tab was wrong. Auto po was not generated", flag);

			// view req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);

			assignedBuyerName = PageRequisitionView.getAssignBuyerField(driver, testCaseName);
			flag = assignedBuyerName.equalsIgnoreCase(purchaseOrderSettings.getDefaultBuyerForAutoPO());
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(0),
				"Tenant buyer was not evaluated in assigned buyer field in Auto PO,if assigned buyer field is left blank while creating requisition");

			/**
			 * RTC_352950 : Commodity manager wise buyer>>Auto PO : ON>>Tenant
			 * buyer should be evaluated in assigned buyer field when Assigned
			 * buyer of requisition contains multiple buyer/ buyer group.
			 **/
			// copy req
			PageRequisitionView.clickOnCopyActionsLink(driver, testCaseName);
			Requisition requisition_copy = new Requisition();
			requisition_copy.setReqName(CommonUtilities.getReqName());
			requisition_copy.setCustomDate(requisition.getCustomDate());
			requisition_copy.setAssignedBuyer(CommonServices.getTestData(IConstantsData.BUYER_NAME));
			requisition_copy.setItems(requisition.getItems());

			// fill checkout form
			requisition_copy = FlowRequisition.fillcheckoutForm(driver, testCaseName, requisition_copy, requisition.getItems());

			// submit req
			FlowRequisition.submitReq(driver, testCaseName, true);

			// search req
			requisition_copy = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition_copy);
			assertTrue("Error while searching requisition", requisition_copy.isResult());
			assertTrue("Status of requisition was wrong, it should be In Approval", requisition_copy.getStatus().equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL));

			// approve req
			ApprovalAllRequests approvalAllRequests1 = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, requisition_copy.getReqNo(), IConstantsData.REQUISITION,
				IConstantsData.APPROVE);
			approvalAllRequests1 = FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests1);
			assertTrue("Error while approving requisition", approvalAllRequests1.isResult());

			// check if auto po generated- search in my req tab
			requisition_copy = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition_copy);
			assertTrue("Error while searching requisition", requisition_copy.isResult());
			flag = (requisition_copy.getStatus().equalsIgnoreCase(IConstantsData.COMPLETE_RELEASED_FILTER_LABEL))
				|| (requisition_copy.getStatus().equalsIgnoreCase(IConstantsData.SCHEDULED_FILTER_LABEL));
			assertTrue("Status of Requisition in My Requisition Tab was wrong. Auto po was not generated", flag);

			// view req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);

			assignedBuyerName = PageRequisitionView.getAssignBuyerField(driver, testCaseName);
			flag = assignedBuyerName.equalsIgnoreCase(purchaseOrderSettings.getDefaultBuyerForAutoPO());
			assertTrue("Tenant buyer was not evaluated in assigned buyer field in Auto PO, if assigned buyer field is fill while creating requisition", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				if (settingChangedFlag)
				{
					// change po settings
					purchaseOrderSettings.setReleaseOrdersImmediately(true);
					purchaseOrderSettings.setAutomaticallyGenerateOrders(false);
					purchaseOrderSettings.setNextAction(IConstantsData.SAVE);
					FlowPurchaseOrderSetting.changePOSetting(driver, testCaseName, purchaseOrderSettings);
				}
			}
			catch (Exception e)
			{
				logger.error("Error while reverting PO settings to default : " + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
			}
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Requisition>>Error should be shown on
	 * submitting requisition whose business unit and project are no more linked
	 * to each other . Check case of submitting returned req . <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_352947(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		User user = null;
		Requisition requisition = new Requisition();
		CategoryManagerMap categoryManagerMap = new CategoryManagerMap();
		CategoryManagerMap categoryManagerMap2 = new CategoryManagerMap();
		String testCaseName = null, assignedBuyerName = null;
		List<String> multipleAssignedBuyerNamesAsOnViewPage = new ArrayList<String>();
		List<String> assignedBuyerNames = new ArrayList<String>();
		boolean flag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_352961"));
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// req settings : assigned buyer optional
			RequisitionSettings requisitionSettings = new RequisitionSettings();
			requisitionSettings.setRequesterRequiredToAssignBuyerOption(IConstantsData.OPTIONAL);

			requisitionSettings = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);

			// category manager map
			categoryManagerMap = ObjectCreation.getObjectOfCategoryManagerMap(IConstantsData.Category1_Buyer1_Purpose1);
			categoryManagerMap2 = ObjectCreation.getObjectOfCategoryManagerMap(IConstantsData.Category2_Buyer2_Purpose1);

			// Guided Item
			GuidedItem guidedItem = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.EXISTING_SUPPLIER);
			ModalGuidedItemSelectCategory category = new ModalGuidedItemSelectCategory();
			category.setCategory(categoryManagerMap.getCategory());
			guidedItem.setCategory(category);

			// Guided Item1
			GuidedItem guidedItem1 = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.EXISTING_SUPPLIER);
			ModalGuidedItemSelectCategory category1 = new ModalGuidedItemSelectCategory();
			category1.setCategory(categoryManagerMap2.getCategory());
			guidedItem1.setCategory(category1);

			List<GuidedItem> guidedItems = new ArrayList<GuidedItem>();
			guidedItems.add(guidedItem);
			guidedItems.add(guidedItem1);

			// req object
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			requisition.getItems().setGuidedItems(guidedItems);
			requisition.setModifyWorkflowSettings(true);
			requisition.setAssignedBuyer("");

			// create req
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// search req in my req
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());
			assertTrue("Status of requisition was wrong, it should be Ready For Approval",
				requisition.getStatus().toLowerCase().contains(IConstantsData.READY_FOR_APPROVAL_FILTER_LABEL.toLowerCase()));

			/**
			 * RTC_352961 : Commodity manager wise buyer>>Ready for
			 * approval>>Multiple buyers as per configured maps should not be
			 * evaluated in assigned buyer when requisition is submitted without
			 * buyer.
			 **/
			// view req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);

			assignedBuyerName = PageRequisitionView.getAssignBuyerField(driver, testCaseName);
			flag = assignedBuyerName.equalsIgnoreCase("-");
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(0), "Assigned buyer was not empty in Ready for approval requisitions, it was evaluated as per map");
			assertTrue("Assigned buyer was not empty in Ready for approval requisitions, it was evaluated as per map", flag);

			/**
			 * RTC_352947 : Commodity manager wise buyer>>Multiple buyers as per
			 * configured maps should be evaluated in assigned buyer when
			 * requisition is submitted without any buyer.
			 **/
			// submit for approval
			PageRequisitionView.clickOnSubmitForApproval(driver, testCaseName);
			PageRequisitionCheckOut.waitTillReqSubmitProcessingDivPresent(driver, testCaseName);

			// search req
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());
			assertTrue("Status of requisition was wrong, it should be In Approval",
				requisition.getStatus().toLowerCase().contains(IConstantsData.IN_APPROVAL_FILTER_LABEL.toLowerCase()));

			// view req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);
			multipleAssignedBuyerNamesAsOnViewPage = PageRequisitionView.getMultipleBuyerNames(driver, testCaseName);
			assignedBuyerNames.add(categoryManagerMap.getBuyer());
			assignedBuyerNames.add(categoryManagerMap2.getBuyer());
			System.out.println("multipleAssignedBuyerNamesAsOnViewPage : " + multipleAssignedBuyerNamesAsOnViewPage.size());
			System.out.println("assignedBuyerNames : " + assignedBuyerNames.size());
			flag = FlowViewRequisition.compareAssignedBuyers(multipleAssignedBuyerNamesAsOnViewPage, assignedBuyerNames);
			assertTrue("Multiple buyers as per configured maps was not evaluated in assigned buyer when requisition was submitted without any buyer.", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Commodity manager wise buyer>>Need a
	 * quote>>Multiple buyers as per configured maps should not be evaluated in
	 * assigned buyer when requisition is submitted without buyer. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_352942(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		User user = null;
		Requisition requisition = new Requisition();
		CategoryManagerMap categoryManagerMap = new CategoryManagerMap();
		CategoryManagerMap categoryManagerMap2 = new CategoryManagerMap();
		String testCaseName = null, assignedBuyerName = null;
		List<String> multipleAssignedBuyerNamesAsOnViewPage = new ArrayList<String>();
		List<String> assignedBuyerNames = new ArrayList<String>();
		boolean flag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_352937"));
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// req settings : assigned buyer optional
			RequisitionSettings requisitionSettings = new RequisitionSettings();
			requisitionSettings.setRequesterRequiredToAssignBuyerOption(IConstantsData.OPTIONAL);

			requisitionSettings = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);

			// category manager map
			categoryManagerMap = ObjectCreation.getObjectOfCategoryManagerMap(IConstantsData.Category1_Buyer1_Purpose1);
			categoryManagerMap2 = ObjectCreation.getObjectOfCategoryManagerMap(IConstantsData.Category2_Buyer2_Purpose1);

			// Guided Item
			GuidedItem guidedItem = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.EXISTING_SUPPLIER);
			ModalGuidedItemSelectCategory category = new ModalGuidedItemSelectCategory();
			category.setCategory(categoryManagerMap.getCategory());
			guidedItem.setCategory(category);
			guidedItem.setSourcingStatus(IConstantsData.Need_a_Quote);

			// Guided Item1
			GuidedItem guidedItem1 = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.EXISTING_SUPPLIER);
			ModalGuidedItemSelectCategory category1 = new ModalGuidedItemSelectCategory();
			category1.setCategory(categoryManagerMap2.getCategory());
			guidedItem1.setCategory(category1);

			List<GuidedItem> guidedItems = new ArrayList<GuidedItem>();
			guidedItems.add(guidedItem);
			guidedItems.add(guidedItem1);

			// req object
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			requisition.getItems().setGuidedItems(guidedItems);
			requisition.setAssignedBuyer(null);

			// create req
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// search req in my req
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());
			assertTrue("Status of requisition was wrong, it should be Sent For Quote",
				requisition.getStatus().toLowerCase().contains(IConstantsData.SENT_FOR_QUOTE_FILTER_LABEL.toLowerCase()));

			/**
			 * RTC_352937 : Commodity manager wise buyer>>Need a quote>>Multiple
			 * buyers as per configured maps should be evaluated in assigned
			 * buyer when requisition is submitted without buyer.
			 **/
			// view req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);

			multipleAssignedBuyerNamesAsOnViewPage = PageRequisitionView.getMultipleBuyerNames(driver, testCaseName);
			assignedBuyerNames.add(categoryManagerMap.getBuyer());
			assignedBuyerNames.add(categoryManagerMap2.getBuyer());
			flag = FlowViewRequisition.compareAssignedBuyers(multipleAssignedBuyerNamesAsOnViewPage, assignedBuyerNames);

			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(0),
				"Multiple buyers as per configured maps was not evaluated in assigned buyer when requisition is submitted without buyer.");
			assertTrue("Multiple buyers as per configured maps was not evaluated in assigned buyer when requisition is submitted without buyer.", flag);

			/**
			 * RTC_352942 : Commodity manager wise buyer>>Need a quote>>Multiple
			 * buyers as per configured maps should not be evaluated in assigned
			 * buyer when requisition is submitted without buyer.
			 **/
			// copy req
			FlowViewRequisition.copyReq(driver, testCaseName);

			Requisition requisition_copy = ObjectCreation.getRequisition(driver);
			requisition_copy.setItems(requisition.getItems());

			// fill checkout from
			requisition_copy = FlowRequisition.fillcheckoutForm(driver, testCaseName, requisition_copy, requisition.getItems());

			// submit req
			FlowRequisition.submitReq(driver, testCaseName, false);

			// search req
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());
			assertTrue("Status of requisition was wrong, it should be In Approval",
				requisition.getStatus().toLowerCase().contains(IConstantsData.IN_APPROVAL_FILTER_LABEL.toLowerCase()));

			// view req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);

			assignedBuyerName = PageRequisitionView.getAssignBuyerField(driver, testCaseName);
			flag = assignedBuyerName.equalsIgnoreCase(requisition_copy.getAssignedBuyer()) && !(assignedBuyerName.equalsIgnoreCase(categoryManagerMap.getBuyer()))
				&& !(assignedBuyerName.equalsIgnoreCase(categoryManagerMap2.getBuyer()));
			assertTrue("Assigned buyer was evaluated as per configured maps. Assigned buyer should remain same as filled while requisition creation", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Commodity manager wise buyer>>No maps
	 * configured>>Assigned buyer field should not be evaluated. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_352952(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		Requisition requisition = new Requisition();
		String testCaseName = null, assignedBuyerName = null;
		boolean flag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			CommonServices.startTestCase(driver, testCase);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// req settings : assigned buyer optional
			RequisitionSettings requisitionSettings = new RequisitionSettings();
			requisitionSettings.setRequesterRequiredToAssignBuyerOption(IConstantsData.OPTIONAL);

			requisitionSettings = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);

			// req object
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			requisition.setAssignedBuyer(null);

			// create req
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// search req in my req
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());
			assertTrue("Status of requisition was wrong, it should be In Approval",
				requisition.getStatus().toLowerCase().contains(IConstantsData.IN_APPROVAL_FILTER_LABEL.toLowerCase()));
			// view req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);

			assignedBuyerName = PageRequisitionView.getAssignBuyerField(driver, testCaseName);
			flag = assignedBuyerName.equalsIgnoreCase("-");
			assertTrue("Assigned buyer field was not shown blank, if it was kept blank while creating requisition", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Commodity manager wise
	 * buyer>>Forking>>Assigned buyer should not be evaluated as per configured
	 * map if Assigned buyer is filled in checkout screen. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_352954(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		Requisition requisition = new Requisition();
		String testCaseName = null, assignedBuyerNameOnReqViewPage, status;
		List<String> reqNos = new ArrayList<String>();
		boolean flag = false, settingChangedFlag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			CommonServices.startTestCase(driver, testCase);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// req settings : assigned buyer optional
			RequisitionSettings requisitionSettings = new RequisitionSettings();
			requisitionSettings.setEnableReqForking(true);
			requisitionSettings.setForReqByCategory(true);

			settingChangedFlag = true;
			requisitionSettings = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);

			// category manager map
			CategoryManagerMap categoryManagerMap = ObjectCreation.getObjectOfCategoryManagerMap(IConstantsData.Category1_Buyer1_Purpose1);
			CategoryManagerMap categoryManagerMap2 = ObjectCreation.getObjectOfCategoryManagerMap(IConstantsData.Category2_Buyer2_Purpose1);

			// Guided Item
			GuidedItem guidedItem = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.EXISTING_SUPPLIER);
			ModalGuidedItemSelectCategory category = new ModalGuidedItemSelectCategory();
			category.setCategory(categoryManagerMap.getCategory());
			guidedItem.setCategory(category);
			guidedItem.setSourcingStatus(IConstantsData.Need_a_Quote);

			// Guided Item1
			GuidedItem guidedItem1 = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.EXISTING_SUPPLIER);
			ModalGuidedItemSelectCategory category1 = new ModalGuidedItemSelectCategory();
			category1.setCategory(categoryManagerMap2.getCategory());
			guidedItem1.setCategory(category1);

			List<GuidedItem> guidedItems = new ArrayList<GuidedItem>();
			guidedItems.add(guidedItem);
			guidedItems.add(guidedItem1);

			// req object
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			requisition.getItems().setGuidedItems(guidedItems);
			requisition.setNextAction(IConstantsData.NONE);

			// create req
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// submit req
			PageRequisitionCheckOut.clickIAmDone(driver, testCaseName);

			// save first req as draft
			PageRequisitionForking.clickDraft(driver, testCaseName, 0);

			// get req nos
			reqNos = PageRequisitionForking.getListOfPRNumbersOnForkingScreen(driver, testCaseName);

			// confirm req
			PageRequisitionCheckOut.clickOnConfirmReqButton(driver, testCaseName);
			if (PopUpSendForApproval.isSendForApprovalYesButtonPresent(driver, testCaseName))
			{
				PopUpSendForApproval.clickOnSendForApprovalYesButton(driver, testCaseName);
			}
			PageRequisitionCheckOut.waitTillReqSubmitProcessingDivPresent(driver, testCaseName);
			ActionBot.waitTillPopUpIsPresent(driver, IPageMyRequisition.REQ_LIST_PROCESSING);

			// search req in my req
			for (String reqNo : reqNos)
			{
				requisition.setReqNo(reqNo);
				requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
				assertTrue("Error while searching requisition", requisition.isResult());

				// view req
				FlowMyRequisitions.viewRequisition(driver, testCaseName);
				status = requisition.getStatus();

				if (status.equalsIgnoreCase(IConstantsData.DRAFT_FILTER_LABEL))
				{
					flag = PageRequisitionCheckOut.isAssignedBuyerLabelPresent(driver, testCaseName)
						&& PageRequisitionCheckOut.getAssignedBuyer(driver, testCaseName).equalsIgnoreCase(requisition.getAssignedBuyer());
					assertTrue("Assigned buyer was evaluated as per configured map if Assigned buyer is filled in checkout screen for " + reqNo, flag);
				}
				else if (status.equalsIgnoreCase(IConstantsData.READY_FOR_APPROVAL_FILTER_LABEL))
				{
					assignedBuyerNameOnReqViewPage = PageRequisitionView.getAssignBuyerField(driver, testCaseName);
					flag = (assignedBuyerNameOnReqViewPage.equalsIgnoreCase(requisition.getAssignedBuyer()))
						&& !(assignedBuyerNameOnReqViewPage.equalsIgnoreCase(categoryManagerMap2.getBuyer()))
						&& !(assignedBuyerNameOnReqViewPage.equalsIgnoreCase(categoryManagerMap.getBuyer()));
					assertTrue("Assigned buyer was evaluated as per configured map if Assigned buyer is filled in checkout screen for " + reqNo, flag);
				}
				else if (status.equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL) || status.equalsIgnoreCase(IConstantsData.SENT_FOR_QUOTE_FILTER_LABEL))
				{
					assignedBuyerNameOnReqViewPage = PageRequisitionView.getAssignBuyerField(driver, testCaseName);
					flag = (assignedBuyerNameOnReqViewPage.equalsIgnoreCase(requisition.getAssignedBuyer()))
						&& !(assignedBuyerNameOnReqViewPage.equalsIgnoreCase(categoryManagerMap2.getBuyer()))
						&& !(assignedBuyerNameOnReqViewPage.equalsIgnoreCase(categoryManagerMap.getBuyer()));
					assertTrue("Assigned buyer was evaluated as per configured map if Assigned buyer is filled in checkout screen for " + reqNo, flag);
				}

			}

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				if (settingChangedFlag)
				{
					RequisitionSettings defaultRequisitionSettings = new RequisitionSettings();
					defaultRequisitionSettings = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, defaultRequisitionSettings);
				}
			}
			catch (Exception e)
			{
				logger.error("Exception occurred while changing requisition forking setting to default : " + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Commodity manager wise
	 * buyer>>Forking>>Assigned buyer should be evaluated as per configured map
	 * in following scenario.(Assigned buyer is empty in checkout screen). <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_352949(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		Requisition requisition = new Requisition();
		String testCaseName = null, assignedBuyerNameOnReqViewPage, status;
		List<String> reqNos = new ArrayList<String>();
		boolean flag = false, settingChangedFlag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			CommonServices.startTestCase(driver, testCase);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// req settings : assigned buyer optional
			RequisitionSettings requisitionSettings = new RequisitionSettings();
			requisitionSettings.setEnableReqForking(true);
			requisitionSettings.setForReqByCategory(true);
			requisitionSettings.setRequesterRequiredToAssignBuyerOption(IConstantsData.OPTIONAL);

			settingChangedFlag = true;
			requisitionSettings = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);

			// category manager map
			CategoryManagerMap categoryManagerMap = ObjectCreation.getObjectOfCategoryManagerMap(IConstantsData.Category1_Buyer1_Purpose1);
			CategoryManagerMap categoryManagerMap2 = ObjectCreation.getObjectOfCategoryManagerMap(IConstantsData.Category2_Buyer2_Purpose1);

			// Guided Item
			GuidedItem guidedItem = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.EXISTING_SUPPLIER);
			ModalGuidedItemSelectCategory category = new ModalGuidedItemSelectCategory();
			category.setCategory(categoryManagerMap.getCategory());
			guidedItem.setCategory(category);
			guidedItem.setSourcingStatus(IConstantsData.Need_a_Quote);

			// Guided Item1
			GuidedItem guidedItem1 = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.EXISTING_SUPPLIER);
			ModalGuidedItemSelectCategory category1 = new ModalGuidedItemSelectCategory();
			category1.setCategory(categoryManagerMap2.getCategory());
			guidedItem1.setCategory(category1);

			List<GuidedItem> guidedItems = new ArrayList<GuidedItem>();
			guidedItems.add(guidedItem);
			guidedItems.add(guidedItem1);

			// req object
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			requisition.getItems().setGuidedItems(guidedItems);
			requisition.setNextAction(IConstantsData.NONE);
			requisition.setAssignedBuyer(null);

			// create req
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// submit req
			PageRequisitionCheckOut.clickIAmDone(driver, testCaseName);

			// save first req as draft
			PageRequisitionForking.clickDraft(driver, testCaseName, 0);

			// get req nos and item names
			reqNos = PageRequisitionForking.getListOfPRNumbersOnForkingScreen(driver, testCaseName);

			// confirm req
			PageRequisitionCheckOut.clickOnConfirmReqButton(driver, testCaseName);
			if (PopUpSendForApproval.isSendForApprovalYesButtonPresent(driver, testCaseName))
			{
				PopUpSendForApproval.clickOnSendForApprovalYesButton(driver, testCaseName);
			}
			PageRequisitionCheckOut.waitTillReqSubmitProcessingDivPresent(driver, testCaseName);
			ActionBot.waitTillPopUpIsPresent(driver, IPageMyRequisition.REQ_LIST_PROCESSING);

			// search req in my req
			for (String reqNo : reqNos)
			{
				requisition.setReqNo(reqNo);
				requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
				assertTrue("Error while searching requisition", requisition.isResult());

				status = requisition.getStatus();
				// view req
				FlowMyRequisitions.viewRequisition(driver, testCaseName);

				if (status.equalsIgnoreCase(IConstantsData.DRAFT_FILTER_LABEL))
				{
					flag = PageRequisitionCheckOut.isAssignedBuyerLabelPresent(driver, testCaseName);
					assertTrue("Requisition " + reqNo + " in Draft status, etc not have assigned buyer as blank", !flag);
				}
				else if (status.equalsIgnoreCase(IConstantsData.READY_FOR_APPROVAL_FILTER_LABEL))
				{
					assignedBuyerNameOnReqViewPage = PageRequisitionView.getAssignBuyerField(driver, testCaseName);
					flag = (assignedBuyerNameOnReqViewPage.equalsIgnoreCase("-"));
					assertTrue("Assigned buyer was not shown as blank in " + reqNo + " requisition which is in Ready for approval status", flag);
				}
				else if (status.equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL) || status.equalsIgnoreCase(IConstantsData.SENT_FOR_QUOTE_FILTER_LABEL))
				{
					assignedBuyerNameOnReqViewPage = PageRequisitionView.getAssignBuyerField(driver, testCaseName);
					flag = (assignedBuyerNameOnReqViewPage.equalsIgnoreCase(categoryManagerMap.getBuyer()))
						|| (assignedBuyerNameOnReqViewPage.equalsIgnoreCase(categoryManagerMap2.getBuyer())) || (assignedBuyerNameOnReqViewPage.equalsIgnoreCase("-"));
					assertTrue("Assigned buyer was not evaluated as per map in " + reqNo + " requisition which are In approval and Sent for Quote status", flag);
				}
			}

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				if (settingChangedFlag)
				{
					RequisitionSettings defaultRequisitionSettings = new RequisitionSettings();
					defaultRequisitionSettings = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, defaultRequisitionSettings);
				}
			}
			catch (Exception e)
			{
				logger.error("Exception occurred while changing requisition forking setting to default : " + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Commodity wise buyer>>Assigned buyer of
	 * parent category(as per map) should be evaluated as assigned buyer of
	 * document if document contains child category. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_352941(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		Requisition requisition = new Requisition();
		String testCaseName = null, assignedBuyerName = null;
		boolean flag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			CommonServices.startTestCase(driver, testCase);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// req settings : assigned buyer optional
			RequisitionSettings requisitionSettings = new RequisitionSettings();
			requisitionSettings.setRequesterRequiredToAssignBuyerOption(IConstantsData.OPTIONAL);

			requisitionSettings = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);

			// category manager map : Solvents,payal2@zycus.com,PR Assignment,Hydrocarbonated solvents
			//parent category : Solvents
			//child category : Hydrocarbonated solvents
			CategoryManagerMap categoryManagerMap = ObjectCreation.getObjectOfCategoryManagerMap(IConstantsData.Category1_Buyer1_Purpose1);

			// req object
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.BOTH);

			ModalGuidedItemSelectCategory category = new ModalGuidedItemSelectCategory();
			category.setCategory(categoryManagerMap.getChildCategory());
			requisition.getItems().getGuidedItems().get(0).setCategory(category); //Solvents
			requisition.setAssignedBuyer(null);

			// create req
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// search req in my req
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());
			assertTrue("Status of requisition was wrong, it should be In Approval", requisition.getStatus().contains(IConstantsData.IN_APPROVAL_FILTER_LABEL));
			// view req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);

			assignedBuyerName = PageRequisitionView.getAssignBuyerField(driver, testCaseName);
			flag = assignedBuyerName.toLowerCase().equalsIgnoreCase(categoryManagerMap.getBuyer().toLowerCase());
			assertTrue("Assigned buyer was not evaluated as per map configured for parent category, if it was kept blank while creating requisition", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Commodity manager wise buyer>>Buyer
	 * assignment should be captured as part of audit trail <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_352959(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		Requisition requisition = new Requisition();
		String testCaseName = null, assignedBuyerName = null;
		boolean flag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			CommonServices.startTestCase(driver, testCase);

			user = LoginLogoutServices.login(driver, testCase);

			// req settings : assigned buyer optional
			RequisitionSettings requisitionSettings = new RequisitionSettings();
			requisitionSettings.setRequesterRequiredToAssignBuyerOption(IConstantsData.OPTIONAL);

			requisitionSettings = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);

			// category manager map
			CategoryManagerMap categoryManagerMap = ObjectCreation.getObjectOfCategoryManagerMap(IConstantsData.Category1_Buyer1_Purpose1);

			// req object
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.GUIDED_ITEM);

			ModalGuidedItemSelectCategory category = new ModalGuidedItemSelectCategory();
			category.setCategory(categoryManagerMap.getChildCategory());
			requisition.getItems().getGuidedItems().get(0).setCategory(category);
			requisition.setAssignedBuyer(null);

			// create req
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// search req in my req
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());
			assertTrue("Status of requisition was wrong, it should be In Approval", requisition.getStatus().equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL));
			// view req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);

			assignedBuyerName = PageRequisitionView.getAssignBuyerField(driver, testCaseName);
			flag = assignedBuyerName.equalsIgnoreCase(categoryManagerMap.getBuyer());

			assertTrue("Assigned buyer was not evaluated as per map configured for parent category, if it was kept blank while creating requisition", flag);

			ActionBot.scroll(driver, "400");

			// audit trail infor
			PageRequisitionView.clickOnClearFilterLink(driver, testCaseName);
			AuditTrail auditTrail = FlowViewRequisition.getAuditTrailInfo(driver, testCaseName, 1);
			;
			ActionBot.defaultMediumSleep();
			flag = auditTrail.getAction().equalsIgnoreCase(IConstantsData.AUDIT_TRAIL_ACTION_ASSIGNED_BUYER) && auditTrail.getUser().equalsIgnoreCase(IConstantsData.SYSTEM)
				&& auditTrail.getRole().equalsIgnoreCase(IConstantsData.SYSTEM) && auditTrail.getVersion().equalsIgnoreCase("v2");
			assertTrue("Buyer assignment was not captured as part of audit trail.", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 234834 - Server 500 when user
	 * submits requisition containing items having no category. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_352958(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		Requisition requisition = new Requisition();
		String testCaseName = null;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			CommonServices.startTestCase(driver, testCase);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// req object
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.GUIDED_ITEM);
			requisition.getItems().getGuidedItems().get(0).setShortDescription("asdqwew");
			requisition.getItems().getGuidedItems().get(0).setEditCategory(false);

			// create req
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// search req in my req
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);

			assertTrue("Error while creating requisition when user submits requisition containing items having no category.", requisition.isResult());
			assertTrue("Status of requisition was wrong, it should be In Approval", requisition.getStatus().contains(IConstantsData.IN_APPROVAL_FILTER_LABEL));

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>[Delivery period--Requisition]'To' date of
	 * delivery duration at item level in checkout screen should be non
	 * mandatory field even though required by date is mandatory as per setting
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_334520(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		User user = null;
		Item item = new Item();
		Requisition requisition = new Requisition();
		GuidedItem guidedItem = new GuidedItem();
		GuidedItem guidedItem1 = new GuidedItem();
		String testCaseName = null, catalogItemId, guidedItemId_goods, guidedItemId_service, deliveryDate, log = "";
		boolean flag = false, flag1 = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_334497"));//0
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_334518"));//1
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_334516"));//2
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_334522"));//3
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_334517"));//4
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_334519"));//5
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_334506"));//6
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// item object
			item = ObjectCreation.getItem(IConstantsData.BOTH);
			guidedItem = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.EXISTING_SUPPLIER);
			guidedItem.setItemType(IConstantsData.Services);
			guidedItem.setQuantity(44f);
			item.getGuidedItems().add(guidedItem);

			// add item and checkout
			item = FlowRequisition.addItemAndCheckout(driver, testCaseName, item);
			catalogItemId = item.getCatelogItems().get(0).getItemID();
			if (item.getGuidedItems().get(0).getItemType().equalsIgnoreCase(IConstantsData.Goods))
			{
				guidedItemId_goods = item.getGuidedItems().get(0).getItemID();
				guidedItemId_service = item.getGuidedItems().get(1).getItemID();
			}
			else
			{
				guidedItemId_service = item.getGuidedItems().get(0).getItemID();
				guidedItemId_goods = item.getGuidedItems().get(1).getItemID();
			}

			// scroll and expand all
			ActionBot.scroll(driver, ActionBot.findElement(driver, IPageRequisitionCheckOut.EXPAND_ALL));
			PageRequisitionCheckOut.clickExpandAll(driver, testCaseName);

			/**
			 * RTC_334497 : [Delivery period-Requisition]'Deliver items to
			 * multiple persons or locations' section at item level should have
			 * date range selection option.
			 **/
			/**
			 * RTC_334518 : [Delivery period--Requisition]For item type 'goods'
			 * delivery date at item level should have end date field as greyed
			 * out. Check case for catalog/punch-out items
			 **/
			PageRequisitionCheckOut.clickEditItemSummary(driver, testCaseName, catalogItemId);
			ModelItemSummaryDelivery.selectDeliveryOptionMultiSplit(driver, testCaseName);
			flag = ModelItemSummaryDelivery.isDeliveryOnDatePresentForSelection(driver, testCaseName, catalogItemId, 0);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(0),
				"'Deliver items to multiple persons or locations' section at item level not has date range selection option.");
			flag = !ModelItemSummaryDelivery.isDeliveryUptoDatePresentForSelection(driver, testCaseName, catalogItemId, 0);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(1), "For catalog items, delivery date at item level have end date field");
			ModelItemSummaryCommon.clickItemSummaryCancle(driver, testCaseName);

			/**
			 * RTC_334516 : [Delivery period-Requisition]For item type
			 * 'services' delivery date at item level should have one more field
			 * to enter end date and the field should be editable
			 **/
			PageRequisitionCheckOut.clickEditItemSummary(driver, testCaseName, guidedItemId_service);
			ModelItemSummaryDelivery.selectDeliveryOptionMultiSplit(driver, testCaseName);
			flag = ModelItemSummaryDelivery.isDeliveryOnDatePresentForSelection(driver, testCaseName, guidedItemId_service, 0)
				&& ModelItemSummaryDelivery.isDeliveryUptoDatePresentForSelection(driver, testCaseName, guidedItemId_service, 0);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(2), "For item type 'services' delivery date at item level there were no field to enter end date");

			/**
			 * RTC_334522 : [Delivery period--Requisition]The value in 'To' date
			 * of delivery duration at item level in requisition checkout should
			 * be>= From date for item type services
			 * 
			 * 
			 * failed skipped
			 **/
			CustomDate customDate = CommonUtilities.getTodaysDate();
			// selected required by date as current date
			String date = ModelItemSummaryDelivery.selectRequiredByDate(driver, testCaseName, customDate.getDay(), customDate.getMonth(), customDate.getYear(),
				guidedItemId_service, 0);
			CustomDate customDate_yestersDaysDate = CommonUtilities.getDateAfterNoOfDaysOfTodays(1);
			CommonServices.setMappedTestCaseResult(date != null, mappedTestCases.get(3), "required by date as a current date was not selected");
			try
			{
				ModelItemSummaryDelivery.selectDeliveryUptoDate(driver, testCaseName, customDate_yestersDaysDate.getDay(), customDate_yestersDaysDate.getMonth(),
					customDate_yestersDaysDate.getYear(), guidedItemId_service, 0);
			}
			catch (Exception e)
			{
				CommonServices.setMappedTestCaseResult(true, mappedTestCases.get(3),
					"The value in 'To' date of delivery duration at item level in requisition checkout was not >= From date for item type services");
			}

			ModelItemSummaryCommon.clickItemSummaryCancle(driver, testCaseName);

			/**
			 * RTC_334517 : [Delivery period--Requisition]For item type 'goods'
			 * delivery date at item level should have end date field as greyed
			 * out
			 **/
			PageRequisitionCheckOut.clickEditItemSummary(driver, testCaseName, guidedItemId_goods);
			ModelItemSummaryDelivery.selectDeliveryOptionMultiSplit(driver, testCaseName);
			flag = !ModelItemSummaryDelivery.isDeliveryUptoDatePresentForSelection(driver, testCaseName, guidedItemId_goods, 0);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(4), "For item type 'goods' delivery date at item level has end date field");
			ModelItemSummaryCommon.clickItemSummaryCancle(driver, testCaseName);

			/**
			 * RTC_334519 : [Delivery period--Requisition]'To' date of delivery
			 * duration at item level in checkout screen should get
			 * enabled/disabled on switching item type from goods to services
			 **/
			// to change item type from goods to services
			FlowRequisition.viewItemDetails(driver, testCaseName, guidedItemId_goods);
			guidedItem1.setItemType(IConstantsData.Services);
			guidedItem1.setNextAction(IConstantsData.SAVE);
			FlowRequisition.changeGuidedItemDetailsOnCheckoutPage(driver, testCaseName, guidedItem1);

			PageRequisitionCheckOut.clickEditItemSummary(driver, testCaseName, guidedItemId_goods);
			ModelItemSummaryDelivery.selectDeliveryOptionMultiSplit(driver, testCaseName);
			flag = ModelItemSummaryDelivery.isDeliveryUptoDatePresentForSelection(driver, testCaseName, guidedItemId_goods, 0)
				&& ModelItemSummaryDelivery.isDeliveryOnDatePresentForSelection(driver, testCaseName, guidedItemId_goods, 0);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(5),
				"'To' date of delivery duration at item level in checkout screen was not get enabled on switching item type from goods to services");
			ModelItemSummaryCommon.clickItemSummaryCancle(driver, testCaseName);

			// to change item type from services to goods
			FlowRequisition.viewItemDetails(driver, testCaseName, guidedItemId_goods);
			guidedItem1.setItemType(IConstantsData.Goods);
			guidedItem1.setNextAction(IConstantsData.SAVE);
			FlowRequisition.changeGuidedItemDetailsOnCheckoutPage(driver, testCaseName, guidedItem1);

			/**
			 * RTC_334506 : [Delivery period-Requisition]'Required by' date
			 * field in Update all lines should reset the applied delivery
			 * durations selected at item level for only for goods item
			 **/
			requisition = ObjectCreation.getRequisition(driver);
			//			requisition.setDeliveryItemSummary(ObjectCreation.getDefaultObjectOfDeliverySplitAtItemLevel(44));
			//			requisition.getDeliveryItemSummary().getDeliverySplitInfo().get(0).setDeliverTo(CommonServices.getTestData(IConstantsData.BUYER_NAME, 0));
			//			requisition.getDeliveryItemSummary().getDeliverySplitInfo().get(0).setDeliveryAddress(CommonServices.getTestData(IConstantsData.OTHER_ADDRESS, 0));
			//			requisition.getDeliveryItemSummary().getDeliverySplitInfo().get(1).setDeliverTo(CommonServices.getTestData(IConstantsData.BUYER_NAME, 0));
			//			requisition.getDeliveryItemSummary().getDeliverySplitInfo().get(1).setDeliveryAddress(CommonServices.getTestData(IConstantsData.OTHER_ADDRESS, 0));
			requisition.setNextAction(IConstantsData.NONE);

			DeliveryItemSummary deliveryItemSummary = ObjectCreation.getDefaultObjectOfDeliverySplitAtItemLevel(item.getCatelogItems().get(0).getQuantity());
			deliveryItemSummary.getDeliverySplitInfo().get(0).setDeliverTo(CommonServices.getTestData(IConstantsData.BUYER_NAME, 0));
			deliveryItemSummary.getDeliverySplitInfo().get(0).setDeliveryAddress(CommonServices.getTestData(IConstantsData.OTHER_ADDRESS, 0));
			deliveryItemSummary.getDeliverySplitInfo().get(1).setDeliverTo(CommonServices.getTestData(IConstantsData.BUYER_NAME, 0));
			deliveryItemSummary.getDeliverySplitInfo().get(1).setDeliveryAddress(CommonServices.getTestData(IConstantsData.OTHER_ADDRESS, 0));

			DeliveryItemSummary deliveryItemSummary2 = ObjectCreation.getDefaultObjectOfDeliverySplitAtItemLevel(item.getGuidedItems().get(0).getQuantity());
			deliveryItemSummary2.getDeliverySplitInfo().get(0).setDeliverTo(CommonServices.getTestData(IConstantsData.BUYER_NAME, 0));
			deliveryItemSummary2.getDeliverySplitInfo().get(0).setDeliveryAddress(CommonServices.getTestData(IConstantsData.OTHER_ADDRESS, 0));
			deliveryItemSummary2.getDeliverySplitInfo().get(1).setDeliverTo(CommonServices.getTestData(IConstantsData.BUYER_NAME, 0));
			deliveryItemSummary2.getDeliverySplitInfo().get(1).setDeliveryAddress(CommonServices.getTestData(IConstantsData.OTHER_ADDRESS, 0));

			DeliveryItemSummary deliveryItemSummary3 = ObjectCreation.getDefaultObjectOfDeliverySplitAtItemLevel(item.getGuidedItems().get(1).getQuantity());
			deliveryItemSummary3.getDeliverySplitInfo().get(0).setDeliverTo(CommonServices.getTestData(IConstantsData.BUYER_NAME, 0));
			deliveryItemSummary3.getDeliverySplitInfo().get(0).setDeliveryAddress(CommonServices.getTestData(IConstantsData.OTHER_ADDRESS, 0));
			deliveryItemSummary3.getDeliverySplitInfo().get(1).setDeliverTo(CommonServices.getTestData(IConstantsData.BUYER_NAME, 0));
			deliveryItemSummary3.getDeliverySplitInfo().get(1).setDeliveryAddress(CommonServices.getTestData(IConstantsData.OTHER_ADDRESS, 0));

			item.getCatelogItems().get(0).setDeliveryItemSummary(deliveryItemSummary);
			item.getGuidedItems().get(0).setDeliveryItemSummary(deliveryItemSummary2);
			item.getGuidedItems().get(1).setDeliveryItemSummary(deliveryItemSummary3);
			//
			//			for (int i = 0; i < item.getCatelogItems().size(); i++)
			//			{
			//				item.getCatelogItems().get(i).setDeliveryItemSummary(deliveryItemSummary);
			//			}
			//			for (int i = 0; i < item.getGuidedItems().size(); i++)
			//			{
			//				item.getGuidedItems().get(i).setDeliveryItemSummary(deliveryItemSummary2);
			//			}
			//			
			requisition.setItems(item);
			// fill checkout form - with delivery split at item level
			requisition = FlowRequisition.fillcheckoutForm(driver, testCaseName, requisition, item);

			// change multiple
			ChangeMultiple changeMultiple = new ChangeMultiple();
			CustomDate customDate_nextDate = CommonUtilities.getFutureDayDate();
			changeMultiple.setRequiredByDate(customDate_nextDate);
			changeMultiple = FlowRequisition.changeMultiple(driver, testCaseName, changeMultiple);

			// to check delivery dates
			ActionBot.scroll(driver);
			// for catalog items
			PageRequisitionCheckOut.clickEditItemSummary(driver, testCaseName, catalogItemId);
			deliveryDate = ModelItemSummaryDelivery.getDeliveryMultiSplitRequiredDate(driver, testCaseName, catalogItemId, 0);
			flag = deliveryDate.equalsIgnoreCase(changeMultiple.getRequiredByDate().getDate());
			if (!flag)
			{
				log += "Required by' date field  in Update all lines not reseted the applied delivery durations selected at item level for catalog item";
			}
			ModelItemSummaryCommon.clickItemSummaryCancle(driver, testCaseName);

			// for guided items -goods
			PageRequisitionCheckOut.clickEditItemSummary(driver, testCaseName, guidedItemId_goods);
			deliveryDate = ModelItemSummaryDelivery.getDeliveryMultiSplitRequiredDate(driver, testCaseName, guidedItemId_goods, 0);
			flag1 = deliveryDate.equalsIgnoreCase(changeMultiple.getRequiredByDate().getDate());
			if (!flag1)
			{
				log += "Required by' date field  in Update all lines not reseted the applied delivery durations selected at item level for goods item";
			}
			ModelItemSummaryCommon.clickItemSummaryCancle(driver, testCaseName);

			// for guided items -service
			PageRequisitionCheckOut.clickEditItemSummary(driver, testCaseName, guidedItemId_service);
			deliveryDate = ModelItemSummaryDelivery.getDeliveryMultiSplitRequiredDate(driver, testCaseName, guidedItemId_service, 0);
			flag = !deliveryDate.equalsIgnoreCase(changeMultiple.getRequiredByDate().getDate());
			if (!flag)
			{
				log += "Required by' date field  in Update all lines has affected the applied delivery durations selected at item level for services item";
			}
			ModelItemSummaryCommon.clickItemSummaryCancle(driver, testCaseName);
			logger.info(log);
			CommonServices.setMappedTestCaseResult(flag1 && flag, mappedTestCases.get(6), log);

			/**
			 * RTC_334520 : [Delivery period--Requisition]'To' date of delivery
			 * duration at item level in checkout screen should be non mandatory
			 * field even though required by date is mandatory as per setting
			 **/
			// submit req
			FlowRequisition.submitReq(driver, testCaseName, true);

			// search req
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			assertTrue(
				"'To' date of delivery duration at item level in checkout screen should was mandatory field even though required by date was mandatory as per setting, therefore requisition was not submitted",
				requisition.isResult());

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b> [Delivery period--Requisition]Date range
	 * incase present for services items in requisition should be displayed in
	 * view page of the requisition in the delivery section under 'delivery
	 * date/duration' column <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_334526(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		User user = null;
		Item item = new Item();
		new Requisition();
		String testCaseName = null, guidedItemId_service, fromDate, requiredByDate;
		boolean flag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_334525"));
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_334529"));
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_334523"));
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_334528"));
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_334527"));
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			user = LoginLogoutServices.login(driver, testCase);
			//	ActionBot.defaultHighSleep();

			// change req setting
			RequisitionSettings requisitionSettings = new RequisitionSettings();
			requisitionSettings.setAllowReqToBeSubmittedWithoutRequiredByDateOption(IConstants.NO);

			FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings);

			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);

			// item object
			item = ObjectCreation.getItem(IConstantsData.GUIDED_ITEM);
			item.getGuidedItems().get(0).setItemType(IConstantsData.Services);

			// add item and checkout
			item = FlowRequisition.addItemAndCheckout(driver, testCaseName, item);
			guidedItemId_service = item.getGuidedItems().get(0).getItemID();

			// fill required by date
			CustomDate todaysDate = CommonUtilities.getTodaysDate();
			todaysDate.setDate(PageRequisitionCheckOut.selectRequiredByDate(driver, testCaseName, todaysDate.getDay(), todaysDate.getMonth(), todaysDate.getYear()));
			// scroll and expand all
			ActionBot.scroll(driver);
			PageRequisitionCheckOut.clickExpandAll(driver, testCaseName);

			/**
			 * RTC_334525 : [Delivery period--Requisition]'Required by' date
			 * entered at header should not auto fill in 'from' date of delivery
			 * duration/date incase delivery gets split for item
			 **/
			PageRequisitionCheckOut.clickEditItemSummary(driver, testCaseName, guidedItemId_service);
			ModelItemSummaryDelivery.selectDeliveryOptionMultiSplit(driver, testCaseName);
			fromDate = ModelItemSummaryDelivery.getDeliveryMultiSplitRequiredDate(driver, testCaseName, guidedItemId_service, 0);
			flag = !fromDate.equalsIgnoreCase(todaysDate.getDate());

			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(0),
				"'Required by' date entered at header was auto fill in 'from' date of delivery duration/date  incase delivery gets split for item");

			/**
			 * RTC_334529 : [Delivery period--Requisition]Error icon for empty
			 * delivery date/duration incase mandatory as per setting should be
			 * displayed next to from date at item level while entering delivery
			 * details for the item
			 **/
			ModelItemSummaryCommon.clickItemSummarySave(driver, testCaseName);
			flag = ModelItemSummaryDelivery.isFromDateRequiredErrorPresent(driver, testCaseName, guidedItemId_service, 0);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(1),
				"Error icon was not present for empty delivery date/duration incase mandatory as per setting should be displayed next to from date at item level while entering delivery details for the item");

			flag = IConstantsData.Delivery_Date_Required_Error.equalsIgnoreCase(ModelItemSummaryDelivery.getFromDateRequiredError(driver, testCaseName, guidedItemId_service, 0));

			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(1),
				"Wrong Error was shown for empty delivery date/duration incase mandatory as per setting should be displayed next to from date at item level while entering delivery details for the item");

			/**
			 * RTC_334523 : [Delivery period--Requisition]The value in 'To' date
			 * of delivery duration at item level in requisition checkout should
			 * get reset if 'from' date entered is more than 'to' date
			 **/
			// set from date as tomorrows date
			CustomDate tomorrowsDate = CommonUtilities.getDayAfterTodaysDate();
			tomorrowsDate.setDate(ModelItemSummaryDelivery.selectRequiredByDate(driver, testCaseName, tomorrowsDate.getDay(), tomorrowsDate.getMonth(), tomorrowsDate.getYear(),
				guidedItemId_service, 0));

			// set to date as day After Tomorrows Date
			CustomDate dayAfterTomorrowDate = CommonUtilities.getDateAfterNoOfDaysOfTodays(2);
			dayAfterTomorrowDate.setDate(ModelItemSummaryDelivery.selectDeliveryUptoDate(driver, testCaseName, dayAfterTomorrowDate.getDay(), dayAfterTomorrowDate.getMonth(),
				dayAfterTomorrowDate.getYear(), guidedItemId_service, 0));

			// to change from date to greater than to date
			CustomDate customDate = CommonUtilities.getDateAfterNoOfDaysOfTodays(3);
			customDate.setDate(
				ModelItemSummaryDelivery.selectRequiredByDate(driver, testCaseName, customDate.getDay(), customDate.getMonth(), customDate.getYear(), guidedItemId_service, 0));

			flag = !dayAfterTomorrowDate.getDate().equalsIgnoreCase(ModelItemSummaryDelivery.getDeliveryMultiSplitUptoDate(driver, testCaseName, guidedItemId_service, 0));
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(2),
				"The value in 'To' date of delivery duration at item level in requisition checkout not getting reset if 'from' date entered is more than 'to' date");

			/**
			 * RTC_334528 : [Delivery period--Requisition]Required by date at
			 * header should not reset on selecting delivery date/duration at
			 * item level
			 **/
			// set from date as tomorrows date
			tomorrowsDate.setDate(ModelItemSummaryDelivery.selectRequiredByDate(driver, testCaseName, tomorrowsDate.getDay(), tomorrowsDate.getMonth(), tomorrowsDate.getYear(),
				guidedItemId_service, 0));

			// set to date as day After Tomorrows Date
			dayAfterTomorrowDate.setDate(ModelItemSummaryDelivery.selectDeliveryUptoDate(driver, testCaseName, dayAfterTomorrowDate.getDay(), dayAfterTomorrowDate.getMonth(),
				dayAfterTomorrowDate.getYear(), guidedItemId_service, 0));

			// fill cost allocation and save
			TabCheckoutItemSummary.clickItemSummaryCostBookingTab(driver, testCaseName);
			CostBookingItemSummary costBookingItemSummary = ObjectCreation.getDefaultObjectOfCostBookingItemSummary();
			costBookingItemSummary = FlowRequisition.fillCostBookingItemSummary(driver, testCaseName, costBookingItemSummary, guidedItemId_service);

			requiredByDate = PageRequisitionCheckOut.getRequiredByDate(driver, testCaseName);
			flag = requiredByDate.equalsIgnoreCase(todaysDate.getDate());
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(3),
				"Required by date at header should getting reset on selecting delivery date/duration at item level");

			/**
			 * RTC_334527 : [Delivery period--Requisition]Only the 'from' date
			 * incase selected for the services item should be displayed in
			 * requisition view in delivery date/duration column in delivery
			 * section
			 **/
			Requisition requisition = ObjectCreation.getRequisition(driver);
			requisition.setItems(item);
			DeliveryItemSummary deliveryItemSummary = ObjectCreation.getDefaultObjectOfDeliverySplitAtItemLevel(item.getGuidedItems().get(0).getQuantity());
			deliveryItemSummary.setNextAction(IConstantsData.NONE);
			requisition.setDeliveryItemSummary(deliveryItemSummary);
			// fill checkout page
			requisition = FlowRequisition.fillcheckoutForm(driver, testCaseName, requisition, item);

			// submit req
			FlowRequisition.submitReq(driver, testCaseName, true);

			// search req
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());

			List<DeliverySplitInfo> deliverySplitInfos = requisition.getDeliveryItemSummary().getDeliverySplitInfo();

			// view req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);

			List<DeliverySplitInfo> deliverySplitInfosOnReqViewPage = FlowViewRequisition.getDeliverySplitInfoOnReqViewPage(driver, testCaseName,
				requisition.getItems().getCatelogItems().get(0).getItemID(), 2);

			// to verify delivery split data
			flag = FlowRequisition.checkIfDeliverySplitAtItemLevel(deliverySplitInfos, deliverySplitInfosOnReqViewPage);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(4), "Delivery Split information on requisition view page was wrong");
			assertTrue("Delivery Split information on requisition view page was wrong", flag);

			/**
			 * RTC_334526 : [Delivery period--Requisition]Date range incase
			 * present for services items in requisition should be displayed in
			 * view page of the requisition in the delivery section under
			 * 'delivery date/duration' column
			 **/
			// search req
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());

			// copy req
			FlowMyRequisitions.copyReq(driver, testCaseName, true);

			// fill checkout form
			Requisition copy_requisition = ObjectCreation.getRequisition(driver);
			copy_requisition.setItems(item);
			deliveryItemSummary.getDeliverySplitInfo().get(0).setToCustomDate(CommonUtilities.getDayAfterTodaysDate());
			deliveryItemSummary.getDeliverySplitInfo().get(1).setToCustomDate(CommonUtilities.getDayAfterTodaysDate());
			copy_requisition.setDeliveryItemSummary(deliveryItemSummary);

			copy_requisition = FlowRequisition.fillcheckoutForm(driver, testCaseName, copy_requisition, item);
			// submit req
			FlowRequisition.submitReq(driver, testCaseName, true);

			// search req
			copy_requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, copy_requisition);
			assertTrue("Error while searching requisition", requisition.isResult());

			List<DeliverySplitInfo> deliverySplitInfos1 = copy_requisition.getDeliveryItemSummary().getDeliverySplitInfo();

			// view req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);

			List<DeliverySplitInfo> deliverySplitInfosOnReqViewPage1 = FlowViewRequisition.getDeliverySplitInfoOnReqViewPage(driver, testCaseName,
				copy_requisition.getItems().getGuidedItems().get(0).getItemID(), 2);

			// to verify delivery split data
			flag = FlowRequisition.checkIfDeliverySplitAtItemLevel(deliverySplitInfos1, deliverySplitInfosOnReqViewPage1);
			assertTrue(
				"Delivery Split information on requisition view page was wrong. Date range present for services items in requisition was not displayed in view page of the requisition in the delivery section under 'delivery date/duration' column",
				flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 235356 - User is not able to
	 * submit a requisition if a BPO is attached to a free text item . <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_336926(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		BPO bpo = new BPO();
		boolean flag = false;
		String url, type, status;
		Requisition requisition = new Requisition();
		try
		{
			driver = DriverSelector.getDriver(testCase);
			String testCaseName = testCase.getTestMethodName();
			CommonServices.startTestCase(driver, testCase);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();
			url = driver.getCurrentUrl();

			// to get BPO object
			bpo = ObjectCreation.getBPOCreation(IConstantsData.CATALOG_ITEM);

			// BPO creation
			logger.info("============== Creating BPO ==============");
			bpo = FlowBPO.createBPO(driver, testCaseName, bpo);

			driver.navigate().refresh();
			ActionBot.defaultSleep();
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			driver.get(url);
			// search BPO
			logger.info("============== Searching BPO ==============");
			flag = FlowPoListing.searchBPO(driver, testCaseName, bpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO, IConstantsData.BLANKET_PO_TYPE);
			assertTrue("Error while searching BPO", flag);

			type = PagePurchaseOrderListing.getFirstPOType(driver, testCaseName);
			flag = type.equalsIgnoreCase(IConstantsData.BLANKET_PO_TYPE);
			assertTrue("Type of BPO was wrong, it should be Blanket.", flag);
			status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			if (status.equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL))
			{
				// to approve the BPO
				ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, bpo.getPoNumber(), IConstantsData.BPO,
					IConstantsData.APPROVE);
				FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

				ActionBot.defaultHighSleep();
				driver.navigate().refresh();
				driver.navigate().refresh();
				// search bpo
				flag = FlowPoListing.searchBPO(driver, testCaseName, bpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO, IConstantsData.BLANKET_PO_TYPE);
				assertTrue("Error while searching copied BPO", flag);
				flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.COMPLETE_RELEASED_FILTER_LABEL);
				assertTrue("Status of copied BPO was not Released", flag);
			}

			// to get requisition object
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.GUIDED_ITEM);
			requisition.setNextAction(IConstantsData.SUBMIT_REQ);

			// to set non mandatory fields for req
			requisition.setCommentForSupplier(IConstantsData.COMMENT_FOR_SUPPLIER);
			requisition.setReasonForOrdering(IConstantsData.REASON_FOR_ORDERING);
			requisition.setRequired(true);

			requisition.getItems().getGuidedItems().get(0).setBPONo(bpo.getPoNumber());
			requisition.getItems().getGuidedItems().get(0).setPrice(1);
			requisition.getItems().getGuidedItems().get(0).setQuantity(1f);

			// create req
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// search req
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			assertTrue("User was not able to submit a requisition if a BPO was attached to a free text item.", requisition.isResult());

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>[Check disbursement]User should be able to
	 * create invoices for PO's having settlement via as disbursement <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_337296(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		User user = null;
		boolean flag = false, reqFlag = false, flag1 = false;
		Requisition requisition = new Requisition();
		//RequisitionSettings requisitionSettings = new RequisitionSettings();
		Invoice invoice = new Invoice();
		String testCaseName = null, settlementViaOption_OnViewPage, settlementViaOption_OnReqViewPage, errorMsg = "";
		try
		{
			driver = DriverSelector.getDriver(testCase);
			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_337290"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_337293"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_337433"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_337294"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_337295"));
			}
			testCaseName = testCase.getTestMethodName();
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			user = LoginLogoutServices.login(driver, testCase);
			//	ActionBot.defaultHighSleep();
			driver.getCurrentUrl();
			RequisitionSettings requisitionSettings = new RequisitionSettings();
			requisitionSettings.setAddDisbursementAsSettlementViaOption(true);
			requisitionSettings.setSendPOToSupplier(false);

			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			requisition.setSettlementvia(IConstantsData.SETTLEMENT_VIA_OPTION_DISBURSEMENT);

			invoice = ObjectCreation.getDefaultFlipInvoiceObject();

			// change req settings
			requisitionSettings = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);

			// req to buyers desk
			requisition = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);
			/**
			 * RTC_337290 : [Check disbursement]There should be a third option
			 * called as Disbursement on requisition checkout page incase the
			 * setting for disbursement is selected 'yes' in
			 * cuztomize>>requisition
			 **/
			{
				flag = requisition.getSettlementvia().trim().equalsIgnoreCase(IConstantsData.DISBURSEMENT_SETTLEMENT_VIA_OPTION);
				CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(0),
					"Third option called as Disbursement for settlement via option was not present on requisition checkout page incase the setting for disbursement is selected 'yes' in cuztomize>>requisition");
			}

			// to change Send PO To Supplier setting to Yes
			requisitionSettings.setSendPOToSupplier(true);
			requisitionSettings = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings);

			// search req at buyers desk
			requisition = FlowBuyersDeskListing.searchAtBuyersDeskListing(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition at Buyers Desk", requisition.isResult());

			// to view the req
			FlowBuyersDeskListing.viewRequisitionAtBuyersDesk(driver, testCaseName);

			// convert To Po
			FlowBuyersDesk.convertToPo(driver, testCaseName);

			// submit all POs
			List<PurchaseOrder> purchaseOrders = FlowBuyersDesk.submitAllSuggestedPosForProcessing(driver, testCaseName);

			// to search POs
			for (PurchaseOrder purchaseOrder : purchaseOrders)
			{
				flag = FlowPoListing.searchPo(driver, testCaseName, purchaseOrder.getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
				assertTrue("PO was not created against requisition", flag);

				String status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
				if (status.contains(IConstantsData.IN_APPROVAL_FILTER_LABEL))
				{
					// to approve the PO
					ApprovalAllRequests approvalAllRequests = new ApprovalAllRequests();
					approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, purchaseOrder.getPoNo(), IConstantsData.PURCHASE_ORDER,
						IConstantsData.APPROVE);

					FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

					// search po
					flag = FlowPoListing.searchPo(driver, testCaseName, purchaseOrder.getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
					assertTrue("Error while searching PO", flag);

					/**
					 * RTC_337293 :[Check disbursement-Send PO to supplier is
					 * NO]On selecting settlment via disbursement option in
					 * requisition ,the PO created from requisition will be
					 * within eproc itself and will not reach to any supplier
					 **/
					/**
					 * RTC_337433 : [Check disbursement]Setting for 'Send PO to
					 * supplier' should be captured at the time of submission of
					 * requisition
					 **/
					status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
					flag = status.equalsIgnoreCase(IConstantsData.COMPLETE_RELEASED_FILTER_LABEL);
					assertTrue("Status of PO was not 'Released'", flag);
					flag = PagePurchaseOrderListing.isNotSentToSupplierIconPresent(driver, testCaseName);
					status = PagePurchaseOrderListing.getStatusDetailsOfNotSentToSupplierIcon(driver, testCaseName);
					flag1 = status.equalsIgnoreCase(IConstantsData.NOT_SENT_TO_SUPPLIER);
					CommonServices.setMappedTestCaseResult(flag && flag1, mappedTestCases.get(1), "Status of PO was not 'NOT SENT TO SUPPLIER'");
					CommonServices.setMappedTestCaseResult(flag && flag1, mappedTestCases.get(2),
						"Setting for 'Send PO to supplier' was not captured at the time of submission of requisition. Status of PO was not 'NOT SENT TO SUPPLIER'");
					assertTrue("Status of PO was not 'NOT SENT TO SUPPLIER'", flag);
				}
			}

			/**
			 * RTC_337294 : [Check disbursement-Send PO to supplier is YES]On
			 * selecting settlment via disbursement option in requisition ,the
			 * PO created from requisition will reach to the configured supplier
			 * of the PO
			 **/
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);

			// req to buyers desk
			Requisition requisition2 = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			requisition2.setSettlementvia(IConstantsData.SETTLEMENT_VIA_OPTION_DISBURSEMENT);
			requisition2 = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition2);

			// to view the req
			FlowBuyersDeskListing.viewRequisitionAtBuyersDesk(driver, testCaseName);

			// convert To Po
			FlowBuyersDesk.convertToPo(driver, testCaseName);

			// submit all POs
			List<PurchaseOrder> purchaseOrders1 = FlowBuyersDesk.submitAllSuggestedPosForProcessing(driver, testCaseName);

			// to search POs
			for (PurchaseOrder purchaseOrder : purchaseOrders1)
			{
				flag = FlowPoListing.searchPo(driver, testCaseName, purchaseOrder.getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
				assertTrue("PO was not created against requisition", flag);

				String status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
				if (status.equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL))
				{
					// to approve the PO
					ApprovalAllRequests approvalAllRequests = new ApprovalAllRequests();
					approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, purchaseOrder.getPoNo(), IConstantsData.PURCHASE_ORDER,
						IConstantsData.APPROVE);

					FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

					// search po
					flag = FlowPoListing.searchPo(driver, testCaseName, purchaseOrder.getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
					assertTrue("Error while searching PO", flag);

					status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
					flag = status.equalsIgnoreCase(IConstantsData.COMPLETE_RELEASED_FILTER_LABEL);
					flag1 = !PagePurchaseOrderListing.isNotSentToSupplierIconPresent(driver, testCaseName);
					CommonServices.setMappedTestCaseResult(flag && flag1, mappedTestCases.get(3),
						"If Send PO to supplier is YES , On selecting settlment via disbursement option in requisition ,the PO created from requisition not reach to the configured supplier of the PO");
					assertTrue("Status of PO was not Released", flag);

					FlowPoListing.viewPO(driver, testCaseName);
					settlementViaOption_OnViewPage = PageViewPurchaseOrder.getSettlementViaOption(driver, testCaseName);
					flag = settlementViaOption_OnViewPage.equalsIgnoreCase(requisition.getSettlementvia());
				}
			}

			/**
			 * RTC_337295 : [Check disbursement]Settllement via disbursement
			 * field should be displayed on view page of the requisition/PO
			 **/
			// search req
			requisition2 = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition2);
			assertTrue("Error while searching requisition", requisition.isResult());

			// view req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);
			PageRequisitionView.clickOnRequisitionTab(driver, testCaseName);
			settlementViaOption_OnReqViewPage = PageRequisitionView.getSettlementVia(driver, testCaseName);
			reqFlag = settlementViaOption_OnReqViewPage.equalsIgnoreCase(requisition2.getSettlementvia());
			if (!flag)
			{
				errorMsg += "po ";
			}
			if (!reqFlag)
			{
				errorMsg += "reauisition ";
			}
			CommonServices.setMappedTestCaseResult(reqFlag && flag, mappedTestCases.get(4), "Settllement via disbursement field was not displayed on view page of the " + errorMsg);

			logger.info("================= Create FlipInvoice ===============");
			// search po
			flag = FlowPoListing.searchPo(driver, testCaseName, purchaseOrders1.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			assertTrue("Error while searching PO", flag);

			// to create flip invoice
			PagePurchaseOrderListing.clickOnPoActionsLink(driver, testCaseName);
			ModalPOListingActions.clickOnCreateInvoiceLink(driver, testCaseName);

			invoice = FlowFlipInvoice.createFlipInvoice(driver, testCaseName, invoice);

			logger.info("================= Search PO ===============");
			// search po
			flag = FlowPoListing.searchPo(driver, testCaseName, purchaseOrders1.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			assertTrue("Error while searching PO", flag);

			logger.info("================= View PO ===============");
			// view po
			FlowPoListing.viewPO(driver, testCaseName);
			// view invoice
			PageViewPurchaseOrder.clickOnViewPageTabInvoice(driver, testCaseName);

			logger.info("================= View Invoice ===============");
			// to get invoice no
			flag = FlowPOInvoiceListing.checkIfInvoiceCreated(driver, testCaseName, invoice.getInvoiceNo());
			assertTrue("Invoice was not created for released po or status of invoice was wrong", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				RequisitionSettings requisitionSettings2 = new RequisitionSettings();
				requisitionSettings2.setAddDisbursementAsSettlementViaOption(false);
				requisitionSettings2 = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings2);
			}
			catch (Exception e)
			{
				logger.error("Error while changing requisition setting." + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
			}
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>[Check disbursement]PO/BOR should be
	 * allowed to be amended incase the PO/BOR is not sent to the supplier.Check
	 * case for Req-BOR amendment <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_337475(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		User user = null;
		Item item2 = new Item();
		List<GuidedItem> guidedItems = new ArrayList<GuidedItem>();
		String testCaseName = null, type, status;
		boolean flag = false, flag1 = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_337504"));
			}
			testCaseName = testCase.getTestMethodName();
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			/**
			 * RTC_337504 : [Check disbursement]''Send PO to supplier' should
			 * get greyed out incase'Add Disbursement as a settlement option' is
			 * NO
			 **/
			// to click on cuatomize tab
			MainPageHeaderLevelTab.clickOnCustomizeSubTab(driver);

			// to click on requisition setting link
			PageCustomizeSettings.clickOnRequisitionLink(driver, testCaseName);
			ActionBot.defaultSleep();

			// 'Add Disbursement as a settlement option' as 'NO'
			PageRequisitionSettings.clickOnAddDisbursementAsSettlementViaOptionNo(driver, testCaseName);

			flag = !PageRequisitionSettings.isSendPOToSupplierOptionYesEnabled(driver, testCaseName)
				&& !PageRequisitionSettings.isSendPOToSupplierOptionNoEnabled(driver, testCaseName);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(0), "'Send PO to supplier' was not greyed out incase'Add Disbursement as a settlement option' was NO");

			// disbursement option as 'yes'
			PageRequisitionSettings.clickOnAddDisbursementAsSettlementViaOptionYes(driver, testCaseName);
			// 'send PO to supplier' as 'NO'
			PageRequisitionSettings.clickOnSendPOToSupplierOptionNo(driver, testCaseName);

			ActionBot.defaultSleep();
			ActionBot.scroll(driver, "400");
			PageRequisitionSettings.clickOnSaveButton(driver, testCaseName);

			// to get BPO object
			BPO bpo = ObjectCreation.getBPOCreation(IConstantsData.CATALOG_ITEM);

			// BPO creation
			logger.info("============== Creating BPO ==============");
			bpo = FlowBPO.createBPO(driver, testCaseName, bpo);

			driver.navigate().refresh();
			ActionBot.defaultSleep();
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);

			// search BPO
			logger.info("============== Searching BPO ==============");
			flag = FlowPoListing.searchBPO(driver, testCaseName, bpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO, IConstantsData.BLANKET_PO_TYPE);
			assertTrue("Error while searching BPO", flag);

			type = PagePurchaseOrderListing.getFirstPOType(driver, testCaseName);
			flag = type.equalsIgnoreCase(IConstantsData.BLANKET_PO_TYPE);
			assertTrue("Type of BPO was wrong, it should be Blanket.", flag);
			status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			if (status.equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL))
			{
				// to approve the BPO
				ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, bpo.getPoNumber(), IConstantsData.BPO,
					IConstantsData.APPROVE);
				FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

				ActionBot.defaultHighSleep();
				driver.navigate().refresh();
				driver.navigate().refresh();
				// search bpo
				flag = FlowPoListing.searchBPO(driver, testCaseName, bpo.getPoNumber(), IConstantsData.SEARCH_BY_PO_NO, IConstantsData.BLANKET_PO_TYPE);
				assertTrue("Error while searching copied BPO", flag);
				flag = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName).equalsIgnoreCase(IConstantsData.COMPLETE_RELEASED_FILTER_LABEL);
				assertTrue("Status of BPO was not Released", flag);
			}

			// to get requisition object
			Requisition requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.GUIDED_ITEM);
			requisition.getItems().getGuidedItems().get(0).setBPONo(bpo.getPoNumber());

			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			// req to buyers desk
			requisition = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			// to view the req
			FlowBuyersDeskListing.viewRequisitionAtBuyersDesk(driver, testCaseName);

			// convert To Po
			FlowBuyersDesk.convertToPo(driver, testCaseName);

			// submit all POs
			List<PurchaseOrder> purchaseOrders = FlowBuyersDesk.submitAllSuggestedPosForProcessing(driver, testCaseName);

			// to search BOR
			for (PurchaseOrder purchaseOrder : purchaseOrders)
			{
				flag = FlowPoListing.searchPo(driver, testCaseName, purchaseOrder.getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
				assertTrue("BOR was not created against requisition", flag);

				type = PagePurchaseOrderListing.getFirstPOType(driver, testCaseName);
				flag = type.equalsIgnoreCase(IConstantsData.RELEASE_PO_TYPE);
				assertTrue("Type of BPO was wrong, it should be Release.", flag);

				flag = PagePurchaseOrderListing.isNotSentToSupplierIconPresent(driver, testCaseName);
				status = PagePurchaseOrderListing.getStatusDetailsOfNotSentToSupplierIcon(driver, testCaseName);
				flag1 = status.equalsIgnoreCase(IConstantsData.NOT_SENT_TO_SUPPLIER);
				assertTrue("Status of BOR was not 'NOT SENT TO SUPPLIER'", flag && flag1);
			}

			guidedItems.add(ObjectCreation.getDefaultGuidedItemObjectForBPO());
			item2.setGuidedItems(guidedItems);

			// view po
			FlowPoListing.viewPO(driver, testCaseName);

			// to amend the PO
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			ModalViewPOActions.clickOnAmendPoLink(driver, testCaseName);

			ActionBot.scroll(driver, "350");
			// amend BOR
			logger.info("============== Amending BOR ===============");
			item2 = FlowStandardPo.addItem(driver, testCaseName, item2);

			// to submit BOR for processing
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);

			PagePurchaseOrderListing.getFirstPoNo(driver, testCaseName);

			// search release
			logger.info("============== Searching Release ==============");
			flag = FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			assertTrue("Error while searching release", flag);
			// view po
			// to view amended BPO
			FlowPoListing.viewPO(driver, testCaseName);

			List<WebElement> itemNames = PageViewPurchaseOrder.getListOfItems(driver, testCaseName);
			flag = false;
			for (WebElement element : itemNames)
			{
				String itemName = element.getText().trim();
				if ((itemName.equalsIgnoreCase(requisition.getItems().getGuidedItems().get(0).getShortDescription()))
					|| (itemName.equalsIgnoreCase(item2.getGuidedItems().get(0).getShortDescription())))
				{
					flag = true;
				}
			}
			assertTrue("BOR was not amended incase the BOR is not sent to the supplier", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				RequisitionSettings requisitionSettings2 = new RequisitionSettings();
				requisitionSettings2.setAddDisbursementAsSettlementViaOption(false);
				requisitionSettings2 = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings2);
			}
			catch (Exception e)
			{
				logger.error("Error while changing requisition setting." + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
			}
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>[Check disbursement]PO/BOR should be
	 * allowed to be amended incase the PO/BOR is not sent to the supplier <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_337440(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		User user = null;
		//RequisitionSettings requisitionSettings = new RequisitionSettings();
		Requisition requisition = new Requisition();
		Requisition requisition1 = new Requisition();
		List<GuidedItem> guidedItems = new ArrayList<GuidedItem>();
		Item item2 = new Item();
		String testCaseName = null, errorMsg = null, status;
		boolean flag = false, flag1 = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_337438"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_337476"));
			}
			testCaseName = testCase.getTestMethodName();
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			user = LoginLogoutServices.login(driver, testCase);

			// change req setting : 'send PO to supplier' as 'Yes' and
			// disbursement option as 'yes'
			//			requisitionSettings.setAddDisbursementAsSettlementViaOption(true);
			//			requisitionSettings.setSendPOToSupplier(true);
			//
			//			requisitionSettings = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings);

			/**
			 * RTC_337438 : [Check disbursement]Error should be thrown incase of
			 * conflicting 'settlment via' setting while attaching a PO/BOR at
			 * header level in setting
			 **/
			logger.info("Case 1 : 'send PO to supplier' as 'Yes' and disbursement option as 'yes'");

			// create req to po
			logger.info("================== Creating Req and converting it to PO ==================");
			requisition1 = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			requisition1 = CombineFlowImpl.reqToPO(driver, testCaseName, requisition1);

			// create req
			logger.info("================== Creating Req with settlement via as disbursement ==================");
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			requisition.setSettlementvia(IConstantsData.SETTLEMENT_VIA_OPTION_DISBURSEMENT);
			requisition.setPoNo(requisition1.getPurchaseOrdersList().get(0).getPoNo());

			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			flag = PageRequisitionCheckOut.isMisMatchSettlementViaErrorIconPresent(driver, testCaseName);
			if (flag)
			{
				errorMsg = PageRequisitionCheckOut.getMisMatchSettlementViaErrorMsg(driver, testCaseName);
				flag1 = errorMsg.equalsIgnoreCase(IConstantsData.Mismatch_In_Settlement_via_Error_Msg);
			}
			CommonServices.setMappedTestCaseResult(flag && flag1, mappedTestCases.get(0),
				"Error was not thrown incase of conflicting 'settlment via' setting while attaching a PO at header level in setting, with 'send PO to supplier' as 'Yes' and disbursement option as 'Yes'");

			// change req setting : 'send PO to supplier' as 'No' and
			// disbursement option as 'yes'
			logger.info("Case 2 : 'send PO to supplier' as 'No' and disbursement option as 'yes'");
			//			requisitionSettings.setAddDisbursementAsSettlementViaOption(true);
			//			requisitionSettings.setSendPOToSupplier(false);
			//
			//			logger.info("================== Changing req setting : 'send PO to supplier' as 'No' and disbursement option as 'yes' ==================");
			//			requisitionSettings = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings);

			// create req
			Requisition requisition2 = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			requisition2.setSettlementvia(IConstantsData.SETTLEMENT_VIA_OPTION_DISBURSEMENT);
			requisition2.setPoNo(requisition1.getPurchaseOrdersList().get(0).getPoNo());

			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);

			// to checkout
			logger.info("================== Creating Req with settlement via as disbursement ==================");
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			requisition2 = FlowRequisition.createRequisition(driver, testCaseName, requisition2);

			flag = PageRequisitionCheckOut.isMisMatchSettlementViaErrorIconPresent(driver, testCaseName);
			if (flag)
			{
				errorMsg = PageRequisitionCheckOut.getMisMatchSettlementViaErrorMsg(driver, testCaseName);
				flag1 = errorMsg.equalsIgnoreCase(IConstantsData.Mismatch_In_Settlement_via_Error_Msg);
			}
			CommonServices.setMappedTestCaseResult(flag && flag1, mappedTestCases.get(0),
				"Error was not thrown incase of conflicting 'settlment via' setting while attaching a PO at header level in setting, with 'send PO to supplier' as 'No' and disbursement option as 'Yes'");

			/**
			 * RTC_337440 : [Check disbursement]PO/BOR should be allowed to be
			 * amended incase the PO/BOR is not sent to the supplier
			 **/
			// create req
			Requisition requisition3 = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			requisition3.setSettlementvia(IConstantsData.SETTLEMENT_VIA_OPTION_DISBURSEMENT);
			requisition3.setPoNo(null);

			logger.info("================== Creating req with settlement via as disbursement ==================");
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			requisition3 = CombineFlowImpl.reqToPO(driver, testCaseName, requisition3);

			// to check status of PO
			flag = PagePurchaseOrderListing.isNotSentToSupplierIconPresent(driver, testCaseName);
			status = PagePurchaseOrderListing.getStatusDetailsOfNotSentToSupplierIcon(driver, testCaseName);
			flag1 = status.equalsIgnoreCase(IConstantsData.NOT_SENT_TO_SUPPLIER);
			assertTrue("Status of PO was not 'NOT SENT TO SUPPLIER'", flag && flag1);

			// to get new guided item
			guidedItems.add(ObjectCreation.getDefaultGuidedItemObjectForBPO());
			item2.setGuidedItems(guidedItems);

			logger.info("================== View PO ==================");
			// view po
			FlowPoListing.viewPO(driver, testCaseName);

			// to amend the PO
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			ModalViewPOActions.clickOnAmendPoLink(driver, testCaseName);

			ActionBot.scroll(driver, "350");
			// amend BOR
			logger.info("============== Amending PO ===============");
			item2 = FlowStandardPo.addItem(driver, testCaseName, item2);

			// to submit PO for processing
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);

			PagePurchaseOrderListing.getFirstPoNo(driver, testCaseName);

			/**
			 * RTC_337476 : [Check disbursement]There will be a new status 'Not
			 * sent to supplier' in released>>confirmation filter for PO's not
			 * sent to supplier
			 **/
			PoStatusFilter poStatusFilter = new PoStatusFilter();
			poStatusFilter.setNotSentToSupplier(true);
			List<String> listOfStatus = new ArrayList<String>();
			listOfStatus.add(IConstantsData.COMPLETE_RELEASED_FILTER_LABEL);
			poStatusFilter.setStatus(listOfStatus);
			// apply po status filter
			poStatusFilter = FlowPoListing.applyPoStatusFilter(driver, testCaseName, poStatusFilter);

			// check if filter applied
			flag = FlowPoListing.checkIfStatusFilterIsApplied(driver, testCaseName, poStatusFilter);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(0), "'Not sent to supplier' filter was not applied properly");

			// search po
			logger.info("============== Searching PO ==============");
			flag = FlowPoListing.searchPo(driver, testCaseName, requisition3.getPurchaseOrdersList().get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			assertTrue("Error while searching PO", flag);
			// view po
			FlowPoListing.viewPO(driver, testCaseName);

			List<WebElement> itemNames = PageViewPurchaseOrder.getListOfItems(driver, testCaseName);
			flag = false;
			for (WebElement element : itemNames)
			{
				String itemName = element.getText().trim();
				if ((itemName.equalsIgnoreCase(requisition.getItems().getCatelogItems().get(0).getItemName()))
					|| (itemName.equalsIgnoreCase(item2.getGuidedItems().get(0).getShortDescription())))
				{
					flag = true;
				}
			}
			assertTrue("PO was not amended incase the PO is not sent to the supplier", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				RequisitionSettings requisitionSettings2 = new RequisitionSettings();
				requisitionSettings2.setAddDisbursementAsSettlementViaOption(false);
				requisitionSettings2 = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings2);
			}
			catch (Exception e)
			{
				logger.error("Error while changing requisition setting." + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
			}
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>[Check disbursement]Error should be thrown
	 * on adding items in req-BOR/PO amend incase of mismatch in payment
	 * settlement modes <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_337811(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		User user = null;
		RequisitionSettings requisitionSettings = new RequisitionSettings();
		Requisition requisition = new Requisition();
		Requisition requisition_withSettlementViaInvoice = new Requisition();
		Requisition requisition_withSettlementViaDisbursment = new Requisition();
		String testCaseName = null;
		boolean flag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_337812"));
			}
			testCaseName = testCase.getTestMethodName();
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// change req setting : 'send PO to supplier' as 'Yes' and
			// disbursement option as 'yes'
			requisitionSettings.setAddDisbursementAsSettlementViaOption(true);
			requisitionSettings.setSendPOToSupplier(true);

			requisitionSettings = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings);

			// Case 1 : Req with settlement via as invoice
			logger.info("================== Creating Req with settlement via as Invoice ==================");
			requisition_withSettlementViaInvoice = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			requisition_withSettlementViaDisbursment.setSettlementvia(IConstantsData.SETTLEMENT_VIA_OPTION_INVOICE);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			requisition_withSettlementViaInvoice = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition_withSettlementViaInvoice);

			// Case 2 : Req with settlement via as Disbursement and Send to
			// po
			// as Yes
			logger.info("================== Creating Req with settlement via as Disbursement and Send to po as Yes ==================");
			requisition_withSettlementViaDisbursment = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			requisition_withSettlementViaDisbursment.setSettlementvia(IConstantsData.SETTLEMENT_VIA_OPTION_DISBURSEMENT);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			requisition_withSettlementViaDisbursment = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition_withSettlementViaDisbursment);

			// change req setting : 'send PO to supplier' as 'No' and
			// disbursement option as 'yes'
			logger.info("================== Changing req setting : 'send PO to supplier' as 'No' and disbursement option as 'yes' ==================");
			requisitionSettings.setAddDisbursementAsSettlementViaOption(true);
			requisitionSettings.setSendPOToSupplier(false);

			requisitionSettings = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings);

			// convert req to PO
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			requisition = CombineFlowImpl.reqToPO(driver, testCaseName, requisition);

			// view po
			logger.info("============== View PO ================");
			FlowPoListing.viewPO(driver, testCaseName);

			// to amend the PO
			PageViewPurchaseOrder.clickOnDropDownActions(driver, testCaseName);
			ModalViewPOActions.clickOnAmendPoLink(driver, testCaseName);

			logger.info("============== Amend PO by Adding Item from Requisition ================");
			ActionBot.scroll(driver, "350");

			/**
			 * RTC_337812 : [Check disbursement]Error should be thrown on adding
			 * items in req-BOR/PO amend incase of mismatch in payment
			 * settlement modes.Check case for mismatch i 'send PO to supplier
			 * 'config
			 **/
			FlowStandardPo.addItemFromRequisition(driver, testCaseName, requisition_withSettlementViaDisbursment, IConstantsData.Search_By_Req_No);
			flag = ModalAddItemFromRequisition.getMisMatchSettlementViaErrorMsg(driver, testCaseName).equalsIgnoreCase(IConstantsData.Mismatch_In_Settlement_via_Error_Msg);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(0),
				"Error was not thrown on adding items in req-BOR/PO amend incase of mismatch in payment settlement modes");
			ModalAddItemFromRequisition.clickOnCloseReqItemButton(driver, testCaseName);

			/**
			 * RTC_337811 : [Check disbursement]Error should be thrown on adding
			 * items in req-BOR/PO amend incase of mismatch in payment
			 * settlement modes
			 **/
			FlowStandardPo.addItemFromRequisition(driver, testCaseName, requisition_withSettlementViaInvoice, IConstantsData.Search_By_Req_No);
			flag = ModalAddItemFromRequisition.getMisMatchSettlementViaErrorMsg(driver, testCaseName).equalsIgnoreCase(IConstantsData.Mismatch_In_Settlement_via_Error_Msg);
			ModalAddItemFromRequisition.clickOnCloseReqItemButton(driver, testCaseName);
			assertTrue("Error was not thrown on adding items in req-BOR/PO amend incase of mismatch in payment settlement modes", flag);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				RequisitionSettings requisitionSettings2 = new RequisitionSettings();
				requisitionSettings2.setAddDisbursementAsSettlementViaOption(false);
				requisitionSettings2 = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings2);
			}
			catch (Exception e)
			{
				logger.error("Error while changing requisition setting." + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
			}
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>[Check disbursement]Separate PO's should
	 * be generated on converting multiple requisitions to PO from buyers desk
	 * listing based on in case of different settlement via options <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_337766(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		User user = null;
		RequisitionSettings requisitionSettings = new RequisitionSettings();
		Requisition requisition_withSettlementViaInvoice = new Requisition();
		Requisition requisition_withSettlementViaDisbursment_SendToPOYes = new Requisition();
		Requisition requisition_withSettlementViaDisbursment_SendToPONo = new Requisition();
		String testCaseName = null;
		boolean flag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_337767"));
			}
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// change req setting : 'send PO to supplier' as 'Yes' and
			// disbursement option as 'No'
			requisitionSettings.setAddDisbursementAsSettlementViaOption(true);
			requisitionSettings.setSendPOToSupplier(false);

			requisitionSettings = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings);

			// Case 1 : Req with settlement via as invoice
			logger.info("================== Creating Req with settlement via as Invoice ==================");
			requisition_withSettlementViaInvoice = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			requisition_withSettlementViaInvoice = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition_withSettlementViaInvoice);

			// Case 2 : Req with settlement via as Disbursement and Send to
			// po
			// as No
			logger.info("================== Creating Req with settlement via as Disbursement and Send to po as No ==================");
			requisition_withSettlementViaDisbursment_SendToPONo = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			requisition_withSettlementViaDisbursment_SendToPONo.setSettlementvia(IConstantsData.SETTLEMENT_VIA_OPTION_DISBURSEMENT);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			requisition_withSettlementViaDisbursment_SendToPONo = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition_withSettlementViaDisbursment_SendToPONo);

			// change req setting : 'send PO to supplier' as 'Yes' and
			// disbursement option as 'Yes'
			logger.info("================== Change req setting : 'send PO to supplier' as 'Yes' and disbursement option as 'Yes' ==================");
			requisitionSettings.setAddDisbursementAsSettlementViaOption(true);
			requisitionSettings.setSendPOToSupplier(true);

			requisitionSettings = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings);

			// Case 3 : Req with settlement via as Disbursement and Send to
			// po
			// as Yes
			logger.info("================== Creating Req with settlement via as Disbursement and Send to po as Yes ==================");
			requisition_withSettlementViaDisbursment_SendToPOYes = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			requisition_withSettlementViaDisbursment_SendToPOYes.setSettlementvia(IConstantsData.SETTLEMENT_VIA_OPTION_DISBURSEMENT);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			requisition_withSettlementViaDisbursment_SendToPOYes = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition_withSettlementViaDisbursment_SendToPOYes);

			/**
			 * RTC_337767 : [Check disbursement]Separate PO's should be
			 * generated on converting multiple requisitions to PO from buyers
			 * desk listing based on in case of different settlement via
			 * options.Check case for different 'send PO to supplier'
			 * configurations
			 **/
			// to get list of req
			MainPageHeaderLevelTab.clickOnBuyersDeskSubTab(driver, testCaseName);

			List<WebElement> listOfReq = PageBuyersDeskListing.getAllReqNos(driver, testCaseName);

			// to select two req
			for (WebElement element : listOfReq)
			{
				if (element.isDisplayed())
				{
					String reqName = element.getText().trim();
					if ((reqName.equalsIgnoreCase(requisition_withSettlementViaDisbursment_SendToPOYes.getReqNo()))
						|| (reqName.equalsIgnoreCase(requisition_withSettlementViaDisbursment_SendToPONo.getReqNo())))
					{
						WebElement parentRow = element.findElement(IPageSearchListing.ANCSESTOR_TR.getBy());
						WebElement checkboxElement = parentRow.findElement(IPageSearchListing.INPUT);
						checkboxElement.click();
						if (!checkboxElement.isSelected())
						{
							checkboxElement.click();
						}
					}
				}
			}

			ScreenShot.screenshot(driver, testCaseName, "After selecting two req");

			// convert to po
			PageBuyersDeskListing.clickOnConvertToPoButton(driver, testCaseName);

			List<WebElement> listOfCheckBoxes = PagePurchaseOrderToBeGenerated.getListOfAllSuggestedPOCheckboxes(driver, testCaseName);
			flag = listOfCheckBoxes.size() == 2;
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(0),
				"Separate PO's was not generated on converting multiple requisitions to PO from buyers desk listing based on in case of different settlement via options for different 'send PO to supplier' configurations");

			/**
			 * RTC_337766 : [Check disbursement]Separate PO's should be
			 * generated on converting multiple requisitions to PO from buyers
			 * desk listing based on in case of different settlement via options
			 **/
			// to get list of req
			MainPageHeaderLevelTab.clickOnBuyersDeskSubTab(driver, testCaseName);

			List<WebElement> listOfReq1 = PageBuyersDeskListing.getAllReqNos(driver, testCaseName);

			// to select two req
			for (WebElement element : listOfReq1)
			{
				if (element.isDisplayed())
				{
					String reqName = element.getText().trim();
					if ((reqName.equalsIgnoreCase(requisition_withSettlementViaInvoice.getReqNo()))
						|| (reqName.equalsIgnoreCase(requisition_withSettlementViaDisbursment_SendToPONo.getReqNo())))
					{
						WebElement parentRow = element.findElement(IPageSearchListing.ANCSESTOR_TR.getBy());
						WebElement checkboxElement = parentRow.findElement(IPageSearchListing.INPUT);
						checkboxElement.click();
						if (!checkboxElement.isSelected())
						{
							checkboxElement.click();
						}
					}
				}
			}

			ScreenShot.screenshot(driver, testCaseName, "After selecting two req");

			// convert to po
			PageBuyersDeskListing.clickOnConvertToPoButton(driver, testCaseName);

			List<WebElement> listOfCheckBoxes1 = PagePurchaseOrderToBeGenerated.getListOfAllSuggestedPOCheckboxes(driver, testCaseName);
			flag = listOfCheckBoxes1.size() == 2;
			assertTrue(
				"Separate PO's was not generated on converting multiple requisitions to PO from buyers desk listing based on in case of different settlement via options, it should create 2 different PO's",
				flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				RequisitionSettings requisitionSettings2 = new RequisitionSettings();
				requisitionSettings2.setAddDisbursementAsSettlementViaOption(false);
				requisitionSettings2 = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings2);
			}
			catch (Exception e)
			{
				logger.error("Error while changing requisition setting." + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
			}
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>[Check disbursement]New setting of
	 * disbursement from master should be fetched always incases of
	 * recall/reject/copy/return requisition <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_337768(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		RequisitionSettings requisitionSettings = new RequisitionSettings();
		String testCaseName = null;
		boolean flag = false, settingChangedFlag = true;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			CommonServices.startTestCase(driver, testCase);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// change req setting : 'send PO to supplier' as 'No' and
			// disbursement option as 'Yes'
			logger.info("============== Change req setting : 'send PO to supplier' as 'No' and disbursement option as 'Yes' =============");
			requisitionSettings.setAddDisbursementAsSettlementViaOption(true);
			requisitionSettings.setSendPOToSupplier(false);

			requisitionSettings = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings);

			// create req
			Requisition requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			requisition.setSettlementvia(IConstantsData.SETTLEMENT_VIA_OPTION_DISBURSEMENT);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// search req
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			assertTrue("Error while searching created requisition", requisition.isResult());
			flag = requisition.getStatus().contains(IConstantsData.IN_APPROVAL_FILTER_LABEL);
			assertTrue("Status of Requisition was not In Approval", flag);

			// copy req for : rejection case
			Requisition requisition2 = ObjectCreation.getRequisition(driver);
			requisition2.setItems(requisition.getItems());
			FlowMyRequisitions.copyReq(driver, testCaseName, true);
			requisition2 = FlowRequisition.fillcheckoutForm(driver, testCaseName, requisition2, requisition.getItems());
			FlowRequisition.submitReq(driver, testCaseName, true);

			// search req2
			requisition2 = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition2);
			assertTrue("Error while searching created requisition", requisition2.isResult());
			flag = requisition2.getStatus().contains(IConstantsData.IN_APPROVAL_FILTER_LABEL);
			assertTrue("Status of Requisition was not In Approval", flag);

			// copy req for : returned case
			Requisition requisition3 = ObjectCreation.getRequisition(driver);
			requisition3.setItems(requisition.getItems());
			FlowMyRequisitions.copyReq(driver, testCaseName, true);
			requisition3 = FlowRequisition.fillcheckoutForm(driver, testCaseName, requisition3, requisition.getItems());
			FlowRequisition.submitReq(driver, testCaseName, true);

			// search req3
			requisition3 = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition3);
			assertTrue("Error while searching created requisition", requisition3.isResult());
			flag = requisition3.getStatus().contains(IConstantsData.IN_APPROVAL_FILTER_LABEL);
			assertTrue("Status of Requisition was not In Approval", flag);

			// change req setting : disbursement option as 'No'
			logger.info("============== Change req setting : disbursement option as 'No' =============");
			requisitionSettings.setAddDisbursementAsSettlementViaOption(false);

			requisitionSettings = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings);
			settingChangedFlag = false;

			/** Case 1 : copy req **/
			// search req
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());

			// copy req
			FlowMyRequisitions.copyReq(driver, testCaseName, true);

			// check if Disbursement option is present or not
			flag = PageRequisitionCheckOut.isGivenSettlementViaOptionPresent(driver, testCaseName, requisition.getSettlementvia());
			assertTrue("New setting of disbursement from master was not fetched for copied requisition, disbursement option was available for selection.", !flag);

			/** Case 2 : Recall req **/
			// recall req
			FlowMyRequisitions.recallApprovalRequest(driver, testCaseName, requisition);
			flag = PageMyRequisition.getStatusOfFirstReq(driver, testCaseName).equalsIgnoreCase(IConstantsData.DRAFT_FILTER_LABEL);
			assertTrue("Requisition was not recalled. Status of requisition was not Draft.", flag);

			// view req
			FlowMyRequisitions.viewRequisition(driver, testCaseName);

			// check if Disbursement option is present or not
			flag = PageRequisitionCheckOut.isGivenSettlementViaOptionPresent(driver, testCaseName, requisition.getSettlementvia());
			assertTrue("New setting of disbursement from master was not fetched for copied requisition, disbursement option was available for selection.", !flag);

			/** Case 3 : Rejected Req **/
			ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, requisition2.getReqNo(), IConstantsData.REQUISITION,
				IConstantsData.REJECT);
			approvalAllRequests = FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

			// search req
			requisition2 = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition2);
			assertTrue("Error while searching requisition", requisition2.isResult());
			flag = requisition2.getStatus().equalsIgnoreCase(IConstantsData.REJECTED_FILTER_LABEL);
			assertTrue("Status of requisition was wrong, it should be Rejected", flag);

			// edit req
			FlowMyRequisitions.editReq(driver, testCaseName);

			// check if Disbursement option is present or not
			flag = PageRequisitionCheckOut.isGivenSettlementViaOptionPresent(driver, testCaseName, requisition.getSettlementvia());
			assertTrue("New setting of disbursement from master was not fetched for copied requisition, disbursement option was available for selection.", !flag);

			/** Case 4 : Returned Req **/
			// approve req
			ApprovalAllRequests allRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, requisition3.getReqNo(), IConstantsData.REQUISITION,
				IConstantsData.APPROVE);
			allRequests = FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, allRequests);

			// search at buyers desk
			requisition3 = FlowBuyersDeskListing.searchAtBuyersDeskListing(driver, testCaseName, requisition3);
			assertTrue("Error while searching requisition at buyers desk", requisition2.isResult());

			// return req
			flag = FlowBuyersDeskListing.returnRequisitionFromBuyersDesk(driver, testCaseName, requisition3, true);
			assertTrue("Error while returning requisition from buyers desk", flag);

			// edit req
			FlowMyRequisitions.editReq(driver, testCaseName);

			// check if Disbursement option is present or not
			flag = PageRequisitionCheckOut.isGivenSettlementViaOptionPresent(driver, testCaseName, requisition.getSettlementvia());
			assertTrue("New setting of disbursement from master was not fetched for copied requisition, disbursement option was available for selection.", !flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				if (settingChangedFlag)
				{
					RequisitionSettings requisitionSettings2 = new RequisitionSettings();
					requisitionSettings2.setAddDisbursementAsSettlementViaOption(false);
					requisitionSettings2 = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings2);
				}
			}
			catch (Exception e)
			{
				logger.error("Error while changing requisition setting." + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>[Check disbursement]PO should reach
	 * einvoice product incase settlment via is 'Disbursement' <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_337769(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		String testCaseName = null;
		RequisitionSettings requisitionSettings = new RequisitionSettings();
		Requisition requisition = new Requisition();
		boolean flag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			CommonServices.startTestCase(driver, testCase);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// change req setting : 'send PO to supplier' as 'No' and
			// disbursement option as 'Yes'
			logger.info("============== Change req setting : 'send PO to supplier' as 'No' and disbursement option as 'Yes' =============");
			requisitionSettings.setAddDisbursementAsSettlementViaOption(true);
			requisitionSettings.setSendPOToSupplier(false);

			requisitionSettings = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings);

			// req to po
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			requisition.setSettlementvia(IConstantsData.SETTLEMENT_VIA_OPTION_DISBURSEMENT);

			logger.info("============== Requisition To PO =============");
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);

			requisition = CombineFlowImpl.reqToPO(driver, testCaseName, requisition);

			// product switch: einvoice
			MainPageHeaderLevelTab.clickOnEprocProductSwitchTab(driver, testCaseName);

			// search po
			flag = FlowPoListing.searchPo(driver, testCaseName, requisition.getPurchaseOrdersList().get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			assertTrue("PO was not found in eInvoice", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				RequisitionSettings requisitionSettings2 = new RequisitionSettings();
				requisitionSettings2.setAddDisbursementAsSettlementViaOption(false);
				requisitionSettings2 = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings2);
			}
			catch (Exception e)
			{
				logger.error("Error while changing requisition setting." + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>[Check disbursement]Buyers should be
	 * allowed to create receipts normally for PO's having settlement via as
	 * 'disbursement' <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_337771(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		String testCaseName = null;
		RequisitionSettings requisitionSettings = new RequisitionSettings();
		Requisition requisition = new Requisition();
		boolean flag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			CommonServices.startTestCase(driver, testCase);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// change req setting : 'send PO to supplier' as 'No' and
			// disbursement option as 'Yes'
			logger.info("============== Change req setting : 'send PO to supplier' as 'No' and disbursement option as 'Yes' =============");
			requisitionSettings.setAddDisbursementAsSettlementViaOption(true);
			requisitionSettings.setSendPOToSupplier(false);

			requisitionSettings = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings);

			// req to po
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			requisition.setSettlementvia(IConstantsData.SETTLEMENT_VIA_OPTION_DISBURSEMENT);
			Receipt receipt = ObjectCreation.getDefaultReceiptObject();

			logger.info("============== Creating receipt from PO and PO from Requisition=============");
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);

			// create receipt from PO and PO from req
			receipt = FlowReceipt.createReceiptFromReqToPO(driver, testCaseName, requisition, receipt);

			// check receipt created or not
			flag = receipt.getStatus().equalsIgnoreCase(IConstantsData.CONFIRMED_STATUS);
			assertTrue("Receipt is not created against PO", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				RequisitionSettings requisitionSettings2 = new RequisitionSettings();
				requisitionSettings2.setAddDisbursementAsSettlementViaOption(false);
				requisitionSettings2 = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings2);
			}
			catch (Exception e)
			{
				logger.error("Error while changing requisition setting." + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Checkout >>Suppliers section of free text
	 * item>>System suggested supplier table should have following columns :
	 * Type; Supplier Name; Address; View Contract(s); Actions. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_337322(TestCase testCase) throws Exception
	{
		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		User user = null;
		String testCaseName = null, shortDesc, labelOfAction, supplierAddress;
		boolean flag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_337345"));// 0
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_337324"));// 1
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_337331"));// 2
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_337339"));// 3 
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_337343"));// 4 
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_337344"));// 5 
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_337346"));// 6
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_337347"));// 7
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_337349"));// 8
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_337350"));// 9 
			}
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			ModalGuidedItemSelectCategory categorySelectedForEform = new ModalGuidedItemSelectCategory();
			categorySelectedForEform.setCategory(CommonServices.getTestData(IConstantsData.Item_Product_Category, 1));

			// add guided item with all types of suppliers
			shortDesc = CommonServices.getTestData(IConstantsData.SHORT_DESC_FOR_GUIDED_ITEM);

			// create req with suggest existing supplier -c1 
			GuidedItem guidedItem = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.SUGGEST_EXISTING_SUPPLIER);
			guidedItem.setShortDescription(shortDesc + "_withSuggestExistingSupplier");
			guidedItem.setEditCategory(true);
			guidedItem.setCategory(categorySelectedForEform);

			//0 - withExistingSupplier
			//1 - guided Item
			//2 - withSuggestExistingSupplier
			//3 - withSuggestNewSupplier

			// index 0 - withExistingSupplier
			Item item = ObjectCreation.getItem(IConstantsData.GUIDED_ITEM);
			item.getGuidedItems().get(0).setShortDescription(shortDesc + "_withExistingSupplier");
			item.getGuidedItems().get(0).setCategory(categorySelectedForEform);
			item.getGuidedItems().get(0).setEditCategory(true); //0

			item.getGuidedItems().add(guidedItem);//1
			// index 1 - withSuggestNewSupplier
			GuidedItem guidedItem_withNewSuggestedSupplier = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.SUGGEST_NEW_SUPPLIER);
			guidedItem_withNewSuggestedSupplier.setShortDescription(shortDesc + "_withSuggestNewSupplier");
			guidedItem_withNewSuggestedSupplier.setCategory(categorySelectedForEform);
			guidedItem_withNewSuggestedSupplier.setEditCategory(true);
			//item.getGuidedItems().add(guidedItem_withNewSuggestedSupplier);

			// index 2 - withSuggestExistingSupplier
			GuidedItem guidedItem_withExistingSuggestedSupplier = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.SUGGEST_EXISTING_SUPPLIER);
			guidedItem_withExistingSuggestedSupplier.setShortDescription(shortDesc + "_withSuggestExistingSupplier");
			guidedItem_withExistingSuggestedSupplier.setEditCategory(true);
			guidedItem_withExistingSuggestedSupplier.setCategory(categorySelectedForEform);
			item.getGuidedItems().add(guidedItem_withExistingSuggestedSupplier);//2
			item.getGuidedItems().add(guidedItem_withNewSuggestedSupplier);//3

			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			// add guided item and click on checkout
			item = FlowRequisition.addItemAndCheckout(driver, testCaseName, item);

			ActionBot.scroll(driver);
			PageRequisitionCheckOut.clickExpandAll(driver, testCaseName);

			// view item with existing suggested supplier
			FlowRequisition.viewItemDetails(driver, testCaseName, item.getGuidedItems().get(2).getItemID());

			// supplier tab
			ModalGuidedItemDetails.clickOnSupplierDetailsTab(driver, testCaseName);
			ModalGuidedItemDetails.clickOnExpandSystemSuggestedSupplier(driver, testCaseName);

			/**
			 * RTC_337345 : Checkout >> Suppliers section of free text item >>
			 * All suppliers which are present in SIM for the item category
			 * should be shown in system suggested supplier section .
			 **/

			//getSupplierNameInSuppInfo()
			flag = ModalGuidedItemDetails.isSupplierPresentInSystemSuggestedSuppliersTable(driver, testCaseName,
				guidedItem_withExistingSuggestedSupplier.getGuidedItemSuggestSupplier().getExistingSupplierName());
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(0),
				"All suppliers which are present in SIM for the item category was not shown in system suggested supplier section");

			/**
			 * RTC_337324 : Checkout >> Suppliers section of free text item
			 * >>Actions column in system suggested supplier table should have
			 * select option for SIM suppliers.
			 **/

			labelOfAction = ModalGuidedItemDetails.getTextOfActionForSpecifiedSupplier(driver, testCaseName,
				guidedItem_withExistingSuggestedSupplier.getGuidedItemSuggestSupplier().getExistingSupplierName());

			flag = labelOfAction.equalsIgnoreCase(IConstantsData.Select);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(1), "Actions column in system suggested supplier table not have select option for SIM suppliers.");

			/**
			 * RTC_337331 : Checkout >> Suppliers section of free text item >>
			 * Previously Used (Man & clock icon) should be shown for suppliers
			 * which are previously used for the item category in type column of
			 * system suggested supplier .
			 **/

			flag = ModalGuidedItemDetails.isSupplierPresentInSystemSuggestedSuppliersTable(driver, testCaseName,
				guidedItem_withExistingSuggestedSupplier.getGuidedItemSuggestSupplier().getExistingSupplierName())
				&& ModalGuidedItemDetails.isPreviouslyUsedIconPresentInSystemSuggestedSuppliersTable(driver, testCaseName,
					guidedItem_withExistingSuggestedSupplier.getGuidedItemSuggestSupplier().getExistingSupplierName());
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(2),
				"Previously Used icon was not shown for suppliers which are previously used for the item category in type column of system suggested supplier");

			/**
			 * RTC_337339 : Checkout >> Suppliers section of free text item >>
			 * Address name should be shown in address column of system
			 * suggested supplier table .
			 **/
			supplierAddress = ModalGuidedItemDetails.getSupplierAddressInSystemSuggestedSuppliersTable(driver, testCaseName,
				guidedItem_withExistingSuggestedSupplier.getGuidedItemSuggestSupplier().getExistingSupplierName());
			flag = supplierAddress.equalsIgnoreCase(guidedItem_withExistingSuggestedSupplier.getGuidedItemSuggestSupplier().getExistingSupplierName());
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(3),
				"Address name was not shown in address column of system suggested supplier table for suggested supplier.");

			/**
			 * RTC_337343 : Checkout >> Suppliers section of free text item >>
			 * On clicking on View all contract links present in view
			 * contract(s) column of system suggested suppliers a modal should
			 * open consisting of BPO's and contracts of that supplier .
			 **/
			ModalGuidedItemDetails.clickOnViewContractLink(driver, testCaseName, CommonServices.getTestData(IConstantsData.SUPPLIER_NAME));
			flag = ModalBlanketOrdersForFreeTextItem.isTextboxBPONoPresent(driver, testCaseName);
			// ModalBlanketOrdersForFreeTextItem.clickOnCloseBPOButton(driver,
			// testCaseName);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(4),
				"On clicking on View all contract links present in view contract(s) column of system suggested suppliers a modal was not open consisting of BPO's and contracts of that supplier");

			/**
			 * RTC_337344 : Checkout >> Suppliers section of free text item >>
			 * On clicking on select option after selecting a BPO in view all
			 * contract modal the BPO's Suppliers section of free text item
			 * should get auto populated in select existing supplier section .
			 **/
			ModalBlanketOrdersForFreeTextItem.selectFirstBPO(driver, testCaseName);
			ModalBlanketOrdersForFreeTextItem.clickOnSelectBPOButton(driver, testCaseName);

			String supplierName = ActionBot.getTextWithInElement(driver, IPageFreeTextForm.TEXTBOX_EXISTING_SUGGEST_SUPPLIER_NAME);

			flag = supplierName != null;
			Assert.assertTrue("supplier name is not reflected after selecting BPO", flag);

			flag = supplierName.trim().equalsIgnoreCase(CommonServices.getTestData(IConstantsData.SUPPLIER_NAME));
			Assert.assertTrue("supplier name is not correct as per input", flag);
			//			flag = ModalGuidedItemDetails.getSupplierName(driver, testCaseName) != null
			//				&& ModalGuidedItemDetails.getSupplierName(driver, testCaseName).equalsIgnoreCase(CommonServices.getTestData(IConstantsData.SUPPLIER_NAME));

			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(5),
				"On clicking on select option after selecting a BPO in view all contract modal the BPO's Suppliers section of free text item was not get auto populated in select existing supplier section");

			/**
			 * RTC_337322 : Checkout >>Suppliers section of free text
			 * item>>System suggested supplier table should have following
			 * columns : Type; Supplier Name; Address; View Contract(s);
			 * Actions.
			 **/
			flag = IConstantsData.Type_SuggestSuppliersTableHeader.equalsIgnoreCase(ModalGuidedItemDetails.getTextOfTypeColumnOfSystemSuggestedSupplierTable(driver, testCaseName))
				&& IConstantsData.Name_SuggestSuppliersTableHeader.equalsIgnoreCase(ModalGuidedItemDetails.getTextOfNameColumnOfSystemSuggestedSupplierTable(driver, testCaseName))
				&& IConstantsData.Address_SuggestSuppliersTableHeader
					.equalsIgnoreCase(ModalGuidedItemDetails.getTextOfAddressColumnOfSystemSuggestedSupplierTable(driver, testCaseName))
				&& IConstantsData.View_Contracts_SuggestSuppliersTableHeader
					.equalsIgnoreCase(ModalGuidedItemDetails.getTextOfViewContractsColumnOfSystemSuggestedSupplierTable(driver, testCaseName))
				&& IConstantsData.Actions_SuggestSuppliersTableHeader
					.equalsIgnoreCase(ModalGuidedItemDetails.getTextOfActionsColumnOfSystemSuggestedSupplierTable(driver, testCaseName));
			assertTrue("System suggested supplier table not have one of the following columns : Type; Supplier Name; Address; View Contract(s); Actions.", flag);

			/**
			 * RTC_337346 : Checkout >> Suppliers section of free text item >>
			 * On clicking on select present in system suggested supplier
			 * section ; supplier's information should auto populate in Select
			 * Existing Supplier section if the supplier is present in SIM .
			 **/
			ModalGuidedItemDetails.clickOnActionForSpecifiedSupplier(driver, testCaseName,
				guidedItem_withExistingSuggestedSupplier.getGuidedItemSuggestSupplier().getExistingSupplierName());
			flag = PageFreeTextForm.getSuggestNewExistingSupplierName(driver, testCaseName)
				.equalsIgnoreCase(guidedItem_withExistingSuggestedSupplier.getGuidedItemSuggestSupplier().getExistingSupplierName());
			//&& PageFreeTextForm.getSuggestNewExistingSupplierAddress(driver, testCaseName).equalsIgnoreCase(guidedItem_withExistingSuggestedSupplier.getGuidedItemSuggestSupplier().getExistingSupplierName());
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(6),
				"On clicking on select present in system suggested supplier section ; supplier's information was not auto populated in Select Existing Supplier section if the supplier is present in SIM");
			ModalGuidedItemDetails.clickOnOkButton(driver, testCaseName);

			/**
			 * RTC_337347 : Checkout >> Suppliers section of free text item >>
			 * On clicking on add present in system suggested supplier section ;
			 * supplier's information should auto populate in Add new supplier
			 * section if the supplier is not present in SIM .
			 **/

			FlowRequisition.viewItemDetails(driver, testCaseName, guidedItem_withNewSuggestedSupplier.getItemID());

			// supplier tab
			ModalGuidedItemDetails.clickOnSupplierDetailsTab(driver, testCaseName);

			flag = ModalGuidedItemDetails.clickOnActionForRequesterSuggestedSpecifiedSupplier(driver, testCaseName,
				guidedItem_withNewSuggestedSupplier.getGuidedItemSuggestSupplier().getSuggestNewSupplierName());
			Assert.assertTrue("edit action was not clicked", flag);
			//			ModalGuidedItemDetails.clickOnActionForSpecifiedSupplier(driver, testCaseName,
			//				guidedItem_withNewSuggestedSupplier.getGuidedItemSuggestSupplier().getSuggestNewSupplierName());
			flag = PageFreeTextForm.getSuggestNewSupplierName(driver, testCaseName)
				.equalsIgnoreCase(guidedItem_withNewSuggestedSupplier.getGuidedItemSuggestSupplier().getSuggestNewSupplierName())
				&& PageFreeTextForm.getSuggestNewSupplierAddress(driver, testCaseName)
					.equalsIgnoreCase(guidedItem_withNewSuggestedSupplier.getGuidedItemSuggestSupplier().getSupplierAddress());
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(7),
				"On clicking on add present in system suggested supplier section ; supplier's information was not auto populated in Add new supplier section if the supplier is not present in SIM");

			/**
			 * RTC_337349 : Checkout >> Suppliers section of free text item >>
			 * Select suppliers for buyers review section should have 'Select
			 * Existing Supplier' and 'Add New Supplier' option .
			 **/
			flag = ModalGuidedItemDetails.isAddNewSuggestedSupplierLinkPresent(driver, testCaseName)
				&& ModalGuidedItemDetails.isSelectExistingSuggestedSupplierLinkPresent(driver, testCaseName);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(8),
				"Select suppliers for buyers review section not have 'Select Existing Supplier' and 'Add New Supplier' option");
			ModalGuidedItemDetails.clickOnCancelButton(driver, testCaseName);

			/**
			 * RTC_337350 : Checkout >> Suppliers section of free text item >>
			 * 'Select Existing Supplier' and 'Add New Supplier' option in add
			 * supplier section should be by default collapsed .
			 **/
			// view item with existing supplier
			FlowRequisition.viewItemDetails(driver, testCaseName, item.getGuidedItems().get(0).getItemID());
			// supplier tab
			ModalGuidedItemDetails.clickOnSupplierDetailsTab(driver, testCaseName);
			PageFreeTextForm.clickOnSuggestSupplierRadioButton(driver, testCaseName);
			flag = ModalGuidedItemDetails.isAddNewSuggestedSupplierLinkPresent(driver, testCaseName)
				&& ModalGuidedItemDetails.isSelectExistingSuggestedSupplierLinkPresent(driver, testCaseName);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(9),
				"'Select Existing Supplier' and 'Add New Supplier' option in add supplier section was not by default collapsed");

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Checkout >> Suppliers section of free text
	 * item >> 'Add New Supplier' under select suppliers for buyers review radio
	 * option should have following fields : supplier name ; Address; Supplier
	 * contact ;Supplier Email Id ; Contract/Order Number; phone & other details
	 * . <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_337363(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		User user = null;
		String testCaseName = null, enteredSupplierName, supplierName, enteredSupplierAddress, log = "", supplierContact = "465781";
		Item item = new Item();
		boolean flag = false;
		try
		{
			driver = DriverSelector.getDriver(testCase);
			testCaseName = testCase.getTestMethodName();
			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_337353"));// 0
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_337352"));// 1
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_337355"));// 2
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_337354"));// 3
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_337357"));// 4
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_337358"));// 5
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_337359"));// 6
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_337360"));// 7
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_337361"));// 8
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_337362"));// 9
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_337351"));// 10
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_337364"));// 11
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_337365"));// 12
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_337366"));// 13
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_337367"));// 14
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_337368"));// 15
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_337369"));// 16
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_337374"));// 17
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_337375"));// 18
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_337376"));// 19
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_337401"));// 20
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_337402"));// 21
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_337403"));// 22
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_342978"));// 23
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_342979"));// 24
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_342980"));// 25
			}
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			item = ObjectCreation.getItem(IConstantsData.GUIDED_ITEM);

			// add guided item and click on checkout
			item = FlowRequisition.addItemAndCheckout(driver, testCaseName, item);

			ActionBot.scroll(driver);
			PageRequisitionCheckOut.clickExpandAll(driver, testCaseName);

			// view item
			FlowRequisition.viewItemDetails(driver, testCaseName, item.getGuidedItems().get(0).getItemID());

			// supplier tab
			ModalGuidedItemDetails.clickOnSupplierDetailsTab(driver, testCaseName);

			// click on suggest suppliers for buyers review
			ModalGuidedItemDetails.clickOnSuggestSupplierRadioButton(driver, testCaseName);

			// click on select existing supplier option
			ModalGuidedItemDetails.clickOnSelectExistingSupplier(driver, testCaseName);

			/**
			 * RTC_337353 : Checkout >> Suppliers section of free text item >>
			 * Supplier name in 'select existing Supplier' under select supplier
			 * for buyers review radio option should be mandatory field .
			 **/
			ModalGuidedItemDetails.clickOnOkButton(driver, testCaseName);
			flag = ModalGuidedItemDetails.getMandatoryErrorMsgForSupplierDetails(driver, testCaseName).equalsIgnoreCase(IConstantsData.ErrorMsg_ForMandatorySupplierDetails)
				&& ModalGuidedItemDetails.isMandatoryIconPresentForSupplierName(driver, testCaseName);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(0),
				"Supplier name in 'select existing Supplier' under select supplier for buyers review radio option was not mandatory field");

			/**
			 * RTC_337352 : Checkout >> Suppliers section of free text item >>
			 * Supplier name in 'select existing Supplier' under select supplier
			 * for buyers review radio option should be autocomplete .
			 **/
			supplierName = CommonServices.getTestData(IConstantsData.SUPPLIER_NAME);
			enteredSupplierName = ModalGuidedItemDetails.fillExistingSuggestSupplierName(driver, testCaseName, supplierName);
			flag = supplierName.equalsIgnoreCase(enteredSupplierName);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(1),
				"Supplier name in 'select existing Supplier' under select supplier for buyers review radio option was not autocomplete");

			/**
			 * RTC_337355 : Checkout >> Suppliers section of free text item >>
			 * Address while selecting existing Supplier under select supplier
			 * for buyers review radio option should be mandatory field.
			 **/
			ModalGuidedItemDetails.clickOnOkButton(driver, testCaseName);
			flag = ModalGuidedItemDetails.getMandatoryErrorMsgForSupplierDetails(driver, testCaseName).equalsIgnoreCase(IConstantsData.ErrorMsg_ForMandatorySupplierDetails)
				&& ModalGuidedItemDetails.isMandatoryIconPresentForSupplierAddress(driver, testCaseName);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(2),
				"Address while selecting existing Supplier under select supplier for buyers review radio option was not mandatory field.");

			/**
			 * RTC_337354 : Checkout >> Suppliers section of free text item >>
			 * Address in 'select existing Supplier' under select supplier for
			 * buyers review radio option should be autocomplete dropdown.
			 **/
			enteredSupplierAddress = ModalGuidedItemDetails.selectExistingSuggestSupplierAddress(driver, testCaseName, null);
			flag = enteredSupplierAddress != null;
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(3),
				"Address in 'select existing Supplier' under select supplier for buyers review radio option was not autocomplete dropdown.");
			ActionBot.defaultSleep();

			/**
			 * RTC_337357 : Checkout >> Suppliers section of free text item >>
			 * Supplier contact while selecting existing Supplier under select
			 * suppliers for buyers review radio option should be free text and
			 * autocomplete .
			 **/
			flag = ModalGuidedItemDetails.getAttributeOFExistingSupplierContactField(driver, testCaseName, "autocomplete") != null
				&& ModalGuidedItemDetails.fillExistingSupplierContact(driver, testCaseName, supplierContact).equalsIgnoreCase(supplierContact);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(4),
				"Supplier contact while selecting existing Supplier under select suppliers for buyers review radio option was not free text and autocomplete .");

			/**
			 * RTC_337358 : Checkout >> Suppliers section of free text item >>
			 * Supplier email id in 'select existing Supplier' and 'add new
			 * supplier' under select suppliers for buyers review radio option
			 * should be text box .
			 **/
			flag = ModalGuidedItemDetails.getTagOfEmailId(driver, testCaseName).equalsIgnoreCase("input");
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(5),
				"Supplier email id in 'select existing Supplier' under select suppliers for buyers review radio option was not text box .");

			/**
			 * RTC_337359 : Checkout >> Suppliers section of free text item
			 * >>Contract/Order Number in 'Select existing Supplier' under
			 * select suppliers for buyers review radio option should be text
			 * box and show all option should be present below the text box .
			 **/
			flag = ModalGuidedItemDetails.getTagOfContractNo(driver, testCaseName).equalsIgnoreCase("input")
				&& ActionBot.isElementDisplayed(driver, IModalGuidedItemDetails.SHOW_ALL_BPO_NEW_SUPPLIER_BUTTON);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(6),
				"Contract/Order Number in 'Select existing Supplier' under select suppliers for buyers review radio option should be text box and show all option should be present below the text box");

			/**
			 * RTC_337360 : Checkout >> Suppliers section of free text item
			 * >>All BPO's and contracts of the supplier should be shown in
			 * modal which opens on clicking show all in add existing supplier
			 * section .
			 **/

			ModalGuidedItemDetails.clickOnShowAllBPOForSuggestSupplierButton(driver, testCaseName);
			ActionBot.waitForPageLoad(driver);
			ActionBot.defaultSleep();
			flag = ModalBlanketOrdersForFreeTextItem.getNoOfBPOCount(driver, testCaseName) != 0;
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(7),
				"All BPO's and contracts of the supplier was not shown in modal which opens on clicking show all in add existing supplier section");
			ModalBlanketOrdersForFreeTextItem.clickOnCloseBPOButton(driver, testCaseName);
			ActionBot.defaultSleep();

			/**
			 * RTC_337361 : Checkout >> Suppliers section of free text item >>
			 * Phone in 'select existing Supplier' and 'add new supplier ' under
			 * select suppliers for buyers review radio option should be text
			 * box .
			 **/
			flag = ModalGuidedItemDetails.getTagOfPhoneForExistingSupplier(driver, testCaseName).equalsIgnoreCase("input");
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(8),
				"Phone in 'select existing Supplier' under select suppliers for buyers review radio option was not text box .");

			/**
			 * RTC_337362 : Checkout >> Suppliers section of free text item >>
			 * Other details in 'select existing Supplier' and 'add new supplier
			 * ' under select suppliers for buyers review radio option should be
			 * text area .
			 **/
			flag = ModalGuidedItemDetails.getTagOfOtherDetailsForExistingSupplier(driver, testCaseName).equalsIgnoreCase("textarea");
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(9),
				"Other details in 'select existing Supplier' under select suppliers for buyers review radio option was not text area");

			/**
			 * RTC_337351 : Checkout >> Suppliers section of free text item >>
			 * 'Select Existing Supplier' under select supplier for buyers
			 * review should have following fields : supplier name ; Address;
			 * Supplier contact ;Supplier Email Id ; Contract/Order Number;
			 * phone; other details .
			 **/
			flag = true;
			if (!ModalGuidedItemDetails.isSupplierNameTextBoxPresent(driver, testCaseName))
			{
				flag = false;
				log += "Supplier Name Textbox was not present \n";
			}
			if (!ModalGuidedItemDetails.isSupplierAddressTextBoxPresent(driver, testCaseName))
			{
				flag = false;
				log += "Supplier Address Textbox was not present \n";
			}
			if (!ModalGuidedItemDetails.isSupplierContactTextBoxPresent(driver, testCaseName))
			{
				flag = false;
				log += "Supplier Contact Textbox was not present \n";
			}
			if (!ModalGuidedItemDetails.isSupplierEmailIdTextBoxPresent(driver, testCaseName))
			{
				flag = false;
				log += "Supplier Email Id Textbox was not present \n";
			}
			if (!ModalGuidedItemDetails.isSupplierPhoneTextBoxPresent(driver, testCaseName))
			{
				flag = false;
				log += "Supplier Phone Textbox was not present \n";
			}
			if (!ModalGuidedItemDetails.isContractNoTextBoxPresent(driver, testCaseName))
			{
				flag = false;
				log += "Contract No Textbox was not present \n";
			}
			if (!ModalGuidedItemDetails.isOtherDetailsTextBoxPresent(driver, testCaseName))
			{
				flag = false;
				log += "Other Details Textbox was not present \n";
			}
			logger.info(log);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(10), "'Select Existing Supplier' under select supplier for buyers review was not have all fields");

			/**
			 * RTC_337364 : Checkout >> Suppliers section of free text item >>
			 * Supplier name in 'Add New Supplier' under under select suppliers
			 * for buyers review radio option should be text box .
			 **/
			ModalGuidedItemDetails.clickOnAddNewSuggestSupplier(driver, testCaseName);
			flag = ModalGuidedItemDetails.getTagOfSupplierNameForSuggestNewSupplier(driver, testCaseName).equalsIgnoreCase("input");
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(11),
				"Supplier name in 'Add New Supplier' under under select suppliers for buyers review radio option was not text box .");

			/**
			 * RTC_337365 : Checkout >> Suppliers section of free text item >>
			 * Address ; supplier contact ;Supplier Email Id ; Contract/Order
			 * Number; phone; other details while adding new supplier under
			 * select suppliers for buyers review radio option should be non
			 * mandatory .
			 **/
			supplierName = "ASD_" + System.currentTimeMillis();
			supplierName = ModalGuidedItemDetails.fillSuggestNewSupplierName(driver, testCaseName, supplierName);
			ModalGuidedItemDetails.clickOnAddSupplierButton(driver, testCaseName);
			flag = ModalGuidedItemDetails.getFirstSuggestNewSupplierFromRequestedSelectedSupplier(driver, testCaseName).equalsIgnoreCase(supplierName);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(12),
				"Address ; supplier contact ;Supplier Email Id ; Contract/Order Number; phone; other details while adding new supplier under select suppliers for buyers review radio option was mandatory");

			/**
			 * RTC_337366 : Checkout >> Suppliers section of free text item >>
			 * Supplier name in 'Add New Supplier' under select suppliers for
			 * buyers review radio option should be mandatory column .
			 **/
			flag = ModalGuidedItemDetails.isSuggestNewSupplierNameIsMandatory(driver, testCaseName);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(13),
				"Supplier name in 'Add New Supplier' under select suppliers for buyers review radio option was mandatory column ");

			/**
			 * RTC_337367 : Checkout >> Suppliers section of free text item >>
			 * Address in 'Add New Supplier' under select suppliers for buyers
			 * review radio option should be text box.
			 **/
			flag = ModalGuidedItemDetails.getTagOfSupplierAddressForSuggestNewSupplier(driver, testCaseName).equalsIgnoreCase("input");
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(14),
				"Address in 'Add New Supplier' under select suppliers for buyers review radio option was not text box.");

			/**
			 * RTC_337368 : Checkout >> Suppliers section of free text item >>
			 * Supplier contact in 'Add New Supplier' under select suppliers for
			 * buyers review radio option should be text box .
			 **/
			flag = ModalGuidedItemDetails.getTagOfSupplierContactForSuggestNewSupplier(driver, testCaseName).equalsIgnoreCase("input");
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(15),
				"Supplier contact in 'Add New Supplier' under select suppliers for buyers review radio option was not text box ");

			/**
			 * RTC_337369 : Checkout >> Suppliers section of free text item >>
			 * Contract/Order Number in 'Add New Supplier' under select
			 * suppliers for buyers review radio option should be text box .
			 **/
			flag = ModalGuidedItemDetails.getTagOfContractNoForSuggestNewSupplier(driver, testCaseName).equalsIgnoreCase("input");
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(16),
				"Contract/Order Number in 'Add New Supplier' under select suppliers for buyers review radio option was not text box");

			/**
			 * RTC_337374 : Checkout >>Suppliers section of free text item
			 * >>Check adding a new supplier with maximum length data in
			 * supplier; address; contact/order number; supplier contact ;
			 * supplier email ID ; phone ; other details columns .
			 **/
			GuidedItemSuggestSupplier guidedItemSuggestSupplier = new GuidedItemSuggestSupplier();
			guidedItemSuggestSupplier.setSuggestNewSupplierName(CommonServices.getTestData(IConstantsData.MAX_CHARACTER_ITEMNAME));
			guidedItemSuggestSupplier.setSupplierAddress(CommonServices.getTestData(IConstantsData.MAX_CHARACTER_ITEMNAME));
			guidedItemSuggestSupplier.setSupplierContact(CommonServices.getTestData(IConstantsData.MAX_CHARACTER_ITEMNAME));
			guidedItemSuggestSupplier.setContractNo(CommonServices.getTestData(IConstantsData.MAX_CHARACTER_ITEMNAME));
			guidedItemSuggestSupplier.setOtherDetails(CommonServices.getTestData(IConstantsData.MAX_CHARACTER_ITEMNAME));
			guidedItemSuggestSupplier.setEmailId(CommonServices.getTestData(IConstantsData.MAX_CHARACTER_ITEMNAME) + "@gmail.com");
			guidedItemSuggestSupplier.setNextAction(IConstantsData.ADD_SUGGEST_SUPPLIER);
			guidedItemSuggestSupplier.setVerifyAddedSupplier(false);

			ModalGuidedItemDetails.clickOnAddNewSuggestSupplier(driver, testCaseName);
			guidedItemSuggestSupplier = FlowFillGuidedItem.fillSuggestedSupplier(driver, testCaseName, guidedItemSuggestSupplier, IConstantsData.SUGGEST_NEW_SUPPLIER);

			GuidedItemSuggestSupplier suggestedSupplier = FlowRequisition.getSuggestedNewSupplierFromRequestedSelectedSuppliersTable(driver, testCaseName);
			//false
			flag = guidedItemSuggestSupplier.getSuggestNewSupplierName().contains(suggestedSupplier.getSuggestNewSupplierName().substring(0, 39))
				&& guidedItemSuggestSupplier.getSupplierAddress().contains(suggestedSupplier.getSupplierAddress().substring(0, 39))
				&& guidedItemSuggestSupplier.getSupplierContact().contains(suggestedSupplier.getSupplierContact().substring(0, 39));

			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(17),
				"Wrong data is shown in Requested Selected Suppliers Table after adding a new supplier with maximum length data in supplier; address; contact/order number and supplier contact");

			/**
			 * RTC_337375 : Checkout >>Suppliers section of free text item
			 * >>Check adding a new supplier with multilingual data in supplier;
			 * address; contact/order number; supplier contact ; supplier email
			 * ID ; phone ; other details columns .
			 **/
			GuidedItemSuggestSupplier guidedItemSuggestSupplierMultilingual = new GuidedItemSuggestSupplier();
			guidedItemSuggestSupplierMultilingual.setSuggestNewSupplierName(CommonServices.getTestData(IConstantsData.MULTILINGUAL_CHARACTER_ITEMNAME));
			guidedItemSuggestSupplierMultilingual.setSupplierAddress(CommonServices.getTestData(IConstantsData.MULTILINGUAL_CHARACTER_ITEMNAME));
			guidedItemSuggestSupplierMultilingual.setSupplierContact(CommonServices.getTestData(IConstantsData.MULTILINGUAL_CHARACTER_ITEMNAME));
			guidedItemSuggestSupplierMultilingual.setContractNo(CommonServices.getTestData(IConstantsData.MULTILINGUAL_CHARACTER_ITEMNAME));
			guidedItemSuggestSupplierMultilingual.setOtherDetails(CommonServices.getTestData(IConstantsData.MULTILINGUAL_CHARACTER_ITEMNAME));
			guidedItemSuggestSupplierMultilingual.setNextAction(IConstantsData.ADD_SUGGEST_SUPPLIER);
			guidedItemSuggestSupplierMultilingual.setVerifyAddedSupplier(false);

			ModalGuidedItemDetails.clickOnAddNewSuggestSupplier(driver, testCaseName);

			guidedItemSuggestSupplierMultilingual = FlowFillGuidedItem.fillSuggestedSupplier(driver, testCaseName, guidedItemSuggestSupplierMultilingual,
				IConstantsData.SUGGEST_NEW_SUPPLIER);

			suggestedSupplier = FlowRequisition.getSuggestedNewSupplierFromRequestedSelectedSuppliersTable(driver, testCaseName);

			flag = guidedItemSuggestSupplierMultilingual.getSuggestNewSupplierName().contains(suggestedSupplier.getSuggestNewSupplierName().substring(0, 39))
				&& guidedItemSuggestSupplierMultilingual.getSupplierAddress().contains(suggestedSupplier.getSupplierAddress().substring(0, 39))
				&& guidedItemSuggestSupplierMultilingual.getSupplierContact().contains(suggestedSupplier.getSupplierContact().substring(0, 39));
			/*
			 * && guidedItemSuggestSupplierMultilingual.getContractNo().
			 * equalsIgnoreCase( suggestedSupplier.getContractNo());
			 */CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(18),
				"Wrong data is shown in Requested Selected Suppliers Table after adding a new supplier with multilingual data in supplier; address; contact/order number and supplier contact");

			/**
			 * RTC_337376 : Checkout >>Suppliers section of free text item
			 * >>Check adding a new supplier with special characters data in
			 * supplier; address; contact/order number; supplier contact ;
			 * supplier email ID ; phone ; other details columns .
			 **/
			GuidedItemSuggestSupplier guidedItemSuggestSupplierSpecialChar = new GuidedItemSuggestSupplier();
			guidedItemSuggestSupplierSpecialChar.setSuggestNewSupplierName(CommonServices.getTestData(IConstantsData.SPECIAL_CHARACTER_ITEMNAME, 1));
			guidedItemSuggestSupplierSpecialChar.setSupplierAddress(CommonServices.getTestData(IConstantsData.SPECIAL_CHARACTER_ITEMNAME, 1));
			guidedItemSuggestSupplierSpecialChar.setSupplierContact(CommonServices.getTestData(IConstantsData.SPECIAL_CHARACTER_ITEMNAME, 1));
			guidedItemSuggestSupplierSpecialChar.setContractNo(CommonServices.getTestData(IConstantsData.SPECIAL_CHARACTER_ITEMNAME, 1));
			guidedItemSuggestSupplierSpecialChar.setOtherDetails(CommonServices.getTestData(IConstantsData.SPECIAL_CHARACTER_ITEMNAME, 1));
			//guidedItemSuggestSupplierSpecialChar.setEmailId(CommonServices.getTestData(IConstantsData.SPECIAL_CHARACTER_ITEMNAME, 1) + "@gmail.com");
			guidedItemSuggestSupplierSpecialChar.setNextAction(IConstantsData.ADD_SUGGEST_SUPPLIER);
			guidedItemSuggestSupplierSpecialChar.setVerifyAddedSupplier(false);

			ModalGuidedItemDetails.clickOnAddNewSuggestSupplier(driver, testCaseName);

			guidedItemSuggestSupplierSpecialChar = FlowFillGuidedItem.fillSuggestedSupplier(driver, testCaseName, guidedItemSuggestSupplierSpecialChar,
				IConstantsData.SUGGEST_NEW_SUPPLIER);

			suggestedSupplier = FlowRequisition.getSuggestedNewSupplierFromRequestedSelectedSuppliersTable(driver, testCaseName);

			flag = guidedItemSuggestSupplierSpecialChar.getSuggestNewSupplierName().contains(suggestedSupplier.getSuggestNewSupplierName().substring(0, 39))
				&& guidedItemSuggestSupplierSpecialChar.getSupplierAddress().contains(suggestedSupplier.getSupplierAddress().substring(0, 20))
				&& guidedItemSuggestSupplierSpecialChar.getSupplierContact().contains(suggestedSupplier.getSupplierContact().substring(0, 39));
			/*
			 * && guidedItemSuggestSupplierSpecialChar.getContractNo().
			 * equalsIgnoreCase ( suggestedSupplier.getContractNo());
			 */CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(19),
				"Wrong data is shown in Requested Selected Suppliers Table after adding a new supplier with special character data in supplier; address; contact/order number and supplier contact");

			/**
			 * RTC_337363 : Checkout >> Suppliers section of free text item >>
			 * 'Add New Supplier' under select suppliers for buyers review radio
			 * option should have following fields : supplier name ; Address;
			 * Supplier contact ;Supplier Email Id ; Contract/Order Number;
			 * phone & other details .
			 **/
			flag = true;
			if (!ModalGuidedItemDetails.isSupplierNameTextBoxPresentForSuggestNewSupplier(driver, testCaseName))
			{
				flag = false;
				log += "Supplier Name Textbox was not present \n";
			}
			if (!ModalGuidedItemDetails.isSupplierAddressTextBoxPresentForSuggestNewSupplier(driver, testCaseName))
			{
				flag = false;
				log += "Supplier Address Textbox was not present \n";
			}
			if (!ModalGuidedItemDetails.isSupplierContactTextBoxPresentForSuggestNewSupplier(driver, testCaseName))
			{
				flag = false;
				log += "Supplier Contact Textbox was not present \n";
			}
			if (!ModalGuidedItemDetails.isSupplierEmailIdTextBoxPresentForSuggestNewSupplier(driver, testCaseName))
			{
				flag = false;
				log += "Supplier Email Id Textbox was not present \n";
			}
			if (!ModalGuidedItemDetails.isSupplierPhoneTextBoxPresentForSuggestNewSupplier(driver, testCaseName))
			{
				flag = false;
				log += "Supplier Phone Textbox was not present \n";
			}
			if (!ModalGuidedItemDetails.isContractNoTextBoxPresentForSuggestNewSupplier(driver, testCaseName))
			{
				flag = false;
				log += "Contract No Textbox was not present \n";
			}
			if (!ModalGuidedItemDetails.isOtherDetailsTextBoxPresentForSuggestNewSupplier(driver, testCaseName))
			{
				flag = false;
				log += "Other Details Textbox was not present \n";
			}
			logger.info(log);
			assertTrue("'Add New Supplier' under select supplier for buyers review was not have all fields", flag);

			/**
			 * RTC_337401 : Checkout >> Suppliers section of free text item >>
			 * Error should be shown if user tries to save a quoted by supplier
			 * free text item on checkout screen without selecting even a single
			 * supplier .
			 **/
			PageFreeTextForm.clickPlaceOrderWithExistingSupplier(driver, testCaseName);
			ModalGuidedItemDetails.clearExistingSupplierName(driver, testCaseName);
			ModalGuidedItemDetails.clickOnItemDetailsTab(driver, testCaseName);
			ModalGuidedItemDetails.clickOnSourcingStatusQuotedBySupplierRadioButton(driver, testCaseName);
			ModalGuidedItemDetails.clickOnOkButton(driver, testCaseName);
			flag = ModalGuidedItemDetails.getMandatoryErrorMsgForSupplierDetails(driver, testCaseName).equalsIgnoreCase(IConstantsData.ErrorMsg_ForMandatorySupplierDetails);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(20),
				"Error was not shown if user tries to save a quoted by supplier free text item on checkout screen without selecting even a single supplier");

			/**
			 * RTC_337402 : Checkout >> Suppliers section of free text item >>
			 * Error should not be shown if user tries to save an estimated
			 * price free text item on checkout screen without selecting
			 * supplier .
			 **/
			ModalGuidedItemDetails.clickOnSourcingStatusEstimatedPrice(driver, testCaseName);
			ModalGuidedItemDetails.clickOnOkButton(driver, testCaseName);
			flag = !ModalGuidedItemDetails.isSupplierDetailsErrorPresent(driver, testCaseName);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(21),
				"Error was shown if user tries to save an estimated price free text item on checkout screen without selecting supplier .");

			/**
			 * RTC_337403 : Checkout >> Suppliers section of free text item >>
			 * Error should not be shown if user tries to save a need a quote
			 * free text item on checkout screen without selecting supplier .
			 **/
			// view item
			FlowRequisition.viewItemDetails(driver, testCaseName, item.getGuidedItems().get(0).getItemID());
			ModalGuidedItemDetails.clickOnSourcingStatusNeedAQuoteRadioButton(driver, testCaseName);
			ModalGuidedItemDetails.clickOnOkButton(driver, testCaseName);
			flag = !ModalGuidedItemDetails.isSupplierDetailsErrorPresent(driver, testCaseName);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(22),
				"Error was shown if user tries to save an need a quote free text item on checkout screen without selecting supplier .");

			/**
			 * RTC_342978 : Checkout>>Supplier section of free text item>>Place
			 * the order with an existing supplier section should have following
			 * fields :Supplier name , address , supplier contact , Supplier
			 * email ID , other details ,Contract/Order Number & phone .
			 **/
			// view item
			FlowRequisition.viewItemDetails(driver, testCaseName, item.getGuidedItems().get(0).getItemID());
			// supplier details tab
			ModalGuidedItemDetails.clickOnSupplierDetailsTab(driver, testCaseName);
			PageFreeTextForm.clickPlaceOrderWithExistingSupplier(driver, testCaseName);
			flag = true;
			if (!ModalGuidedItemDetails.isSupplierNameTextBoxPresentForExistingSupplier(driver, testCaseName))
			{
				flag = false;
				log += "Supplier Name Textbox was not present \n";
			}
			if (!ModalGuidedItemDetails.isSupplierAddressTextBoxPresentForExistingSupplier(driver, testCaseName))
			{
				flag = false;
				log += "Supplier Address Textbox was not present \n";
			}
			if (!ModalGuidedItemDetails.isSupplierContactTextBoxPresentForExistingSupplier(driver, testCaseName))
			{
				flag = false;
				log += "Supplier Contact Textbox was not present \n";
			}
			if (!ModalGuidedItemDetails.isSupplierEmailIdTextBoxPresentForExistingSupplier(driver, testCaseName))
			{
				flag = false;
				log += "Supplier Email Id Textbox was not present \n";
			}
			if (!ModalGuidedItemDetails.isSupplierPhoneTextBoxPresentForExistingSupplier(driver, testCaseName))
			{
				flag = false;
				log += "Supplier Phone Textbox was not present \n";
			}
			if (!ModalGuidedItemDetails.isContractNoTextBoxPresentForExistingSupplier(driver, testCaseName))
			{
				flag = false;
				log += "Contract No Textbox was not present \n";
			}
			if (!ModalGuidedItemDetails.isOtherDetailsTextBoxPresentForExistingSupplier(driver, testCaseName))
			{
				flag = false;
				log += "Other Details Textbox was not present \n";
			}
			logger.info(log);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(23), "Place the order with an existing supplier section was not have all fields");

			/**
			 * RTC_342979 : Checkout>>Supplier section of free text item>>Check
			 * maximum length in in following fields of "Place the order with an
			 * existing supplier section" : supplier contact , Supplier email ID
			 * , other details ,Contract/Order Number
			 **/
			ExistingSupplier existingSupplier_maxChar = new ExistingSupplier();
			existingSupplier_maxChar.setSupplierName(CommonServices.getTestData(IConstantsData.SUPPLIER_NAME));
			existingSupplier_maxChar.setSupplierContact(CommonServices.getTestData(IConstantsData.MAX_CHARACTER_ITEMNAME));
			existingSupplier_maxChar.setEmailId(CommonServices.getTestData(IConstantsData.MAX_CHARACTER_ITEMNAME) + "@gmail.com");
			existingSupplier_maxChar.setPhone(CommonServices.getTestData(IConstantsData.MAX_CHARACTER_ITEMNAME));
			existingSupplier_maxChar.setContractNo(CommonServices.getTestData(IConstantsData.MAX_CHARACTER_ITEMNAME));
			existingSupplier_maxChar.setOtherDetails(CommonServices.getTestData(IConstantsData.MAX_CHARACTER_ITEMNAME));
			existingSupplier_maxChar.setNextAction(IConstantsData.SAVE);

			existingSupplier_maxChar = FlowRequisition.fillExistingSupplierDetails(driver, testCaseName, existingSupplier_maxChar);
			// view item
			FlowRequisition.viewItemDetails(driver, testCaseName, item.getGuidedItems().get(0).getItemID());
			// supplier details tab
			ModalGuidedItemDetails.clickOnSupplierDetailsTab(driver, testCaseName);
			PageFreeTextForm.clickPlaceOrderWithExistingSupplier(driver, testCaseName);

			ExistingSupplier existingSupplier = FlowRequisition.getExistingSupplierDetailsInItemDetailsModal(driver, testCaseName);

			flag = existingSupplier_maxChar.getSupplierContact().contains(existingSupplier.getContractNo())
				&& existingSupplier_maxChar.getEmailId().equalsIgnoreCase(existingSupplier.getEmailId())
				&& existingSupplier_maxChar.getPhone().equalsIgnoreCase(existingSupplier.getPhone())
				&& existingSupplier_maxChar.getContractNo().equalsIgnoreCase(existingSupplier.getContractNo())
				&& existingSupplier_maxChar.getOtherDetails().equalsIgnoreCase(existingSupplier.getOtherDetails());
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(24),
				"Maximum length in following fields of 'Place the order with an existing supplier section' : supplier contact , Supplier email ID , other details ,Contract/Order Number was wrong");

			/**
			 * RTC_342980 : Checkout>>Supplier section of free text item>>Check
			 * multilingual data in in following fields of "Place the order with
			 * an existing supplier section" : supplier contact , Supplier email
			 * ID , other details ,Contract/Order Number & phone .
			 **/
			ExistingSupplier existingSupplier_multilingual = new ExistingSupplier();
			existingSupplier_multilingual.setSupplierName(CommonServices.getTestData(IConstantsData.SUPPLIER_NAME));
			existingSupplier_multilingual.setSupplierContact(CommonServices.getTestData(IConstantsData.MULTILINGUAL_CHARACTER_ITEMNAME));
			existingSupplier_multilingual.setEmailId(CommonServices.getTestData(IConstantsData.MULTILINGUAL_CHARACTER_ITEMNAME) + "@gmail.com");
			existingSupplier_multilingual.setPhone(CommonServices.getTestData(IConstantsData.MULTILINGUAL_CHARACTER_ITEMNAME));
			existingSupplier_multilingual.setContractNo(CommonServices.getTestData(IConstantsData.MULTILINGUAL_CHARACTER_ITEMNAME));
			existingSupplier_multilingual.setOtherDetails(CommonServices.getTestData(IConstantsData.MULTILINGUAL_CHARACTER_ITEMNAME));
			existingSupplier_multilingual.setNextAction(IConstantsData.SAVE);

			existingSupplier_multilingual = FlowRequisition.fillExistingSupplierDetails(driver, testCaseName, existingSupplier_multilingual);

			// view item
			FlowRequisition.viewItemDetails(driver, testCaseName, item.getGuidedItems().get(0).getItemID());
			// supplier details tab
			ModalGuidedItemDetails.clickOnSupplierDetailsTab(driver, testCaseName);
			PageFreeTextForm.clickPlaceOrderWithExistingSupplier(driver, testCaseName);

			existingSupplier = FlowRequisition.getExistingSupplierDetailsInItemDetailsModal(driver, testCaseName);

			flag = existingSupplier_multilingual.getEmailId().trim().equalsIgnoreCase(existingSupplier.getEmailId().trim())
				&& existingSupplier_multilingual.getPhone().trim().equalsIgnoreCase(existingSupplier.getPhone().trim())
				&& existingSupplier_multilingual.getContractNo().trim().equalsIgnoreCase(existingSupplier.getContractNo().trim())
				&& existingSupplier_multilingual.getOtherDetails().trim().equalsIgnoreCase(existingSupplier.getOtherDetails().trim());

			logger.info("\nflag for case 25 : " + flag);
			logger.info("\n existingSupplier_multilingual.getSupplierContact() :" + existingSupplier_multilingual.getSupplierContact().trim() + ":");
			logger.info("\n existingSupplier.getSupplierContact() :" + existingSupplier.getSupplierContact().trim() + ":");
			logger.info("\n existingSupplier_multilingual.getEmailId() :" + existingSupplier_multilingual.getEmailId().trim() + ":");
			logger.info("\n existingSupplier.getEmailId() :" + existingSupplier.getEmailId().trim() + ":");
			logger.info("\n existingSupplier_multilingual.getPhone() :" + existingSupplier_multilingual.getPhone().trim() + ":");
			logger.info("\n existingSupplier.getPhone() :" + existingSupplier.getPhone().trim().trim() + ":");
			logger.info("\n existingSupplier_multilingual.getContractNo() :" + existingSupplier_multilingual.getContractNo().trim() + ":");
			logger.info("\n existingSupplier.getContractNo() :" + existingSupplier.getContractNo().trim() + ":");
			logger.info("\n existingSupplier_multilingual.getOtherDetails() :" + existingSupplier_multilingual.getOtherDetails().trim() + ":");
			logger.info("\n existingSupplier.getOtherDetails() :" + existingSupplier.getOtherDetails().trim() + ":");

			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(25),
				"Multilingual data in following fields of 'Place the order with an existing supplier section' : supplier contact , Supplier email ID , other details ,Contract/Order Number was wrong");

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Checkout screen>> On copying a rejected
	 * requisition containing free text item with unavailable sourcing status
	 * error should be shown on requisition submit. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider", retryAnalyzer = CustomRetryListener.class)
	public void RTC_344188(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_344163"));
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_344165"));
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_344167"));
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_344166"));
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_344189"));
		Map<String, String> map = new HashMap<String, String>();
		RequisitionSettings requisitionSettings = new RequisitionSettings();
		CommonServices.startTestCase(driver, testCase, mappedTestCases);
		User user = null;
		boolean flag = false, sourcingStatusFlag = false;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);

			Requisition requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.GUIDED_ITEM);
			requisition.getItems().getGuidedItems().get(0).setSourcingStatus(IConstantsData.Estimated_price);

			// add item
			logger.info("=============== Add Item To Cart ================");
			requisition.setItems(FlowSearchListing.addItem(driver, testCaseName, requisition.getItems()));

			// verify added item
			flag = VerifyShoppingItemsWithShoppingCarts.checkIfItemsAddedToCart(driver, testCaseName, requisition.getItems());
			assertTrue("Item added to cart are wrong", flag);
			ModalShoppingCart.continueWithCart(driver, testCaseName);

			// change req settings :
			// deselect : estimated price
			requisitionSettings.setEstimatedPrice_SourcingStatus(false);

			logger.info("=============== Changing Requisition Settings  : Deselect Estimated Price Sourcing Status ================");
			sourcingStatusFlag = true;
			requisitionSettings = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings);

			// to checkout
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			PageSearchListing.clickOnCheckOutButton(driver, testCaseName);

			ActionBot.scroll(driver);
			PageRequisitionCheckOut.clickExpandAll(driver, testCaseName);

			/**
			 * RTC_344163 : Validation should not run on cart checkout even if
			 * the free text items present in cart have sourcing statuses which
			 * is no more available .
			 **/
			flag = PageRequisitionCheckOut.isItemPresentOnCheckoutPage(driver, testCaseName, requisition.getItems().getGuidedItems().get(0).getItemID());
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(0),
				"if the free text items present in cart have sourcing statuses which is no more available, then item is not added to requisition");

			/**
			 * RTC_344165 : Checkout screen>> Only available sourcing statuses
			 * should be shown on editing a free text item on checkout screen .
			 **/
			// view Item
			FlowRequisition.viewItemDetails(driver, testCaseName, requisition.getItems().getGuidedItems().get(0).getItemID());

			flag = !ModalGuidedItemDetails.isEstimatedPriceSourcingStatusPresent(driver, testCaseName)
				&& ModalGuidedItemDetails.isNeedAQuoteSourcingStatusPresent(driver, testCaseName)
				&& ModalGuidedItemDetails.isQuotedBySupplierSourcingStatusPresent(driver, testCaseName);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(1), "Only available sourcing statuses was not shown on editing a free text item on checkout screen");
			ModalGuidedItemDetails.clickOnCancelButton(driver, testCaseName);

			// select : estimated price
			logger.info("=============== Changing Requisition Settings  : select Estimated Price Sourcing Status ================");
			requisitionSettings.setEstimatedPrice_SourcingStatus(true);
			sourcingStatusFlag = false;
			requisitionSettings = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings);

			// create req
			logger.info("================= Create Requisition =================");
			// to checkout
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			PageSearchListing.clickOnCheckOutButton(driver, testCaseName);
			// to fill checkout form and submit
			requisition = FlowRequisition.fillcheckoutForm(driver, testCaseName, requisition, requisition.getItems());

			// to submit req
			FlowRequisition.submitReq(driver, testCaseName, false);

			// search req
			logger.info("================= Search Requisition =================");
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());

			// deselect : estimated price
			logger.info("=============== Changing Requisition Settings  : Deselect Estimated Price Sourcing Status ================");
			requisitionSettings.setEstimatedPrice_SourcingStatus(false);
			sourcingStatusFlag = true;
			requisitionSettings = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings);

			// search req
			logger.info("================= Search Requisition In My Requisition Tab =================");
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition in my requisition tab", requisition.isResult());

			// copy req
			logger.info("================ Copy Requisition ===============");
			FlowMyRequisitions.copyReq(driver, testCaseName, false);

			ActionBot.scroll(driver);
			PageRequisitionCheckOut.clickExpandAll(driver, testCaseName);

			/**
			 * RTC_344167 : Checkout screen>> On editing a free text item after
			 * copying a requisition only selected sourcing statuses in
			 * customize requisition setting should be shown .
			 **/
			// view Item
			FlowRequisition.viewItemDetails(driver, testCaseName, null);

			flag = !ModalGuidedItemDetails.isEstimatedPriceSourcingStatusPresent(driver, testCaseName)
				&& ModalGuidedItemDetails.isNeedAQuoteSourcingStatusPresent(driver, testCaseName)
				&& ModalGuidedItemDetails.isQuotedBySupplierSourcingStatusPresent(driver, testCaseName);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(2),
				"On editing a free text item after copying a requisition only selected sourcing statuses in customize requisition setting was not shown, other statuts were also displayed ");
			ModalGuidedItemDetails.clickOnCancelButton(driver, testCaseName);

			/**
			 * RTC_344166 : Checkout screen>> On copying a requisition
			 * containing free text item with unavailable sourcing status error
			 * should be shown on requisition submit.
			 **/
			// fill req name and select required by date
			PageRequisitionCheckOut.fillCheckoutReqName(driver, testCaseName, CommonUtilities.getReqName());
			CustomDate customDate = CommonUtilities.getTodaysDate();
			PageRequisitionCheckOut.selectRequiredByDate(driver, testCaseName, customDate.getDay(), customDate.getMonth(), customDate.getYear());

			// submit req
			FlowRequisition.submitReq(driver, testCaseName, true);

			flag = PageRequisitionCheckOut.getSourcingStatusError(driver, testCaseName, null).equalsIgnoreCase(IConstantsData.ErrorMsg_ForDeactivatedSourcingStatus);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(3),
				"On copying a requisition containing free text item with unavailable sourcing status error was not shown on requisition submit.");

			/**
			 * RTC_344189 : Checkout screen>> On copying a rejected requisition
			 * containing free text item the latest sourcing statuses available
			 * should be shown on editing item .
			 **/
			ApprovalAllRequests approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, requisition.getReqNo(), IConstantsData.REQUISITION,
				IConstantsData.REJECT);
			// reject req
			approvalAllRequests = FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

			// search req
			logger.info("================= Search Requisition In My Requisition Tab =================");
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition in my requisition tab", requisition.isResult());

			flag = PageMyRequisition.getStatusOfFirstReq(driver, testCaseName).equalsIgnoreCase(IConstantsData.REJECTED_FILTER_STATUS);
			assertTrue("Status of requisition was wrong, it should be rejected", flag);

			// copy req
			logger.info("================ Copy Requisition ===============");
			FlowMyRequisitions.copyReq(driver, testCaseName, false);

			ActionBot.scroll(driver);
			PageRequisitionCheckOut.clickExpandAll(driver, testCaseName);

			// view Item
			FlowRequisition.viewItemDetails(driver, testCaseName, null);

			flag = !ModalGuidedItemDetails.isEstimatedPriceSourcingStatusPresent(driver, testCaseName)
				&& ModalGuidedItemDetails.isNeedAQuoteSourcingStatusPresent(driver, testCaseName)
				&& ModalGuidedItemDetails.isQuotedBySupplierSourcingStatusPresent(driver, testCaseName);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(4),
				"On copying a rejected requisition containing free text item the latest sourcing statuses available was not shown on editing item .");
			ModalGuidedItemDetails.clickOnCancelButton(driver, testCaseName);

			/**
			 * RTC_344188 : Checkout screen>> On copying a rejected requisition
			 * containing free text item with unavailable sourcing status error
			 * should be shown on requisition submit.
			 **/
			// fill req name and select required by date
			PageRequisitionCheckOut.fillCheckoutReqName(driver, testCaseName, CommonUtilities.getReqName());
			PageRequisitionCheckOut.selectRequiredByDate(driver, testCaseName, customDate.getDay(), customDate.getMonth(), customDate.getYear());

			// submit req
			FlowRequisition.submitReq(driver, testCaseName, true);

			flag = PageRequisitionCheckOut.getSourcingStatusError(driver, testCaseName, null).equalsIgnoreCase(IConstantsData.ErrorMsg_ForDeactivatedSourcingStatus);
			assertTrue("On copying a rejected requisition containing free text item with unavailable sourcing status error was not shown on requisition submit.", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				if (sourcingStatusFlag)
				{
					requisitionSettings.setEstimatedPrice_SourcingStatus(true);

					logger.info("=============== Changing Requisition Settings  : select Estimated Price Sourcing Status ================");
					requisitionSettings = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings);
				}
			}
			catch (Exception e)
			{
				logger.info("Error while changing requisition setting to default values. " + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
			}
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Checkout screen>> On editing a draft
	 * forked requisition , latest sourcing statuses should be fetched . <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider", retryAnalyzer = CustomRetryListener.class)
	public void RTC_344190(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		RequisitionSettings requisitionSettings = new RequisitionSettings();
		RequisitionSettings requisitionSettings2 = new RequisitionSettings();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		boolean flag = false, forkingSettingFlag = false, sourcingStatusFlag = false;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			Requisition requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.GUIDED_ITEM);
			requisition.getItems().getGuidedItems().get(0).setSourcingStatus(IConstantsData.Estimated_price);
			requisition.setNextAction(IConstantsData.SAVE_AS_DRAFT_REQ);

			// change req setting : enable forking
			requisitionSettings2.setEnableReqForking(true);
			requisitionSettings2.setForReqByCategory(true);
			logger.info("=============== Changing Requisition Settings : Enable Category Based Forking ================");
			forkingSettingFlag = true;
			requisitionSettings2 = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings2);

			// save requisition as draft
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			logger.info("================= Create Requisition ==================");
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// search req
			logger.info("================= Search Requisition =================");
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());
			assertTrue("Status of requisition was wrong, it should be Draft", requisition.getStatus().equalsIgnoreCase(IConstantsData.DRAFT_FILTER_LABEL));

			// change req settings : unselect quoted by supplier and need a
			// quote sorcing status
			// deselect : estimated price
			requisitionSettings.setEstimatedPrice_SourcingStatus(true);

			logger.info("=============== Changing Requisition Settings : Deselect Estimated Price Sourcing Status ================");
			sourcingStatusFlag = true;
			requisitionSettings = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings);

			// search req
			logger.info("================= Search Requisition In My Requisition Tab =================");
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition in my requisition tab", requisition.isResult());

			// copy req
			logger.info("================ Edit Requisition ===============");
			FlowMyRequisitions.viewRequisition(driver, testCaseName);

			ActionBot.scroll(driver);
			PageRequisitionCheckOut.clickExpandAll(driver, testCaseName);

			// view Item
			FlowRequisition.viewItemDetails(driver, testCaseName, null);

			flag = !ModalGuidedItemDetails.isEstimatedPriceSourcingStatusPresent(driver, testCaseName)
				&& ModalGuidedItemDetails.isNeedAQuoteSourcingStatusPresent(driver, testCaseName)
				&& ModalGuidedItemDetails.isQuotedBySupplierSourcingStatusPresent(driver, testCaseName);
			assertTrue("On editing a draft forked requisition , latest sourcing statuses was not fetched", flag);
			ModalGuidedItemDetails.clickOnCancelButton(driver, testCaseName);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				requisitionSettings.setEstimatedPrice_SourcingStatus(true);

				try
				{
					if (sourcingStatusFlag)
					{
						logger.info("=============== Changing Requisition Settings : select Estimated Price Sourcing Status ================");
						requisitionSettings = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings);
					}
				}
				catch (Exception e)
				{
					logger.info("Error while changing requisition setting to default values. " + e, e);
				}

				if (forkingSettingFlag)
				{
					requisitionSettings2.setEnableReqForking(false);
					requisitionSettings2.setForReqByCategory(false);
					logger.info("=============== Changing Requisition Settings : Disable Category Based Forking ================");
					forkingSettingFlag = true;
					requisitionSettings2 = FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings2);
				}
			}
			catch (Exception e)
			{
				logger.info("Error while changing requisition setting to default values. " + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Checkout requisition >> User should be
	 * able to input values in the quantity field ( integer /decimal) according
	 * to the UOM selected in item details modal on checkout requisition page
	 * (in case of guided item )-----Test by changing the UOM <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider", retryAnalyzer = CustomRetryListener.class)
	public void RTC_343036(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		{
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_343029"));// 0
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_343030"));// 1
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_343032"));// 2
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_343033"));// 3
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_343035"));// 4
		}
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase, mappedTestCases);
		String catalogItemId, guidedItemId, enteredQuantity, log = "";
		User user = null;
		boolean flag = false;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			String uom = CommonServices.getTestData(IConstantsData.Item_UOM, 0);

			Requisition requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.BOTH);
			requisition.setNextAction(IConstantsData.NONE);
			List<String> quantityValues_positive = new ArrayList<String>();
			List<String> quantityValues_negative = new ArrayList<String>();
			List<String> quantityValues_zero = new ArrayList<String>();

			quantityValues_positive.add("1");
			quantityValues_positive.add("100000");
			quantityValues_positive.add("232435255454");
			quantityValues_positive.add("99999999999999");

			quantityValues_negative.add("0.11");
			quantityValues_negative.add("0.0009");
			quantityValues_negative.add("0.1212121313412");
			quantityValues_negative.add("0000000.23131");
			quantityValues_negative.add(".09814");

			quantityValues_zero.add("000000.000003");
			quantityValues_zero.add(".00000022");
			quantityValues_zero.add("000000");

			// create requisition
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);
			catalogItemId = requisition.getItems().getCatelogItems().get(0).getItemID();
			guidedItemId = requisition.getItems().getGuidedItems().get(0).getItemID();

			// edit item level delivery details
			PageRequisitionCheckOut.clickEditItemSummary(driver, testCaseName, catalogItemId);
			TabCheckoutItemSummary.clickItemSummaryDeliveryTab(driver, testCaseName);

			//  UOM-  each - Integer values allowed, decimal values not allowed

			/**
			 * RTC_343029 : Checkout requisition >> User should be able to input
			 * values (integer /decimal )in the quantity fiield according the
			 * UOM displayed for a particular item, in the item level delivery
			 * section
			 **/
			flag = true;
			for (String quantity : quantityValues_positive)
			{
				enteredQuantity = ModelItemSummaryDelivery.fillQuantityAtHeaderLevel(driver, testCaseName, quantity);
				if (!quantity.contains(enteredQuantity) && ModelItemSummaryDelivery.isInvalidQuantityErrorPresent(driver, testCaseName))
				{
					flag = false;
					log += quantity + " not accepted. \n";
				}
			}
			logger.info("\nflag 1 " + flag);

			flag = true;
			for (String quantity : quantityValues_negative)
			{
				enteredQuantity = ModelItemSummaryDelivery.fillQuantityAtHeaderLevel(driver, testCaseName, quantity);
				if (quantity.equalsIgnoreCase(enteredQuantity))
				{
					flag = false;
					log += quantity + " accepted. \n";
				}
			}
			logger.info("\nflag 2 " + flag);
			logger.info(log);

			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(0),
				"User was not able to input values (integer /decimal )in the quantity field according the UOM displayed for a particular item, in the item level delivery section");
			ModelItemSummaryDelivery.fillQuantityAtHeaderLevel(driver, testCaseName, Integer.toString(requisition.getItems().getCatelogItems().get(0).getQuantity()));

			/**
			 * RTC_343030 : Checkout requisition >> User should be able to input
			 * values (integer /decimal )in the quantity field according the UOM
			 * displayed for a particular item , in the item level delivery
			 * section (in case of multiple person delivery)
			 **/
			DeliveryItemSummary deliveryItemSummary = ObjectCreation.getDefaultObjectOfDeliverySplitAtItemLevel(requisition.getItems().getCatelogItems().get(0).getQuantity());
			deliveryItemSummary = FlowRequisition.fillDeliveryItemSummary(driver, testCaseName, deliveryItemSummary, catalogItemId);
			flag = true;
			log = "";
			for (String quantity : quantityValues_positive)
			{
				enteredQuantity = ModelItemSummaryDelivery.fillQuantityAtHeaderLevel(driver, testCaseName, quantity);
				if (!quantity.contains(enteredQuantity) && ModelItemSummaryDelivery.isInvalidQuantityErrorPresent(driver, testCaseName))
				{
					flag = false;
					log += quantity + " not accepted. \n";
				}
			}
			logger.info("\nflag 3 " + flag);

			flag = true;
			// !ModelItemSummaryDelivery.isInvalidQuantityErrorPresent(driver, testCaseName)
			for (String quantity : quantityValues_negative)
			{
				enteredQuantity = ModelItemSummaryDelivery.fillQuantityAtHeaderLevel(driver, testCaseName, quantity);
				if (quantity.equalsIgnoreCase(enteredQuantity))
				{
					flag = false;
					log += quantity + " accepted. \n";
				}
			}
			logger.info("\nflag 4 " + flag);

			flag = true;
			// !ModelItemSummaryDelivery.isInvalidQuantityErrorPresent(driver, testCaseName)
			for (String quantity : quantityValues_zero)
			{
				enteredQuantity = ModelItemSummaryDelivery.fillQuantityAtHeaderLevel(driver, testCaseName, quantity);
				ModelItemSummaryCommon.clickItemSummarySave(driver, testCaseName);
				if (quantity.equalsIgnoreCase(enteredQuantity) && !ModelItemSummaryDelivery.isInvalidQuantityErrorPresent(driver, testCaseName))
				{//failing here in 00000
					flag = false;
					log += quantity + " accepted. \n";
				}
			}
			logger.info("\nflag 5 " + flag);
			logger.info(log);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(1),
				"User was not able to input values (integer /decimal )in the quantity field according the UOM displayed for a particular item , in the item level delivery section (in case of multiple person delivery) ");
			ModelItemSummaryDelivery.fillQuantityAtHeaderLevel(driver, testCaseName, Integer.toString(requisition.getItems().getCatelogItems().get(0).getQuantity()));
			ModelItemSummaryCommon.clickItemSummaryCancle(driver, testCaseName);

			/**
			 * RTC_343032 : Checkout requisition >> User should be able to input
			 * values (integer /decimal )in the quantity field according the UOM
			 * displayed for a particular item, in the item level delivery
			 * section (check for item level costing)
			 **/
			CostBookingRequisitionSummary costBookingRequisitionSummary = new CostBookingRequisitionSummary();
			costBookingRequisitionSummary.setSplitCostAtLineItemLevel(true);
			costBookingRequisitionSummary.setNextAction(IConstantsData.SAVE);

			// set cc split at item level
			PageRequisitionCheckOut.clickEditHeaderInfo(driver, testCaseName);
			TabCheckoutReqSummary.clickCostBookingTab(driver, testCaseName);
			costBookingRequisitionSummary = FlowRequisition.fillCostBookingRequisitionSummary(driver, testCaseName, costBookingRequisitionSummary);

			ActionBot.scroll(driver, "400");
			PageRequisitionCheckOut.clickExpandAll(driver, testCaseName);
			PageRequisitionCheckOut.clickEditItemSummary(driver, testCaseName, catalogItemId);

			CostBookingItemSummary costBookingItemSummary = ObjectCreation.getDefaultObjectOfCCSplitAtItemLevel(true,
				requisition.getItems().getCatelogItems().get(0).getQuantity());
			costBookingItemSummary.setNextAction(IConstantsData.NONE);
			TabCheckoutItemSummary.clickItemSummaryCostBookingTab(driver, testCaseName);
			FlowRequisition.fillCostBookingItemSummary(driver, testCaseName, costBookingItemSummary, catalogItemId);

			// delivery tab
			TabCheckoutItemSummary.clickItemSummaryDeliveryTab(driver, testCaseName);

			flag = true;
			log = "";
			for (String quantity : quantityValues_positive)
			{
				enteredQuantity = ModelItemSummaryDelivery.fillQuantityAtHeaderLevel(driver, testCaseName, quantity);
				if (!quantity.contains(enteredQuantity) && ModelItemSummaryDelivery.isInvalidQuantityErrorPresent(driver, testCaseName))
				{
					flag = false;
					log += quantity + " not accepted. \n";
				}
			}
			logger.info("\nflag 6 " + flag);

			flag = true;
			for (String quantity : quantityValues_negative)
			{
				enteredQuantity = ModelItemSummaryDelivery.fillQuantityAtHeaderLevel(driver, testCaseName, quantity);
				if (quantity.equalsIgnoreCase(enteredQuantity))
				{
					flag = false;
					log += quantity + " accepted. \n";
				}
			}
			logger.info("\nflag 7 " + flag);
			logger.info(log);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(2),
				"User was not able to input values (integer /decimal )in the quantity field according the UOM displayed for a particular item, in the item level delivery section (check for item level costing)");
			ModelItemSummaryDelivery.fillQuantityAtHeaderLevel(driver, testCaseName, Integer.toString(requisition.getItems().getCatelogItems().get(0).getQuantity()));

			/**
			 * RTC_343033 : Checkout requisition >> User should be able to input
			 * values (integer /decimal )in the quantity field according the UOM
			 * displayed for a particular item , in the item level delivery
			 * section (check for item level costing with multiple person
			 * delivery )
			 **/
			DeliveryItemSummary deliveryItemSummary1 = ObjectCreation.getDefaultObjectOfDeliverySplitAtItemLevel(requisition.getItems().getCatelogItems().get(0).getQuantity());
			deliveryItemSummary1 = FlowRequisition.fillDeliveryItemSummary(driver, testCaseName, deliveryItemSummary1, catalogItemId);
			flag = true;
			log = "";
			for (String quantity : quantityValues_positive)
			{
				enteredQuantity = ModelItemSummaryDelivery.fillQuantityAtHeaderLevel(driver, testCaseName, quantity);
				if (!quantity.contains(enteredQuantity) && ModelItemSummaryDelivery.isInvalidQuantityErrorPresent(driver, testCaseName))
				{
					flag = false;
					log += quantity + " not accepted. \n";
				}
			}
			logger.info("\nflag 8 " + flag);

			flag = true;
			for (String quantity : quantityValues_negative)
			{
				enteredQuantity = ModelItemSummaryDelivery.fillQuantityAtHeaderLevel(driver, testCaseName, quantity);
				if (quantity.equalsIgnoreCase(enteredQuantity))
				{
					flag = false;
					log += quantity + " accepted. \n";
				}
			}
			logger.info("\nflag 9 " + flag);
			logger.info(log);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(3),
				"User was not able to input values (integer /decimal )in the quantity field according the UOM displayed for a particular item , in the item level delivery section (check for item level costing with multiple person delivery )");
			ModelItemSummaryCommon.clickItemSummaryCancle(driver, testCaseName);

			/**
			 * RTC_343035 : Checkout requisition >> User should be able to input
			 * values in the quantity field ( integer /decimal) according to the
			 * UOM selected in item details modal on checkout requisition page
			 * (in case of guided item )
			 **/
			PageRequisitionCheckOut.clickOnItemNameToViewItemDetails(driver, testCaseName, guidedItemId);
			flag = true;
			log = "";
			for (String quantity : quantityValues_positive)
			{
				enteredQuantity = ModalGuidedItemDetails.fillQuantity(driver, testCaseName, quantity, guidedItemId);
				if (!quantity.equalsIgnoreCase(enteredQuantity) && ModalGuidedItemDetails.isQuantityErrorPresent(driver, testCaseName))
				{
					flag = false;
					log += quantity + " not accepted. \n";
				}
			}
			logger.info("\nflag 10 " + flag);

			flag = true;
			for (String quantity : quantityValues_negative)
			{
				enteredQuantity = ModalGuidedItemDetails.fillQuantity(driver, testCaseName, quantity, guidedItemId);
				if (quantity.equalsIgnoreCase(enteredQuantity))
				{
					flag = false;
					log += quantity + " accepted. \n";
				}
			}
			logger.info("\nflag 11 " + flag);
			logger.info(log);
			CommonServices.setMappedTestCaseResult(flag, mappedTestCases.get(4),
				"User was not able to input values in the quantity field ( integer /decimal) according to the UOM selected in item details modal on checkout requisition page (in case of guided item )");

			/**
			 * RTC_343036 : Checkout requisition >> User should be able to input
			 * values in the quantity field ( integer /decimal) according to the
			 * UOM selected in item details modal on checkout requisition page
			 * (in case of guided item )-----Test by changing the UOM
			 **/

			//			String UOM = PageFreeTextForm.fillUOM(driver, testCaseName, CommonServices.getTestData(IConstantsData.Item_UOM, 0));
			//			Assert.assertTrue("uom not filles", UOM!=null);
			String UOM = ModalGuidedItemDetails.fillUOM(driver, testCaseName, CommonServices.getTestData(IConstantsData.Item_UOM, 0), guidedItemId);
			Assert.assertTrue("uom not filles", UOM != null);
			flag = true;
			log = "";
			for (String quantity : quantityValues_positive)
			{
				enteredQuantity = ModalGuidedItemDetails.fillQuantity(driver, testCaseName, quantity, guidedItemId);
				if (!quantity.contains(enteredQuantity) && ModalGuidedItemDetails.isQuantityErrorPresent(driver, testCaseName))
				{
					flag = false;
					log += quantity + " not accepted. \n";
				}
			}
			logger.info("\nflag 12 " + flag);

			flag = true;
			for (String quantity : quantityValues_negative)
			{//failing here for 0.12121111...
				enteredQuantity = ModalGuidedItemDetails.fillQuantity(driver, testCaseName, quantity, guidedItemId);
				if (!quantity.contains(enteredQuantity) || !ModalGuidedItemDetails.isQuantityErrorPresent(driver, testCaseName))
				{
					flag = false;
					log += "\n:actual :" + quantity + ".... accepted. \n enetered :" + enteredQuantity;
				}
			}
			logger.info("\nflag 13 " + flag);
			logger.info(log);

			flag = true;
			for (String quantity : quantityValues_zero)
			{
				enteredQuantity = ModalGuidedItemDetails.fillQuantity(driver, testCaseName, quantity, guidedItemId);
				ModalGuidedItemDetails.clickOnOkButton(driver, testCaseName);
				if (!quantity.contains(enteredQuantity) || !ModalGuidedItemDetails.isQuantityErrorPresent(driver, testCaseName))
				{
					flag = false;
					log += quantity + " accepted. \n";
				}
			}
			logger.info("\nflag 13 " + flag);
			logger.info(log);
			ModalGuidedItemDetails.clickOnCancelButton(driver, testCaseName);
			assertTrue(
				"User was not able to input values in the quantity field ( integer /decimal) according to the UOM selected in item details modal on checkout requisition page (in case of guided item )after changing the UOM to gm/kg",
				flag);
			//ModalGuidedItemDetails.clickOnCancelButton(driver, testCaseName);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 236919 - Total price in cart
	 * is displayed as NA for 0-price receive by quantity item <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider", retryAnalyzer = CustomRetryListener.class)
	public void RTC_343390(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		String totalAmount;
		boolean flag = false;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			Item item = ObjectCreation.getItem(IConstantsData.GUIDED_ITEM);
			item.getGuidedItems().get(0).setZeroPriceItem(true);
			item.getGuidedItems().get(0).setActivity(IConstantsData.NONE);

			item = FlowSearchListing.addItem(driver, testCaseName, item);
			ActionBot.waitForPageLoad(driver);
			totalAmount = ModalFreeTextReadyToCheckOut.getItemAmountAndCurrency(driver, testCaseName);
			totalAmount = totalAmount.substring(4);
			flag = totalAmount.contains("0.00");
			assertTrue("Total price in cart is displayed as NA for 0-price receive by quantity item", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
		}
	}

	/*********************************************
	 * Ankita's TestCases End Here
	 *****************************************************/

	/*********************************************
	 * AmitKumar's TestCases
	 *****************************************************/
	/**
	 * <b>Author: Amitkumar.dash </b> <b><br>
	 * <font color="blue">Method :</b>Multiple Buyers>>returned for amendment
	 * requisition>>Buyer/ Buyer group should be removed when user clicks on
	 * 'cross' icon present adjacent Buyer/Buyer group value. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider", retryAnalyzer = CustomRetryListener.class)
	public void RTC_352931(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_352922"));
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_352910"));
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_352900"));
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_352876"));
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_352911"));
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_352808"));
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_352840"));
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_352830"));
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase, mappedTestCases);
		User user = null;
		boolean flag = false;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			Requisition requisition = ObjectCreation.getRequisition(driver);

			Item item = ObjectCreation.getItem("catalogItem");
			requisition.setAssignedBuyer(CommonServices.getTestData(IConstantsData.BUYER_NAME));
			requisition.setItems(item);
			requisition = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);
			// click on firstbuyer link
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			PageBuyersDesk.fillReqChangeComment(driver, testCaseName, IConstantsData.REC_CHANGE_COMM);
			PageBuyersDesk.clickOnReturn(driver, testCaseName);
			// click On default confirm popup yes
			PopUpDefaultConfirmation.clickOnConfirmYesButton(driver, testCaseName);
			// search in my req page
			FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			// remove already assign buyer
			ActionBot.defaultHighSleep();
			String status = PageMyRequisition.getStatusOfFirstReq(driver, testCaseName);
			if (status.equalsIgnoreCase(IConstantsData.RETURNED_FOR_AMENDMENT_FILTER_LABEL))
			{
				PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			}
			else
			{
				FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
				PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			}

			// PageRequisitionCheckOut.clickOnRemoveAssignedBuyer(driver,
			// testCaseName);

			PageBuyersDesk.clickOnExpandAllLink(driver, testCaseName);
			PageBuyersDesk.clickEditLinkForAssignedBuyerItemLevel(driver, testCaseName);
			PageRequisitionCheckOut.clickOnRemoveAssignedBuyer(driver, testCaseName);

			// add buyer related to special char
			String assignBuyer = PageRequisitionCheckOut.fillAssignedBuyer(driver, testCaseName, CommonServices.getTestData(IConstantsData.SPECIAL_CHAR_USER));
			if (assignBuyer != null)
			{
				flag = true;
				mappedTestCases.get(0).setTestResult(flag);
				mappedTestCases.get(7).setTestResult(flag);
			}
			String maxCharUser = PageRequisitionCheckOut.fillAssignedBuyer(driver, testCaseName, CommonServices.getTestData(IConstantsData.MAX_CHAR_USER));
			if (maxCharUser != null)
			{
				flag = true;
				mappedTestCases.get(1).setTestResult(flag);
				mappedTestCases.get(2).setTestResult(flag);
			}
			String multilingualCharBuyer = PageRequisitionCheckOut.fillAssignedBuyer(driver, testCaseName, CommonServices.getTestData(IConstantsData.MULTILINGUAL_CHAR_USER));
			if (multilingualCharBuyer != null)
			{
				flag = true;
				mappedTestCases.get(3).setTestResult(flag);
				mappedTestCases.get(4).setTestResult(flag);
			}

			String groupBuyer = PageRequisitionCheckOut.fillAssignedBuyer(driver, testCaseName, CommonServices.getTestData(IConstantsData.ASSIGNED_BUYER_USER_GROUP));
			if (groupBuyer != null)
			{
				flag = true;
				mappedTestCases.get(5).setTestResult(flag);
				mappedTestCases.get(6).setTestResult(flag);
			}

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: Amitkumar.dash </b> <b><br>
	 * <font color="blue">Method :</b>Multiple Buyers>>returned for amendment
	 * requisition>>PT hidden>>Assigned buyer field should be displayed below
	 * 'on-behalf of' field on returned for amendment screen. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider", retryAnalyzer = CustomRetryListener.class)
	public void RTC_352887(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_352863"));
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase, mappedTestCases);
		User user = null;
		boolean flag = false;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);

			// navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);
			ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");
			//Master Data tab
			MainPageHeaderLevelTab.clickOnTMSMasterDataTab(driver, testCaseName);
			//Customize tab
			MainPageHeaderLevelTab.clickOnTMSCustomizeSubTab(driver, testCaseName);

			// click on cost booking link
			PageCustomizeSettings.clickOnControlLink(driver, testCaseName);
			PageMasterDataTenantLevelConfigSettings.clickOnUsethePurchaseTypeFieldToclassifyPurchasesNo(driver, testCaseName);
			PageMasterDataTenantLevelConfigSettings.clickOnSave(driver, testCaseName);

			// navigates to EPROC
			driver.get(ConfigProperty.getConfig("Product_URL"));
			ActionBot.waitForPageLoad(driver);

			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			Requisition requisition = ObjectCreation.getRequisition(driver);

			Item item = ObjectCreation.getItem("catalogItem");
			requisition.setAssignedBuyer(CommonServices.getTestData(IConstantsData.BUYER_NAME));
			requisition.setItems(item);
			requisition = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);
			// click on firstbuyer link
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			PageBuyersDesk.fillReqChangeComment(driver, testCaseName, IConstantsData.REC_CHANGE_COMM);
			PageBuyersDesk.clickOnReturn(driver, testCaseName);
			// click On default confirm popup yes
			PopUpDefaultConfirmation.clickOnConfirmYesButton(driver, testCaseName);
			// search in my req page
			FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			// remove already assign buyer
			ActionBot.defaultHighSleep();
			String status = PageMyRequisition.getStatusOfFirstReq(driver, testCaseName);
			flag = status.equalsIgnoreCase(IConstantsData.RETURNED_FOR_AMENDMENT_FILTER_LABEL);
			if (flag)
			{
				mappedTestCases.get(0).setTestResult(flag);
				PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			}
			else
			{
				FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
				PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			}
			ActionBot.defaultSleep();

			PageBuyersDesk.clickOnExpandAllLink(driver, testCaseName);
			PageBuyersDesk.clickEditLinkForAssignedBuyerItemLevel(driver, testCaseName);
			PageRequisitionCheckOut.clickOnRemoveAssignedBuyer(driver, testCaseName);

			PageBuyersDesk.clickButtonOkCostAllocationTab(driver, testCaseName);

			boolean flagResult = ActionBot.isElementPresent(driver, IPageRequisitionView.LABEL_PURCHASE_TYPE_ON_REQ_VIEW_PAGE);
			mappedTestCases.get(0).setTestResult(!flagResult);
			Assert.assertTrue("Current value of setting Use the Purchase Type field to classify purchases not considered in requisition.", !flagResult);

			// navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);
			ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");
			//Master Data tab
			MainPageHeaderLevelTab.clickOnTMSMasterDataTab(driver, testCaseName);
			//Customize tab
			MainPageHeaderLevelTab.clickOnTMSCustomizeSubTab(driver, testCaseName);
			PageCustomizeSettings.clickOnControlLink(driver, testCaseName);
			PageMasterDataTenantLevelConfigSettings.clickOnUsethePurchaseTypeFieldToclassifyPurchasesYes(driver, testCaseName);
			PageMasterDataTenantLevelConfigSettings.clickOnSave(driver, testCaseName);
			ActionBot.defaultSleep();
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				// navigates to TMS
				driver.get(ConfigProperty.getConfig("TMS_URL"));
				ActionBot.waitForPageLoad(driver);
				ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");
				//Master Data tab
				MainPageHeaderLevelTab.clickOnTMSMasterDataTab(driver, testCaseName);
				//Customize tab
				MainPageHeaderLevelTab.clickOnTMSCustomizeSubTab(driver, testCaseName);

				PageMasterDataTenantLevelConfigSettings.clickOnUsethePurchaseTypeFieldToclassifyPurchasesYes(driver, testCaseName);
				PageMasterDataTenantLevelConfigSettings.clickOnSave(driver, testCaseName);
			}
			catch (Exception e)
			{
				logger.error("Exception occurred while changing Master data setting" + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
			}
		}
	}

	/**
	 * <b>Author: Amitkumar.dash </b> <b><br>
	 * <font color="blue">Method :</b>Mulitple Buyers>>Info icon adjacent
	 * multiple in assigned buyer field in requisition view from buyers
	 * desk>>special character data should be properly displayed in tool tip.
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider", retryAnalyzer = CustomRetryListener.class)
	public void RTC_352791(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_352863"));
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase, mappedTestCases);
		User user = null;
		boolean flag = false;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			Requisition requisition = ObjectCreation.getRequisition(driver);

			Item item = ObjectCreation.getItem("catalogItem");
			requisition.setAssignedBuyer(CommonServices.getTestData(IConstantsData.SPECIAL_CHAR_USER));
			requisition.setItems(item);
			requisition = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);
			// click on firstbuyer link
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			PageBuyersDesk.fillReqChangeComment(driver, testCaseName, IConstantsData.REC_CHANGE_COMM);
			PageBuyersDesk.clickOnReturn(driver, testCaseName);
			// click On default confirm popup yes
			PopUpDefaultConfirmation.clickOnConfirmYesButton(driver, testCaseName);
			// search in my req page
			FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			// remove already assign buyer
			ActionBot.defaultHighSleep();
			String status = PageMyRequisition.getStatusOfFirstReq(driver, testCaseName);
			flag = status.contains(IConstantsData.RETURNED_FOR_AMENDMENT_FILTER_LABEL);
			mappedTestCases.get(0).setTestResult(true);
			if (flag)
			{
				PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			}
			else
			{
				FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
				PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			}

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: Amitkumar.dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 229251 - JQuery>>Requisition
	 * cannot be submitted if setting "Display the accounting information to the
	 * requester" is set to NO. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider", retryAnalyzer = CustomRetryListener.class)
	public void RTC_352637(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		// new ArrayList<>();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();
			// change settings at po customize master data
			RequisitionSettings requisitionSettings = new RequisitionSettings();
			requisitionSettings.setDisplayAccountingInfoToRequesterOption(IConstants.NO);
			FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings);
			PageRequisitionSettings.clickOnSaveButton(driver, testCaseName);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			Requisition requisition = ObjectCreation.getRequisition(driver);

			Item item = ObjectCreation.getItem("catalogItem");
			requisition.setItems(item);
			requisition.getCostBookingItemSummary().setNextAction(IConstantsData.SAVE);
			requisition.setNextAction(IConstantsData.NONE);
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);
			FlowRequisition.submitReq(driver, testCaseName, false);
			FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			String reqNo = PageMyRequisition.getFirstReqNo(driver, testCaseName);
			Assert.assertNotNull(reqNo);
			// revert settings
			requisitionSettings.setDisplayAccountingInfoToRequesterOption(IConstants.YES);
			FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings);
			PageRequisitionSettings.clickOnSaveButton(driver, testCaseName);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				RequisitionSettings requisitionSettings = new RequisitionSettings();
				requisitionSettings.setDisplayAccountingInfoToRequesterOption(IConstants.YES);
				FlowRequisitionSettings.changeRequisitionSettings(driver, testCaseName, requisitionSettings);
				PageRequisitionSettings.clickOnSaveButton(driver, testCaseName);
			}
			catch (Exception e)
			{
				logger.error("Exception occurred while changing Requisition Setting" + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}
		}
	}

	/**
	 * <b>Author: Amitkumar.dash </b> <b><br>
	 * <font color="blue">Method :</b>Multiple Buyers>>draft requisition>>Buyer/
	 * Buyer group should be removed when user clicks on 'cross' icon present
	 * adjacent Buyer/Buyer group value. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider", retryAnalyzer = CustomRetryListener.class)
	public void RTC_352929(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_352920"));
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_352907"));
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_352898"));
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_352874"));
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_352859"));
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_352806"));
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_352837"));
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_352828"));
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase, mappedTestCases);
		User user = null;
		boolean flag = false;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			Requisition requisition = ObjectCreation.getRequisition(driver);

			Item item = ObjectCreation.getItem("catalogItem");
			requisition.setAssignedBuyer(CommonServices.getTestData(IConstantsData.BUYER_NAME));
			requisition.setItems(item);
			requisition.setNextAction(IConstantsData.NONE);
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);
			FlowRequisition.saveReqAsDraft(driver, testCaseName);
			// search in my req page
			FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			// remove already assign buyer
			// ActionBot.defaultHighSleep();
			String status = PageMyRequisition.getStatusOfFirstReq(driver, testCaseName);
			if (status.equalsIgnoreCase(IConstantsData.DRAFT_FILTER_LABEL))
			{
				PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			}
			else
			{
				FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
				PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			}

			PageRequisitionCheckOut.clickOnRemoveAssignedBuyer(driver, testCaseName);

			PageBuyersDesk.clickOnExpandAllLink(driver, testCaseName);
			PageBuyersDesk.clickEditLinkForAssignedBuyerItemLevel(driver, testCaseName);
			PageRequisitionCheckOut.clickOnRemoveAssignedBuyer(driver, testCaseName);

			// add buyer related to special char
			String assignBuyer = PageRequisitionCheckOut.fillAssignedBuyer(driver, testCaseName, CommonServices.getTestData(IConstantsData.SPECIAL_CHAR_USER));
			if (assignBuyer != null)
			{
				flag = true;
				mappedTestCases.get(0).setTestResult(flag);
			}
			String maxCharUser = PageRequisitionCheckOut.fillAssignedBuyer(driver, testCaseName, CommonServices.getTestData(IConstantsData.MAX_CHAR_USER));
			if (maxCharUser != null)
			{
				flag = true;
				mappedTestCases.get(1).setTestResult(flag);
				mappedTestCases.get(2).setTestResult(flag);
			}
			String multilingualCharBuyer = PageRequisitionCheckOut.fillAssignedBuyer(driver, testCaseName, CommonServices.getTestData(IConstantsData.MULTILINGUAL_CHAR_USER));
			if (multilingualCharBuyer != null)
			{
				flag = true;
				mappedTestCases.get(3).setTestResult(flag);
				mappedTestCases.get(4).setTestResult(flag);
				mappedTestCases.get(5).setTestResult(flag);
			}
			String groupBuyer = PageRequisitionCheckOut.fillAssignedBuyer(driver, testCaseName, CommonServices.getTestData(IConstantsData.ASSIGNED_BUYER_USER_GROUP));
			if (groupBuyer != null)
			{
				flag = true;
				mappedTestCases.get(6).setTestResult(flag);
				mappedTestCases.get(7).setTestResult(flag);
			}

			PageBuyersDesk.clickButtonOkCostAllocationTab(driver, testCaseName);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: Amitkumar.dash </b> <b><br>
	 * <font color="blue">Method :</b>Multiple Buyers>>draft requisition>>PT
	 * hidden>>Assigned buyer field should be displayed below 'on-behalf of'
	 * field on draft screen. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider", retryAnalyzer = CustomRetryListener.class)
	public void RTC_352883(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();

		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_351760"));

		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase, mappedTestCases);
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);

			// navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);

			ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");

			//Master Data tab
			MainPageHeaderLevelTab.clickOnTMSMasterDataTab(driver, testCaseName);

			//Customize tab
			MainPageHeaderLevelTab.clickOnTMSCustomizeSubTab(driver, testCaseName);

			//Control link
			PageCustomizeSettings.clickOnControlLink(driver, testCaseName);

			PageMasterDataTenantLevelConfigSettings.clickOnUsethePurchaseTypeFieldToclassifyPurchasesNo(driver, testCaseName);
			PageMasterDataTenantLevelConfigSettings.clickOnSave(driver, testCaseName);

			// navigates to EPROC
			driver.get(ConfigProperty.getConfig("Product_URL"));
			ActionBot.waitForPageLoad(driver);

			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			Requisition requisition = ObjectCreation.getRequisition(driver);

			Item item = ObjectCreation.getItem("catalogItem");
			requisition.setAssignedBuyer(CommonServices.getTestData(IConstantsData.BUYER_NAME));
			requisition.setItems(item);
			requisition.setNextAction(IConstantsData.NONE);
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);
			FlowRequisition.saveReqAsDraft(driver, testCaseName);
			// search in my req page
			FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			// remove already assign buyer
			ActionBot.defaultHighSleep();
			String status = PageMyRequisition.getStatusOfFirstReq(driver, testCaseName);
			if (status.equalsIgnoreCase(IConstantsData.DRAFT_FILTER_LABEL))
			{
				PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			}
			else
			{
				FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
				PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			}

			PageBuyersDesk.clickOnExpandAllLink(driver, testCaseName);
			PageBuyersDesk.clickEditLinkForAssignedBuyerItemLevel(driver, testCaseName);
			PageRequisitionCheckOut.clickOnRemoveAssignedBuyer(driver, testCaseName);

			PageBuyersDesk.clickButtonOkCostAllocationTab(driver, testCaseName);

			boolean flag = ActionBot.isElementPresent(driver, IPageRequisitionView.LABEL_PURCHASE_TYPE_ON_REQ_VIEW_PAGE);
			mappedTestCases.get(0).setTestResult(!flag);
			Assert.assertTrue("Current value of setting Use the Purchase Type field to classify purchases not considered in draft requisition.", !flag);

			//Revert setting
			// navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);

			ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");

			//Master Data tab
			MainPageHeaderLevelTab.clickOnTMSMasterDataTab(driver, testCaseName);

			//Customize tab
			MainPageHeaderLevelTab.clickOnTMSCustomizeSubTab(driver, testCaseName);

			//Control link
			PageCustomizeSettings.clickOnControlLink(driver, testCaseName);

			PageMasterDataTenantLevelConfigSettings.clickOnUsethePurchaseTypeFieldToclassifyPurchasesYes(driver, testCaseName);
			PageMasterDataTenantLevelConfigSettings.clickOnSave(driver, testCaseName);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				// navigates to TMS
				driver.get(ConfigProperty.getConfig("TMS_URL"));
				ActionBot.waitForPageLoad(driver);

				ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");

				//Master Data tab
				MainPageHeaderLevelTab.clickOnTMSMasterDataTab(driver, testCaseName);
				//Customize tab
				MainPageHeaderLevelTab.clickOnTMSCustomizeSubTab(driver, testCaseName);
				//Control link
				PageCustomizeSettings.clickOnControlLink(driver, testCaseName);
				PageMasterDataTenantLevelConfigSettings.clickOnUsethePurchaseTypeFieldToclassifyPurchasesYes(driver, testCaseName);
				PageMasterDataTenantLevelConfigSettings.clickOnSave(driver, testCaseName);
			}
			catch (Exception e)
			{
				logger.error("Exception occurred while changing Master Data Setting" + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
			}
		}
	}

	/**
	 * <b>Author: Amitkumar.dash </b> <b><br>
	 * <font color="blue">Method :</b>Multiple Buyers>>copy requisition>>User
	 * should be able to add buyer/ buyer group which has special characters in
	 * their name. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider", retryAnalyzer = CustomRetryListener.class)
	public void RTC_352927(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_352914"));
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_352905"));
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_352881"));
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_352867"));
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_352843"));
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_352835"));
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_352795"));
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_352790"));
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase, mappedTestCases);
		User user = null;
		boolean flag = false;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			Requisition requisition = ObjectCreation.getRequisition(driver);

			Item item = ObjectCreation.getItem("catalogItem");
			requisition.setAssignedBuyerGroup(CommonServices.getTestData(IConstantsData.ASSIGNED_BUYER_USER_GROUP));
			requisition.setItems(item);
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// search in my req page
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			if (requisition != null)
			{
				flag = true;
				mappedTestCases.get(6).setTestResult(flag);
			}
			// click on Action btn of first req and copy
			PageMyRequisition.clickOnActionBtnOfFirstReq(driver, testCaseName);
			ModalMyRequisitionActions.clickOnCopyLink(driver, testCaseName);

			ActionBot.defaultMediumSleep();

			PageBuyersDesk.clickOnExpandAllLink(driver, testCaseName);
			PageBuyersDesk.clickEditLinkForAssignedBuyerItemLevel(driver, testCaseName);
			PageRequisitionCheckOut.clickOnAssignedBuyerDropdown(driver, testCaseName);
			PageRequisitionCheckOut.clickOnGroupAssignedBuyer(driver, testCaseName);
			PageRequisitionCheckOut.clickOnRemoveAssignedBuyer(driver, testCaseName);
			String buyer = PageRequisitionCheckOut.getAssignedBuyer(driver, testCaseName);
			if (buyer == null)
			{
				flag = true;
				mappedTestCases.get(7).setTestResult(flag);
			}

			String assignBuyer = PageRequisitionCheckOut.fillAssignedBuyerGroup(driver, testCaseName, CommonServices.getTestData(IConstantsData.SPECIAL_CHAR_USER));
			// add buyer related to special char
			if (assignBuyer != null)
			{
				flag = true;
				mappedTestCases.get(0).setTestResult(flag);
			}
			String maxCharUser = PageRequisitionCheckOut.fillAssignedBuyerGroup(driver, testCaseName, CommonServices.getTestData(IConstantsData.MAX_CHAR_USER));
			if (maxCharUser != null)
			{
				flag = true;
				mappedTestCases.get(1).setTestResult(flag);
				mappedTestCases.get(2).setTestResult(flag);
			}
			String multilingualCharBuyer = PageRequisitionCheckOut.fillAssignedBuyerGroup(driver, testCaseName, CommonServices.getTestData(IConstantsData.MULTILINGUAL_CHAR_USER));
			if (multilingualCharBuyer != null)
			{
				flag = true;
				mappedTestCases.get(3).setTestResult(flag);
				mappedTestCases.get(4).setTestResult(flag);
			}
			String groupBuyer = PageRequisitionCheckOut.fillAssignedBuyerGroup(driver, testCaseName, CommonServices.getTestData(IConstantsData.ASSIGNED_BUYER_USER_GROUP));
			if (groupBuyer != null)
			{
				flag = true;
				mappedTestCases.get(5).setTestResult(flag);
			}
			PageBuyersDesk.clickButtonOkCostAllocationTab(driver, testCaseName);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: Amitkumar.dash </b> <b><br>
	 * <font color="blue">Method :</b>PT Hide>>Use PT to classify purchases :
	 * YES>>Selected purchase type is not getting retained on copying/editing a
	 * requisition <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider", retryAnalyzer = CustomRetryListener.class)
	public void RTC_351809(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		{
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_351759"));
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_351761"));
		}
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase, mappedTestCases);
		User user = null;
		boolean flag = false;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			// navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);
			ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");

			//Master Data tab
			MainPageHeaderLevelTab.clickOnTMSMasterDataTab(driver, testCaseName);

			//Customize tab
			MainPageHeaderLevelTab.clickOnTMSCustomizeSubTab(driver, testCaseName);

			//Control link
			PageCustomizeSettings.clickOnControlLink(driver, testCaseName);

			//Change setting
			PageMasterDataTenantLevelConfigSettings.clickOnUsethePurchaseTypeFieldToclassifyPurchasesYes(driver, testCaseName);
			PageMasterDataTenantLevelConfigSettings.clickOnSave(driver, testCaseName);

			// navigates to EPROC
			driver.get(ConfigProperty.getConfig("Product_URL"));
			ActionBot.waitForPageLoad(driver);

			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			Requisition requisition = ObjectCreation.getRequisition(driver);

			Item item = ObjectCreation.getItem("catalogItem");
			requisition.setAssignedBuyer(CommonServices.getTestData(IConstantsData.BUYER_NAME));
			requisition.setItems(item);
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// search in my req page
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			if (requisition != null)
			{
				flag = true;
				mappedTestCases.get(0).setTestResult(flag);
			}

			ActionBot.defaultSleep();

			// click on Action btn of first req and copy
			PageMyRequisition.clickOnActionBtnOfFirstReq(driver, testCaseName);
			ModalMyRequisitionActions.clickOnCopyLink(driver, testCaseName);
			ActionBot.defaultSleep();
			Select sel = new Select(ActionBot.findElement(driver, IPageRequisitionCheckOut.PURCHASE_TYPE));
			String ptTypeFetched = sel.getFirstSelectedOption().getText().trim();

			String ptTypeSubmitted = CommonServices.getTestData(IConstantsData.PURCHASE_TYPE);

			boolean compareStatus = ptTypeFetched.equalsIgnoreCase(ptTypeSubmitted);

			assertTrue("Selected purchase type is not getting retained on copying/editing a requisition", compareStatus);

			mappedTestCases.get(1).setTestResult(compareStatus);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				// navigates to TMS
				driver.get(ConfigProperty.getConfig("TMS_URL"));
				ActionBot.waitForPageLoad(driver);
				ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");

				//Master Data tab
				MainPageHeaderLevelTab.clickOnTMSMasterDataTab(driver, testCaseName);

				//Customize tab
				MainPageHeaderLevelTab.clickOnTMSCustomizeSubTab(driver, testCaseName);

				//Control link
				PageCustomizeSettings.clickOnControlLink(driver, testCaseName);

				//Change setting
				PageMasterDataTenantLevelConfigSettings.clickOnUsethePurchaseTypeFieldToclassifyPurchasesYes(driver, testCaseName);
				PageMasterDataTenantLevelConfigSettings.clickOnSave(driver, testCaseName);
			}
			catch (Exception e)
			{
				logger.error("Exception occurred while chaning Master Data Settings" + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
			}
		}
	}

	/**
	 * <b>Author: Amitkumar.dash </b> <b><br>
	 * <font color="blue">Method :</b>Multiple Buyers>>returned with
	 * quote>>Buyer/ Buyer group should be removed when user clicks on 'cross'
	 * icon present adjacent Buyer/Buyer group value. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider", retryAnalyzer = CustomRetryListener.class)
	public void RTC_352924(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_352902"));
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_352869"));
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_352916"));
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_352801"));
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_352832"));
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_352824"));
		Map<String, String> map = new HashMap<String, String>();
		GuidedItem guidedItem = new GuidedItem();
		List<GuidedItem> guidedItems = new ArrayList<GuidedItem>();
		Item items = new Item();
		CommonServices.startTestCase(driver, testCase, mappedTestCases);
		User user = null;
		boolean flag = false;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			Requisition requisition = ObjectCreation.getRequisition(driver);

			guidedItem = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.EXISTING_SUPPLIER);
			guidedItem.setSourcingStatus(IConstantsData.Need_a_Quote);
			guidedItems.add(guidedItem);

			items.setGuidedItems(guidedItems);

			// to get requisition object
			requisition = ObjectCreation.getRequisition(driver);
			requisition.setItems(items);
			requisition.setNextAction(IConstantsData.SUBMIT_REQ);

			requisition.setAssignedBuyer(CommonServices.getTestData(IConstantsData.BUYER_NAME));
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);
			// search in buyerdesk listing
			FlowBuyersDeskListing.searchAtBuyersDeskListing(driver, testCaseName, requisition);
			// click on reqno at buyerdesk
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			// change sourcing status and price
			String itemID = items.getGuidedItems().get(0).getItemID();
			PageBuyersDesk.clickOnItemName(driver, testCaseName, itemID);
			ModalGuidedItemDetails.clickOnSourcingStatusBuyerNegotiatedPriceOnBuyersDesk(driver, testCaseName);
			String price = CommonServices.getTestData(IConstantsData.MARKET_PRICE);
			ModalGuidedItemDetails.fillPrice(driver, testCaseName, Float.parseFloat(price));
			ModalGuidedItemDetails.clickOnOkButton(driver, testCaseName);
			ModalGuidedItemDetails.clickButtonYesOnConfirmPopup(driver, testCaseName);
			// fill rech change comment
			PageBuyersDesk.fillReqChangeComment(driver, testCaseName, IConstantsData.REC_CHANGE_COMM);
			// click on return on buyerdesk
			PageBuyersDesk.clickOnReturnToRequester(driver, testCaseName);

			if (ActionBot.isElementDisplayed(driver, IModalBuyersDeskReturnRequisition.BUTTON_RETURN_REQ_FROM_MODAL_BUYERS_DESK))
			{
				ModalBuyersDeskReturnRequisition.clickOnReturnReqFromBuyersDesk(driver, testCaseName);
			}
			// search in my req page
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			// click on Action btn of first req and copy
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			ActionBot.defaultMediumSleep();
			PageBuyersDesk.clickOnExpandAllLink(driver, testCaseName);
			PageBuyersDesk.clickEditLinkForAssignedBuyerItemLevel(driver, testCaseName);
			PageRequisitionCheckOut.clickOnRemoveAssignedBuyer(driver, testCaseName);
			// add buyer related to special char
			String assignBuyer = PageRequisitionCheckOut.fillAssignedBuyer(driver, testCaseName, CommonServices.getTestData(IConstantsData.SPECIAL_CHAR_USER));
			if (assignBuyer != null)
			{
				flag = true;
				mappedTestCases.get(0).setTestResult(flag);
			}
			String maxCharUser = PageRequisitionCheckOut.fillAssignedBuyer(driver, testCaseName, CommonServices.getTestData(IConstantsData.MAX_CHAR_USER));
			if (maxCharUser != null)
			{
				flag = true;
				mappedTestCases.get(1).setTestResult(flag);
				mappedTestCases.get(2).setTestResult(flag);
			}
			String multilingualCharBuyer = PageRequisitionCheckOut.fillAssignedBuyer(driver, testCaseName, CommonServices.getTestData(IConstantsData.MULTILINGUAL_CHAR_USER));
			if (multilingualCharBuyer != null)
			{
				flag = true;
				mappedTestCases.get(3).setTestResult(flag);
			}
			String groupBuyer = PageRequisitionCheckOut.fillAssignedBuyer(driver, testCaseName, CommonServices.getTestData(IConstantsData.ASSIGNED_BUYER_USER_GROUP));
			if (groupBuyer != null)
			{
				flag = true;
				mappedTestCases.get(4).setTestResult(flag);
				mappedTestCases.get(5).setTestResult(flag);
			}
			PageBuyersDesk.clickButtonOkCostAllocationTab(driver, testCaseName);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: Amitkumar.dash </b> <b><br>
	 * <font color="blue">Method :</b>PT Hide>>Requisition>>Need a Quote>>PT
	 * will be visible/ hidden dependent on its visibility at time of
	 * submission(irrespective of setting); if buyer sends requisition to
	 * approval. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider", retryAnalyzer = CustomRetryListener.class)
	public void RTC_351784(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_351783"));
		Map<String, String> map = new HashMap<String, String>();
		GuidedItem guidedItem = new GuidedItem();
		List<GuidedItem> guidedItems = new ArrayList<GuidedItem>();
		Item items = new Item();
		CommonServices.startTestCase(driver, testCase, mappedTestCases);
		User user = null;
		boolean flag = false;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			Requisition requisition = ObjectCreation.getRequisition(driver);

			guidedItem = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.EXISTING_SUPPLIER);
			guidedItem.setSourcingStatus(IConstantsData.Need_a_Quote);
			guidedItems.add(guidedItem);

			items.setGuidedItems(guidedItems);

			// to get requisition object
			requisition = ObjectCreation.getRequisition(driver);
			requisition.setItems(items);
			requisition.setNextAction(IConstantsData.SUBMIT_REQ);

			requisition = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);
			// navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);
			ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");

			//Master Data tab
			MainPageHeaderLevelTab.clickOnTMSMasterDataTab(driver, testCaseName);

			//Customize tab
			MainPageHeaderLevelTab.clickOnTMSCustomizeSubTab(driver, testCaseName);

			//Control link
			PageCustomizeSettings.clickOnControlLink(driver, testCaseName);

			//Change setting
			PageMasterDataTenantLevelConfigSettings.clickOnUsethePurchaseTypeFieldToclassifyPurchasesNo(driver, testCaseName);
			PageMasterDataTenantLevelConfigSettings.clickOnSave(driver, testCaseName);

			// navigates to EPROC
			driver.get(ConfigProperty.getConfig("Product_URL"));
			ActionBot.waitForPageLoad(driver);

			// search in buyerdesk listing
			FlowBuyersDeskListing.searchAtBuyersDeskListing(driver, testCaseName, requisition);
			// click on reqno at buyerdesk
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			// change sourcing status and price
			String itemID = items.getGuidedItems().get(0).getItemID();
			PageBuyersDesk.clickOnItemName(driver, testCaseName, itemID);
			ModalGuidedItemDetails.clickOnSourcingStatusBuyerNegotiatedPriceOnBuyersDesk(driver, testCaseName);
			String price = CommonServices.getTestData(IConstantsData.MARKET_PRICE);
			ModalGuidedItemDetails.fillPrice(driver, testCaseName, Float.parseFloat(price));
			ModalGuidedItemDetails.clickOnOkButton(driver, testCaseName);

			ModalGuidedItemDetails.clickButtonYesOnConfirmPopup(driver, testCaseName);

			// fill req change comment
			PageBuyersDesk.fillReqChangeComment(driver, testCaseName, IConstantsData.REC_CHANGE_COMM);
			// click on return on buyerdesk
			PageBuyersDesk.clickOnReturnToRequester(driver, testCaseName);
			ModalBuyersDeskReturnRequisition.clickOnReturnReqFromBuyersDesk(driver, testCaseName);
			// search in my req page
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			if (requisition != null)
			{
				flag = true;
				mappedTestCases.get(0).setTestResult(flag);
			}
			// click on Action btn of first req and copy
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			ActionBot.defaultMediumSleep();
			// navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);
			ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");

			//Master Data tab
			MainPageHeaderLevelTab.clickOnTMSMasterDataTab(driver, testCaseName);

			//Customize tab
			MainPageHeaderLevelTab.clickOnTMSCustomizeSubTab(driver, testCaseName);

			//Control link
			PageCustomizeSettings.clickOnControlLink(driver, testCaseName);

			//Change setting
			PageMasterDataTenantLevelConfigSettings.clickOnUsethePurchaseTypeFieldToclassifyPurchasesYes(driver, testCaseName);
			PageMasterDataTenantLevelConfigSettings.clickOnSave(driver, testCaseName);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				// navigates to TMS
				driver.get(ConfigProperty.getConfig("TMS_URL"));
				ActionBot.waitForPageLoad(driver);
				ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");

				//Master Data tab
				MainPageHeaderLevelTab.clickOnTMSMasterDataTab(driver, testCaseName);

				//Customize tab
				MainPageHeaderLevelTab.clickOnTMSCustomizeSubTab(driver, testCaseName);

				//Control link
				PageCustomizeSettings.clickOnControlLink(driver, testCaseName);

				//Change setting
				PageMasterDataTenantLevelConfigSettings.clickOnUsethePurchaseTypeFieldToclassifyPurchasesYes(driver, testCaseName);
				PageMasterDataTenantLevelConfigSettings.clickOnSave(driver, testCaseName);
			}
			catch (Exception e)
			{
				logger.error("Exception occurred while changing Master Data Setting" + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
			}
		}
	}

	/**
	 * <b>Author: Amitkumar.dash </b> <b><br>
	 * <font color="blue">Method :</b>Multiple Buyers>>Ready for aproval>>User
	 * should be able to add buyer/ buyer group which has special characters in
	 * their name. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider", retryAnalyzer = CustomRetryListener.class)
	public void RTC_352908(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_352860"));
		mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_352793"));
		Map<String, String> map = new HashMap<String, String>();
		GuidedItem guidedItem = new GuidedItem();
		List<GuidedItem> guidedItems = new ArrayList<GuidedItem>();
		Item items = new Item();
		CommonServices.startTestCase(driver, testCase, mappedTestCases);
		User user = null;
		boolean flag = false;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			Requisition requisition = ObjectCreation.getRequisition(driver);

			guidedItem = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.EXISTING_SUPPLIER);
			guidedItems.add(guidedItem);
			items.setGuidedItems(guidedItems);

			// to get requisition object
			requisition = ObjectCreation.getRequisition(driver);
			requisition.setItems(items);
			requisition.setNextAction(IConstantsData.NONE);
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);
			// click on selecting approver check box
			PageRequisitionCheckOut.clickOnModifyWorkFlowSettings(driver, testCaseName);
			FlowRequisition.submitReq(driver, testCaseName, false);
			// click on my req tab
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			ActionBot.scroll(driver, "900");
			// add buyer related to special char
			PageRequisitionView.clickOnChangeBuyerLink(driver, testCaseName);

			PageRequisitionView.fillModalAssignBuyerField(driver, testCaseName, CommonServices.getTestData(IConstantsData.SPECIAL_CHAR_USER));

			ActionBot.defaultSleep();

			String mbuyer = PageRequisitionView.fillModalAssignBuyerField(driver, testCaseName, IConstantsData.MULTILINGUAL_CHAR_USER);
			if (mbuyer != null)
			{
				flag = true;
				mappedTestCases.get(0).setTestResult(flag);
				mappedTestCases.get(1).setTestResult(flag);
			}

			PageRequisitionView.clickOnModalAssignBuyerSaveBtn(driver, testCaseName);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: Amitkumar.dash </b> <b><br>
	 * <font color="blue">Method :</b>PT Hide>>Requisition>>Ready for approval
	 * >>PT will be visible/hidden based on current value of setting "Use the
	 * 'Purchase Type' field to classify purchases?" if user clicks on modify.
	 * <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider", retryAnalyzer = CustomRetryListener.class)
	public void RTC_351782(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;

		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			//Get req object
			Requisition requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			requisition.setNextAction(IConstantsData.NONE);
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// click on selecting approver check box
			PageRequisitionCheckOut.clickOnModifyWorkFlowSettings(driver, testCaseName);

			//Submit req
			FlowRequisition.submitReq(driver, testCaseName, false);

			// navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);
			ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");

			//Master Data tab
			MainPageHeaderLevelTab.clickOnTMSMasterDataTab(driver, testCaseName);

			//Customize tab
			MainPageHeaderLevelTab.clickOnTMSCustomizeSubTab(driver, testCaseName);

			//Control link
			PageCustomizeSettings.clickOnControlLink(driver, testCaseName);

			//Change setting
			PageMasterDataTenantLevelConfigSettings.clickOnUsethePurchaseTypeFieldToclassifyPurchasesNo(driver, testCaseName);
			PageMasterDataTenantLevelConfigSettings.clickOnSave(driver, testCaseName);

			// Navigates to EPROC
			driver.get(ConfigProperty.getConfig("Product_URL"));
			ActionBot.waitForPageLoad(driver);

			// click on my req tab
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);

			boolean flag = ActionBot.isElementPresent(driver, IPageRequisitionView.LABEL_PURCHASE_TYPE_ON_REQ_VIEW_PAGE);

			Assert.assertTrue("Purchase type field is displayed after Use_the_Purchase_Type_Field_To_classify_Purchases setting was set to NO", !flag);
			ActionBot.scroll(driver);

			// navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);
			ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");

			//Master Data tab
			MainPageHeaderLevelTab.clickOnTMSMasterDataTab(driver, testCaseName);

			//Customize tab
			MainPageHeaderLevelTab.clickOnTMSCustomizeSubTab(driver, testCaseName);

			//Control link
			PageCustomizeSettings.clickOnControlLink(driver, testCaseName);

			//Change setting
			PageMasterDataTenantLevelConfigSettings.clickOnUsethePurchaseTypeFieldToclassifyPurchasesYes(driver, testCaseName);
			PageMasterDataTenantLevelConfigSettings.clickOnSave(driver, testCaseName);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				// navigates to TMS
				driver.get(ConfigProperty.getConfig("TMS_URL"));
				ActionBot.waitForPageLoad(driver);
				ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");

				//Master Data tab
				MainPageHeaderLevelTab.clickOnTMSMasterDataTab(driver, testCaseName);

				//Customize tab
				MainPageHeaderLevelTab.clickOnTMSCustomizeSubTab(driver, testCaseName);

				//Control link
				PageCustomizeSettings.clickOnControlLink(driver, testCaseName);

				//Change setting
				PageMasterDataTenantLevelConfigSettings.clickOnUsethePurchaseTypeFieldToclassifyPurchasesYes(driver, testCaseName);
				PageMasterDataTenantLevelConfigSettings.clickOnSave(driver, testCaseName);

			}
			catch (Exception e)
			{
				logger.error("Exception occurred while changing Master Data Setting" + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}
		}
	}

	/**
	 * <b>Author: Amitkumar.dash </b> <b><br>
	 * <font color="blue">Method :</b>Test for bug 229516 - JQuery>>Punchout
	 * item is retained when user copies requisition which contains punchout
	 * item. <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider", retryAnalyzer = CustomRetryListener.class)
	public void RTC_352618(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		PunchoutItem punchoutItem = new PunchoutItem();
		Requisition requisition = new Requisition();
		Item item = new Item();
		List<PunchoutItem> punchoutItems = new ArrayList<PunchoutItem>();
		User user = new User();
		try
		{
			user = LoginLogoutServices.login(driver, testCase);

			// punchout item
			punchoutItem = ObjectCreation.getDefaultObjectOfPunchoutItem();
			punchoutItems.add(punchoutItem);
			item.setPunchoutItems(punchoutItems);
			requisition = ObjectCreation.getRequisition(driver);
			requisition.setEditItemLevelInfo(false);

			// empty shopping cart
			FlowShoppingCart.emptyShoppingCart(driver, testCaseName);

			// to add punchout item
			FlowPunchout.addPunchoutItemToCart(driver, testCaseName, punchoutItem);

			// to checkout
			FlowRequisition.fillcheckoutForm(driver, testCaseName, requisition, item);

			// to submit req
			FlowRequisition.submitReq(driver, testCaseName, false);

			// search req
			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				// change setting
				// change master data setting
				MainPageHeaderLevelTab.clickOnSetupAndCustomize(driver, testCaseName);
				PageCustomizeSettings.clickOnMasterDataLink(driver, testCaseName);
				PageMasterDataTenantLevelConfigSettings.clickOnUsethePurchaseTypeFieldToclassifyPurchasesYes(driver, testCaseName);
				PageMasterDataTenantLevelConfigSettings.clickOnSave(driver, testCaseName);
			}
			catch (Exception e)
			{
				logger.error("Exception occurred while changing Master Data Setting" + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}
		}

	}

	/*********************************************
	 * End of AmitKumar's TestCases
	 *****************************************************/

	/*********************************************
	 * Payal's TestCases
	 *****************************************************/

	/**
	 * <b>Author: payal.alag </b> <b>Created On : 20-Oct-2015 </b> <b>Method :
	 * RTC_375124 <b>Description : Test for bug 242066 - Script error is
	 * displayed on viewing cart or scheduled requisition </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_375124(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		{
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_375114"));
		}
		CommonServices.startTestCase(driver, testCase, mappedTestCases);
		GuidedItem guidedItem = new GuidedItem();
		List<GuidedItem> guidedItems = new ArrayList<GuidedItem>();
		Item items = new Item();
		User user = null;

		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// create req with suggested supplier
			Requisition requisition = ObjectCreation.getRequisition(driver);
			guidedItem = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.SUGGEST_NEW_SUPPLIER);
			guidedItems.add(guidedItem);
			items.setGuidedItems(guidedItems);
			requisition.setItems(items);
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);
			PageMyRequisition.fillReqName(driver, testCaseName, requisition.getReqName());
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			ActionBot.scroll(driver, "300");

			// check suggested supplier in item details
			PageRequisitionView.clickOnItemDetailsLink(driver, testCaseName);
			PageRequisitionView.clickOnSuppliersTabInItemDetails(driver, testCaseName);
			PageRequisitionView.getSuggestedSupplierNameInItemDetails(driver, testCaseName);
			boolean supplier = PageRequisitionView.isSuggestedSupplierNamePresentInItemDetails(driver, testCaseName);
			Assert.assertTrue("Suggested supplier name is not present in item details", supplier);
			mappedTestCases.get(0).setTestResult(supplier);
			PageRequisitionView.clickOnCancelItemDetailsModal(driver, testCaseName);

			/*
			 * // open scheduled req
			 * MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			 * MyRequisitionFilter myRequisitionFilter = new MyRequisitionFilter();
			 * myRequisitionFilter.setScheduledFilter(true);
			 * FlowMyRequisitions.applyMyRequisitionStatusFilter(driver, testCaseName, myRequisitionFilter);
			 * PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			 */

			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: payal.alag </b> <b>Created On : 21-Oct-2015 </b> <b>Method :
	 * RTC_348888 <b>Description : Check multilingual character support in Asset
	 * code field for item in requisition </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_348888(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		{
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_348885"));
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_348877"));
		}
		CommonServices.startTestCase(driver, testCase, mappedTestCases);
		Requisition requisition = new Requisition();
		User user = null;

		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// click asset code YES

			// navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);
			ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");
			//Master Data tab
			MainPageHeaderLevelTab.clickOnTMSMasterDataTab(driver, testCaseName);
			//Customize tab
			MainPageHeaderLevelTab.clickOnTMSCustomizeSubTab(driver, testCaseName);
			//Cost booking link
			PageCustomizeSettings.clickOnCostBookingLink(driver, testCaseName);
			PageProjectsSettings.clickOnDisplayAssetCodeForAssigningCodeToItem_Yes(driver, testCaseName);
			PageProjectsSettings.clickOnSave(driver);

			// navigates to EPROC
			driver.get(ConfigProperty.getConfig("Product_URL"));
			ActionBot.waitForPageLoad(driver);

			ScreenShot.screenshot(driver, testCaseName, "After navigating to EPROC Page");
			ActionBot.defaultSleep();
			// create requistion with multilingual asset code
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			requisition.getCostBookingItemSummary().getAccountingItemSummary().setAssetCode(CommonServices.getTestData(IConstantsData.MULTILINGUAL_ASSET_CODE));
			FlowRequisition.createRequisition(driver, testCaseName, requisition);
			PageMyRequisition.fillReqName(driver, testCaseName, requisition.getReqName());
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			ActionBot.scroll(driver, "400");

			// view req and check asset code
			PageRequisitionCheckOut.clickExpandAll(driver, testCaseName);
			PageRequisitionView.clickOnExpandAccounting(driver, testCaseName);
			boolean code = PageRequisitionView.isAssetCodePresent(driver, testCaseName);
			Assert.assertTrue("Asset code is not present", code);
			mappedTestCases.get(0).setTestResult(code);
			String str = PageRequisitionView.getAssetCode(driver, testCaseName);
			boolean flag = str.equalsIgnoreCase(CommonServices.getTestData(IConstantsData.MULTILINGUAL_ASSET_CODE)) ? true : false;
			Assert.assertTrue("Asset code is not proper", flag);
			mappedTestCases.get(1).setTestResult(flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: payal.alag </b> <b>Created On : 21-Oct-2015 </b> <b>Method :
	 * RTC_348887 <b>Description : Check special character support in Asset code
	 * field for item in requisition </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_348887(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		{
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_348873"));
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_348871"));
		}
		CommonServices.startTestCase(driver, testCase, mappedTestCases);
		Requisition requisition = new Requisition();
		User user = null;

		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// click asset code YES
			// navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);
			ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");
			//Master Data tab
			MainPageHeaderLevelTab.clickOnTMSMasterDataTab(driver, testCaseName);
			//Customize tab
			MainPageHeaderLevelTab.clickOnTMSCustomizeSubTab(driver, testCaseName);
			//Cost booking link
			PageCustomizeSettings.clickOnCostBookingLink(driver, testCaseName);
			PageProjectsSettings.clickOnDisplayAssetCodeForAssigningCodeToItem_Yes(driver, testCaseName);
			PageProjectsSettings.clickOnSave(driver);

			// navigates to EPROC
			driver.get(ConfigProperty.getConfig("Product_URL"));
			ActionBot.waitForPageLoad(driver);

			ScreenShot.screenshot(driver, testCaseName, "After navigating to EPROC Page");
			ActionBot.defaultSleep();

			// create requistion with multilingual asset code
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			requisition.getCostBookingItemSummary().getAccountingItemSummary().setAssetCode(CommonServices.getTestData(IConstantsData.SPECIAL_CHAR_ASSET_CODE));
			FlowRequisition.createRequisition(driver, testCaseName, requisition);
			PageMyRequisition.fillReqName(driver, testCaseName, requisition.getReqName());
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			ActionBot.scroll(driver, "400");

			// view req and check asset code
			PageRequisitionCheckOut.clickExpandAll(driver, testCaseName);
			PageRequisitionView.clickOnExpandAccounting(driver, testCaseName);
			boolean code = PageRequisitionView.isAssetCodePresent(driver, testCaseName);
			Assert.assertTrue("Asset code is not present", code);
			mappedTestCases.get(0).setTestResult(code);
			String str = PageRequisitionView.getAssetCode(driver, testCaseName);
			boolean flag = str.equalsIgnoreCase(CommonServices.getTestData(IConstantsData.SPECIAL_CHAR_ASSET_CODE)) ? true : false;
			Assert.assertTrue("Asset code is not proper", flag);
			mappedTestCases.get(1).setTestResult(flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: payal.alag </b> <b>Created On : 21-Oct-2015 </b> <b>Method :
	 * RTC_348886 <b>Description : Check Length validation in Asset code field
	 * for item in requisition </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_348886(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		{
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_348868"));
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_348867"));
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_348884"));
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_348876"));
		}
		CommonServices.startTestCase(driver, testCase, mappedTestCases);
		Requisition requisition = new Requisition();
		User user = null;

		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// click asset code YES

			// navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);
			ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");
			//Master Data tab
			MainPageHeaderLevelTab.clickOnTMSMasterDataTab(driver, testCaseName);
			//Customize tab
			MainPageHeaderLevelTab.clickOnTMSCustomizeSubTab(driver, testCaseName);
			//Cost booking link
			PageCustomizeSettings.clickOnCostBookingLink(driver, testCaseName);
			PageProjectsSettings.clickOnDisplayAssetCodeForAssigningCodeToItem_Yes(driver, testCaseName);
			PageProjectsSettings.clickOnSave(driver);

			// navigates to EPROC
			driver.get(ConfigProperty.getConfig("Product_URL"));
			ActionBot.waitForPageLoad(driver);

			ScreenShot.screenshot(driver, testCaseName, "After navigating to EPROC Page");
			ActionBot.defaultSleep();

			// create requistion with multilingual asset code
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			requisition.getCostBookingItemSummary().getAccountingItemSummary().setAssetCode(CommonServices.getTestData(IConstantsData.MAX_CHAR_ASSET_CODE));
			FlowRequisition.createRequisition(driver, testCaseName, requisition);
			PageMyRequisition.fillReqName(driver, testCaseName, requisition.getReqName());
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			ActionBot.scroll(driver, "400");

			// view req and check asset code
			PageRequisitionCheckOut.clickExpandAll(driver, testCaseName);
			PageRequisitionView.clickOnExpandAccounting(driver, testCaseName);
			boolean code = PageRequisitionView.isAssetCodePresent(driver, testCaseName);
			Assert.assertTrue("Asset code is not present", code);
			mappedTestCases.get(0).setTestResult(code);
			String str = PageRequisitionView.getAssetCode(driver, testCaseName);
			boolean flag = str.equalsIgnoreCase(CommonServices.getTestData(IConstantsData.MAX_CHAR_ASSET_CODE)) ? true : false;
			ActionBot.findElement(driver, IPageRequisitionView.CLOSE_ITEM_SUMMARY_MODAL).click();
			Assert.assertTrue("Asset code is not proper", flag);
			mappedTestCases.get(1).setTestResult(flag);

			// copy req
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			PageMyRequisition.fillReqName(driver, testCaseName, requisition.getReqName());
			PageMyRequisition.clickOnActionBtnOfFirstReq(driver, testCaseName);
			ModalMyRequisitionActions.clickOnCopyLink(driver, testCaseName);
			ActionBot.scroll(driver, "300");
			PageRequisitionCheckOut.clickEditItemSummary(driver, testCaseName, requisition.getItems().getCatelogItems().get(0).getItemID());
			TabCheckoutItemSummary.clickItemSummaryCostBookingTab(driver, testCaseName);

			// asset ode should be null
			String assetCode = ModelItemSummaryCostBooking.getAssetCode(driver, testCaseName, requisition.getItems().getCatelogItems().get(0).getItemID());
			boolean value = assetCode == null ? true : false;
			Assert.assertTrue("Asset value is copied on copying req, which is incorrect", value);
			mappedTestCases.get(2).setTestResult(value);
			mappedTestCases.get(3).setTestResult(value);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}

	}

	/**
	 * <b>Author: payal.alag </b> <b>Created On : 22-Oct-2015 </b> <b>Method :
	 * RTC_348881 <b>Description : Verify on submitting a requisition with
	 * changes in asset code field; a new version should be created in
	 * requisition audit trail </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_348881(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		{
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_348878"));
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_348875"));
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_344593"));

		}
		CommonServices.startTestCase(driver, testCase, mappedTestCases);
		Requisition requisition = new Requisition();
		User user = null;

		try
		{
			//Login
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);
			ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");
			//Master Data tab
			MainPageHeaderLevelTab.clickOnTMSMasterDataTab(driver, testCaseName);
			//Customize tab
			MainPageHeaderLevelTab.clickOnTMSCustomizeSubTab(driver, testCaseName);
			//Cost booking link
			PageCustomizeSettings.clickOnCostBookingLink(driver, testCaseName);
			PageProjectsSettings.clickOnDisplayAssetCodeForAssigningCodeToItem_Yes(driver, testCaseName);
			PageProjectsSettings.clickOnSave(driver);

			// navigates to EPROC
			driver.get(ConfigProperty.getConfig("Product_URL"));
			ActionBot.waitForPageLoad(driver);

			ScreenShot.screenshot(driver, testCaseName, "After navigating to EPROC Page");
			ActionBot.defaultSleep();

			// create requistion with multilingual asset code
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			requisition.getCostBookingItemSummary().getAccountingItemSummary().setAssetCode(CommonServices.getTestData(IConstantsData.MAX_CHAR_ASSET_CODE));
			requisition.setNextAction(IConstantsData.SAVE_AS_DRAFT_REQ);
			FlowRequisition.createRequisition(driver, testCaseName, requisition);
			PageMyRequisition.fillReqName(driver, testCaseName, requisition.getReqName());

			// open draft req and change asset code
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			ActionBot.scroll(driver, "400");
			String itemID = requisition.getItems().getCatelogItems().get(0).getItemID();
			PageRequisitionCheckOut.clickEditItemSummary(driver, testCaseName, itemID);
			TabCheckoutItemSummary.clickItemSummaryCostBookingTab(driver, testCaseName);
			boolean flag = ModelItemSummaryCostBooking.isAssetCodeTextboxPresent(driver, testCaseName, itemID);

			Assert.assertTrue("Asset code block is not editable", flag);
			mappedTestCases.get(0).setTestResult(flag);
			mappedTestCases.get(1).setTestResult(flag);
			mappedTestCases.get(2).setTestResult(flag);
			ModelItemSummaryCostBooking.fillAssetCode(driver, testCaseName, CommonServices.getTestData(IConstantsData.SPECIAL_CHAR_ASSET_CODE), itemID);
			ModelItemSummaryCommon.clickItemSummarySave(driver, testCaseName);
			FlowRequisition.submitReq(driver, testCaseName, true);

			// open req and check audit trial
			PageMyRequisition.fillReqName(driver, testCaseName, requisition.getReqName());
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			ActionBot.scroll(driver, "1050");
			PageRequisitionView.clickOnAuditTrail(driver, testCaseName);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}

	}

	/**
	 * <b>Author: payal.alag </b> <b>Created On : 23-Oct-2015 </b> <b>Method :
	 * RTC_348880 <b>Description : Verify User should be able to submit a
	 * requisition with empty asset code </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_348880(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		{
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_348879"));
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_348378"));
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_348870"));
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_348869"));

		}
		CommonServices.startTestCase(driver, testCase, mappedTestCases);
		Requisition requisition = new Requisition();
		User user = null;

		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);
			ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");

			//Master Data tab
			MainPageHeaderLevelTab.clickOnTMSMasterDataTab(driver, testCaseName);

			//Customize tab
			MainPageHeaderLevelTab.clickOnTMSCustomizeSubTab(driver, testCaseName);

			//Cost booking link
			PageCustomizeSettings.clickOnCostBookingLink(driver, testCaseName);
			PageProjectsSettings.clickOnDisplayAssetCodeForAssigningCodeToItem_Yes(driver, testCaseName);
			PageProjectsSettings.clickOnSave(driver);

			// navigates to EPROC
			driver.get(ConfigProperty.getConfig("Product_URL"));
			ActionBot.waitForPageLoad(driver);

			ScreenShot.screenshot(driver, testCaseName, "After navigating to EPROC Page");
			ActionBot.defaultSleep();

			// create requistion with empty asset code
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			requisition.getCostBookingItemSummary().getAccountingItemSummary().setAssetCode(null);
			requisition.setNextAction(IConstantsData.SUBMIT_REQ);
			requisition = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			// return req from buyers desk
			PageBuyersDeskListing.fillRequisitionNo(driver, testCaseName, requisition.getReqNo());
			PageBuyersDeskListing.clickOnFirstActionButton(driver, testCaseName);
			ModalBuersDeskListingActions.clickOnRejectAction(driver, testCaseName);
			ModalBuyersDeskReturnRequisition.fillReturnRequisitionComment(driver, testCaseName, IConstantsData.COMMENT_FOR_RETURN_REQUISITION);
			ModalBuyersDeskReturnRequisition.clickOnReturnReqButton(driver, testCaseName);

			// edit req at my requisition and add asset code
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			PageMyRequisition.fillReqNumberOnMyReq(driver, testCaseName, requisition.getReqNo());
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			ActionBot.scroll(driver, "400");
			String itemID = requisition.getItems().getCatelogItems().get(0).getItemID();
			PageRequisitionCheckOut.clickEditItemSummary(driver, testCaseName, itemID);
			TabCheckoutItemSummary.clickItemSummaryCostBookingTab(driver, testCaseName);
			ModelItemSummaryCostBooking.fillAssetCode(driver, testCaseName, CommonServices.getTestData(IConstantsData.ASSET_CODE), itemID);
			ModelItemSummaryCommon.clickItemSummarySave(driver, testCaseName);
			FlowRequisition.submitReq(driver, testCaseName, true);

			// open req and check asset code
			PageMyRequisition.fillReqName(driver, testCaseName, requisition.getReqName());

			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			ActionBot.scroll(driver, "400");
			PageRequisitionCheckOut.clickExpandAll(driver, testCaseName);
			PageRequisitionView.clickOnExpandAccounting(driver, testCaseName);
			boolean code = PageRequisitionView.isAssetCodePresent(driver, testCaseName);
			Assert.assertTrue("Asset code is not present", code);
			mappedTestCases.get(0).setTestResult(code);
			mappedTestCases.get(1).setTestResult(code);
			mappedTestCases.get(2).setTestResult(code);
			mappedTestCases.get(3).setTestResult(code);

			//Revert setting

			//Navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);
			ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");

			//Master Data tab
			MainPageHeaderLevelTab.clickOnTMSMasterDataTab(driver, testCaseName);

			//Customize tab
			MainPageHeaderLevelTab.clickOnTMSCustomizeSubTab(driver, testCaseName);

			//Cost booking link
			PageCustomizeSettings.clickOnCostBookingLink(driver, testCaseName);
			PageProjectsSettings.clickOnDisplayAssetCodeForAssigningCodeToItem_No(driver, testCaseName);
			PageProjectsSettings.clickOnSave(driver);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: payal.alag </b> <b>Created On : 23-Oct-2015 </b> <b>Method :
	 * RTC_348874 <b>Description : Verify in case 'Display 'Asset code' field
	 * for assigning a code to an asset item: NO'; asset code field column
	 * should not be displayed for items on viewing the requisition </font>
	 * <b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_348874(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		Requisition requisition = new Requisition();
		User user = null;

		try
		{
			// click asset code NO
			/*
			 * MainPageHeaderLevelTab.clickOnSetUpTab(driver);
			 * MainPageHeaderLevelTab.clickOnSetUpSubTab(driver);
			 * MainPageHeaderLevelTab.clickOnCustomizeSubTab(driver);
			 * PageCustomizeSettings.clickOnCostBookingLink(driver, testCaseName);
			 * PageCostBookingSettings.clickOnAccounting(driver, testCaseName);
			 * PageAccountingCostBookingSettings.clickOnDisplayAssetCodeFieldForAssigningACodeToAnAssetItem_NO(driver, testCaseName);
			 * PageProjectsSettings.clickOnSave(driver);
			 */

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);
			ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");
			//Master Data tab
			MainPageHeaderLevelTab.clickOnTMSMasterDataTab(driver, testCaseName);
			//Customize tab
			MainPageHeaderLevelTab.clickOnTMSCustomizeSubTab(driver, testCaseName);
			//Cost booking link
			PageCustomizeSettings.clickOnCostBookingLink(driver, testCaseName);
			PageProjectsSettings.clickOnDisplayAssetCodeForAssigningCodeToItem_No(driver, testCaseName);
			PageProjectsSettings.clickOnSave(driver);

			// navigates to EPROC
			driver.get(ConfigProperty.getConfig("Product_URL"));
			ActionBot.waitForPageLoad(driver);

			ScreenShot.screenshot(driver, testCaseName, "After navigating to EPROC Page");
			ActionBot.defaultSleep();

			// create requistion without asset code being present
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			requisition.setNextAction(IConstantsData.SUBMIT_REQ);
			FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// open req and check asset code
			PageMyRequisition.fillReqName(driver, testCaseName, requisition.getReqName());
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			ActionBot.scroll(driver, "400");
			PageRequisitionCheckOut.clickExpandAll(driver, testCaseName);
			PageRequisitionView.clickOnExpandAccounting(driver, testCaseName);
			boolean code = PageRequisitionView.isAssetCodePresent(driver, testCaseName);
			Assert.assertTrue("Asset code is not present", !code);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
		}
	}

	/**
	 * <b>Author: payal.alag </b> <b>Created On : 23-Oct-2015 </b> <b>Method :
	 * RTC_348882 <b>Description : Verify Requester should not be able to submit
	 * a requisition with deactivated asset code </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_348882(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		{
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_348883"));
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_348870"));
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_348869"));

		}
		CommonServices.startTestCase(driver, testCase, mappedTestCases);
		Requisition requisition = new Requisition();
		User user = null;

		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// navigates to TMS
			driver.get(ConfigProperty.getConfig("TMS_URL"));
			ActionBot.waitForPageLoad(driver);
			ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");

			//Master Data tab
			MainPageHeaderLevelTab.clickOnTMSMasterDataTab(driver, testCaseName);

			//Customize tab
			MainPageHeaderLevelTab.clickOnTMSCustomizeSubTab(driver, testCaseName);

			//Cost booking link
			PageCustomizeSettings.clickOnCostBookingLink(driver, testCaseName);
			PageProjectsSettings.clickOnDisplayAssetCodeForAssigningCodeToItem_Yes(driver, testCaseName);
			PageProjectsSettings.clickOnSave(driver);

			// navigates to EPROC
			driver.get(ConfigProperty.getConfig("Product_URL"));
			ActionBot.waitForPageLoad(driver);

			ScreenShot.screenshot(driver, testCaseName, "After navigating to EPROC Page");
			ActionBot.defaultSleep();

			// create requisition with empty asset code
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			requisition.getCostBookingItemSummary().getAccountingItemSummary().setAssetCode(CommonServices.getTestData(IConstantsData.ASSET_CODE));
			requisition.setNextAction(IConstantsData.SAVE_AS_DRAFT_REQ);
			FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// deactivate asset code used

			AssetCodeSettings assetCodeSettings = new AssetCodeSettings();
			assetCodeSettings.setChangeStatus(IConstantsData.ACTIVE_STATUS);
			FlowAssetCodes.changeStatusOfAssetCode(driver, testCaseName, CommonServices.getTestData(IConstantsData.ASSET_CODE), IConstantsData.ASSET_CODE_OPTION,
				assetCodeSettings);

			// open draft req and submit
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			PageMyRequisition.fillReqName(driver, testCaseName, requisition.getReqName());
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			ActionBot.scroll(driver, "900");
			FlowRequisition.submitReq(driver, testCaseName, true);
			boolean flag = PageRequisitionCheckOut.isValidationAlertPopupPresent(driver, testCaseName);
			mappedTestCases.get(0).setTestResult(flag);
			mappedTestCases.get(1).setTestResult(flag);
			mappedTestCases.get(2).setTestResult(flag);
			PageRequisitionCheckOut.clickOnOKForAlertPopup(driver, testCaseName);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			try
			{
				AssetCodeSettings assetCodeSettings1 = new AssetCodeSettings();
				assetCodeSettings1.setChangeStatus(IConstantsData.INACTIVE_STATUS);
				FlowAssetCodes.changeStatusOfAssetCode(driver, testCaseName, CommonServices.getTestData(IConstantsData.ASSET_CODE), IConstantsData.ASSET_CODE_OPTION,
					assetCodeSettings1);
			}

			catch (Exception e)
			{
				logger.error("Error while activating asset code" + e, e);
			}

			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
			}
		}
	}

	/**
	 * <b>Author: payal.alag </b> <b>Created On : 23-Oct-2015 </b> <b>Method :
	 * RTC_344182 <b>Description : The selected Sourcing Status has been
	 * de-activated. Please a select a new Sourcing Status to continue error
	 * should be shown on hover of error icon on submitting requisition if
	 * sourcing status of item is no more available . </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_344182(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		{
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_344176"));

		}
		CommonServices.startTestCase(driver, testCase, mappedTestCases);
		Requisition requisition = new Requisition();
		Item items = new Item();
		List<GuidedItem> guidedItems = new ArrayList<GuidedItem>();
		User user = null;

		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// add 1st item
			GuidedItem guidedItem1 = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.EXISTING_SUPPLIER);
			guidedItem1.setSourcingStatus(IConstantsData.Quoted_by_supplier);
			guidedItem1.setActivity(IConstantsData.AddAnotherItem);
			guidedItems.add(guidedItem1);

			// add 2nd item
			GuidedItem guidedItem2 = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.EXISTING_SUPPLIER);
			guidedItem2.setSourcingStatus(IConstantsData.Estimated_price);
			guidedItem2.setActivity(IConstantsData.AddAnotherItem);
			guidedItems.add(guidedItem2);

			// add 3rd item
			GuidedItem guidedItem3 = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.EXISTING_SUPPLIER);
			guidedItem3.setSourcingStatus(IConstantsData.Need_a_Quote);
			guidedItem3.setActivity(IConstantsData.AddAnotherItem);
			guidedItems.add(guidedItem3);

			items.setGuidedItems(guidedItems);
			requisition = ObjectCreation.getRequisition(driver);

			// to set non mandatory fields for req
			requisition.setCommentForSupplier(IConstantsData.COMMENT_FOR_SUPPLIER);
			requisition.setReasonForOrdering(IConstantsData.REASON_FOR_ORDERING);
			requisition.setRequired(true);

			// to create req
			requisition.setNextAction(IConstantsData.SAVE_AS_DRAFT_REQ);
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// uncheck sourcing status
			MainPageHeaderLevelTab.clickOnSetUpTab(driver);
			MainPageHeaderLevelTab.clickOnSetUpSubTab(driver);
			MainPageHeaderLevelTab.clickOnCustomizeSubTab(driver);
			PageCustomizeSettings.clickOnRequisitionLink(driver, testCaseName);
			PageRequisitionSettings.clickOnSourcingStatus_EstimatedPrice(driver, testCaseName);
			PageRequisitionSettings.clickOnSourcingStatus_NeedAQuote(driver, testCaseName);
			PageRequisitionSettings.clickOnSaveButton(driver, testCaseName);

			// open req and submit and check error
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			PageMyRequisition.fillReqName(driver, testCaseName, requisition.getReqName());
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			FlowRequisition.submitReq(driver, testCaseName, true);
			boolean status = PageRequisitionCheckOut.isSourcingStatusErrorIconPresent(driver, testCaseName);
			Assert.assertTrue("Sourcing status not available error is not displayed", status);
			mappedTestCases.get(0).setTestResult(status);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				// select sourcing status
				MainPageHeaderLevelTab.clickOnSetUpTab(driver);
				MainPageHeaderLevelTab.clickOnSetUpSubTab(driver);
				MainPageHeaderLevelTab.clickOnCustomizeSubTab(driver);
				PageCustomizeSettings.clickOnRequisitionLink(driver, testCaseName);
				PageRequisitionSettings.clickOnSourcingStatus_EstimatedPrice(driver, testCaseName);
				PageRequisitionSettings.clickOnSourcingStatus_NeedAQuote(driver, testCaseName);
				PageRequisitionSettings.clickOnSaveButton(driver, testCaseName);
			}
			catch (Exception e)
			{
				logger.error("Error while selecting sourcing status" + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
			}
		}

	}

	/**
	 * <b>Author: payal.alag </b> <b>Created On : 26-Oct-2015 </b> <b>Method :
	 * RTC_344181 <b>Description : Error should be shown on submitting a
	 * returned requisition having items with sourcing statuses which are no
	 * more available . </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_344181(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		{
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_344170"));

		}
		CommonServices.startTestCase(driver, testCase, mappedTestCases);
		Requisition requisition = new Requisition();
		Item items = new Item();
		List<GuidedItem> guidedItems = new ArrayList<GuidedItem>();
		User user = null;

		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// add 1st item
			GuidedItem guidedItem1 = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.EXISTING_SUPPLIER);
			guidedItem1.setSourcingStatus(IConstantsData.Quoted_by_supplier);
			guidedItem1.setActivity(IConstantsData.AddAnotherItem);
			guidedItems.add(guidedItem1);

			// add 2nd item
			GuidedItem guidedItem2 = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.EXISTING_SUPPLIER);
			guidedItem2.setSourcingStatus(IConstantsData.Estimated_price);
			guidedItem2.setActivity(IConstantsData.AddAnotherItem);
			guidedItems.add(guidedItem2);

			// add 3rd item
			GuidedItem guidedItem3 = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.EXISTING_SUPPLIER);
			guidedItem3.setSourcingStatus(IConstantsData.Need_a_Quote);
			guidedItem3.setActivity(IConstantsData.AddAnotherItem);
			guidedItems.add(guidedItem3);

			items.setGuidedItems(guidedItems);
			requisition = ObjectCreation.getRequisition(driver);

			// to set non mandatory fields for req
			requisition.setCommentForSupplier(IConstantsData.COMMENT_FOR_SUPPLIER);
			requisition.setReasonForOrdering(IConstantsData.REASON_FOR_ORDERING);
			requisition.setRequired(true);

			// to create req
			requisition.setNextAction(IConstantsData.SUBMIT_REQ);
			requisition = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			// uncheck sourcing status
			MainPageHeaderLevelTab.clickOnSetUpTab(driver);
			MainPageHeaderLevelTab.clickOnSetUpSubTab(driver);
			MainPageHeaderLevelTab.clickOnCustomizeSubTab(driver);
			PageCustomizeSettings.clickOnRequisitionLink(driver, testCaseName);
			PageRequisitionSettings.clickOnSourcingStatus_EstimatedPrice(driver, testCaseName);
			PageRequisitionSettings.clickOnSourcingStatus_NeedAQuote(driver, testCaseName);
			PageRequisitionSettings.clickOnSaveButton(driver, testCaseName);

			// return req from buyers desk
			MainPageHeaderLevelTab.clickOnBuyersDeskSubTab(driver, testCaseName);
			PageBuyersDeskListing.fillRequisitionNo(driver, testCaseName, requisition.getReqNo());
			PageBuyersDeskListing.clickOnFirstActionButton(driver, testCaseName);
			ModalBuersDeskListingActions.clickOnRejectAction(driver, testCaseName);
			ModalBuyersDeskReturnRequisition.fillReturnRequisitionComment(driver, testCaseName, IConstantsData.COMMENT_FOR_RETURN_REQUISITION);
			ModalBuyersDeskReturnRequisition.clickOnReturnReqButton(driver, testCaseName);

			// open req and submit again to see errors
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			PageMyRequisition.fillReqNumberOnMyReq(driver, testCaseName, requisition.getReqNo());
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			FlowRequisition.submitReq(driver, testCaseName, true);
			boolean status = PageRequisitionCheckOut.isSourcingStatusErrorIconPresent(driver, testCaseName);
			Assert.assertTrue("Sourcing status not available error is not displayed", status);
			mappedTestCases.get(0).setTestResult(status);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				// select sourcing status
				MainPageHeaderLevelTab.clickOnSetUpTab(driver);
				MainPageHeaderLevelTab.clickOnSetUpSubTab(driver);
				MainPageHeaderLevelTab.clickOnCustomizeSubTab(driver);
				PageCustomizeSettings.clickOnRequisitionLink(driver, testCaseName);
				PageRequisitionSettings.clickOnSourcingStatus_EstimatedPrice(driver, testCaseName);
				PageRequisitionSettings.clickOnSourcingStatus_NeedAQuote(driver, testCaseName);
				PageRequisitionSettings.clickOnSaveButton(driver, testCaseName);
			}
			catch (Exception e)
			{
				logger.error("Error while selecting sourcing status" + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
			}
		}
	}

	/**
	 * <b>Author: payal.alag </b> <b>Created On : 26-Oct-2015 </b> <b>Method :
	 * RTC_344180 <b>Description : Error should be shown on submitting a
	 * rejected requisition having items with sourcing statuses which are no
	 * more available . </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_344180(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		{
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_344172"));
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_342470"));

		}
		CommonServices.startTestCase(driver, testCase, mappedTestCases);
		Requisition requisition = new Requisition();
		Item items = new Item();
		List<GuidedItem> guidedItems = new ArrayList<GuidedItem>();
		User user = null;

		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// add 1st item
			GuidedItem guidedItem1 = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.EXISTING_SUPPLIER);
			guidedItem1.setSourcingStatus(IConstantsData.Quoted_by_supplier);
			guidedItem1.setActivity(IConstantsData.AddAnotherItem);
			guidedItems.add(guidedItem1);

			// add 2nd item
			GuidedItem guidedItem2 = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.EXISTING_SUPPLIER);
			guidedItem2.setSourcingStatus(IConstantsData.Estimated_price);
			guidedItem2.setActivity(IConstantsData.AddAnotherItem);
			guidedItems.add(guidedItem2);

			/*
			 * // add 3rd item
			 * GuidedItem guidedItem3 = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.EXISTING_SUPPLIER);
			 * guidedItem3.setSourcingStatus(IConstantsData.Need_a_Quote);
			 * guidedItem3.setActivity(IConstantsData.AddAnotherItem);
			 * guidedItems.add(guidedItem3);
			 */

			items.setGuidedItems(guidedItems);
			requisition = ObjectCreation.getRequisition(driver);

			// to set non mandatory fields for req
			requisition.setCommentForSupplier(IConstantsData.COMMENT_FOR_SUPPLIER);
			requisition.setReasonForOrdering(IConstantsData.REASON_FOR_ORDERING);
			requisition.setRequired(true);
			requisition.setItems(items);
			// to create req
			requisition.setNextAction(IConstantsData.SUBMIT_REQ);
			requisition.setVerifyWorkflow(false);
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			// uncheck sourcing status
			MainPageHeaderLevelTab.clickOnSetUpTab(driver);
			MainPageHeaderLevelTab.clickOnSetUpSubTab(driver);
			MainPageHeaderLevelTab.clickOnCustomizeSubTab(driver);
			PageCustomizeSettings.clickOnRequisitionLink(driver, testCaseName);
			PageRequisitionSettings.clickOnSourcingStatus_EstimatedPrice(driver, testCaseName);
			PageRequisitionSettings.clickOnSourcingStatus_NeedAQuote(driver, testCaseName);
			PageRequisitionSettings.clickOnSaveButton(driver, testCaseName);

			// reject req from all request approval page
			ApprovalAllRequests approvalAllRequests = new ApprovalAllRequests();
			approvalAllRequests.setDocumentNo(requisition.getReqNo());
			approvalAllRequests.setComment(IConstantsData.REJECT_COMMENT);
			approvalAllRequests.setActions(IConstantsData.REJECT);
			approvalAllRequests.setDocumentType(IConstantsData.REQUISITION);
			FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

			// open req and submit again to see errors
			//	MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			//		PageMyRequisition.fillReqNumberOnMyReq(driver, testCaseName, requisition.getReqNo());
			//PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			FlowMyRequisitions.editReq(driver, testCaseName);
			FlowRequisition.submitReq(driver, testCaseName, true);
			boolean status = PageRequisitionCheckOut.isSourcingStatusErrorIconPresent(driver, testCaseName);
			Assert.assertTrue("Sourcing status not available error is not displayed", status);
			mappedTestCases.get(0).setTestResult(status);
			mappedTestCases.get(1).setTestResult(status);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				// select sourcing status
				MainPageHeaderLevelTab.clickOnSetUpTab(driver);
				MainPageHeaderLevelTab.clickOnSetUpSubTab(driver);
				MainPageHeaderLevelTab.clickOnCustomizeSubTab(driver);
				PageCustomizeSettings.clickOnRequisitionLink(driver, testCaseName);
				PageRequisitionSettings.clickOnSourcingStatus_EstimatedPrice(driver, testCaseName);
				PageRequisitionSettings.clickOnSourcingStatus_NeedAQuote(driver, testCaseName);
				PageRequisitionSettings.clickOnSaveButton(driver, testCaseName);
			}
			catch (Exception e)
			{
				logger.error("Error while selecting sourcing status" + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
			}
		}
	}

	/**
	 * <b>Author: payal.alag </b> <b>Created On : 26-Oct-2015 </b> <b>Method :
	 * RTC_344179 <b>Description : Error should be shown on submitting a
	 * recalled requisition having items with sourcing statuses which are no
	 * more available . </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_344179(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		{
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_344171"));

		}
		CommonServices.startTestCase(driver, testCase, mappedTestCases);
		Requisition requisition = new Requisition();
		Item items = new Item();
		List<GuidedItem> guidedItems = new ArrayList<GuidedItem>();
		User user = null;

		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// add 1st item
			GuidedItem guidedItem1 = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.EXISTING_SUPPLIER);
			guidedItem1.setSourcingStatus(IConstantsData.Quoted_by_supplier);
			guidedItem1.setActivity(IConstantsData.AddAnotherItem);
			guidedItems.add(guidedItem1);

			// add 2nd item
			GuidedItem guidedItem2 = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.EXISTING_SUPPLIER);
			guidedItem2.setSourcingStatus(IConstantsData.Estimated_price);
			guidedItem2.setActivity(IConstantsData.AddAnotherItem);
			guidedItems.add(guidedItem2);

			// add 3rd item
			GuidedItem guidedItem3 = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.EXISTING_SUPPLIER);
			guidedItem3.setSourcingStatus(IConstantsData.Need_a_Quote);
			guidedItem3.setActivity(IConstantsData.AddAnotherItem);
			guidedItems.add(guidedItem3);

			items.setGuidedItems(guidedItems);
			requisition = ObjectCreation.getRequisition(driver);

			// to set non mandatory fields for req
			requisition.setItems(items);
			requisition.setCommentForSupplier(IConstantsData.COMMENT_FOR_SUPPLIER);
			requisition.setReasonForOrdering(IConstantsData.REASON_FOR_ORDERING);
			requisition.setRequired(true);

			// to create req
			requisition.setNextAction(IConstantsData.SUBMIT_REQ);
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// uncheck sourcing status
			MainPageHeaderLevelTab.clickOnSetUpTab(driver);
			MainPageHeaderLevelTab.clickOnSetUpSubTab(driver);
			MainPageHeaderLevelTab.clickOnCustomizeSubTab(driver);
			PageCustomizeSettings.clickOnRequisitionLink(driver, testCaseName);
			PageRequisitionSettings.clickOnSourcingStatus_EstimatedPrice(driver, testCaseName);
			PageRequisitionSettings.clickOnSourcingStatus_NeedAQuote(driver, testCaseName);
			PageRequisitionSettings.clickOnSaveButton(driver, testCaseName);

			// recall req from my requisition page
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			PageMyRequisition.fillReqNumberOnMyReq(driver, testCaseName, requisition.getReqNo());
			PageMyRequisition.clickOnActionBtnOfFirstReq(driver, testCaseName);
			ModalMyRequisitionActions.clickOnRecallApproveRequestLink(driver, testCaseName);
			ModalRecallApprovalRequest.fillRecallComment(driver, testCaseName, IConstantsData.RECALL_APPROVAL_REQUEST_COMMENT);
			ModalRecallApprovalRequest.clickOnRecallButton(driver, testCaseName);

			// open req and submit again to check errors
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			FlowRequisition.submitReq(driver, testCaseName, true);
			boolean status = PageRequisitionCheckOut.isSourcingStatusErrorIconPresent(driver, testCaseName);
			Assert.assertTrue("Sourcing status not available error is not displayed", status);
			mappedTestCases.get(0).setTestResult(status);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				// select sourcing status
				MainPageHeaderLevelTab.clickOnSetUpTab(driver);
				MainPageHeaderLevelTab.clickOnSetUpSubTab(driver);
				MainPageHeaderLevelTab.clickOnCustomizeSubTab(driver);
				PageCustomizeSettings.clickOnRequisitionLink(driver, testCaseName);
				PageRequisitionSettings.clickOnSourcingStatus_EstimatedPrice(driver, testCaseName);
				PageRequisitionSettings.clickOnSourcingStatus_NeedAQuote(driver, testCaseName);
				PageRequisitionSettings.clickOnSaveButton(driver, testCaseName);
			}
			catch (Exception e)
			{
				logger.error("Error while selecting sourcing status" + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
			}
		}
	}

	/**
	 * <b>Author: payal.alag </b> <b>Created On : 28-Oct-2015 </b> <b>Method :
	 * RTC_344178 <b>Description : On modifying a requisition present in ready
	 * for approval state the latest sourcing statuses available should be shown
	 * on editing item . </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_344178(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		Requisition requisition = new Requisition();
		Item items = new Item();
		List<GuidedItem> guidedItems = new ArrayList<GuidedItem>();
		User user = null;

		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// add 1st item
			GuidedItem guidedItem1 = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.EXISTING_SUPPLIER);
			guidedItem1.setSourcingStatus(IConstantsData.Quoted_by_supplier);
			guidedItem1.setActivity(IConstantsData.AddAnotherItem);
			guidedItems.add(guidedItem1);

			// add 2nd item
			GuidedItem guidedItem2 = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.EXISTING_SUPPLIER);
			guidedItem2.setSourcingStatus(IConstantsData.Estimated_price);
			guidedItem2.setActivity(IConstantsData.AddAnotherItem);
			guidedItems.add(guidedItem2);

			items.setGuidedItems(guidedItems);
			requisition = ObjectCreation.getRequisition(driver);

			// to set non mandatory fields for req
			requisition.setCommentForSupplier(IConstantsData.COMMENT_FOR_SUPPLIER);
			requisition.setReasonForOrdering(IConstantsData.REASON_FOR_ORDERING);
			requisition.setRequired(true);

			// to create req
			requisition.setNextAction(IConstantsData.NONE);
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);
			PageRequisitionCheckOut.clickOnModifyWorkFlowSettings(driver, testCaseName);
			FlowRequisition.submitReq(driver, testCaseName, true);

			// uncheck sourcing status
			MainPageHeaderLevelTab.clickOnSetUpTab(driver);
			MainPageHeaderLevelTab.clickOnSetUpSubTab(driver);
			MainPageHeaderLevelTab.clickOnCustomizeSubTab(driver);
			PageCustomizeSettings.clickOnRequisitionLink(driver, testCaseName);
			PageRequisitionSettings.clickOnSourcingStatus_EstimatedPrice(driver, testCaseName);
			PageRequisitionSettings.clickOnSourcingStatus_NeedAQuote(driver, testCaseName);
			PageRequisitionSettings.clickOnSaveButton(driver, testCaseName);

			// Modify Ready for Approval req
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			PageMyRequisition.fillReqNumberOnMyReq(driver, testCaseName, requisition.getReqNo());
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			PageRequisitionView.clickOnModifyRequisitionLink(driver, testCaseName);
			PopUpDefaultConfirmation.clickOnConfirmYesButton(driver, testCaseName);
			PageRequisitionCheckOut.clickOnItemNameToViewItemDetails(driver, testCaseName, requisition.getItems().getGuidedItems().get(0).getItemID());
			ModelItemSummaryCommon.clickItemSummarySave(driver, testCaseName);
			PageRequisitionCheckOut.clickOnItemNameToViewItemDetails(driver, testCaseName, requisition.getItems().getGuidedItems().get(1).getItemID());
			ModelItemSummaryCommon.clickItemSummaryCancle(driver, testCaseName);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				// select sourcing status
				MainPageHeaderLevelTab.clickOnSetUpTab(driver);
				MainPageHeaderLevelTab.clickOnSetUpSubTab(driver);
				MainPageHeaderLevelTab.clickOnCustomizeSubTab(driver);
				PageCustomizeSettings.clickOnRequisitionLink(driver, testCaseName);
				PageRequisitionSettings.clickOnSourcingStatus_EstimatedPrice(driver, testCaseName);
				PageRequisitionSettings.clickOnSourcingStatus_NeedAQuote(driver, testCaseName);
				PageRequisitionSettings.clickOnSaveButton(driver, testCaseName);
			}
			catch (Exception e)
			{
				logger.error("Error while selecting sourcing status" + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}
		}
	}

	/**
	 * <b>Author: payal.alag </b> <b>Created On : 28-Oct-2015 </b> <b>Method :
	 * RTC_344177 <b>Description : Items sourcing status validation should not
	 * run on submitting a requisition from ready for approval state . </font>
	 * <b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_344177(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		Requisition requisition = new Requisition();
		Item items = new Item();
		List<GuidedItem> guidedItems = new ArrayList<GuidedItem>();
		User user = null;

		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// add 1st item
			GuidedItem guidedItem1 = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.EXISTING_SUPPLIER);
			guidedItem1.setSourcingStatus(IConstantsData.Quoted_by_supplier);
			guidedItem1.setActivity(IConstantsData.AddAnotherItem);
			guidedItems.add(guidedItem1);

			// add 2nd item
			GuidedItem guidedItem2 = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.EXISTING_SUPPLIER);
			guidedItem2.setSourcingStatus(IConstantsData.Estimated_price);
			guidedItem2.setActivity(IConstantsData.AddAnotherItem);
			guidedItems.add(guidedItem2);

			items.setGuidedItems(guidedItems);
			requisition = ObjectCreation.getRequisition(driver);

			// to set non mandatory fields for req
			requisition.setCommentForSupplier(IConstantsData.COMMENT_FOR_SUPPLIER);
			requisition.setReasonForOrdering(IConstantsData.REASON_FOR_ORDERING);
			requisition.setRequired(true);

			// to create req
			requisition.setNextAction(IConstantsData.NONE);
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);
			PageRequisitionCheckOut.clickOnModifyWorkFlowSettings(driver, testCaseName);
			FlowRequisition.submitReq(driver, testCaseName, true);

			// uncheck sourcing status
			MainPageHeaderLevelTab.clickOnSetUpTab(driver);
			MainPageHeaderLevelTab.clickOnSetUpSubTab(driver);
			MainPageHeaderLevelTab.clickOnCustomizeSubTab(driver);
			PageCustomizeSettings.clickOnRequisitionLink(driver, testCaseName);
			PageRequisitionSettings.clickOnSourcingStatus_EstimatedPrice(driver, testCaseName);
			PageRequisitionSettings.clickOnSourcingStatus_NeedAQuote(driver, testCaseName);
			PageRequisitionSettings.clickOnSaveButton(driver, testCaseName);

			// Submit Ready for Approval req
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			PageMyRequisition.fillReqNumberOnMyReq(driver, testCaseName, requisition.getReqNo());
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			PageRequisitionView.clickOnSubmitForApproval(driver, testCaseName);
			PageMyRequisition.fillReqNumberOnMyReq(driver, testCaseName, requisition.getReqNo());
			String status = PageMyRequisition.getStatusOfFirstReq(driver, testCaseName);
			boolean flag = status.equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL);
			Assert.assertTrue("Ready for approval req with deactivated sourcing status has not been submitted successfully", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				// select sourcing status
				MainPageHeaderLevelTab.clickOnSetUpTab(driver);
				MainPageHeaderLevelTab.clickOnSetUpSubTab(driver);
				MainPageHeaderLevelTab.clickOnCustomizeSubTab(driver);
				PageCustomizeSettings.clickOnRequisitionLink(driver, testCaseName);
				PageRequisitionSettings.clickOnSourcingStatus_EstimatedPrice(driver, testCaseName);
				PageRequisitionSettings.clickOnSourcingStatus_NeedAQuote(driver, testCaseName);
				PageRequisitionSettings.clickOnSaveButton(driver, testCaseName);
			}
			catch (Exception e)
			{
				logger.error("Error while selecting sourcing status" + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}
		}
	}

	/**
	 * <b>Author: payal.alag </b> <b>Created On : 28-Oct-2015 </b> <b>Method :
	 * RTC_344169 <b>Description : Sourcing statuses should be shown properly on
	 * viewing requisition having sourcing status that is no more available .
	 * </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_344169(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		Requisition requisition = new Requisition();
		Item items = new Item();
		List<GuidedItem> guidedItems = new ArrayList<GuidedItem>();
		User user = null;

		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// add 1st item
			GuidedItem guidedItem1 = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.EXISTING_SUPPLIER);
			guidedItem1.setSourcingStatus(IConstantsData.Quoted_by_supplier);
			guidedItem1.setActivity(IConstantsData.AddAnotherItem);
			guidedItems.add(guidedItem1);

			// add 2nd item
			GuidedItem guidedItem2 = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.EXISTING_SUPPLIER);
			guidedItem2.setSourcingStatus(IConstantsData.Estimated_price);
			guidedItem2.setActivity(IConstantsData.AddAnotherItem);
			guidedItems.add(guidedItem2);

			// add 3rd item
			GuidedItem guidedItem3 = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.EXISTING_SUPPLIER);
			guidedItem3.setSourcingStatus(IConstantsData.Need_a_Quote);
			guidedItem3.setActivity(IConstantsData.Checkout);
			guidedItems.add(guidedItem3);

			items.setGuidedItems(guidedItems);
			requisition = ObjectCreation.getRequisition(driver);

			// to set non mandatory fields for req
			requisition.setCommentForSupplier(IConstantsData.COMMENT_FOR_SUPPLIER);
			requisition.setReasonForOrdering(IConstantsData.REASON_FOR_ORDERING);
			requisition.setRequired(true);

			// to create req
			requisition.setItems(items);
			requisition.setNextAction(IConstantsData.SUBMIT_REQ);
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// uncheck sourcing status
			MainPageHeaderLevelTab.clickOnSetUpTab(driver);
			MainPageHeaderLevelTab.clickOnSetUpSubTab(driver);
			MainPageHeaderLevelTab.clickOnCustomizeSubTab(driver);
			PageCustomizeSettings.clickOnRequisitionLink(driver, testCaseName);
			PageRequisitionSettings.clickOnSourcingStatus_EstimatedPrice(driver, testCaseName);
			PageRequisitionSettings.clickOnSourcingStatus_NeedAQuote(driver, testCaseName);
			PageRequisitionSettings.clickOnSaveButton(driver, testCaseName);

			// view req and check sourcing status
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			PageMyRequisition.fillReqNumberOnMyReq(driver, testCaseName, requisition.getReqNo());
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			// open 1st item
			PageRequisitionView.clickOnItemName(driver, testCaseName, requisition.getItems().getGuidedItems().get(0).getItemID());
			PageRequisitionView.clickOnCancelItemDetailsModal(driver, testCaseName);
			// open 2nd item
			PageRequisitionView.clickOnItemName(driver, testCaseName, requisition.getItems().getGuidedItems().get(1).getItemID());
			PageRequisitionView.clickOnCancelItemDetailsModal(driver, testCaseName);
			// open 3rd item
			PageRequisitionView.clickOnItemName(driver, testCaseName, requisition.getItems().getGuidedItems().get(2).getItemID());
			PageRequisitionView.clickOnCancelItemDetailsModal(driver, testCaseName);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			try
			{
				// select sourcing status
				MainPageHeaderLevelTab.clickOnSetUpTab(driver);
				MainPageHeaderLevelTab.clickOnSetUpSubTab(driver);
				MainPageHeaderLevelTab.clickOnCustomizeSubTab(driver);
				PageCustomizeSettings.clickOnRequisitionLink(driver, testCaseName);
				PageRequisitionSettings.clickOnSourcingStatus_EstimatedPrice(driver, testCaseName);
				PageRequisitionSettings.clickOnSourcingStatus_NeedAQuote(driver, testCaseName);
				PageRequisitionSettings.clickOnSaveButton(driver, testCaseName);
			}
			catch (Exception e)
			{
				logger.error("Error while selecting sourcing status" + e, e);
			}
			finally
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}
		}
	}

	/**
	 * <b>Author: payal.alag </b> <b>Created On : 29-Oct-2015 </b> <b>Method :
	 * RTC_349326 <b>Description : Requisition>> 'Close' action will be
	 * available only for those requisitions which have atleast one PO in
	 * released state </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_349326(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		{
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_349324"));
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_349323"));
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_349320"));
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_349310"));
		}
		CommonServices.startTestCase(driver, testCase, mappedTestCases);
		Requisition requisition = new Requisition();
		User user = null;
		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// create req
			//requisition = ObjectCreation.getRequisition(driver);

			//Item item = ObjectCreation.getItem("guidedItem");

			//	requisition.setItems(item);
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.GUIDED_ITEM);
			requisition.getItems().getGuidedItems().get(0).setReceiveBy(IConstantsData.Amount);
			CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			// convert To Po and PO as draft
			// PageBuyersDeskListing.clickOnFirstReqNoLink(driver,
			// testCaseName);
			PageBuyersDeskListing.clickOnCheckboxOfReqToBeSelected(driver, testCaseName, 1);
			PageBuyersDeskListing.clickOnConvertToPoButton(driver, testCaseName);
			ActionBot.defaultSleep();
			PagePurchaseOrderToBeGenerated.ClikOnPurchaseOrderToBeGeneratedCheckBox(driver, testCaseName, 0);
			PagePurchaseOrderToBeGenerated.clickOnSavePosAsDraft(driver, testCaseName);
			String poNo = PagePurchaseOrderListing.getFirstPoNo(driver, testCaseName);
			String status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
			status.equalsIgnoreCase(IConstantsData.DRAFT_FILTER_LABEL);

			// check actions of req
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			PageMyRequisition.fillReqNumberOnMyReq(driver, testCaseName, requisition.getReqNo());
			PageMyRequisition.clickOnActionBtnOfFirstReq(driver, testCaseName);
			boolean flag = ModalMyRequisitionActions.isCloseLinkPresent(driver, testCaseName);
			Assert.assertTrue("Close action is present, which is wrong", !flag);

			// release PO
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			PagePurchaseOrderListing.fillPoNo(driver, testCaseName, poNo);
			PagePurchaseOrderListing.clickOnFirstPoNo(driver, testCaseName);
			PageStandardPO.selectDeliveryTerms(driver, CommonServices.getTestData(IConstantsData.DELIVERY_TERMS));
			FlowStandardPo.submitPoForProcessing(driver, testCaseName);
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			FlowPoListing.approveAndReleasePO(driver, testCaseName, poNo);

			// check actions of req after releasing PO
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			PageMyRequisition.fillReqName(driver, testCaseName, requisition.getReqName());
			PageMyRequisition.clickOnActionBtnOfFirstReq(driver, testCaseName);
			boolean flag1 = ModalMyRequisitionActions.isCloseLinkPresent(driver, testCaseName);
			Assert.assertTrue("Close action is not present", flag1);
			mappedTestCases.get(1).setTestResult(flag1);
			mappedTestCases.get(2).setTestResult(flag1);

			// close PO
			MainPageHeaderLevelTab.clickOnPOTab(driver);
			PagePurchaseOrderListing.fillPoNo(driver, testCaseName, poNo);
			PagePurchaseOrderListing.clickOnActionsDropdownLink(driver, testCaseName, 1);
			ModalPOActions.clickOnClosePOFromActions(driver, testCaseName);
			ModalClosePO.fillCloseComment(driver, testCaseName, IConstantsData.CLOSE_PO_COMMENT);
			ModalClosePO.clickOnClosePO(driver, testCaseName);
			ActionBot.defaultMediumSleep();
			// close Req
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			PageMyRequisition.fillReqName(driver, testCaseName, requisition.getReqName());
			PageMyRequisition.clickOnActionBtnOfFirstReq(driver, testCaseName);
			ModalMyRequisitionActions.clickOnCloseLink(driver, testCaseName);
			ModalCloseReq.fillCloseComment(driver, testCaseName, IConstantsData.CLOSE_PO_COMMENT);
			ModalCloseReq.clickOnCloseReqButton(driver, testCaseName);
			//PageMyRequisition.clickOnActionBtnOfFirstReq(driver, testCaseName);

			// open req and check audit trial
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			ActionBot.scroll(driver, "1050");
			if (!(ActionBot.isElementDisplayed(driver, IPageRequisitionView.LINK_FILTER_DROP_DOWN)))
			{
				PageRequisitionView.clickOnAuditTrail(driver, testCaseName);
			}

			PageRequisitionView.clickOnClearFilterLink(driver, testCaseName);
			String action = PageRequisitionView.getAuditTrailAction(driver, testCaseName, 1);
			boolean flag2 = action.contains("closed") ? true : false;
			Assert.assertTrue("Req closed action is not shown on audit trial", flag2);
			mappedTestCases.get(0).setTestResult(flag2);
			mappedTestCases.get(3).setTestResult(flag2);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}
	}

	/**
	 * <b>Author: payal.alag </b> <b>Created On : 02-Nov-2015 </b> <b>Method :
	 * RTC_338065 <b>Description : Ready for approval page >>workflow loaded >>
	 * " aasign buyer " link >> list of user in auto complete should have
	 * atleast one of the buyer activity </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_338065(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		Requisition requisition = new Requisition();
		User user = null;

		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// create req
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			requisition.setAssignedBuyer(null);
			requisition.setNextAction(IConstantsData.NONE);
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);
			PageRequisitionCheckOut.clickOnModifyWorkFlowSettings(driver, testCaseName);
			FlowRequisition.submitReq(driver, testCaseName, true);

			// open Ready for Approval req
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			PageMyRequisition.fillReqName(driver, testCaseName, requisition.getReqName());
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);

			// check and assign assigned buyer with Buyer ABD activity
			//			ActionBot.scroll(driver, "500");
			//			ActionBot.click(driver, By.xpath(".//*[contains(@id,'itemGroup_')]//a[text()='Expand All']"));
			((JavascriptExecutor) driver).executeScript("window.scrollBy(0,400);");
			PageRequisitionCheckOut.clickExpandAll(driver, testCaseName);
			ActionBot.defaultSleep();

			//PageRequisitionCheckOut.clickEditItemSummary(driver, testCaseName, requisition.getItems().getCatelogItems().get(0).getItemID());
			PageRequisitionView.clickOnAssignBuyerlink(driver, testCaseName);
			ModalAddAssignedBuyer.fillAssignedBuyerName(driver, testCaseName, "kunal");
			ModalAddAssignedBuyer.clickOnSaveAssignedBuyerButton(driver, testCaseName);

			// check ans assign assigned buyer with Buyer SARS activity
			PageRequisitionView.clickOnAssignBuyerlink(driver, testCaseName);
			ModalAddAssignedBuyer.fillAssignedBuyerName(driver, testCaseName, "pratik");
			ModalAddAssignedBuyer.clickOnSaveAssignedBuyerButton(driver, testCaseName);

			// check and assign assigned buyer with Buyer SRARS activity
			PageRequisitionView.clickOnAssignBuyerlink(driver, testCaseName);
			ModalAddAssignedBuyer.fillAssignedBuyerName(driver, testCaseName, "priti");
			ModalAddAssignedBuyer.clickOnSaveAssignedBuyerButton(driver, testCaseName);

			PageRequisitionView.clickOnSubmitForApproval(driver, testCaseName);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: payal.alag </b> <b>Created On : 02-Nov-2015 </b> <b>Method :
	 * RTC_338043 <b>Description : Return for amendment requisition >> assigned
	 * buyer autocomplete>> users in the autocomplete should be the ones having
	 * at least one of the buyer desk activity </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_338038(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		Requisition requisition = new Requisition();
		User user = null;

		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// create req
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			requisition.setAssignedBuyer(null);
			CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			// return req from buyers desk

			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			FlowBuyersDesk.returnReqWithQuote(driver, testCaseName);

			/*
			 * ModalBuyersDeskReturnRequisition.fillReturnRequisitionComment(driver, testCaseName,
			 * IConstantsData.COMMENT_FOR_RETURN_REQUISITION);
			 * ModalBuyersDeskReturnRequisition.clickOnReturnReqButton(driver, testCaseName);
			 */
			PageBuyersDeskListing.clickOnFirstActionButton(driver, testCaseName);
			ModalBuersDeskListingActions.clickOnRejectAction(driver, testCaseName);
			ModalBuyersDeskReturnRequisition.fillReturnRequisitionComment(driver, testCaseName, IConstantsData.COMMENT_FOR_RETURN_REQUISITION);
			ModalBuyersDeskReturnRequisition.clickOnReturnReqButton(driver, testCaseName);

			// open req on my requisition
			FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			ActionBot.defaultSleep();

			PageRequisitionCheckOut.clickExpandAll(driver, testCaseName);
			//add click on edit code
			PageRequisitionCheckOut.clickEditItemSummary(driver, testCaseName, requisition.getItems().getCatelogItems().get(0).getItemID());

			TabCheckoutItemSummary.clickItemSummaryAssignedBuyerTab(driver, testCaseName);
			PageRequisitionCheckOut.clickOnAssignedBuyerDropdown(driver, testCaseName);
			PageRequisitionCheckOut.clickOnSingleAssignedBuyer(driver, testCaseName);

			List<User> users = UserUtilHelper.getAvailableUser();
			// fill assigned buyer with Buyer with ABD activity
			logger.info("First buyer " + users.get(0).getUsername());
			PageRequisitionCheckOut.fillAssignedBuyer(driver, testCaseName, users.get(0).getUsername());

			// fill assigned buyer with Buyer SARS activity
			logger.info("Second buyer " + users.get(1).getUsername());
			PageRequisitionCheckOut.fillAssignedBuyer(driver, testCaseName, users.get(1).getUsername());

			// fill assigned buyer with Buyer SRARS activity
			logger.info("Third buyer " + users.get(2).getUsername());
			PageRequisitionCheckOut.fillAssignedBuyer(driver, testCaseName, users.get(2).getUsername());

			ModelItemSummaryCommon.clickItemSummarySave(driver, testCaseName);
			FlowRequisition.submitReq(driver, testCaseName, true);

			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: payal.alag </b> <b>Created On : 02-Nov-2015 </b> <b>Method :
	 * RTC_338043 <b>Description : Returned with quote requisition>> assigned
	 * buyer field >> users in the autocomplete should be the ones having at
	 * least one of the buyer desk activity </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_338043(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		Requisition requisition = new Requisition();
		User user = null;

		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// create req
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.GUIDED_ITEM);
			requisition.getItems().getGuidedItems().get(0).setSourcingStatus(IConstantsData.Need_a_Quote);

			FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// change sourcing status at buyers desk
			MainPageHeaderLevelTab.clickOnBuyersDeskSubTab(driver, testCaseName);
			PageBuyersDeskListing.fillRequisitionName(driver, testCaseName, requisition.getReqName());
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			ActionBot.scroll(driver, "400");
			PageBuyersDesk.clickOnItemName(driver, testCaseName, requisition.getItems().getGuidedItems().get(0).getItemID());
			ModalGuidedItemDetails.clickOnSourcingStatusBuyerNegotiatedPriceOnBuyersDesk(driver, testCaseName);
			ModalGuidedItemDetails.clickOnOkButton(driver, testCaseName);
			PopUpDefaultConfirmation.clickOnConfirmYesButton(driver, testCaseName);
			PageBuyersDesk.fillReqChangeComment(driver, testCaseName, IConstantsData.REC_CHANGE_COMM);
			PageBuyersDesk.clickOnReturnToRequester(driver, testCaseName);

			// open req on my requisition
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			PageMyRequisition.fillReqNumberOnMyReq(driver, testCaseName, requisition.getReqNo());
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);

			//add click on expand all code
			PageRequisitionCheckOut.clickExpandAll(driver, testCaseName);
			//add click on edit code
			PageRequisitionCheckOut.clickEditItemSummary(driver, testCaseName, requisition.getItems().getGuidedItems().get(0).getItemID());
			TabCheckoutItemSummary.clickItemSummaryAssignedBuyerTab(driver, testCaseName);
			PageRequisitionCheckOut.clickOnAssignedBuyerDropdown(driver, testCaseName);
			PageRequisitionCheckOut.clickOnSingleAssignedBuyer(driver, testCaseName);

			List<User> users = UserUtilHelper.getAvailableUser();
			// fill assigned buyer with Buyer with ABD activity
			logger.info("First buyer " + users.get(0).getUsername());
			PageRequisitionCheckOut.fillAssignedBuyer(driver, testCaseName, users.get(0).getUsername());

			// fill assigned buyer with Buyer SARS activity
			logger.info("Second buyer " + users.get(1).getUsername());
			PageRequisitionCheckOut.fillAssignedBuyer(driver, testCaseName, users.get(1).getUsername());

			// fill assigned buyer with Buyer SRARS activity
			logger.info("Third buyer " + users.get(2).getUsername());
			PageRequisitionCheckOut.fillAssignedBuyer(driver, testCaseName, users.get(2).getUsername());
			ModelItemSummaryCommon.clickItemSummarySave(driver, testCaseName);
			FlowRequisition.submitReq(driver, testCaseName, true);

			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: payal.alag </b> <b>Created On : 03-Nov-2015 </b> <b>Method :
	 * RTC_343381 <b>Description : Verify user should be able to submit a
	 * requisition with zero price free text item [Check in case of receive by
	 * amount] </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_343381(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		{
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_343380"));
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_343340"));
		}
		CommonServices.startTestCase(driver, testCase, mappedTestCases);
		Requisition requisition = new Requisition();
		User user = null;

		boolean flag_isPriceMatched = false;
		try
		{

			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// create req
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.GUIDED_ITEM);
			requisition.getItems().getGuidedItems().get(0).setReceiveBy(IConstantsData.Amount);
			requisition.getItems().getGuidedItems().get(0).setZeroPriceItem(true);
			requisition.setNextAction(IConstantsData.NONE);
			FlowRequisition.createRequisition(driver, testCaseName, requisition);
			String price = requisition.getTotalPrice();
			if (price.equalsIgnoreCase("USD 0.00000") || (price.equalsIgnoreCase("INR 0.00000")))
			{
				flag_isPriceMatched = true;
			}

			Assert.assertTrue("Total price of item is not zero", flag_isPriceMatched);
			mappedTestCases.get(0).setTestResult(flag_isPriceMatched);
			FlowRequisition.submitReq(driver, testCaseName, true);

			// open req

			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			ActionBot.defaultMediumSleep();

			ActionBot.scroll(driver, "300");
			String totalPrice = PageRequisitionView.getItemTotalPrice(driver, testCaseName, 1);
			boolean flag1 = totalPrice.equals("0.00000") ? true : false;
			Assert.assertTrue("Total price of req after submission is not zero", flag1);
			mappedTestCases.get(1).setTestResult(flag1);
			if ((totalPrice.equalsIgnoreCase("0.00000")) || (totalPrice.equalsIgnoreCase("INR 0.00000")))
			{

				flag_isPriceMatched = true;
			}

			// boolean flag1 = totalPrice == "0" ? true : false;
			Assert.assertTrue("Total price of req after submission is not zero", flag_isPriceMatched);
			mappedTestCases.get(1).setTestResult(flag_isPriceMatched);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}
	}

	/**
	 * <b>Author: payal.alag </b> <b>Created On : 03-Nov-2015 </b> <b>Method :
	 * RTC_343379 <b>Description : Check confirmation message on submitting a
	 * requisition with zero price items in case of maximum characters in
	 * requisition name and amount </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_343379(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		Requisition requisition = new Requisition();
		User user = null;

		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// create req
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.GUIDED_ITEM);
			requisition.getItems().getGuidedItems().get(0).setZeroPriceItem(true);

			requisition.setReqName(CommonUtilities.getNonZeroRandomNumber(5) + CommonServices.getTestData(IConstantsData.MAX_CHAR_PROJECT));
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			Assert.assertTrue("Error while searching requisition", requisition.getReqName() != null);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: payal.alag </b> <b>Created On : 03-Nov-2015 </b> <b>Method :
	 * RTC_343378 <b>Description : Check confirmation message on submitting a
	 * requisition with zero price items in case of special characters in
	 * requisition name </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_343378(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		Requisition requisition = new Requisition();
		User user = null;

		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// create req
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.GUIDED_ITEM);
			requisition.getItems().getGuidedItems().get(0).setZeroPriceItem(true);

			requisition.setReqName(CommonServices.getTestData(IConstantsData.SPECIAL_CHAR_USER) + CommonUtilities.getNonZeroRandomNumber(5));
			FlowRequisition.createRequisition(driver, testCaseName, requisition);

			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Error while searching requisition", requisition.isResult());

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}

	}

	/**
	 * <b>Author: payal.alag </b> <b>Created On : 03-Nov-2015 </b> <b>Method :
	 * RTC_343377 <b>Description : Check confirmation message on submitting a
	 * requisition with zero price items in case of multilingual characters in
	 * requisition name </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_343377(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		Requisition requisition = new Requisition();
		User user = null;

		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// create req
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.GUIDED_ITEM);
			requisition.getItems().getGuidedItems().get(0).setZeroPriceItem(true);

			requisition.setReqName(CommonServices.getTestData(IConstantsData.MULTILINGUAL_CHAR_USER));
			FlowRequisition.createRequisition(driver, testCaseName, requisition);

			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			Assert.assertTrue("Error while searching requisition", requisition.getReqName() != null);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: payal.alag </b> <b>Created On : 03-Nov-2015 </b> <b>Method :
	 * RTC_343369 <b>Description : Verify in search listing page; zero price
	 * item should have an icon next to price with message 'This is a zero-price
	 * item' [Check in grid view] </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_343369(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		{
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_343368"));
		}

		CommonServices.startTestCase(driver, testCase, mappedTestCases);
		User user = null;

		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// search zero price item
			PageOnlineStore.fillSearchText(driver, testCaseName, CommonServices.getTestData(IConstantsData.ZERO_PRICE_ITEM_IN_CATALOG));
			PageOnlineStore.clickSearchButton(driver, testCaseName);
			boolean flag = PageSearchListing.isZeroPriceItemIconPresentInListView(driver, testCaseName);
			Assert.assertTrue("Zero price item icon is not present in list view for that zero price item", flag);

			// switch to grid view and check zero price item icon
			PageSearchListing.clickOnSwitchToGridView(driver, testCaseName);
			boolean flag1 = PageSearchListing.isZeroPriceItemIconPresentInGridView(driver, testCaseName);
			Assert.assertTrue("Zero price item icon is not present in Grid view for that zero price item", flag1);
			mappedTestCases.get(0).setTestResult(flag1);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}
	}

	/**
	 * <b>Author: payal.alag </b> <b>Created On : 05-Nov-2015 </b> <b>Method :
	 * RTC_342975 <b>Description : Online store>> search result page of
	 * catalog item >> user should be able to input values ( integer/
	 * decimal )in the quantity field according the UOM displayed for the item
	 * ----test with incorrect data </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_342975(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		{
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_338467"));
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_338466"));
		}
		CommonServices.startTestCase(driver, testCase, mappedTestCases);
		Item item = new Item();
		User user = null;

		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// empty the cart
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			if (item.isEmptyCart())
			{
				FlowShoppingCart.emptyShoppingCart(driver, testCaseName);
			}

			// search item
			PageOnlineStore.fillSearchText(driver, testCaseName, CommonServices.getTestData(IConstantsData.DIFFERENT_PRODUCT_CATEGORY));
			PageOnlineStore.clickSearchButton(driver, testCaseName);
			List<WebElement> itemName = PageSearchListing.getItemName(driver, testCaseName);
			String name = itemName.get(0).getText();
			String itemId = PageSearchListing.getItemId(driver, testCaseName, name);

			// Add negative quantity
			PageSearchListing.fillItemQuantity(driver, testCaseName, itemId, 011);
			PageSearchListing.fillItemQuantity(driver, testCaseName, itemId, 9);
			PageSearchListing.addToCart(driver, testCaseName, itemId);
			String items = PageSearchListing.getTotalItemsInCart(driver, testCaseName);
			boolean flag = items.equals("1") ? true : false;
			Assert.assertTrue("Item has not been added to cart", flag);
			mappedTestCases.get(0).setTestResult(flag);
			mappedTestCases.get(1).setTestResult(flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}
	}

	/**
	 * <b>Author: payal.alag </b> <b>Created On : 09-Nov-2015 </b> <b>Method :
	 * RTC_346474 <b>Description : N/A should be seen against the price field in
	 * the item modal of requisitions containing 'receive by amount' items
	 * </font><b><br>
	 * Reviewed by: </font><b><br>
	 * </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_346474(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = new ArrayList<MappedTestCase>();
		{
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_342802"));
			mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_334857"));
		}
		CommonServices.startTestCase(driver, testCase, mappedTestCases);
		Requisition requisition = new Requisition();
		User user = null;

		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// create req
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.GUIDED_ITEM);
			requisition.getItems().getGuidedItems().get(0).setReceiveBy(IConstantsData.Amount);

			CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			// return req
			PageBuyersDeskListing.clickOnFirstActionButton(driver, testCaseName);
			ModalBuersDeskListingActions.clickOnRejectAction(driver, testCaseName);
			ModalBuyersDeskReturnRequisition.fillReturnRequisitionComment(driver, testCaseName, IConstantsData.COMMENT_FOR_RETURN_REQUISITION);
			ModalBuyersDeskReturnRequisition.clickOnReturnReqButton(driver, testCaseName);

			// open req at my requisiyion
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			PageMyRequisition.fillReqName(driver, testCaseName, requisition.getReqName());
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			ActionBot.scroll(driver, "500");
			PageRequisitionCheckOut.clickOnItemNameToViewItemDetails(driver, testCaseName, requisition.getItems().getGuidedItems().get(0).getItemID());
			String price = ModalGuidedItemDetails.getItemPriceInGuidedModel(driver, testCaseName);
			boolean flag = price.equalsIgnoreCase(IConstantsData.NA) ? true : false;
			Assert.assertTrue("Price is not shown as N/A", flag);
			mappedTestCases.get(0).setTestResult(flag);
			ModalGuidedItemDetails.clickOnOkButton(driver, testCaseName);
			String currency = PageRequisitionCheckOut.getQuantityAmountCurrency(driver, testCaseName, requisition.getItems().getGuidedItems().get(0).getItemID());
			boolean flag1 = currency.equalsIgnoreCase("INR") || currency.equalsIgnoreCase("USD") ? true : false;
			Assert.assertTrue("Proper currency is not displayed on amount/quantity", flag1);
			mappedTestCases.get(1).setTestResult(flag1);
			FlowRequisition.submitReq(driver, testCaseName, true);
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}
	}

	/*********************************************
	 * End of Payal's TestCases
	 *****************************************************/

	/*********************************************
	 * Start of Raj's TestCases
	 *****************************************************/
	/**
	 * <b>Author: raj.singh </b> <b>Created On : 18-Nov-2016 </b> <b>Method :
	 * RTC_13013 <b>Description : Create the Requisition with Name contains
	 * special chars. </font><b><br>
	 * <b>Reviewed by: kunal.ashar
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_13013(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		List<MappedTestCase> mappedTestCases = null;

		try
		{
			OnlineStore onlineStore = ObjectCreation.searchItem();
			mappedTestCases = new ArrayList<MappedTestCase>();
			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_13775"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_13851"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_13742"));
			}
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			onlineStore.setAddItemTo(IConstantsData.ADD_TO_CART);
			onlineStore.setQuantity(2);
			onlineStore.setItemType(IConstantsData.CATALOG_ITEM);
			onlineStore.setNextAction(IConstantsData.Checkout);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			/**
			 * RTC_13742
			 */
			// to search a product
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			// select check box for an items to add to cart
			ActionBot.defaultHighSleep();
			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);

			// TO NAVIGATE TO the cart
			ActionBot.defaultHighSleep();
			PageSearchListing.clickToViewCart(driver, testCaseName);

			// to update and check out
			String item_qty = CommonServices.getTestData(IConstantsData.Item_Quantity, 2);
			PageMyFavorites.clickToUpdateFirstItemInCartByTextField(driver, testCaseName, item_qty);
			PageMyFavorites.clickToUpdateFirstItemInCart(driver, testCaseName);
			PageMyFavorites.clickToCheckOutFromCart(driver, testCaseName);

			/**
			 * RTC_13775
			 */
			// to verify all the important data presence in the checkout
			// page
			boolean status1 = FlowSearchListing.verifyPresenceOfAllImportantDeliveryRecipientDetails(driver, testCaseName);
			Assert.assertTrue("default values were not available", status1);
			mappedTestCases.get(0).setTestResult(status1);

			/**
			 * RTC_13851
			 */

			// to check out and create requisition without filling mandotary fields
			ActionBot.defaultLowSleep();
			boolean status2 = FlowRequisition.toVerifyCheckoutWithoutFillingMandatoryFields(driver, testCaseName);
			Assert.assertTrue("Cumpolusorily fill up the entire mandatory fields before submitting the requisition", !status2);
			mappedTestCases.get(1).setTestResult(!status2);

			/**
			 * RTC_13013
			 */
			// to fill up check out form and submit
			FlowRequisition.flow_IamDone_SaveAsDraft_Cancel(driver, testCaseName, onlineStore);

			// logout

			mappedTestCases.get(2).setTestResult(status1);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 18-Nov-2016 </b> <b>Method :
	 * RTC_13750 <b>Description : User should be able to delete one or more
	 * items from the favorites list. </font><b><br>
	 * <b>Reviewed by: kunal.ashar
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_13750(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = null;
		User user = null;

		try
		{
			OnlineStore onlineStore = ObjectCreation.searchItem();
			mappedTestCases = new ArrayList<MappedTestCase>();
			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_14562"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_14565"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_14566"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_13751"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_14718"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_195303"));
			}
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// fill in the search text box and click search
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 0));
			onlineStore.setQuantity(2);
			onlineStore.setItemType(IConstantsData.CATALOG_ITEM);
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			// to select an item from search page listing and add to Favorite link
			onlineStore.setAddItemTo(IConstantsData.ADD_TO_FAV);
			onlineStore.setQuantity(2);
			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);

			// navigate to My Favorite link
			ActionBot.waitForOperations(10000);
			MainPageHeaderLevelTab.clickOnMyFavoritesSubTab(driver);

			/**
			 * RTC_14562
			 */
			boolean RTC_14562_flag = FlowMyFavorites.toPushToCartItems_With_and_withoutQuantity(driver, testCaseName);

			mappedTestCases.get(0).setTestResult(RTC_14562_flag);

			/**
			 * RTC_14565
			 */
			String item_no = PageMyFavorites.fetchItemNumberFromFavouriteList(driver, testCaseName, 1);
			PageMyFavorites.fillSearchFavorite(driver, testCaseName, item_no);
			PageMyFavorites.clickOnSearchFavoriteGo(driver, testCaseName);
			boolean RTC_14565_flag = PageMyFavorites.isItemPresentInFavouriteList(driver, testCaseName, 1);
			Assert.assertTrue("Element not added to the favourites", RTC_14565_flag);

			mappedTestCases.get(1).setTestResult(RTC_14565_flag);

			/**
			 * RTC_14566
			 */
			IPageMyFavoritesImpl favoritesImpl = new IPageMyFavoritesImpl();
			String supplier_name = PageMyFavorites.fetchSupplierNameForItemsFromFavouriteList(driver, testCaseName, 1);
			favoritesImpl.fillSearchFavorite(driver, testCaseName, supplier_name);
			favoritesImpl.selectSearchFavoriteBy(driver, testCaseName, "Supplier Name");
			favoritesImpl.clickOnSearchFavoriteGo(driver, testCaseName);
			String total_search_records = favoritesImpl.fetchTotalFavoriteItemPresent(driver, testCaseName);
			boolean RTC_14566_flag = false;
			if (Integer.parseInt(total_search_records) != 0)
			{
				RTC_14566_flag = true;
			}
			Assert.assertTrue("search failed", RTC_14566_flag);

			/**
			 * RTC_14718, RTC_13750,RTC_13751,RTC_195303
			 */
			int total_search_records_before = Integer.parseInt(PageMyFavorites.fetchTotalFavoriteItemPresent(driver, testCaseName));
			PageMyFavorites.clickToCheckItemCheckBoxFromCart(driver, testCaseName, 1);
			PageMyFavorites.clickOnRemoveFromFavorite(driver, testCaseName);
			ActionBot.defaultLowSleep();
			PageMyFavorites.clickToRemoveItemIndexwise(driver, testCaseName, 1);
			ActionBot.defaultLowSleep();

			// to verify the functionality
			int total_search_records_after = Integer.parseInt(PageMyFavorites.fetchTotalFavoriteItemPresent(driver, testCaseName));
			if (!((total_search_records_before - total_search_records_after) == 1))
			{
				Assert.assertTrue("update favourite list count failed", false);
			}

			ActionBot.waitForOperations(10000);

			// logout

			mappedTestCases.get(2).setTestResult(RTC_14566_flag);
			mappedTestCases.get(3).setTestResult(RTC_14566_flag);
			mappedTestCases.get(4).setTestResult(RTC_14566_flag);
			mappedTestCases.get(5).setTestResult(RTC_14566_flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 18-Nov-2016 </b> <b>Method :
	 * RTC_13769 <b>Description : User should be able to delete items from the
	 * basket. </font><b><br>
	 * <b>Reviewed by: kunal.ashar
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_13769(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			Basket basket = ObjectCreation.createBasket();
			OnlineStore onlineStore = ObjectCreation.searchItem();
			CommonServices.startTestCase(driver, testCase);

			basket.setBasketName(CommonServices.getTestData(IConstantsData.BASKET_NAME) + Helper.getRandomString(4));
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore.setAddItemTo(IConstantsData.ADD_TO_BASKET);
			onlineStore.setQuantity(2);
			onlineStore.setItemType(IConstantsData.CATALOG_ITEM);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to delete an existing basket if any
			// FlowMyBasket.removeExistingBasketFromList(driver, testCaseName,
			// basket);

			// fill in the search text box and click search
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			// to add a item to new basket
			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);

			// to create basket
			basket = FlowMyBasket.createNewBasket(driver, testCaseName, basket);

			// to navigate and to delete the item from newly created basket

			basket.setBasketAction(IConstantsData.DELETE_BASKET);
			basket = FlowMyBasket.searchAndPerformBasketAction(driver, testCaseName, basket);

			basket = FlowMyBasket.searchBasket(driver, testCaseName, basket);

			Assert.assertTrue("unable to delete elements from the basket", !basket.isResult());

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 22-Nov-2016 </b> <b>Method :
	 * RTC_14538 <b>Description : User should be able to continue shopping after
	 * reviewing the shopping cart from there itself. </font><b><br>
	 * <b>Reviewed by: kunal.ashar
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_14538(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		boolean flag = false;

		try
		{
			OnlineStore onlineStore = ObjectCreation.searchItem();

			CommonServices.startTestCase(driver, testCase);

			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore.setQuantity(2);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// fill in the search text box and click search
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			// to add a item to cart
			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);

			// to review the cart
			ActionBot.defaultMediumSleep();
			PageMyBasket.clickToViewCart(driver, testCaseName);

			// to Continue shopping and verify
			PageMyBasket.clickToContinueShopping(driver, testCaseName);
			flag = PageSearchListing.isSearchListingPage(driver, testCaseName);
			Assert.assertTrue("unable to continue shopping", flag);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 22-Nov-2016 </b> <b>Method :
	 * RTC_14548 <b>Description : User should be able to select more than one
	 * items at a time fro search results page and them to <b>Reviewed by:
	 * kunal.ashar
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_14548(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			OnlineStore onlineStore = ObjectCreation.searchItem();

			CommonServices.startTestCase(driver, testCase);

			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 0));
			onlineStore.setAddItemTo(IConstantsData.ADD_TO_FAV);
			onlineStore.setQuantity(2);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// fill in the search text box and click search
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			// to add a few items to fav
			String item_ids[] = FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);

			// to verify the succefully added items to the fav list
			boolean status = FlowSearchListing.verifySuccessfulAdditionOfItemToFavouriteList(driver, testCaseName, item_ids);
			Assert.assertTrue("items not successfully added to the fav list", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 22-Nov-2016 </b> <b>Method :
	 * RTC_14623 <b>Description : User should have a link to view product
	 * details while viewing items in basket. </font><b><br>
	 * <b>Reviewed by: kunal.ashar
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_14623(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			Basket basket = new Basket();
			OnlineStore onlineStore = ObjectCreation.searchItem();

			CommonServices.startTestCase(driver, testCase);

			basket.setBasketName(CommonServices.getTestData(IConstantsData.BASKET_NAME) + Helper.getRandomString(4));
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore.setQuantity(2);
			onlineStore.setAddItemTo(IConstantsData.ADD_TO_BASKET);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to delete basket with same name if any
			// FlowMyBasket.removeExistingBasketFromList(driver, testCaseName,
			// basket);

			// fill in the search text box and click search
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			// to add a item to new basket
			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);

			// to create basket
			FlowMyBasket.createNewBasket(driver, testCaseName, basket);

			// to navigate and to veiw the item from newly created basket
			FlowMyBasket.viewNewlyCreatedBasket(driver, testCaseName, basket);

			// to click the link for viewing the product information
			PageMyBasket.clickFirstItemInBasket(driver, testCaseName);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 22-Nov-2016 </b> <b>Method :
	 * RTC_13764 <b>Description : System should prompt for a name while creating
	 * new basket. </font><b><br>
	 * <b>Reviewed by: kunal.ashar
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_13764(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			Basket basket = new Basket();
			OnlineStore onlineStore = ObjectCreation.searchItem();

			CommonServices.startTestCase(driver, testCase);

			basket.setBasketName(CommonServices.getTestData(IConstantsData.BASKET_NAME) + Helper.getRandomString(4));
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore.setQuantity(2);
			onlineStore.setAddItemTo(IConstantsData.ADD_TO_BASKET);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to remove the existing basket if any
			// FlowMyBasket.removeExistingBasketFromList(driver, testCaseName,
			// basket);

			// to search a product and select the follwing for adding into a
			// new basket
			ActionBot.waitForOperations(10000);
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);

			// memtion name while creating a new basket
			FlowMyBasket.createNewBasket(driver, testCaseName, basket);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 22-Nov-2016 </b> <b>Method :
	 * RTC_13772 <b>Description : System should allow to add more items, thus
	 * directing user to new search. </font><b><br>
	 * <b>Reviewed by: kunal.ashar
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_13772(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			OnlineStore onlineStore = ObjectCreation.searchItem();

			CommonServices.startTestCase(driver, testCase);

			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore.setQuantity(2);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to search a product and select the following for adding to
			// cart
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}
			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);

			ActionBot.waitForOperations(10000);
			PageMyBasket.clickToViewCart(driver, testCaseName);
			Thread.sleep(2000);
			PageMyBasket.clickToContinueShopping(driver, testCaseName);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 22-Nov-2016 </b> <b>Method :
	 * RTC_13743 <b>Description : User should be able to continue shopping after
	 * searching new items, and again proceeding to checkout. </font><b><br>
	 * <b>Reviewed by: kunal.ashar
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_13743(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		boolean flag = false;

		try
		{
			OnlineStore onlineStore = ObjectCreation.searchItem();

			CommonServices.startTestCase(driver, testCase);

			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 0));
			onlineStore.setQuantity(2);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to search a product and select the following for adding to
			// cart
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			// to add an item to cart
			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);

			// to search for another product again
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			// select check box for an item to add to cart
			FlowSearchListing.selectItemAndAddToCartAndCheckout(driver, testCaseName, onlineStore);
			flag = PageRequisitionCheckOut.isEditable(driver, testCaseName);
			Assert.assertTrue("succesfully moved to checkout page", flag);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 22-Nov-2016 </b> <b>Method :
	 * RTC_13780 <b>Description : Product link should be active, after clicking
	 * on it. </font><b><br>
	 * <b>Reviewed by: kunal.ashar
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_13780(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to click on eProc Product link by doing a mouse hover
			MainPageHeaderLevelTab.clickOnEprocProductSwitchTab(driver, testCaseName);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 22-Nov-2016 </b> <b>Method :
	 * RTC_13773 <b>Description : Person to be delivered should have default
	 * name of the user. </font><b><br>
	 * <b>Reviewed by: kunal.ashar
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_13773(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			OnlineStore onlineStore = ObjectCreation.searchItem();

			CommonServices.startTestCase(driver, testCase);

			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore.setQuantity(2);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to search a product and select the following for adding to
			// cart
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			// select check box for an item to add to cart and checkout
			FlowSearchListing.selectItemAndAddToCartAndCheckout(driver, testCaseName, onlineStore);

			// to check the delivery name with the default name
			boolean status = FlowRequisition.toCheckDeliveryNameWithDefaultName(driver, testCaseName, user);
			Assert.assertTrue("the default name of the reciepent was not same as the user's name", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 23-Nov-2016 </b> <b>Method :
	 * RTC_14551 <b>Description : When the user adds 2 items to favorite list,
	 * and if one of them is already existing, system should add only the
	 * currently non-existing item to the favorites list. </font><b><br>
	 * <b>Reviewed by: kunal.ashar
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_14551(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		int count = 0;

		try
		{
			OnlineStore onlineStore = ObjectCreation.searchItem();

			CommonServices.startTestCase(driver, testCase);

			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore.setQuantity(2);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to search a product and select the following for adding to
			// cart
			FlowOnlineStore.clearCart(driver, testCaseName);
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			// select check box for an item to add to cart
			String itemiId_array1[] = FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);
			count = itemiId_array1.length;

			// select check box for multiple items to add to cart
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 0));
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}
			String itemiId_array2[] = FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);
			count = count + itemiId_array2.length;

			// to verify the number of item added to the cart
			boolean status = PageSearchListing.getTotalItemsInCart(driver, testCaseName).equals("" + count);
			Assert.assertTrue("functionality doesn't work properly", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 23-Nov-2016 </b> <b>Method :
	 * RTC_14619 <b>Description : When adding item from the basket to cart, and
	 * if cart is already containing items, then items already present in cart
	 * should be retained while new be added </font><b><br>
	 * <b>Reviewed by: kunal.ashar
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_14619(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		int count = 0;
		String itemiId_array[] = null;

		try
		{
			Basket basket = ObjectCreation.createBasket();

			CommonServices.startTestCase(driver, testCase);

			basket.setBasketName(CommonServices.getTestData(IConstantsData.BASKET_NAME) + Helper.getRandomString(4));
			OnlineStore onlineStore = ObjectCreation.searchItem();
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore.setQuantity(2);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to clear cart
			FlowOnlineStore.clearCart(driver, testCaseName);

			// to remove the existing basket to be created, if any
			// FlowMyBasket.removeExistingBasketFromList(driver, testCaseName,
			// basket);

			// to search a product
			ActionBot.defaultSleep();
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			// select check box for an item to add to cart
			ActionBot.defaultSleep();
			itemiId_array = FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);
			count = itemiId_array.length;

			// select check box for an items to add to basket
			ActionBot.defaultSleep();
			onlineStore.setAddItemTo(IConstantsData.ADD_TO_BASKET);
			itemiId_array = FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);

			// to create a new basket
			FlowMyBasket.createNewBasket(driver, testCaseName, basket);

			// to navigate to shopping basket sub tab, search a basket and add
			// to cart
			FlowMyBasket.toNavigateToShoppingBasketSubTab_SearchBasket_AddBasketToCart(driver, testCaseName, basket);

			// navigate back to the online store
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);

			// to verify the number of item added to the cart
			boolean status = PageSearchListing.getTotalItemsInCart(driver, testCaseName).equals("" + count);
			Assert.assertTrue("functionality doesn't work properly", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 23-Nov-2016 </b> <b>Method :
	 * RTC_14589 <b>Description : Favorites listing page should have sorting
	 * facility on the basis of unit price </font><b><br>
	 * <b>Reviewed by: kunal.ashar
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_14589(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			OnlineStore onlineStore = ObjectCreation.searchItem();
			CommonServices.startTestCase(driver, testCase);

			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore.setAddItemTo(IConstantsData.ADD_TO_FAV);
			onlineStore.setQuantity(2);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to search a product
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			// select check box for an items to add to fav
			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);

			// TO NAVIGATE TO the favorite sub tab and verify the sort option in the favorite list

			ActionBot.defaultSleep();
			boolean status = FlowMyFavorites.verifySortingOptions(driver, testCaseName);
			Assert.assertTrue("sorting option is not there", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 24-Nov-2016 </b> <b>Method :
	 * RTC_13761 <b>Description : When the quantity is not specified whille
	 * adding item to basket, system should default it to 1. </font><b><br>
	 * <b>Reviewed by: kunal.ashar
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_13761(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			Basket basket = new Basket();
			OnlineStore onlineStore = ObjectCreation.searchItem();
			CommonServices.startTestCase(driver, testCase);

			basket.setBasketName(CommonServices.getTestData(IConstantsData.BASKET_NAME) + Helper.getRandomString(4));
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore.setAddItemTo(IConstantsData.ADD_TO_BASKET);
			onlineStore.setQuantity(1);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to remove the existing basket with same name if any
			// FlowMyBasket.removeExistingBasketFromList(driver, testCaseName,
			// basket);

			// to search a product
			ActionBot.defaultMediumSleep();
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			// select check box for an items to add to basket
			String itemId[] = FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);

			// to create basket
			FlowMyBasket.createNewBasket(driver, testCaseName, basket);

			// TO NAVIGATE TO the basket and enter the first basket
			ActionBot.defaultMediumSleep();
			FlowMyBasket.toNavigateToShoppingBasketSubTab_ClickFirstBasket(driver, testCaseName, basket);

			// to verify the quantity of the item added
			boolean status = FlowMyBasket.toVerifyItemQuantityInBasket(driver, testCaseName, basket, itemId.length);
			Assert.assertTrue("The default quantity value is not " + itemId.length, status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 24-Nov-2016 </b> <b>Method :
	 * RTC_13783 <b>Description : User should be allowed to add item to
	 * favorites w/o specifying its quantity. </font><b><br>
	 * <b>Reviewed by: kunal.ashar
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_13783(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			OnlineStore onlineStore = ObjectCreation.searchItem();
			CommonServices.startTestCase(driver, testCase);

			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore.setAddItemTo(IConstantsData.ADD_TO_FAV);
			onlineStore.setQuantity(1);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to search a product
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			// select check box for items to add to favourite; one each, with
			// and without quantity
			ActionBot.defaultMediumSleep();
			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 0));
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}
			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);

			// TO NAVIGATE TO the basket
			ActionBot.defaultMediumSleep();
			MainPageHeaderLevelTab.clickOnMyFavoritesSubTab(driver);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 24-Nov-2016 </b> <b>Method :
	 * RTC_13774 <b>Description : System should allow to specify another name
	 * for 'person to be delivered' </font><b><br>
	 * <b>Reviewed by: kunal.ashar
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_13774(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{

			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);
			OnlineStore onlineStore = ObjectCreation.searchItem();
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore.setQuantity(1);

			// to search a product
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			// select check box for an items to add to cart
			ActionBot.defaultMediumSleep();
			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);
			ActionBot.defaultMediumSleep();

			// to check out and create requisition
			PageSearchListing.clickOnCheckOutButton(driver, testCaseName);

			// to edit the name of the delivery recipient
			ActionBot.waitForPageLoad(driver);
			boolean status = FlowRequisition.toEditDeliveryRecipientName(driver, testCaseName);
			Assert.assertTrue("failed to successfully edit the buyer's name", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 24-Nov-2016 </b> <b>Method :
	 * RTC_13852 <b>Description : User should be able to add comments at
	 * individual line item level. </font><b><br>
	 * <b>Reviewed by: kunal.ashar
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_13852(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			OnlineStore onlineStore = ObjectCreation.searchItem();
			CommonServices.startTestCase(driver, testCase);

			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore.setQuantity(2);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to search a product
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			// select check box for an items to add to cart
			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);

			ActionBot.defaultMediumSleep();

			// to checkout
			PageSearchListing.clickOnCheckOutButton(driver, testCaseName);

			ActionBot.scroll(driver, "200");

			// to verify comments option availabiltiy for every item in the cart in the checkout
			boolean status = FlowRequisition.verifyCommentsForAlltemsInCheckout(driver, testCaseName);
			Assert.assertTrue("Comment option not available", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 24-Nov-2016 </b> <b>Method :
	 * RTC_14626 <b>Description : Baskets should be sortable on the basis of
	 * total price of the basket. </font><b><br>
	 * <b>Reviewed by: kunal.ashar
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_14626(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();

		User user = null;

		try
		{
			CommonServices.startTestCase(driver, testCase);
			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to navigate to Shopping Basket sun tab
			MainPageHeaderLevelTab.clickOnShoppingBasketSubTab(driver);

			// to sort and view the baskets
			ActionBot.defaultLowSleep();
			PageMyBasket.clickToSortBasket(driver, testCaseName);

			ActionBot.defaultMediumSleep();
			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 25-Nov-2016 </b> <b>Method :
	 * RTC_14616 <b>Description : Basket listing should show lead time. (i.e.
	 * max of all individual items) </font><b><br>
	 * <b>Reviewed by: kunal.ashar </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_14616(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		List<MappedTestCase> mappedTestCases = null;
		boolean status3 = false;
		try
		{
			Basket basket = new Basket();
			OnlineStore onlineStore = ObjectCreation.searchItem();
			mappedTestCases = new ArrayList<MappedTestCase>();
			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_13767"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_14607"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_14605"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_14613"));
			}
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			basket.setBasketName(CommonServices.getTestData(IConstantsData.BASKET_NAME) + Helper.getRandomString(4) + Helper.getRandomNumber(4));
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore.setQuantity(1);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			/**
			 * RTC_14613
			 */
			// to delete basket with same name if any

			// to verify creation of basket with same name
			ActionBot.defaultLowSleep();
			boolean status = FlowMyBasket.verifyCreationOfBasketWithSameName(driver, testCaseName, onlineStore, testCase, map, user, basket);
			Assert.assertTrue("couldn't create basket", status);
			mappedTestCases.get(3).setTestResult(status);

			/**
			 * RTC_14605
			 */

			// to search a product
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			// select check box for an items to add to basket
			onlineStore.setAddItemTo(IConstantsData.ADD_TO_BASKET);
			ActionBot.defaultMediumSleep();
			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);

			// to add the selected item into basket
			boolean status4 = FlowSearchListing.addToExistingBasketIndexwise(driver, testCaseName, 2);
			Assert.assertTrue("adding to existing basket failed", status4);

			mappedTestCases.get(2).setTestResult(status4);

			/**
			 * RTC_14616
			 */

			// to navigate to Shopping Basket sun tab
			ActionBot.defaultMediumSleep();
			MainPageHeaderLevelTab.clickOnShoppingBasketSubTab(driver);

			// to verify the presence of max item capacity of each basket
			ActionBot.defaultMediumSleep();
			boolean status1 = PageMyBasket.isBasketcapacityAvailable(driver, testCaseName);
			if (!status1)
			{
				Assert.assertTrue("Item Capacity for each basket was not displayed", false);
			}
			else
			{
				String capacity = PageMyBasket.fetchBasketcapacity(driver, testCaseName, 1);
				if (capacity != null)
					status1 = true;
				Assert.assertTrue("Item Capacity for each basket was not displayed", status1);
			}

			/**
			 * RTC_14607
			 */

			// to search and open an existing basket
			FlowMyBasket.openAnExistingMap(driver, testCaseName, basket);

			// to check if item#, item_name & supplier_name, item_price and
			// item_qty is mentioned or not
			boolean status2 = FlowMyBasket.verifyItemNo_ItemNameSupplier_ItemPrice_ItemQuantity_present(driver, testCaseName);
			Assert.assertTrue("some item-details are missing in the shopping basket", status2);
			mappedTestCases.get(1).setTestResult(status2);

			/**
			 * RTC_13767
			 */
			MainPageHeaderLevelTab.clickOnShoppingBasketSubTab(driver);
			basket.setBasketAction(IConstantsData.DELETE_BASKET);
			basket = FlowMyBasket.searchAndPerformBasketAction(driver, testCaseName, basket);

			basket = FlowMyBasket.searchBasket(driver, testCaseName, basket);
			status3 = !basket.isResult();
			Assert.assertTrue("removing existing basket failed", status3);

			// logout
			mappedTestCases.get(0).setTestResult(status3);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 25-Nov-2016 </b> <b>Method :
	 * RTC_14733 <b>Description : Even after emptying basket, it should not show
	 * 1 item in it </font><b><br>
	 * <b>Reviewed by: kunal.ashar </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_14733(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();

		User user = null;

		try
		{
			CommonServices.startTestCase(driver, testCase);
			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to delete the basket with the same name if any
			Basket basket = new Basket();
			basket.setBasketName(CommonServices.getTestData(IConstantsData.BASKET_NAME) + Helper.getRandomString(4));
			// FlowMyBasket.removeExistingBasketFromList(driver, testCaseName,
			// basket);

			// to search a product
			ActionBot.defaultLowSleep();
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			OnlineStore onlineStore = ObjectCreation.searchItem();
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore.setQuantity(1);

			PageOnlineStore.fillSearchText(driver, testCaseName, onlineStore.getSearchItem());
			PageOnlineStore.clickSearchButton(driver, testCaseName);
			ActionBot.defaultMediumSleep();

			if (ActionBot.isElementDisplayed(driver, IPageSearchListing.NO_CATLOGUE_FOUND))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			// select check box for an items to add to basket
			ActionBot.defaultMediumSleep();
			onlineStore.setAddItemTo(IConstantsData.ADD_TO_BASKET);
			onlineStore = FlowOnlineStore.getItemId(driver, testCaseName, 0, onlineStore);
			String item_id = onlineStore.getItemId();
			PageSearchListing.clickOnCheckBoxOfItem(driver, testCaseName, item_id);
			PageSearchListing.clickOnAddMultipleItemsToBasket(driver, testCaseName);

			// to create basket
			FlowMyBasket.createNewBasket(driver, testCaseName, basket);

			// to navigate to Shopping Basket sub tab and open the newly
			// created
			// basket and verify the functionality
			FlowMyBasket.removeExistingFirstItemFromTheBasket(driver, testCaseName, basket);

			String capacity = FlowMyBasket.fetchbasketCapacity(driver, testCaseName, basket);
			if (!capacity.equals("0"))
			{
				Assert.assertTrue("item not deleted", false);
			}
			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 25-Nov-2016 </b> <b>Method :
	 * RTC_14547 <b>Description : User should be able to add items to favorites
	 * list from item search result listing page. </font><b><br>
	 * <b>Reviewed by: kunal.ashar </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_14547(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();

		User user = null;

		try
		{
			CommonServices.startTestCase(driver, testCase);
			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to search a product
			OnlineStore onlineStore = ObjectCreation.searchItem();
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore.setQuantity(1);
			onlineStore.setAddItemTo(IConstantsData.ADD_TO_FAV);

			PageOnlineStore.fillSearchText(driver, testCaseName, onlineStore.getSearchItem());
			PageOnlineStore.clickSearchButton(driver, testCaseName);
			ActionBot.defaultLowSleep();

			if (ActionBot.isElementDisplayed(driver, IPageSearchListing.NO_CATLOGUE_FOUND))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			// select check box for an item to add to favourite list
			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);
			ActionBot.defaultLowSleep();

			// to navigate to my favourite sub tab
			MainPageHeaderLevelTab.clickOnMyFavoritesSubTab(driver);
			String total = "";
			try
			{
				total = PageMyFavorites.fetchTotalFavoriteItemPresent(driver, testCaseName);
			}
			catch (Exception e)
			{
				if (!total.equals("0"))
				{
					Assert.assertTrue("item deletion failed", false);
				}
			}
			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 25-Nov-2016 </b> <b>Method :
	 * RTC_58105 <b>Description : Verify that Draft status REQ should contain
	 * "Delete" action in dropdown. </font><b><br>
	 * <b>Reviewed by: kunal.ashar </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_58105(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = null;
		User user = null;

		try
		{
			mappedTestCases = new ArrayList<MappedTestCase>();
			{

				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_58106"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_58107"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_58108"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_58109"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_20424"));
			}

			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to navigate to my req sub tab
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			ActionBot.defaultMediumSleep();
			FlowMyRequisitions.toFilterOutDraftReqFromMyRequisitions(driver, testCaseName);
			PageMyRequisition.clickOnReqAction(driver, testCaseName, 1);

			// to verify the functionality
			boolean statusDeleteActionForDraft = PageMyRequisition.isDeleteReqActionPresentInApprovalReq(driver, testCaseName, 1);
			Assert.assertTrue("The requisition was not having delete action", statusDeleteActionForDraft);

			/**
			 * RTC_58106
			 */
			PageMyRequisition.clearStatusFilter(driver, testCaseName);

			// to verify the action recall button in the dropdown for approval pending action

			FlowMyRequisitions.toFilterOutInApprovalReqFromMyRequisitions(driver, testCaseName);
			ActionBot.defaultLowSleep();
			PageMyRequisition.clickOnReqAction(driver, testCaseName, 1);
			boolean statusRecallActionForInapproval = false;
			try
			{
				statusRecallActionForInapproval = PageMyRequisition.isRecallReqActionPresentInApprovalReq(driver, testCaseName, 1);
				Assert.assertTrue("'Recall Approval Request' action in dropdown was not found", statusRecallActionForInapproval);
			}
			catch (WebDriverException e)
			{
				Assert.assertTrue("'Recall Approval Request' action in dropdown was not found", false);
			}

			mappedTestCases.get(0).setTestResult(statusRecallActionForInapproval);

			/**
			 * RTC_58107
			 */
			PageMyRequisition.clearStatusFilter(driver, testCaseName);

			// to verify the action recall button in the dropdown for approval pending action
			PageMyRequisition.clickOnStatusFilterBtn(driver, testCaseName);
			PageMyRequisition.clickOnInApprovalInStatusFilterBtn(driver, testCaseName);
			PageMyRequisition.clickOnPerformFilterBtn(driver, testCaseName);
			ActionBot.waitForPageLoad(driver);

			ActionBot.defaultLowSleep();
			PageMyRequisition.clickOnReqAction(driver, testCaseName, 1);
			boolean status3 = false;
			try
			{
				status3 = PageMyRequisition.isRecallReqActionPresentInApprovalReq(driver, testCaseName, 1);
				Assert.assertTrue("'Recall Approval Request' action in dropdown was not found", status3);
			}
			catch (WebDriverException e)
			{
				Assert.assertTrue("'Recall Approval Request' action in dropdown was not found", false);
			}

			mappedTestCases.get(1).setTestResult(status3);

			/**
			 * RTC_58108
			 */

			PageMyRequisition.clearStatusFilter(driver, testCaseName);

			// to verify the Released status REQ should contain "Create Receipt" actions in dropdown.
			//FlowMyRequisitions.toFilterOutReleasedReqFromMyRequisitions(driver, testCaseName);

			PageMyRequisition.clickOnStatusFilterBtn(driver, testCaseName);
			PageMyRequisition.clickOnExpandReleasedInStatusFilterBtn(driver, testCaseName);
			ActionBot.findElement(driver, IPageMyRequisition.RELEASED_PARTIALLY_RECEVIED_OUT).click();
			PageMyRequisition.clickOnPerformFilterBtn(driver, testCaseName);
			ActionBot.waitForPageLoad(driver);

			PageMyRequisition.clickOnReqAction(driver, testCaseName, 1);
			boolean status4 = false;
			try
			{
				status4 = PageMyRequisition.isCreateRecieptActionPresentInApprovalReq(driver, testCaseName, 1);
				Assert.assertTrue("'Create Reciept' action in dropdown was not found", status4);
			}
			catch (WebDriverException e)
			{
				Assert.assertTrue("'Create Reciept' action in dropdown was not found", false);
			}

			mappedTestCases.get(2).setTestResult(status4);

			/**
			 * RTC_58109
			 */
			PageMyRequisition.clearStatusFilter(driver, testCaseName);
			// to verify Draft status REQ should open in EDIT mode on click
			FlowMyRequisitions.toFilterOutDraftReqFromMyRequisitions(driver, testCaseName);
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);

			// to verify the page open mode
			boolean status5 = PageRequisitionCheckOut.isEditable(driver, testCaseName);
			Assert.assertTrue("The page opened in edit mode", status5);

			mappedTestCases.get(3).setTestResult(status5);

			/**
			 * RTC_20424
			 */
			// to navigate to My Requisition sub tab
			MainPageHeaderLevelTab.clickOnApprovalAllRequestsTab(driver);

			// to approve with a comment
			PageAllRequestsApproval.clickOnActionsLinkIindexwise(driver, testCaseName, 1);
			PageAllRequestsApproval.approveRequisition(driver, testCaseName);

			// verify the successful approval
			boolean status6 = PageAllRequestsApproval.isActionPerformedSuccessful(driver, testCaseName);

			// to reject with a comment
			PageAllRequestsApproval.clickOnActionsLinkIindexwise(driver, testCaseName, 1);
			PageAllRequestsApproval.rejectRequisition(driver, testCaseName);

			// verify the successful approval
			if (status6)
				status6 = PageAllRequestsApproval.isActionPerformedSuccessful(driver, testCaseName);
			Assert.assertTrue("The approval or rejection task was not successful", status6);

			ActionBot.waitForOperations(10000);
			// logout
			mappedTestCases.get(4).setTestResult(status6);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 28-Nov-2016 </b> <b>Method :
	 * RTC_58110 <b>Description : Verify that Returned status REQ should open in
	 * EDIT mode on click. </font><b><br>
	 * <b>Reviewed by: kunal.ashar </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_58110(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = null;
		User user = null;

		try
		{
			mappedTestCases = new ArrayList<MappedTestCase>();
			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_58111"));//0
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_58112"));//1
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_58113"));//2
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_58115"));//3
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_58116"));//4
			}
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to navigate to My Requisition sub tab
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);

			//RTC_58110
			// to open returned status requisitions from search
			ActionBot.defaultMediumSleep();
			FlowMyRequisitions.toFilterOutReturnedReqFromMyRequisitions(driver, testCaseName);

			// to verify Returned status REQ opened in edit mode
			ActionBot.defaultLowSleep();
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			boolean status1 = PageRequisitionCheckOut.isEditable(driver, testCaseName);
			Assert.assertTrue("did not open in edit mode", status1);

			/**
			 * RTC_58111
			 */

			// to navigate to My Requisition sub tab
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);

			// to open in approval status requisitions from search
			ActionBot.defaultLowSleep();
			FlowMyRequisitions.toFilterOutInApprovalReqFromMyRequisitions(driver, testCaseName);

			// to verify in approval status REQ opened in view mode
			ActionBot.defaultLowSleep();
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);

			// to verify the page opens in view mode
			boolean status2 = PageRequisitionCheckOut.isEditable(driver, testCaseName);
			Assert.assertTrue("opened in edit mode", !(status2));

			mappedTestCases.get(0).setTestResult(true);

			/**
			 * RTC_58112
			 */

			// to navigate to My Requisition sub tab
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);

			// to open buyers desk status requisitions from search
			ActionBot.defaultLowSleep();
			FlowMyRequisitions.toFilterOutWithBuyerReqFromMyRequisitions(driver, testCaseName);

			// to verify buyers desk status REQ opened in view mode
			ActionBot.defaultLowSleep();
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);

			// to verify the req to open in view mode
			boolean status3 = PageRequisitionCheckOut.isEditable(driver, testCaseName);
			if (status3)
			{
				Assert.assertTrue("opened in edit mode", false);
			}

			mappedTestCases.get(1).setTestResult(true);

			/**
			 * RTC_58113
			 */
			// to navigate to My Requisition sub tab
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);

			// to open rejected status requisitions from search
			ActionBot.defaultLowSleep();
			FlowMyRequisitions.toFilterOutRejectedReqFromMyRequisitions(driver, testCaseName);

			// to verify rejected status REQ opened in edit mode
			ActionBot.defaultLowSleep();
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);

			// to verify the req to open in view mode
			boolean status4 = PageRequisitionCheckOut.isEditable(driver, testCaseName);
			if (status4)
			{
				Assert.assertTrue("opened in edit mode", false);
			}

			mappedTestCases.get(2).setTestResult(true);

			/**
			 * RTC_58115
			 */

			// to navigate to My Requisition sub tab
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);

			// to open rejected status requisitions from search
			ActionBot.defaultLowSleep();
			FlowMyRequisitions.toFilterOutRejectedReqFromMyRequisitions(driver, testCaseName);

			// to verify rejected status REQ opened in edit mode
			ActionBot.defaultLowSleep();
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);

			// to verify the req to open in view mode
			boolean status5 = PageRequisitionCheckOut.isEditable(driver, testCaseName);
			if (status5)
			{
				Assert.assertTrue("opened in edit mode", false);
			}
			mappedTestCases.get(3).setTestResult(true);

			/**
			 * RTC_58116
			 */
			// to navigate to My Requisition sub tab
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);

			// to open rejected status requisitions from search
			ActionBot.defaultLowSleep();
			FlowMyRequisitions.toFilterOutReleasedReqFromMyRequisitions(driver, testCaseName);

			// to verify rejected status REQ opened in edit mode
			ActionBot.defaultLowSleep();
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);

			// to verify the view open mode
			boolean status6 = PageRequisitionCheckOut.isEditable(driver, testCaseName);
			if (status6)
			{
				Assert.assertTrue("open mode was edit", false);
			}
			mappedTestCases.get(4).setTestResult(true);

			// to navigate to My Requisition sub tab
			MainPageHeaderLevelTab.clickOnApprovalAllRequestsTab(driver);

			// to approve with a comment
			PageAllRequestsApproval.clickOnActionsLinkIindexwise(driver, testCaseName, 1);
			PageAllRequestsApproval.approveRequisition(driver, testCaseName);

			// verify the successful approval
			boolean status = PageAllRequestsApproval.isActionPerformedSuccessful(driver, testCaseName);

			// to reject with a comment
			ActionBot.defaultLowSleep();
			PageAllRequestsApproval.clickOnActionsLinkIindexwise(driver, testCaseName, 1);
			PageAllRequestsApproval.rejectRequisition(driver, testCaseName);

			// verify the successful approval
			if (status)
				status = PageAllRequestsApproval.isActionPerformedSuccessful(driver, testCaseName);
			Assert.assertTrue("the approval or rejection task was not successfull", status);

			// logout

			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 29-Nov-2016 </b> <b>Method :
	 * RTC_37184 <b>Description :During checkout, all amount for costing,
	 * accounting, etc (other than item unit price) should use the "Requisition
	 * Currency". </font><b><br>
	 * <b>Reviewed by: kunal.ashar </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_37184(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			CommonServices.startTestCase(driver, testCase);
			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to search a product
			OnlineStore onlineStore = ObjectCreation.searchItem();
			FlowOnlineStore.clearCart(driver, testCaseName);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore.setQuantity(1);

			PageOnlineStore.fillSearchText(driver, testCaseName, onlineStore.getSearchItem());
			PageOnlineStore.clickSearchButton(driver, testCaseName);
			ActionBot.defaultMediumSleep();

			if (ActionBot.isElementDisplayed(driver, IPageSearchListing.NO_CATLOGUE_FOUND))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			// select check box for an items to add to cart
			ActionBot.defaultMediumSleep();
			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);

			ActionBot.defaultMediumSleep();
			// to navigate to checkout page
			PageSearchListing.clickOnCheckOutButton(driver, testCaseName);
			PageRequisitionCheckOut.clickEditHeaderInfo(driver, testCaseName);
			String currency = PageRequisitionCheckOut.fetchRequisitionCurrency(driver, testCaseName);
			PageRequisitionCheckOut.clickCloseRequisitionSummary(driver, testCaseName);

			// to verify the currency for cost and accounting etc
			ActionBot.defaultLowSleep();
			boolean flag1 = PageRequisitionCheckOut.fetchRequisitionAmountWithCurrencyForItems(driver, testCaseName, 1).contains(currency);
			PageRequisitionCheckOut.clickExpandAll(driver, testCaseName);
			boolean flag3 = PageRequisitionCheckOut.fetchPurchaseAmountWithCurrencyForItems(driver, testCaseName).contains(currency);

			if (!(flag1 && flag3))
			{
				Assert.assertTrue("the currency is incorrect", false);
			}

			ActionBot.defaultMediumSleep();
			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 29-Nov-2016 </b> <b>Method :
	 * RTC_58086 <b>Description :Verify that user Should be able to Search REQ
	 * by entering data in Serch text box of REQ#, REQ Name, Requester. </font>
	 * <b><br>
	 * <b>Reviewed by: kunal.ashar
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_58086(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		List<MappedTestCase> mappedTestCases = null;
		boolean status = false;

		try
		{
			mappedTestCases = new ArrayList<MappedTestCase>();
			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_58086_1_SearchUsingReqNo"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_58086_2_SearchUsingReqName"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_58086_2_SearchUsingRequester"));
			}
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to navigate to My req sub tab
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			ActionBot.defaultHighSleep();

			// to verify the that user Should be able to Search REQ by
			// entering
			// data in Serch text box of REQ#, REQ Name, Requester.
			/**
			 * RTC_58086_1_SearchUsingReqNo , RTC_58086_2_SearchUsingReqName ,
			 * RTC_58086_2_SearchUsingRequester
			 */
			if (FlowMyRequisitions.isSearchByReqNamePossible(driver, testCaseName, PageMyRequisition.getFirstReqName(driver, testCaseName)))
				status = true;
			if (FlowMyRequisitions.isSearchByReqNoPossible(driver, testCaseName, PageMyRequisition.getFirstReqNo(driver, testCaseName)) && status != false)
				status = true;
			if (FlowMyRequisitions.isSearchByRequisiterPossible(driver, testCaseName, PageMyRequisition.getFirstRequester(driver, testCaseName)) && status != false)
				status = true;

			Assert.assertTrue("the search fields by REQ#, REQ Name, Requester is not working as expected", status);
			// logout
			mappedTestCases.get(0).setTestResult(status);
			mappedTestCases.get(1).setTestResult(status);
			mappedTestCases.get(2).setTestResult(status);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 29-Nov-2016 </b> <b>Method :
	 * RTC_58087 <b>Description :Verify that user should be able to enter
	 * alphabets, Numeric values and special characters in Search text box of
	 * REQ name, Requester. </font><b><br>
	 * <b>Reviewed by: kunal.ashar </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_58087(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			CommonServices.startTestCase(driver, testCase);
			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to navigate to My req sub tab
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);

			// to verify the that user Should be able to enter alphabets,
			// Numeric values and special characters in Search text box of
			// REQ
			// name, Requester.
			boolean status = false;
			if (FlowMyRequisitions.isSearchByReqNamePossible(driver, testCaseName, CommonServices.getTestData(IConstantsData.SPECIAL_CHAR) + "123"))
				status = true;
			if (FlowMyRequisitions.isSearchByReqNoPossible(driver, testCaseName, CommonServices.getTestData(IConstantsData.Requisiter)) && status != false)
				status = true;
			Assert.assertTrue("the search fields by REQ Name, Requester with special and aplha-numeric characters is not working as expected", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 29-Nov-2016 </b> <b>Method :
	 * RTC_58119 <b>Description :Verify that If REQ rejected by "Buyer"
	 * (returning with flag 'allow resubmission' OFF), req should not be
	 * editable. </font><b><br>
	 * <b>Reviewed by: kunal.ashar </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_58119(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		Requisition requisition = new Requisition();
		Item item = new Item();
		try
		{
			CommonServices.startTestCase(driver, testCase);

			//Login
			user = LoginLogoutServices.login(driver, testCase);

			// to get Item object
			item = ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);
			// to get requisition object
			requisition = ObjectCreation.getRequisition(driver);
			requisition.setItems(item);
			requisition.setNextAction(IConstantsData.SUBMIT_REQ);

			// to create req
			requisition = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			// to verify that If REQ rejected by "Buyer" (returning with flag 'allow resubmission' OFF), req should not be editable.			
			FlowBuyersDeskListing.returnRequisitionFromBuyersDesk(driver, testCaseName, requisition, false);

			//To navigate to my requisition sub tab
			ActionBot.defaultLowSleep();

			FlowMyRequisitions.toSearchAndClickReqFromMyRequisitions(driver, testCaseName, requisition.getReqNo());

			//To verify the functionality
			boolean status = PageRequisitionCheckOut.isEditable(driver, testCaseName);
			if (status)
			{
				Assert.assertTrue("The requisition is not supposed to be editable but still it is", (!status));
			}

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 29-Nov-2016 </b> <b>Method :
	 * RTC_76870 <b>Description :As a requestor, User should be able to order a
	 * previously ordered requisition/ purchase order. </font><b><br>
	 * <b>Reviewed by: kunal.ashar </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_76870(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		String status = null;
		boolean flag = false;
		try
		{
			Requisition requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.GUIDED_ITEM);
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			requisition.setEditHeaderLevelInfo(true);
			requisition = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			// to view the req
			FlowBuyersDeskListing.viewRequisitionAtBuyersDesk(driver, testCaseName);

			// convert To Po
			FlowBuyersDesk.convertToPo(driver, testCaseName);

			// submit all POs
			List<PurchaseOrder> purchaseOrders = FlowBuyersDesk.submitAllSuggestedPosForProcessing(driver, testCaseName);
			ActionBot.defaultSleep();
			flag = FlowPoListing.searchPo(driver, testCaseName, purchaseOrders.get(0).getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
			Assert.assertTrue("PO not searched", flag);

			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			Assert.assertTrue("req not searched", requisition.isResult());

			// check status of req
			status = PageMyRequisition.getStatusOfFirstReq(driver, testCaseName);
			assertTrue("Status of requisition was wrong, it should be Ordering", status.contains(IConstantsData.ORDERING_FILTER_LABEL));

			FlowMyRequisitions.toCopyReqFromMyRequisitions(driver, testCaseName, 1);
			PageRequisitionCheckOut.fillCheckoutReqName(driver, testCaseName, (IConstantsData.Req_Name_for_Item) + Helper.getRandomNumber(2));

			CustomDate customDate = CommonUtilities.getTodaysDate();
			PageRequisitionCheckOut.selectRequiredByDate(driver, testCaseName, customDate.getDay(), customDate.getMonth(), customDate.getYear());

			PageRequisitionCheckOut.clickIAmDone(driver, testCaseName);

			// to verify
			flag = FlowMyRequisitions.toCheckSuccessMessageMyRequisitions(driver, testCaseName);
			Assert.assertTrue("failed to copy requisition from previoiusly ordered requisitions", flag);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 29-Nov-2016 </b> <b>Method :
	 * RTC_76871 <b>Description :As a requestor, User should be able to order a
	 * previously ordered requisition/ purchase order except Draft. </font>
	 * <b><br>
	 * <b>Reviewed by: kunal.ashar </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_76871(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		boolean flag = false;

		Requisition requisition = new Requisition();
		String reqStatus = null;
		try
		{

			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.GUIDED_ITEM);

			FlowRequisition.createRequisition(driver, testCaseName, requisition);

			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Requisition was not created", requisition.isResult());
			// to approve req
			ApprovalAllRequests approvalAllRequests = new ApprovalAllRequests();
			approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, requisition.getReqNo(), IConstantsData.REQUISITION, IConstantsData.APPROVE);

			FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);
			reqStatus = PageAllRequestsApproval.getDocumentStatus(driver, testCaseName);
			assertTrue("Requisition was not rejected", reqStatus.equalsIgnoreCase(IConstantsData.APPROVED_FILTER_STATUS));

			// search at buyers desk
			requisition = FlowBuyersDeskListing.searchAtBuyersDeskListing(driver, testCaseName, requisition);
			assertTrue("Requisition was not searched at buyers desk", requisition.isResult());

			// to view the req
			FlowBuyersDeskListing.viewRequisitionAtBuyersDesk(driver, testCaseName);

			// convert To Po
			FlowBuyersDesk.convertToPo(driver, testCaseName);
			List<PurchaseOrder> purchaseOrders = FlowBuyersDesk.submitAllSuggestedPosForProcessing(driver, testCaseName);
			requisition.setPurchaseOrdersList(purchaseOrders);
			String status = null;

			// to search PO
			logger.info("================== Searching PO ==================");
			for (PurchaseOrder purchaseOrder : purchaseOrders)
			{
				flag = FlowPoListing.searchPo(driver, testCaseName, purchaseOrder.getPoNo(), IConstantsData.SEARCH_BY_PO_NO);
				assertTrue("PO was not created against requisition", flag);

				status = PagePurchaseOrderListing.getFirstPoStatus(driver, testCaseName);
				flag = status.equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL);
				Assert.assertTrue(status.equalsIgnoreCase(IConstantsData.IN_APPROVAL_FILTER_LABEL));
			}

			// to navigate to My req sub tab
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);

			// to filter draft req from req list
			PageMyRequisition.clickOnStatusFilterBtn(driver, testCaseName);
			PageMyRequisition.clickOnExpandInProcessInStatusFilterBtn(driver, testCaseName);
			PageMyRequisition.clickOnOrderingInStatusFilterBtn(driver, testCaseName);
			PageMyRequisition.clickOnPerformFilterBtn(driver, testCaseName);

			ActionBot.defaultLowSleep();
			PageMyRequisition.clickOnReqAction(driver, testCaseName, 1);
			try
			{
				flag = PageMyRequisition.isCopyActionReqAvailable(driver, testCaseName, 1);
				if (flag)
				{
					Assert.assertTrue("copy confirmed to have not be existing", flag);
				}
			}
			catch (WebDriverException e)
			{
				Assert.assertTrue("copy confirmed to have not be existing", false);
			}

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 30-Nov-2016 </b> <b>Method :
	 * RTC_76875 <b>Description : Copy Req confirmation : Add to cart items
	 * action should add REQ items to existing cart, and should take user to the
	 * checkout screen. If same item are present in req &amp; cart, update its
	 * qty. </font><b><br>
	 * <b>Reviewed by: kunal.ashar </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_76875(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to clear the items in the cart if any
			int total_items_in_cart_before = Integer.parseInt(PageOnlineStore.fetchTotalItemsInCart(driver, testCaseName));
			if (total_items_in_cart_before > 0)
			{
				FlowOnlineStore.clearCart(driver, testCaseName);
			}

			ActionBot.defaultLowSleep();

			// to navigate to My req sub tab
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);

			// to filter out the ordering req and count the number of items in req
			FlowMyRequisitions.toFilterOutOrderingReqFromMyRequisitions(driver, testCaseName);
			ActionBot.defaultLowSleep();
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			ActionBot.defaultLowSleep();
			int i = 0;
			try
			{
				do
				{
					i = i + 1;
				} while (PageMyRequisition.isItemReqPresentInCart(driver, testCaseName, i + 1));
			}
			catch (WebDriverException e)
			{
			}
			int total_item_in_cart_in_req = i;

			// to copy an in ordering req from my req sub tab
			ActionBot.defaultLowSleep();
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			FlowMyRequisitions.toFilterOutOrderingReqFromMyRequisitions(driver, testCaseName);
			FlowMyRequisitions.toCopyReqFromMyRequisitions(driver, testCaseName, 1);

			// to navigate back to the online store sub tab and count the
			// number
			// of items in the cart
			ActionBot.defaultLowSleep();
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			int total_items_in_cart = Integer.parseInt(PageOnlineStore.fetchTotalItemsInCart(driver, testCaseName));
			if (!(total_item_in_cart_in_req == total_items_in_cart))
			{
				Assert.assertTrue("the cart is inconsistent", false);
			}
			PageOnlineStore.clickOnViewCart(driver, testCaseName);

			// to update the quantity of an item in the cart
			FlowOnlineStore.updateItemQuantityInCart(driver, testCaseName, 1);
			PageOnlineStore.clickOnContinueShopping(driver, testCaseName);

			// to navigate to My req sub tab
			ActionBot.defaultMediumSleep();
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);

			// to filter out the in ordering filter from my req
			FlowMyRequisitions.toFilterOutOrderingReqFromMyRequisitions(driver, testCaseName);
			ActionBot.defaultLowSleep();

			// to count the number of items in the cart of a particular req
			// to
			// be considered
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			ActionBot.defaultLowSleep();
			i = 0;
			try
			{
				do
				{
					i = i + 1;
				} while (PageMyRequisition.isItemReqPresentInCart(driver, testCaseName, i + 1));
			}
			catch (WebDriverException e)
			{
			}
			total_item_in_cart_in_req = i;

			// to navigate to my req sub tab and filter out in ordering
			// requisitions and copy by adding it's items to the existing
			// cart
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			FlowMyRequisitions.toFilterOutOrderingReqFromMyRequisitions(driver, testCaseName);
			FlowMyRequisitions.toCopyReqFromMyRequisitions(driver, testCaseName, 1);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			total_items_in_cart = Integer.parseInt(PageOnlineStore.fetchTotalItemsInCart(driver, testCaseName));

			// to verify
			boolean status = false;
			if (total_item_in_cart_in_req == total_items_in_cart)
			{
				status = true;
			}
			Assert.assertTrue("the cart is inconsistent", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 20-Dec-2016 </b> <b>Method :
	 * RTC_76876 <b>Description : Copy Req confirmation : Clear cart, proceed
	 * with req items option should clear existing cart, add req items to the
	 * cart, and open checkout page. </font><b><br>
	 * <b>Reviewed by: kunal.ashar </b> <br>
	 */

	@Test(dataProvider = "dataProvider")
	public void RTC_76876(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			OnlineStore onlineStore = ObjectCreation.searchItem();
			CommonServices.startTestCase(driver, testCase);

			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore.setQuantity(1);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to clear cart
			FlowOnlineStore.clearCart(driver, testCaseName);
			ActionBot.defaultMediumSleep();

			// to search a product
			FlowOnlineStore.clearCart(driver, testCaseName);
			ActionBot.defaultLowSleep();
			FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (ActionBot.isElementDisplayed(driver, IPageSearchListing.NO_CATLOGUE_FOUND))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			// select check box for an items to add to cart
			ActionBot.defaultMediumSleep();
			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);

			// to navigate to req sub tab and filter out in order
			// requisitions
			// and count the number of items in a particular req to be
			// copied
			ActionBot.defaultLowSleep();
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			FlowMyRequisitions.toFilterOutOrderingReqFromMyRequisitions(driver, testCaseName);
			ActionBot.defaultLowSleep();
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			ActionBot.defaultLowSleep();
			int i = 0;
			try
			{
				do
				{
					i = i + 1;
				} while (PageMyRequisition.isItemReqPresentInCart(driver, testCaseName, i + 1));
			}
			catch (WebDriverException e)
			{
			}
			int total_item_in_req = i;

			// to navigate to my req sub tab and filter out in order
			// requisitions and perform a copy with req items for proceeding
			ActionBot.defaultLowSleep();
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			FlowMyRequisitions.toFilterOutOrderingReqFromMyRequisitions(driver, testCaseName);
			FlowMyRequisitions.toCopyReqFromMyRequisitions(driver, testCaseName, 1);
			/*
			 * PageMyRequisition.clickOnProceedWithReqItemsOnlyButton(driver,
			 * testCaseName);
			 */

			// to count number of items in the checkout
			i = 0;
			try
			{
				do
				{
					i = i + 1;
				} while (PageRequisitionCheckOut.isRowPresent(driver, testCaseName, i + 1));
			}
			catch (WebDriverException e)
			{
			}
			int total_item_in_checkout = i;
			boolean status = false;
			if (total_item_in_checkout == total_item_in_req)
				status = true;
			Assert.assertTrue("checkout cart is inconsistent", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 20-Dec-2016 </b> <b>Method :
	 * RTC_76877 <b>Description : Copy Req confirmation : Confirmation should
	 * not be asked in case user's cart don't have any Items present in it.
	 * </font><b><br>
	 * <b>Reviewed by: kunal.ashar </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_76877(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to clear the cart
			FlowOnlineStore.clearCart(driver, testCaseName);
			ActionBot.defaultMediumSleep();

			// to navigate to my req sub tab and filter out in order
			// requisitions and perform a copy with req items for proceeding
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			FlowMyRequisitions.toFilterOutOrderingReqFromMyRequisitions(driver, testCaseName);
			FlowMyRequisitions.toCopyReqFromMyRequisitions(driver, testCaseName, 1);

			// to verify the absence of confirmation option for copy
			boolean status = false;
			try
			{
				status = FlowMyRequisitions.waitAndCheckForConfirmationOptionAvailability(driver, testCaseName);
			}
			catch (Exception e)
			{
				status = false;
			}
			Assert.assertTrue("Confirmation options were available", (!status));

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 20-Dec-2016 </b> <b>Method :
	 * RTC_76878 <b>Description : Copy Req confirmation : Check behavior in case
	 * user hits Escape once confirmation is shown. </font><b><br>
	 * <b>Reviewed by: kunal.ashar </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_76878(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to navigate to my req sub tab and filter out in order
			// requisitions and perform a copy with req items for proceeding
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			FlowMyRequisitions.toFilterOutOrderingReqFromMyRequisitions(driver, testCaseName);
			boolean status = FlowMyRequisitions.toCopyReqFromMyRequisitions(driver, testCaseName, 1);

			// to verify the absence of confirmation option for copy
			/*
			 * status = false; try { new Actions(driver).sendKeys(Keys.ESCAPE);
			 * status = FlowMyRequisitions.isMyRequisitionsPage(driver,
			 * testCaseName, 1); } catch (Exception e) { status = false; }
			 */
			Assert.assertTrue("Confirmation options were available", (status));

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 20-Dec-2016 </b> <b>Method :
	 * RTC_76887 <b>Description : Copy Req : Check copying a requisition with
	 * delivery split in it. </font><b><br>
	 * <b>Reviewed by: kunal.ashar </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_76887(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to clear the cart
			FlowOnlineStore.clearCart(driver, testCaseName);
			ActionBot.defaultMediumSleep();

			// to navigate to my req sub tab and filter out in order requisitions and perform a copy with req items for proceeding
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			FlowMyRequisitions.toFilterOutOrderingReqFromMyRequisitions(driver, testCaseName);
			FlowMyRequisitions.toCopyReqFromMyRequisitions(driver, testCaseName, 1);

			CustomDate customDate = CommonUtilities.getRequiredBy();
			PageRequisitionCheckOut.selectRequiredByDate(driver, testCaseName, customDate.getDay(), customDate.getMonth(), customDate.getYear());

			//Edit header level info
			PageRequisitionCheckOut.clickEditHeaderInfo(driver, testCaseName);
			PageRequisitionCheckOut.clickCostAllocation(driver, testCaseName);
			ActionBot.click(driver, IModelRequisitionSummaryCostBooking.COSTBOOKING_OPTION_SINGLE_CC);
			ActionBot.fillAutoCompleteField(driver, IModelRequisitionSummaryCostBooking.COSTBOOKING_SINGLE_CC, "Auto");
			ActionBot.fillAutoCompleteField(driver, IModelRequisitionSummaryCostBooking.COSTBOOKING_SINGLE_PROJECT, "PR");
			ActionBot.fillAutoCompleteField(driver, IModelRequisitionSummaryCostBooking.COSTBOOKING_SINGLE_BUDGET, "Auto");
			ActionBot.focusAndclick(driver, IModelRequisitionSummaryCommon.SAVEREQSUMMARY);

			// to split the delivery for an item
			FlowRequisition.splitDeliveryRequistions(driver, testCaseName);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 20-Dec-2016 </b> <b>Method :
	 * RTC_76897 <b>Description : Copy Req : All the information on the
	 * check-out as purchase type, attachments, comments, billing & delivery,
	 * accounting, cost booking should be copied from the previous requisition
	 * except : Required By date should be left empty If item leadtime is
	 * NA</font><b><br>
	 * <b>Reviewed by: kunal.ashar </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_76897(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		List<MappedTestCase> mappedTestCases = null;

		try
		{
			mappedTestCases = new ArrayList<MappedTestCase>();
			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_76898"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_76896"));
			}
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			OnlineStore onlineStore = ObjectCreation.searchItem();
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore.setQuantity(1);

			// to clear the cart
			FlowOnlineStore.clearCart(driver, testCaseName);
			ActionBot.defaultMediumSleep();

			// to create a requistion and filter out in order requisitions and veiw the first req
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}
			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);
			ActionBot.defaultMediumSleep();
			PageSearchListing.clickOnCheckOutButton(driver, testCaseName);
			FlowRequisition.flow_IamDone_SaveAsDraft_Cancel(driver, testCaseName, onlineStore);

			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			FlowMyRequisitions.toFilterOutInApprovalReqFromMyRequisitions(driver, testCaseName);
			ActionBot.defaultLowSleep();
			String old_req_num = PageMyRequisition.getReqNumberRowise(driver, testCaseName, 1);
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			ActionBot.waitForPageLoad(driver);
			ActionBot.defaultLowSleep();
			ActionBot.scroll(driver, "200");
			// fetch data from the requisition view
			PageRequisitionView.clickOnItemDetailsLinkIndewise(driver, testCaseName, 1);

			//Get lead time
			String leadTime = ActionBot.getTextWithInElement(driver, IPageRequisitionView.LEADTIME_ITEM_DETAILS_POPUP);
			logger.info("Lead Time::" + leadTime);

			//Close popup
			PageSearchListing.clickCloseOnItemPopUp(driver, testCaseName);

			//Get purchase type
			String purchase_type = ActionBot.getTextWithInElement(driver, IPageRequisitionView.GET_PURCHASE_TYPE);
			logger.info("Purchase Type::" + purchase_type);

			//Get comment
			String comments = ActionBot.getTextWithInElement(driver, IPageRequisitionView.GET_COMMENTS);
			logger.info("Comment::" + comments);

			if (comments.equals("-"))
				comments = "";

			PageRequisitionCheckOut.clickExpandAll(driver, testCaseName);
			PageRequisitionView.clickOnExpandDelivery(driver, testCaseName);

			String del_name = ActionBot.getTextWithInElement(driver, IPageRequisitionView.GET_DELIVERY_NAME);
			logger.info("Delivery Name::" + del_name);

			String del_loc = ActionBot.getTextWithInElement(driver, IPageRequisitionCheckOut.GET_DELIVERY_LOCATION1);
			logger.info("Delivery Location::" + del_loc);

			//Close modal
			ActionBot.findElement(driver, IPageRequisitionView.CLOSE_ITEM_SUMMARY_MODAL).click();

			PageRequisitionView.clickOnExpandCostBooking(driver, testCaseName);

			String cost_center = ActionBot.getTextWithInElement(driver, IPageRequisitionView.GET_COST_CENTER);
			logger.info("Cost Center::" + cost_center);

			String cost_gl_account = ActionBot.getTextWithInElement(driver, IPageRequisitionView.GET_GL_ACCOUNT);

			logger.info("GL Account::" + cost_gl_account);

			//Close modal
			ActionBot.findElement(driver, IPageRequisitionView.CLOSE_ITEM_SUMMARY_MODAL).click();

			//Get requisition name
			String original_reqName = PageRequisitionView.getRequisitionName(driver, testCaseName);

			logger.info("Original requisition name::" + original_reqName);

			// to copy a requisition
			PageRequisitionView.clickOnGoBackLink(driver, testCaseName);
			ActionBot.waitForPageLoad(driver);
			ActionBot.defaultLowSleep();
			FlowMyRequisitions.toFilterOutInApprovalReqFromMyRequisitions(driver, testCaseName);
			FlowMyRequisitions.toCopyReqFromMyRequisitions(driver, testCaseName, 1);

			// to verify the above fields
			boolean status = false;
			ActionBot.waitForElementToBePresent(driver, 8, IPageRequisitionCheckOut.GET_PURCHASE_TYPE1);
			Select select = new Select(ActionBot.findElement(driver, IPageRequisitionCheckOut.GET_PURCHASE_TYPE1));
			WebElement element = select.getFirstSelectedOption();
			String pur_type = element.getText();

			logger.info("Purchase Type after copying requisition::" + pur_type);
			if (purchase_type.contains(pur_type))
			{
				status = true;
			}
			ActionBot.defaultLowSleep();
			String comm = ActionBot.getTextWithInElement(driver, IPageRequisitionCheckOut.GET_COMMENTS1);
			logger.info("Comment after copying requisition::" + comm);
			if (comm == null)
			{
				comm = "";
			}

			if ((comments.equals(comm)) && (status != false))
			{
				status = true;
			}
			ActionBot.defaultLowSleep();
			String delivery_name = ActionBot.getTextWithInElement(driver, IPageRequisitionCheckOut.GET_DELIVERY_NAME1);
			logger.info("Delivery name after copying requisition:" + delivery_name);
			if ((del_name.equals(delivery_name)) && (status != false))
			{
				status = true;
			}
			ActionBot.defaultLowSleep();
			String delivery_loc = ActionBot.getTextWithInElement(driver, IPageRequisitionCheckOut.GET_DELIVERY_LOCATION1);
			logger.info("Delivery location after copying requisition::" + delivery_loc);
			if ((del_loc.equals(delivery_loc)) && (status != false))
			{
				status = true;
			}
			ActionBot.defaultLowSleep();
			ActionBot.defaultLowSleep();
			String cost = ActionBot.getTextWithInElement(driver, IPageRequisitionCheckOut.GET_COST_CENTER1);
			logger.info("Cost center after copying requisition::" + cost);
			if ((cost_center.equals(cost)) && (status != false))
			{
				status = true;
			}
			ActionBot.defaultLowSleep();
			PageRequisitionCheckOut.clickExpandAll(driver, testCaseName);

			ActionBot.defaultMediumSleep();
			String glacc = ActionBot.getTextWithInElement(driver, IPageRequisitionCheckOut.FETCH_ITEM_LEVEL_GLACCOUNT);
			logger.info("GL Account after copying requisition::" + glacc);
			if ((cost_gl_account.equals(glacc)) && (status != false))
			{
				status = true;
			}

			// to verify the required by req date is empty or not along with the above functionalities
			boolean status1 = false;
			if (status != false)
			{
				if (leadTime.equals(IConstantsData.NA))
					status1 = PageRequisitionCheckOut.isRequiredByDateEmpty(driver, testCaseName);
				else
					status1 = !(PageRequisitionCheckOut.isRequiredByDateEmpty(driver, testCaseName));
			}
			Assert.assertTrue("Inconsistent values after copy requisition as required by date is not empty for NA", status1);

			/**
			 * RTC_76898
			 */
			// to verify the required by Req name will be re-generated based on new info
			ActionBot.defaultMediumSleep();
			boolean status2 = true;
			if (status != false)
			{
				ActionBot.defaultMediumSleep();
				String name = PageRequisitionCheckOut.fetchRequisitionName(driver, testCaseName);
				if (name.compareTo(original_reqName) == 0)
					status2 = false;
			}
			Assert.assertTrue("Inconsistent values after copy requisition as same req name was generated", status2);
			mappedTestCases.get(0).setTestResult(status2);

			PageRequisitionCheckOut.fillCheckoutReqName(driver, testCaseName, PageRequisitionCheckOut.fetchRequisitionName(driver, testCaseName) + Helper.getRandomString(5));
			CustomDate customDate = CommonUtilities.getRequiredBy();
			PageRequisitionCheckOut.selectRequiredByDate(driver, testCaseName, customDate.getDay(), customDate.getMonth(), customDate.getYear());
			PageRequisitionCheckOut.clickIAmDone(driver, testCaseName);
			String new_req_num = PageMyRequisition.getReqNumberRowise(driver, testCaseName, 1);

			/**
			 * RTC_76896
			 */
			// to verify the new req number was created or not
			boolean status3 = true;
			if (status != false && (old_req_num == new_req_num))
			{
				status3 = false;
			}
			Assert.assertTrue("Inconsistent values after copy requisition or same req number was created", status3);

			// logout

			mappedTestCases.get(1).setTestResult(status3);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 21-Dec-2016 </b> <b>Method :
	 * RTC_76889 <b>Description : Copy Req : Check copying a requisition with
	 * custom delivery address in it. [Created by you] </font><b><br>
	 * <b>Reviewed by: kunal.ashar </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_76889(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			CommonServices.startTestCase(driver, testCase);
			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to clear the cart
			FlowOnlineStore.clearCart(driver, testCaseName);
			ActionBot.defaultMediumSleep();

			// to search a product
			OnlineStore onlineStore = ObjectCreation.searchItem();
			FlowOnlineStore.clearCart(driver, testCaseName);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore.setQuantity(1);
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (ActionBot.isElementDisplayed(driver, IPageSearchListing.NO_CATLOGUE_FOUND))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			// select check box for an items to add to cart
			ActionBot.defaultMediumSleep();
			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);

			ActionBot.defaultMediumSleep();

			// to checkout and create a new requistion and submit
			PageSearchListing.clickOnCheckOutButton(driver, testCaseName);
			FlowRequisition.flow_IamDone_SaveAsDraft_Cancel(driver, testCaseName, onlineStore);

			// to navigate to the my requisition sub tab and copy and verify
			FlowMyRequisitions.toCopyReqFromMyRequisitions(driver, testCaseName, 1);

			// to verify the successfully copied custom delivery address
			boolean status = PageRequisitionCheckOut.isEditable(driver, testCaseName);
			Assert.assertTrue("failed copying a custom address req", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 21-Dec-2016 </b> <b>Method :
	 * RTC_76879 <b>Description : Copied req should be a new draft. User should
	 * be able to add/remove items & modify req details </font><b><br>
	 * <b>Reviewed by: kunal.ashar </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_76879(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to clear the cart
			FlowOnlineStore.clearCart(driver, testCaseName);
			ActionBot.defaultMediumSleep();

			// to navigate to my requisitions sub tab and copy the first req from in ordering type
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			FlowMyRequisitions.toFilterOutInApprovalReqFromMyRequisitions(driver, testCaseName);
			PageMyRequisition.clickOnReqAction(driver, testCaseName, 1);
			PageMyRequisition.clickOnCopyActionReq(driver, testCaseName, 1);

			// after navigating to the checkout page, modify the req items and req info
			ActionBot.waitForPageLoad(driver);
			PageRequisitionCheckOut.fillCheckoutReqName(driver, testCaseName,
				ActionBot.getTextWithInElement(driver, IPageRequisitionCheckOut.TEXTBOX_REQUISITION_NAME) + Helper.getRandomString(4));
			boolean status1 = PageRequisitionCheckOut.deleteReqItemInCart(driver, testCaseName, 1);
			boolean status2 = FlowRequisition.addNewItemToCheckOutCart(driver, testCaseName, testCase, user, map);

			// to veirfy the completion of the operation
			if (!(status1 && status2))
			{
				Assert.assertTrue("Req info was either not successfully modified and req checkout cart was not altered", false);
			}

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 22-Dec-2016 </b> <b>Method :
	 * RTC_107414 <b>Description : Verify that User should be able to view item
	 * details of free text item in a pop-up on click of item name on
	 * requisition view. <b>Reviewed by: kunal.ashar </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_107414(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			OnlineStore onlineStore = ObjectCreation.searchItem();
			CEform cEform = ObjectCreation.getDefaultCEformObject();

			CommonServices.startTestCase(driver, testCase);

			onlineStore.setSearchItem((IConstantsData.FREE_TEXT_ITEM_NAME));
			onlineStore.setItemType(IConstantsData.GUIDED_ITEM);
			onlineStore.setNextAction(IConstantsData.Checkout);
			cEform.setNextAction(IConstantsData.PUBLISH_EFORM);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to clear the cart
			FlowOnlineStore.clearCart(driver, testCaseName);
			ActionBot.defaultMediumSleep();

			// to search a product
			FlowOnlineStore.clearCart(driver, testCaseName);
			ActionBot.defaultMediumSleep();
			cEform = FlowCEform.createCEform(driver, testCaseName, cEform);
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, cEform);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			// to fill out the checkout form and submit
			FlowRequisition.fillFreeTextRequistionSummary(driver, testCaseName);

			// in the my requisition sub tab select the req and see item details
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);

			ActionBot.scroll(driver, "200");
			// TO verify the functionality
			boolean status = FlowMyRequisitions.isFreewTextItemDetailPopup(driver, testCaseName);
			Assert.assertTrue("failed in adding a text free item ", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 22-Dec-2016 </b> <b>Method :
	 * RTC_107416 <b>Description : Verify that User should be able to view item
	 * details of catalog item in a pop-up on click of item name on requisition
	 * view. <b>Reviewed by: kunal.ashar </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_107416(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to naviagte to my requsition sub tab
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			FlowMyRequisitions.toFilterOutOrderingReqFromMyRequisitions(driver, testCaseName);
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			PageMyRequisition.clickOnReqItemIndexwise(driver, testCaseName, 1);

			// to verify the functionality
			boolean status = FlowMyRequisitions.isCatlogItemDetailPopup(driver, testCaseName);
			Assert.assertTrue("catlog popup failed to open", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 22-Dec-2016 </b> <b>Method :
	 * RTC_107094 <b>Description : Check version document of copied requisition
	 * for correct information. <b>Reviewed by: Reviewed by: kunal.ashar </font>
	 * <b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_107094(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to naviagte to my requsition sub tab
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			FlowMyRequisitions.toFilterOutOrderingReqFromMyRequisitions(driver, testCaseName);
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);

			// to verify the functionality
			boolean status = PageMyRequisition.clickOnReqAuditVerIndexwise(driver, testCaseName, 1);
			Assert.assertTrue("failed to open verison document of copied req", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 22-Dec-2016 </b> <b>Method :
	 * RTC_107097 <b>Description : Check copying a Requisition with Costing
	 * split at header. Reviewed by: kunal.ashar</font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_107097(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// clear cart
			FlowOnlineStore.clearCart(driver, testCaseName);

			// to naviagte to my requsition sub tab
			ActionBot.defaultMediumSleep();
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			FlowMyRequisitions.toFilterOutOrderingReqFromMyRequisitions(driver, testCaseName);
			PageMyRequisition.clickOnReqAction(driver, testCaseName, 1);
			ActionBot.defaultLowSleep();
			PageMyRequisition.clickOnCopyActionReq(driver, testCaseName, 1);

			// to perform cost split in header and checkout
			ActionBot.waitForPageLoad(driver);
			PageRequisitionCheckOut.fillCheckoutReqName(driver, testCaseName, PageRequisitionCheckOut.fetchRequisitionName(driver, testCaseName) + Helper.getRandomString(5));
			CustomDate customDate = CommonUtilities.getRequiredBy();
			PageRequisitionCheckOut.selectRequiredByDate(driver, testCaseName, customDate.getDay(), customDate.getMonth(), customDate.getYear());
			PageRequisitionCheckOut.clickEditHeaderInfo(driver, testCaseName);
			PageRequisitionCheckOut.clickCostAllocation(driver, testCaseName);
			FlowRequisition.toDoHeaderLevelCostSplitting(driver, testCaseName);
			PageRequisitionCheckOut.clickIAmDone(driver, testCaseName);

			// to copy a newly created req with cost split
			PageMyRequisition.clickOnReqAction(driver, testCaseName, 1);
			PageMyRequisition.clickOnCopyActionReq(driver, testCaseName, 1);

			// to verify the functionality
			ActionBot.scroll(driver, "400");
			ActionBot.defaultMediumSleep();
			boolean status = PageRequisitionCheckOut.isEditable(driver, testCaseName);
			Assert.assertTrue("req with cost split failed to copy", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 23-Dec-2016 </b> <b>Method :
	 * RTC_107480 <b>Description : Verify that User should be able to filter
	 * (left side search result filter) search results based on Green or
	 * Preferred items. Reviewed by: kunal.ashar </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_107480(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to search an item and filer by the type of products mentioned
			// above
			OnlineStore onlineStore = ObjectCreation.searchItem();
			FlowOnlineStore.clearCart(driver, testCaseName);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));

			PageOnlineStore.fillSearchText(driver, testCaseName, onlineStore.getSearchItem());
			PageOnlineStore.clickSearchButton(driver, testCaseName);
			ActionBot.defaultMediumSleep();

			if (ActionBot.isElementDisplayed(driver, IPageSearchListing.NO_CATLOGUE_FOUND))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			// to filter out other categories of product
			PageSearchListing.seeOtherFilterOptions(driver, testCaseName);
			ActionBot.defaultLowSleep();
			PageSearchListing.selectGreenfacetFilter(driver, testCaseName);
			boolean status1 = PageSearchListing.isLoadingPage(driver, testCaseName);
			PageSearchListing.selectPrefferedfacetFilter(driver, testCaseName);
			boolean status2 = PageSearchListing.isLoadingPage(driver, testCaseName);

			// to verify the above functionality
			if (!(status1 && status2))
			{
				Assert.assertTrue("filters doesn't work", (status1 && status2));
			}

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 23-Dec-2016 </b> <b>Method :
	 * RTC_37183 <b>Description : User should be able to select multiple
	 * currencies out of available currencies,and range filter should refresh
	 * based on min & max value of selected currencies. Reviewed by: kunal.ashar
	 * </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_37183(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			CommonServices.startTestCase(driver, testCase);
			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to search an item and filer by the type of products mentioned
			// above
			OnlineStore onlineStore = ObjectCreation.searchItem();
			FlowOnlineStore.clearCart(driver, testCaseName);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));

			PageOnlineStore.fillSearchText(driver, testCaseName, onlineStore.getSearchItem());
			PageOnlineStore.clickSearchButton(driver, testCaseName);
			ActionBot.defaultMediumSleep();

			if (ActionBot.isElementDisplayed(driver, IPageSearchListing.NO_CATLOGUE_FOUND))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			// to see price range of products
			PageSearchListing.seePriceRangeFilter(driver, testCaseName);
			PageSearchListing.insertLowerRangePrice(driver, testCaseName);
			boolean status1 = PageSearchListing.isLoadingPage(driver, testCaseName);
			PageSearchListing.insertHigherRangePrice(driver, testCaseName);
			boolean status2 = PageSearchListing.isLoadingPage(driver, testCaseName);

			// to verify the above functionality
			if (!(status1 && status2))
			{
				Assert.assertTrue("filters doesn't work", (status1 && status2));
			}

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 23-Dec-2016 </b> <b>Method :
	 * RTC_130519 <b>Description : Approval > Pending Requests : Default filter
	 * should be on "Pending" status. Reviewed by: kunal.ashar </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_130519(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			CommonServices.startTestCase(driver, testCase);
			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to navigate to approval sub tab and check for default value
			// of
			// the filter
			MainPageHeaderLevelTab.clickOnApprovalAllRequestsTab(driver);
			PageAllRequestsApproval.clickOnStatusFilter(driver, testCaseName);
			boolean status = PageAllRequestsApproval.isPendingStatusFilterSelected(driver, testCaseName);

			// to verify
			Assert.assertTrue("pending status filter was not selected", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 26-Dec-2016 </b> <b>Method :
	 * RTC_130528 <b>Description : Search > Listing : For each item, show count
	 * of items already present in cart with Message: "%QTY% already in the
	 * cart" [Check mentioned scenario] Reviewed by: kunal.ashar</font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_130528(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to clear cart
			FlowOnlineStore.clearCart(driver, testCaseName);
			ActionBot.waitForPageLoad(driver);

			// to search for an item in the online store page
			OnlineStore onlineStore = ObjectCreation.searchItem();
			FlowOnlineStore.clearCart(driver, testCaseName);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore.setQuantity(2);

			PageOnlineStore.fillSearchText(driver, testCaseName, onlineStore.getSearchItem());
			PageOnlineStore.clickSearchButton(driver, testCaseName);
			ActionBot.defaultLowSleep();

			if (ActionBot.isElementDisplayed(driver, IPageSearchListing.NO_CATLOGUE_FOUND))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			// to add 2 items to the cart with quantity as 1 each
			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);

			// verify the mentioned scenario
			boolean status1 = PageSearchListing.isItemAlreadyInCartIndexwise(driver, testCaseName, 1);
			boolean status2 = PageSearchListing.isItemAlreadyInCartIndexwise(driver, testCaseName, 2);
			if (!(status1 && status2))
			{
				Assert.assertTrue("message of items added is not present", false);
			}

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 26-Dec-2016 </b> <b>Method :
	 * RTC_130529 <b>Description : Requisition > Document Currency : Requester /
	 * Buyer should be able to select requisition document currency. Reviewed
	 * by: kunal.ashar </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_130529(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		List<MappedTestCase> mappedTestCases = null;

		try
		{

			mappedTestCases = new ArrayList<MappedTestCase>();
			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_130569"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_130570"));
			}
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			OnlineStore onlineStore = ObjectCreation.searchItem();
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore.setQuantity(1);

			// to clear cart and to search for an item in the online store page
			FlowOnlineStore.clearCart(driver, testCaseName);
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			PageSearchListing.seeMultipleCurrencyOptions(driver, testCaseName);

			//Add item of USD
			PageSearchListing.selectPriceOptionIndexwise(driver, testCaseName, 2);

			// to add 2 items to the cart with quantity as 1 each
			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);

			ActionBot.defaultMediumSleep();
			PageSearchListing.clickOnCheckOutButton(driver, testCaseName);

			// to select a new requisition currency
			ActionBot.waitForPageLoad(driver);
			PageRequisitionCheckOut.clickEditHeaderInfo(driver, testCaseName);
			boolean status1 = PageRequisitionCheckOut.toSelectBillingCurrencyChoiceWise(driver, testCaseName, 1, "usd");
			PageRequisitionCheckOut.clickCloseRequisitionSummary(driver, testCaseName);
			// to verify the succeful selection of the billing currency
			Assert.assertTrue("currency selection failed", status1);

			/**
			 * RTC_130569
			 */
			// to verify the functionality
			boolean status2 = PageRequisitionCheckOut.isCurrencyWiseTotalLinkPresent(driver, testCaseName);
			Assert.assertTrue("the link was available", (!status2));
			mappedTestCases.get(0).setTestResult(!status2);

			/**
			 * RTC_130570
			 */
			// to select USD currency from the filter
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			//Add item of INR
			PageSearchListing.selectPriceOptionIndexwise(driver, testCaseName, 1);
			ActionBot.waitForPageLoad(driver);

			// to add 2 items to the cart with quantity as 1 each
			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);

			ActionBot.defaultMediumSleep();

			// to checkout requsition and verify the functionality
			PageSearchListing.clickOnCheckOutButton(driver, testCaseName);
			boolean status3 = PageRequisitionCheckOut.isCurrencyWiseTotalLinkPresent(driver, testCaseName);

			Assert.assertTrue("currency selection failed", status3);

			// logout
			mappedTestCases.get(1).setTestResult(status3);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 26-Dec-2016 </b> <b>Method :
	 * RTC_31004 <b>Description : User should get list of all the items in the
	 * requisition in a grid with : Item number. Reviewed by: kunal.ashar
	 * </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_31004(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		List<MappedTestCase> mappedTestCases = null;

		try
		{
			mappedTestCases = new ArrayList<MappedTestCase>();
			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_31005"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_229020"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_31006"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_31007"));
			}
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to clear cart
			FlowOnlineStore.clearCart(driver, testCaseName);
			ActionBot.defaultLowSleep();

			// to navigate to the my requisition sub tab and copy a requisition to checkout
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			FlowMyRequisitions.toFilterOutOrderingReqFromMyRequisitions(driver, testCaseName);
			FlowMyRequisitions.toCopyReqFromMyRequisitions(driver, testCaseName, 1);

			// to verify the presence of item number in each item grid(Parent Case)
			boolean status = PageRequisitionCheckOut.isItemNumberPresentInEachGrid(driver, testCaseName);
			Assert.assertTrue("Item number is not available for all items", status);

			/**
			 * RTC_31005, RTC_229020
			 */
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			FlowMyRequisitions.toFilterOutOrderingReqFromMyRequisitions(driver, testCaseName);

			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			ActionBot.scroll(driver, "200");

			boolean res = FlowViewRequisition.isCompleteItemInfoPresentIndexwise(driver, testCaseName, 1);
			ActionBot.defaultSleep();
			ActionBot.scroll(driver, "-400");
			ActionBot.defaultSleep();
			PageRequisitionView.clickOnGoBackLink(driver, testCaseName);
			FlowMyRequisitions.toFilterOutOrderingReqFromMyRequisitions(driver, testCaseName);
			FlowMyRequisitions.toCopyReqFromMyRequisitions(driver, testCaseName, 1);
			boolean status1 = PageRequisitionCheckOut.isItemNameSupplierNamePresentInEachGrid(driver, testCaseName);
			Assert.assertTrue("Item name and supplier is not available for all items", status1 && res);

			mappedTestCases.get(0).setTestResult(status1);
			mappedTestCases.get(1).setTestResult(res);

			/**
			 * RTC_31006
			 */
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			FlowMyRequisitions.toFilterOutOrderingReqFromMyRequisitions(driver, testCaseName);
			FlowMyRequisitions.toCopyReqFromMyRequisitions(driver, testCaseName, 1);

			// to verify the presence of item number in each item grid
			boolean status2 = PageRequisitionCheckOut.isItemUnitPricePresentInEachGrid(driver, testCaseName);
			Assert.assertTrue("Item unit price is not available for all items", status2);
			mappedTestCases.get(2).setTestResult(status2);

			/**
			 * RTC_31007
			 */
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			FlowMyRequisitions.toFilterOutOrderingReqFromMyRequisitions(driver, testCaseName);
			FlowMyRequisitions.toCopyReqFromMyRequisitions(driver, testCaseName, 1);

			// to verify the presence of item number in each item grid
			boolean status3 = PageRequisitionCheckOut.isItemQtyPresentInEachGrid(driver, testCaseName);
			Assert.assertTrue("Item quantity is not available for all items", status3);

			mappedTestCases.get(3).setTestResult(status3);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 26-Dec-2016 </b> <b>Method :
	 * RTC_31002 <b>Description : There should be 'My Address' option in
	 * Delivery tab to add custom address. Reviewed by: kunal.ashar </font>
	 * <b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_31002(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to clear cart
			FlowOnlineStore.clearCart(driver, testCaseName);
			ActionBot.defaultMediumSleep();

			// to search for an item in the online store page
			OnlineStore onlineStore = ObjectCreation.searchItem();
			FlowOnlineStore.clearCart(driver, testCaseName);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore.setQuantity(1);

			FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (ActionBot.isElementDisplayed(driver, IPageSearchListing.NO_CATLOGUE_FOUND))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			// to add 2 items to the cart with quantity as 1 each and
			// checkout
			//FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);
			FlowOnlineStore.addSingleItemAndCheckout(driver, testCaseName, onlineStore);
			//PageSearchListing.clickOnCheckOutButton(driver, testCaseName);

			// to verify the presence of my address option in delivery tab
			ActionBot.waitForPageLoad(driver);
			PageRequisitionCheckOut.clickEditHeaderInfo(driver, testCaseName);
			PageRequisitionCheckOut.clickDeliveryEditRequisitionSummary(driver, testCaseName);
			boolean status = PageRequisitionCheckOut.isMyAddressPresentInDeliveryTab(driver, testCaseName);
			Assert.assertTrue("My address option in delivery tab is not available", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 26-Dec-2016 </b> <b>Method :
	 * RTC_130567 <b>Description : Requisition > Currency-wise Sub-total : On
	 * the buyer desk edit page items should be grouped by item currency,and a
	 * Sub-total for each currency should be displayed, along with sub-total in
	 * the document currency. Reviewed by: kunal.ashar</font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_130567(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to clear cart
			FlowOnlineStore.clearCart(driver, testCaseName);
			ActionBot.defaultLowSleep();

			// to search for an item in the online store page
			OnlineStore onlineStore = ObjectCreation.searchItem();
			FlowOnlineStore.clearCart(driver, testCaseName);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore.setQuantity(1);

			FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (ActionBot.isElementDisplayed(driver, IPageSearchListing.NO_CATLOGUE_FOUND))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			// to select INR currency from the filter
			PageSearchListing.seeMultipleCurrencyOptions(driver, testCaseName);
			PageSearchListing.selectPriceOptionIndexwise(driver, testCaseName, 1);

			// to add 2 items to the cart with quantity as 1 each
			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);

			// to select USD currency from the filter
			PageSearchListing.seeMultipleCurrencyOptions(driver, testCaseName);
			PageSearchListing.selectPriceOptionIndexwise(driver, testCaseName, 2);

			// to add 2 items to the cart with quantity as 1 each
			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);

			ActionBot.defaultMediumSleep();

			PageSearchListing.clickOnCheckOutButton(driver, testCaseName);

			// to verify the presence of my address option in delivery tab
			ActionBot.waitForPageLoad(driver);
			PageRequisitionCheckOut.clickOnCurrencyWiseTotalLink(driver, testCaseName);
			boolean status[] = new boolean[3];
			for (int i = 1; i <= 2; i++)
			{
				status[i - 1] = PageRequisitionCheckOut.isCurrencyWiseAmmountPresent(driver, testCaseName, i);
			}
			status[2] = PageRequisitionCheckOut.isTotalAmmountPresent(driver, testCaseName);
			if (!(status[0] && status[1] && status[2]))
				Assert.assertTrue("currency wise sub total or the total amount was missing", false);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 26-Dec-2016 </b> <b>Method :
	 * RTC_31024 <b>Description : User should be able to Delete an item from
	 * cart using the delete option. Reviewed by: kunal.ashar </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_31024(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to clear cart
			FlowOnlineStore.clearCart(driver, testCaseName);
			ActionBot.defaultLowSleep();

			// to search for an item in the online store page
			OnlineStore onlineStore = ObjectCreation.searchItem();
			FlowOnlineStore.clearCart(driver, testCaseName);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore.setQuantity(2);

			FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (ActionBot.isElementDisplayed(driver, IPageSearchListing.NO_CATLOGUE_FOUND))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			// to add 2 items to the cart with quantity as 1 each
			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);
			PageSearchListing.clickToViewCart(driver, testCaseName);
			ActionBot.defaultLowSleep();

			// to verify deleting an item from the cart using the delete
			// option
			// indexwise
			boolean status = PageRequisitionCheckOut.deleteItemInCartIndexwise(driver, testCaseName, 1);
			Assert.assertTrue("deleting an item from the cart failed", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 2-Jan-2017 </b> <b>Method :
	 * RTC_31025 <b>Description : User should be able to click on the item name
	 * to view item details (catalog). Reviewed by: kunal.ashar </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_31025(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to clear cart
			FlowOnlineStore.clearCart(driver, testCaseName);
			ActionBot.defaultLowSleep();

			// to search for an item in the online store page
			OnlineStore onlineStore = ObjectCreation.searchItem();
			FlowOnlineStore.clearCart(driver, testCaseName);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore.setQuantity(1);

			FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (ActionBot.isElementDisplayed(driver, IPageSearchListing.NO_CATLOGUE_FOUND))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			// to add 2 items to the cart with quantity as 1 each
			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);

			ActionBot.defaultMediumSleep();
			// to naivagte to checkout and verify the existence of the item
			// details on the item name link
			PageSearchListing.clickOnCheckOutButton(driver, testCaseName);
			ActionBot.waitForPageLoad(driver);
			ActionBot.defaultSleep();
			ActionBot.scroll(driver, "200");
			PageRequisitionCheckOut.clickItemDescriptionLinkIndexwise(driver, testCaseName, 1);
			boolean status = PageRequisitionCheckOut.isCatLogItemDetailsPresent(driver, testCaseName);
			Assert.assertTrue("the item detail pop was not displayed", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 2-Jan-2017 </b> <b>Method :
	 * RTC_31058 <b>Description : User should have a button to 'Add more Items',
	 * which should take him to his last search result. Reviewed by:
	 * kunal.ashar</font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_31058(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to search for an item in the online store page
			OnlineStore onlineStore = ObjectCreation.searchItem();
			FlowOnlineStore.clearCart(driver, testCaseName);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore.setQuantity(2);
			FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (ActionBot.isElementDisplayed(driver, IPageSearchListing.NO_CATLOGUE_FOUND))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			// to add 2 items to the cart with quantity as 1 each
			List<WebElement> names = null;
			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);

			ActionBot.defaultMediumSleep();

			// to naivagte to checkout and verify the revious search list
			// page
			// on clicking add more item
			PageSearchListing.clickOnCheckOutButton(driver, testCaseName);
			PageRequisitionCheckOut.clickAddItemOnCheckout(driver, testCaseName);
			ActionBot.defaultLowSleep();
			PageRequisitionCheckOut.clickOnYesConfirmationLink(driver, testCaseName);

			// to navigate back to search listing page to verify
			boolean status = false;
			if (PageSearchListing.isSearchListingPage(driver, testCaseName))
			{
				List<WebElement> name2 = PageSearchListing.getItemName(driver, testCaseName);
				if (names == name2)
				{
					status = true;
				}
			}
			status = !status;
			Assert.assertTrue("the online store page was not opened", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 2-Jan-2017 </b> <b>Method :
	 * RTC_31026 <b>Description :User should be able to click on the item name
	 * to view item details (Guided). Reviewed by: kunal.ashar </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_31026(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			CEform cEform = ObjectCreation.getDefaultCEformObject();
			OnlineStore onlineStore = ObjectCreation.searchItem();

			CommonServices.startTestCase(driver, testCase);

			cEform.setNextAction(IConstantsData.PUBLISH_EFORM);
			onlineStore.setSearchItem((IConstantsData.FREE_TEXT_ITEM_NAME));
			onlineStore.setItemType(IConstantsData.GUIDED_ITEM);
			onlineStore.setNextAction(IConstantsData.Checkout);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to create a eForm
			cEform = FlowCEform.createCEform(driver, testCaseName, cEform);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			ActionBot.waitForPageLoad(driver);

			// to search a product
			FlowOnlineStore.clearCart(driver, testCaseName);
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, cEform);

			Assert.assertTrue("The guided item detail pop was not displayed", onlineStore.isResult());

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 2-Jan-2017 </b> <b>Method :
	 * RTC_31063 <b>Description :User should have "I'm Done" button to submit
	 * requisition. to view item details (Guided). Reviewed by:
	 * kunal.ashar</font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_31063(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to clear cart
			FlowOnlineStore.clearCart(driver, testCaseName);
			ActionBot.waitForPageLoad(driver);

			// to search for an item in the online store page
			OnlineStore onlineStore = ObjectCreation.searchItem();
			FlowOnlineStore.clearCart(driver, testCaseName);
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore.setQuantity(2);
			FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (ActionBot.isElementDisplayed(driver, IPageSearchListing.NO_CATLOGUE_FOUND))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			// to add 2 items to the cart with quantity as 1 each and
			// checkout
			ActionBot.waitForPageLoad(driver);
			FlowOnlineStore.addSingleItemAndCheckout(driver, testCaseName, onlineStore);
			//FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);
			//PageSearchListing.clickOnCheckOutButton(driver, testCaseName);

			// to naivagte to checkout and verify the existence of the of I
			// AM
			// Done button.
			ActionBot.waitForPageLoad(driver);
			boolean status = PageRequisitionCheckOut.isEditable(driver, testCaseName);
			Assert.assertTrue("the I am done button was not displayed", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 2-Jan-2017 </b> <b>Method :
	 * RTC_31064 <b>Description :User should be able to save requisition as
	 * draft and cancel it. Reviewed by: kunal.ashar </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_31064(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		CommonServices.startTestCase(driver, testCase);

		try
		{

			// Login
			user = LoginLogoutServices.login(driver, testCase);

			// Get requisition object
			Requisition requisition = ObjectCreation.getRequisition(driver);

			// Get item
			Item item = ObjectCreation.getItem("catalogItem");

			int quantity = CommonUtilities.getNonZeroRandomNumbers(2);

			CatelogItem catelogItem2 = new CatelogItem();
			catelogItem2.setItemName(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING));
			catelogItem2.setQuantity(quantity);

			item.getCatelogItems().add(catelogItem2);

			requisition.setNextAction(IConstantsData.NONE);
			requisition.setItems(item);

			// Create requisition
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// Save req as draft
			FlowRequisition.saveReqAsDraft(driver, testCaseName);

			FlowMyRequisitions.toFilterOutDraftReqFromMyRequisitions(driver, testCaseName);
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			PageRequisitionCheckOut.clickCancleRequisition(driver, testCaseName);

			// Confirm
			ActionBot.click(driver, IPageRequisitionCheckOut.BUTTON_YES_CONFIRM_POPUP);

			// Verify
			boolean status = FlowMyRequisitions.isDraftRequisitionCancelledSuccessfully(driver, testCaseName);
			Assert.assertTrue("Requisition was not canceled!", status);

			// Logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 2-Jan-2017 </b> <b>Method :
	 * RTC_30998 <b>Description :Delivery, Billing and Costing should be shown
	 * in single modal with title "Requisition Summary". Reviewed by:
	 * kunal.ashar</font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_30998(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		List<MappedTestCase> mappedTestCases = null;

		try
		{
			OnlineStore onlineStore = ObjectCreation.searchItem();

			mappedTestCases = new ArrayList<MappedTestCase>();
			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_30999"));
			}
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore.setQuantity(2);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to clear cart and to search for an item in the online store
			// page
			FlowOnlineStore.clearCart(driver, testCaseName);
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			// to add 1 items to the cart with quantity as 1 each and
			// checkout
			//FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);
			//PageSearchListing.clickOnCheckOutButton(driver, testCaseName);

			FlowOnlineStore.addSingleItemAndCheckout(driver, testCaseName, onlineStore);

			// to verify the Delivery, Billing and Costing should be shown
			// in
			// single modal with title "Requisition Summary"
			ActionBot.waitForPageLoad(driver);
			PageRequisitionCheckOut.clickEditHeaderInfo(driver, testCaseName);
			boolean status = FlowRequisition.toVerifyDeliveryBillingCostingModal(driver, testCaseName);
			Assert.assertTrue("Delivery, Billing and Costing was not shown in single modal with titke 'Requisition Summary''", status);

			/**
			 * RTC_30999
			 */
			boolean status1 = FlowRequisition.toVerifyDeliveryBillingCostingChangableModals(driver, testCaseName);
			Assert.assertTrue("Delivery, Billing and Costing was not shown in single modal with titke 'Requisition Summary''", status1);

			// logout
			mappedTestCases.get(0).setTestResult(status1);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 2-Jan-2017 </b> <b>Method :
	 * RTC_30999 <b>Description :Delivery, Billing and Costing should be
	 * changable in single modal with title "Requisition Summary". Reviewed by:
	 * kunal.ashar</font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_30999(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			OnlineStore onlineStore = ObjectCreation.searchItem();

			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to clear cart
			FlowOnlineStore.clearCart(driver, testCaseName);
			ActionBot.waitForPageLoad(driver);

			// to search for an item in the online store page
			FlowOnlineStore.clearCart(driver, testCaseName);
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore.setQuantity(2);
			FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (ActionBot.isElementDisplayed(driver, IPageSearchListing.NO_CATLOGUE_FOUND))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			// to add 1 items to the cart with quantity as 1 each and
			// checkout
			ActionBot.waitForPageLoad(driver);
			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);
			PageSearchListing.clickOnCheckOutButton(driver, testCaseName);

			// to verify the Delivery, Billing and Costing should be shown
			// in
			// single modal with titke "Requisition Summary"
			ActionBot.waitForPageLoad(driver);
			PageRequisitionCheckOut.clickEditHeaderInfo(driver, testCaseName);
			boolean status = FlowRequisition.toVerifyDeliveryBillingCostingChangableModals(driver, testCaseName);
			Assert.assertTrue("Delivery, Billing and Costing was not shown in single modal with titke 'Requisition Summary''", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 2-Jan-2017 </b> <b>Method :
	 * RTC_31001 <b>Description : Required by date will be
	 * mandatory/non-mandatory based on setting. Reviewed by: kunal.ashar</font>
	 * <b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_31001(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			CommonServices.startTestCase(driver, testCase);
			// login
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// to navigate to the setup customize and alter the settings
			MainPageHeaderLevelTab.clickOnCustomizeSubTab(driver);
			ActionBot.waitForPageLoad(driver);
			PageCustomizeSettings.clickOnRequisitionLink(driver, testCaseName);
			ActionBot.waitForPageLoad(driver);
			PageCustomizeSettings.clickOnReqiuredByDateNo(driver, testCaseName);
			PageCustomizeSettings.clickOnSaveButtom(driver, testCaseName);

			// to navigate to the online store
			ActionBot.waitForPageLoad(driver);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			ActionBot.waitForPageLoad(driver);

			// to create requisition and move on to checkout page
			OnlineStore onlineStore = ObjectCreation.searchItem();
			FlowOnlineStore.clearCart(driver, testCaseName);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));

			PageOnlineStore.fillSearchText(driver, testCaseName, onlineStore.getSearchItem());
			PageOnlineStore.clickSearchButton(driver, testCaseName);
			ActionBot.waitForOperations(5000);

			if (ActionBot.isElementDisplayed(driver, IPageSearchListing.NO_CATLOGUE_FOUND))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}
			ActionBot.waitForPageLoad(driver);
			for (int i = 1; i <= 1; i++)
			{
				onlineStore = FlowOnlineStore.getItemId(driver, testCaseName, i, onlineStore);
				String item_id = onlineStore.getItemId();
				PageSearchListing.clickOnCheckBoxOfItem(driver, testCaseName, item_id);
				ActionBot.waitForOperations(10000);
			}
			PageSearchListing.clickOnAddMultipleItemsToCart(driver, testCaseName);
			ActionBot.defaultMediumSleep();
			PageSearchListing.clickOnCheckOutButton(driver, testCaseName);

			// To fill up the checkout form excluding the "required by"
			// field
			ActionBot.waitForPageLoad(driver);
			Requisition requisition = ObjectCreation.getRequisition(driver);
			ActionBot.waitForPageLoad(driver);
			requisition.setReqName(CommonServices.getTestData(IConstantsData.SPECIAL_CHAR_USER) + Helper.getRandomString(5));
			PageRequisitionCheckOut.fillCheckoutReqName(driver, testCaseName, requisition.getReqName());
			PageRequisitionCheckOut.selectPurchaseType(driver, testCaseName, requisition.getPurchaseType());
			PageRequisitionCheckOut.clickEditHeaderInfo(driver, testCaseName);
			FlowRequisition.fillCostAllocationRequistionSummary(driver, testCaseName);

			// To verify the above setting to take effect
			//PageRequisitionCheckOut.clickOnDeliveryItemEdit(driver, testCaseName);
			PageRequisitionCheckOut.clickDeliveryEditRequisitionSummary(driver, testCaseName);
			ActionBot.defaultLowSleep();
			boolean status = (PageRequisitionCheckOut.isRequiredByDateMissingValueErrorPresent(driver, testCaseName));
			Assert.assertTrue("error message not available", status);
			ActionBot.defaultLowSleep();

			// to navigate to the setup customize and revert the settings
			/*
			 * MainPageHeaderLevelTab.clickOnCustomizeSubTab(driver);
			 * ActionBot.waitForPageLoad(driver);
			 * PageCustomizeSettings.clickOnRequisitionLink(driver, testCaseName);
			 * ActionBot.waitForPageLoad(driver);
			 * PageCustomizeSettings.clickOnReqiuredByDateYes(driver, testCaseName);
			 * PageCustomizeSettings.clickOnSaveButtom(driver, testCaseName);
			 */

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 2-Jan-2017 </b> <b>Method :
	 * RTC_37168 <b>Description : "Requisition Currency" should be same as "User
	 * Currency", and will be used with requisition total & item sub-total.
	 * Reviewed by: kunal.ashar</font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_37168(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to navigate to the setup customize and alter the settings
			MainPageHeaderLevelTab.clickOnMasterSubTab(driver);
			ActionBot.waitForPageLoad(driver);
			PageMasterDataSettings.clickOnUsersLink(driver, testCaseName);
			ActionBot.waitForPageLoad(driver);
			PageUserManagement.selectSearchedUserByType(driver, testCaseName, "Name");
			PageUserManagement.fillSearchData(driver, testCaseName, user.getDisplayName());
			PageUserManagement.clickOnSearchGoButton(driver, testCaseName);

			// to click edit user link rowwise and verify the user currency
			ActionBot.waitForPageLoad(driver);
			PageUserManagement.clickOnEditUserLinkRowise(driver, testCaseName, 1);
			String user_currency = PageUserManagement.getUserCurrency(driver, testCaseName);

			// to navigate to the online store and move on to a checkout
			// page by
			// selecting an item
			PageUserManagement.clickOnReturnToSetUpModule(driver, testCaseName);
			ActionBot.waitForPageLoad(driver);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			ActionBot.waitForPageLoad(driver);
			OnlineStore onlineStore = ObjectCreation.searchItem();
			FlowOnlineStore.clearCart(driver, testCaseName);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));

			PageOnlineStore.fillSearchText(driver, testCaseName, onlineStore.getSearchItem());
			PageOnlineStore.clickSearchButton(driver, testCaseName);
			ActionBot.waitForOperations(5000);

			if (ActionBot.isElementDisplayed(driver, IPageSearchListing.NO_CATLOGUE_FOUND))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}
			ActionBot.waitForPageLoad(driver);
			for (int i = 1; i <= 1; i++)
			{
				onlineStore = FlowOnlineStore.getItemId(driver, testCaseName, i, onlineStore);
				String item_id = onlineStore.getItemId();
				PageSearchListing.clickOnCheckBoxOfItem(driver, testCaseName, item_id);
				ActionBot.waitForOperations(10000);
			}
			PageSearchListing.clickOnAddMultipleItemsToCart(driver, testCaseName);
			PageSearchListing.clickOnCheckOutButton(driver, testCaseName);

			// to verify "Requisition Currency" should be same as
			// "User Currency", and will be used with requisition total &
			// item
			// sub-total.
			ActionBot.waitForPageLoad(driver);
			boolean status = false;
			PageRequisitionCheckOut.clickEditHeaderInfo(driver, testCaseName);
			String billing_currency = PageRequisitionCheckOut.getBillingCurrency(driver, testCaseName);
			if (billing_currency.equals(user_currency))
				status = true;
			String sub_total = PageRequisitionCheckOut.getItemSubTotalrowise(driver, testCaseName, 1);
			if (sub_total.contains(user_currency) && (status))
				status = true;
			String total_price_currency = PageRequisitionCheckOut.getPurchaseTotalPrice(driver, testCaseName);
			if (total_price_currency.contains(user_currency) && (status))
				status = true;
			Assert.assertTrue("requisition currency and user currency and item sub total and total is not same", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 4-Jan-2017 </b> <b>Method :
	 * RTC_37171 <b>Description : Unit price will carry the original item
	 * currency. Reviewed by: kunal.ashar</font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_37171(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to search item and add to cart and checkout
			OnlineStore onlineStore = ObjectCreation.searchItem();
			FlowOnlineStore.clearCart(driver, testCaseName);
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore.setQuantity(1);

			FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (ActionBot.isElementDisplayed(driver, IPageSearchListing.NO_CATLOGUE_FOUND))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}
			ActionBot.waitForPageLoad(driver);
			String item_price = PageSearchListing.getItemPriceCurrencyIndexwise(driver, testCaseName, 1);
			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);
			ActionBot.defaultMediumSleep();
			PageSearchListing.clickOnCheckOutButton(driver, testCaseName);

			// to verify the unit price to be the same as item price
			ActionBot.waitForPageLoad(driver);
			String unit_price_currency = PageRequisitionCheckOut.getItemUnitCurrencyIndexwise(driver, testCaseName, 1);
			boolean status = false;
			if (item_price.contains(unit_price_currency))
			{
				status = true;
			}
			Assert.assertTrue(" Unit price and the original item currency are not same", status);

			// logout
			ScreenShot.screenshot(driver, testCaseName, "before log out happened!");
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 4-Jan-2017 </b> <b>Method :
	 * RTC_53398 <b>Description : Item level Split: There should be option -
	 * Copy cost-center information from the header (consider split at the req
	 * level) Reviewed by: kunal.ashar </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_53398(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		List<MappedTestCase> mappedTestCases = null;

		try
		{
			OnlineStore onlineStore = ObjectCreation.searchItem();

			mappedTestCases = new ArrayList<MappedTestCase>();
			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_53399"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_53400"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_53401"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_53402"));
			}
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore.setQuantity(2);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to search item and add to cart and checkout
			FlowOnlineStore.clearCart(driver, testCaseName);
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);
			ActionBot.defaultMediumSleep();
			PageSearchListing.clickOnCheckOutButton(driver, testCaseName);

			//Set required by date
			CustomDate customDate = CommonUtilities.getRequiredBy();
			PageRequisitionCheckOut.selectRequiredByDate(driver, testCaseName, customDate.getDay(), customDate.getMonth(), customDate.getYear());

			//Edit header level info
			PageRequisitionCheckOut.clickEditHeaderInfo(driver, testCaseName);
			PageRequisitionCheckOut.clickCostAllocation(driver, testCaseName);
			ActionBot.click(driver, IModelRequisitionSummaryCostBooking.MODAL_CHECKOUT_COSTBOOKING_YES_RADIO_BUTTON);
			ActionBot.fillAutoCompleteField(driver, IModelRequisitionSummaryCostBooking.COSTBOOKING_SINGLE_CC, "Auto");
			ActionBot.fillAutoCompleteField(driver, IModelRequisitionSummaryCostBooking.COSTBOOKING_SINGLE_PROJECT, "PR");
			ActionBot.fillAutoCompleteField(driver, IModelRequisitionSummaryCostBooking.COSTBOOKING_SINGLE_BUDGET, "Auto");
			ActionBot.focusAndclick(driver, IModelRequisitionSummaryCommon.SAVEREQSUMMARY);

			// to verify the presence of option - Copy cost-center information from the header
			ActionBot.waitForPageLoad(driver);
			ActionBot.defaultMediumSleep();
			ActionBot.scroll(driver, "200");
			PageRequisitionCheckOut.clickEditItemRequisitionindexwise(driver, testCaseName, 1);
			ModalItemSummaryCostAllocation.clickOnCostBooking(driver);
			boolean status0 = PageRequisitionCheckOut.isOptionCopyCostCenterInfoPresent(driver, testCaseName);
			Assert.assertTrue("Copy cost-center information was not available", status0);

			/**
			 * RTC_53399
			 */
			ActionBot.waitForPageLoad(driver);
			PageRequisitionCheckOut.clickCopyCostBookingAtItemLevel(driver, testCaseName);
			boolean status1 = PageRequisitionCheckOut.isCostBookingOptionPercentageSelected(driver, testCaseName);
			Assert.assertTrue("Book cost at the item level Split cost by [Percentage (default)] is not selected", status1);
			mappedTestCases.get(0).setTestResult(status1);

			/**
			 * RTC_53400
			 */
			ActionBot.defaultLowSleep();
			PageRequisitionCheckOut.clickCopyCostBookingAtItemLevel(driver, testCaseName);
			boolean status2 = PageRequisitionCheckOut.isCostBookingOptionQuantityPresent(driver, testCaseName);
			Assert.assertTrue("Book cost at the item level Split cost by [ Quantity ] is not present", status2);
			mappedTestCases.get(1).setTestResult(status2);

			/**
			 * RTC_53401
			 */
			PageRequisitionCheckOut.autoFillCostBookingAtItemLevel(driver, testCaseName, 1);
			PageRequisitionCheckOut.clickItemLevelCostCenterSplitIndexWise(driver, testCaseName, 1);
			PageRequisitionCheckOut.autoFillCostBookingAtItemLevel(driver, testCaseName, 2);

			mappedTestCases.get(2).setTestResult(status2);

			/**
			 * RTC_53402
			 */

			// to verify the presence of option - Copy cost-center information from the header
			ActionBot.defaultLowSleep();
			PageRequisitionCheckOut.clickItemLevelCostCenterSplitIndexWise(driver, testCaseName, 1);
			PageRequisitionCheckOut.autoFillCostBookingAtItemLevel(driver, testCaseName, 2);
			PageRequisitionCheckOut.clickToSaveItemSummaryRequisition(driver, testCaseName);

			// to verify the copy from header to item level in cost split
			// booking
			ActionBot.defaultSleep();
			PageRequisitionCheckOut.clickExpandAll(driver, testCaseName);
			String item_level_cost_center[] = new String[2];
			String item_level_project[] = new String[2];
			String item_level_budget[] = new String[2];
			for (int i = 0; i < 2; i++)
			{
				ActionBot.defaultMediumSleep();
				if (i == 1)
				{
					item_level_cost_center[i] = PageRequisitionCheckOut.getItemLevelCostCenterIndexwise(driver, testCaseName, (i + 3));
					logger.info("Cost Center for Item level 2:" + item_level_cost_center[i]);

					ActionBot.defaultMediumSleep();

					item_level_project[i] = PageRequisitionCheckOut.getItemLevelProjectIndexwise(driver, testCaseName, (i + 3));
					logger.info("Project for Item level 2:" + item_level_project[i]);

					ActionBot.defaultMediumSleep();

					item_level_budget[i] = PageRequisitionCheckOut.getItemLevelBudgetIndexwise(driver, testCaseName, (i + 3));
					logger.info("Budget for Item level 2:" + item_level_budget[i]);

					ActionBot.defaultMediumSleep();
				}
				else
				{
					item_level_cost_center[i] = PageRequisitionCheckOut.getItemLevelCostCenterIndexwise(driver, testCaseName, (i + 2));
					logger.info("Cost Center for Item level 1 :" + item_level_cost_center[i]);

					ActionBot.defaultMediumSleep();

					item_level_project[i] = PageRequisitionCheckOut.getItemLevelProjectIndexwise(driver, testCaseName, (i + 2));
					logger.info("Project for Item level 1:" + item_level_project[i]);

					ActionBot.defaultMediumSleep();

					item_level_budget[i] = PageRequisitionCheckOut.getItemLevelBudgetIndexwise(driver, testCaseName, (i + 2));
					logger.info("Budget for Item level 1:" + item_level_budget[i]);

					ActionBot.defaultMediumSleep();
				}

			}

			String header_level_cost_center = PageRequisitionCheckOut.getHeaderLevelCostCenter(driver, testCaseName);
			logger.info("Header level CC::" + header_level_cost_center);

			String header_level_project = PageRequisitionCheckOut.getHeaderLevelProject(driver, testCaseName);
			logger.info("Header level Project::" + header_level_project);

			String header_level_cost_budget = PageRequisitionCheckOut.getHeaderLevelBudget(driver, testCaseName);
			logger.info("Header level Budget::" + header_level_cost_budget);

			boolean res1 = PageRequisitionCheckOut.compareItemLevelWithHeaderLevelDataWise(item_level_budget, header_level_cost_budget);
			boolean res2 = PageRequisitionCheckOut.compareItemLevelWithHeaderLevelDataWise(item_level_cost_center, header_level_cost_center);
			boolean res3 = PageRequisitionCheckOut.compareItemLevelWithHeaderLevelDataWise(item_level_project, header_level_project);

			Assert.assertTrue("copy from the header to item level split failed", (res3 && res1 && res2));
			mappedTestCases.get(3).setTestResult(res3 && res1 && res2);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 5-Jan-2017 </b> <b>Method :
	 * RTC_31046 <b>Description : Delivery tab > Option to 'Use delivery
	 * information from the requisition header' (selected by default) should be
	 * present Reviewed by: kunal.ashar</font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_31046(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			OnlineStore onlineStore = ObjectCreation.searchItem();

			CommonServices.startTestCase(driver, testCase);

			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore.setQuantity(1);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to search item and add to cart and checkout
			FlowOnlineStore.clearCart(driver, testCaseName);
			FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (ActionBot.isElementDisplayed(driver, IPageSearchListing.NO_CATLOGUE_FOUND))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}
			ActionBot.waitForPageLoad(driver);
			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);
			ActionBot.defaultMediumSleep();
			PageSearchListing.clickOnCheckOutButton(driver, testCaseName);

			// to verify Option to 'Use delivery information from the
			// requisition header' (selected by default) should be present
			ActionBot.waitForPageLoad(driver);
			ActionBot.defaultLowSleep();
			ActionBot.scroll(driver, "200");
			PageRequisitionCheckOut.clickEditItemRequisitionindexwise(driver, testCaseName, 1);
			boolean status = PageRequisitionCheckOut.isDeliveryInformationFromRequisitionSelected(driver, testCaseName);
			Assert.assertTrue("use delivery information from the requisition header was not selected by default", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 5-Jan-2017 </b> <b>Method :
	 * RTC_31047 <b>Description :Delivery tab > 'Use delivery information from
	 * the requisition header' > On selection,display delivery address, deliver
	 * to & required by from req header. Reviewed by: kunal.ashar</font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_31047(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{

			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			OnlineStore onlineStore = ObjectCreation.searchItem();
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore.setQuantity(1);

			// to search item and add to cart and checkout
			FlowOnlineStore.clearCart(driver, testCaseName);
			FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (ActionBot.isElementDisplayed(driver, IPageSearchListing.NO_CATLOGUE_FOUND))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}
			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);
			ActionBot.defaultMediumSleep();
			PageSearchListing.clickOnCheckOutButton(driver, testCaseName);

			// to verify Option to 'Use delivery information from the
			// requisition header' (selected by default) should be present
			ActionBot.waitForPageLoad(driver);
			ActionBot.defaultMediumSleep();
			ActionBot.scroll(driver, "200");
			PageRequisitionCheckOut.clickEditItemRequisitionindexwise(driver, testCaseName, 1);
			boolean status = PageRequisitionCheckOut.isDeliveryAddress_DeliverTo_RequiredByPresentInItemSummary(driver, testCaseName);
			Assert.assertTrue("delivery address, deliver to and required by date is not displayed", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 5-Jan-2017 </b> <b>Method :
	 * RTC_31048 <b>Description :Delivery tab > 'Deliver to one or more persons
	 * or locations' > On select mentioned info should be shown. Reviewed by:
	 * kunal.ashar</font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_31048(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{

			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			OnlineStore onlineStore = ObjectCreation.searchItem();
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore.setQuantity(1);

			// to search item and add to cart and checkout
			FlowOnlineStore.clearCart(driver, testCaseName);
			FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (ActionBot.isElementDisplayed(driver, IPageSearchListing.NO_CATLOGUE_FOUND))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}
			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);
			ActionBot.defaultMediumSleep();
			PageSearchListing.clickOnCheckOutButton(driver, testCaseName);

			// to verify Option to 'Use delivery information from the requisition header' (selected by default) should be present
			ActionBot.waitForPageLoad(driver);
			ActionBot.scroll(driver, "200");
			PageRequisitionCheckOut.clickEditItemRequisitionindexwise(driver, testCaseName, 1);
			String delivery_address[] = new String[1];
			delivery_address[0] = ActionBot.getTextWithInElement(driver, IPageRequisitionCheckOut.DELIVERY_SINGLE_SPLIT_DELIVERY_ADDRESS);
			String deilver_to[] = new String[1];
			deilver_to[0] = ActionBot.getTextWithInElement(driver, IPageRequisitionCheckOut.DELIVERY_SINGLE_SPLIT_DELIVER_TO);
			String required_by[] = new String[1];
			required_by[0] = ActionBot.getTextWithInElement(driver, IPageRequisitionCheckOut.DELIVERY_SINGLE_SPLIT_REQUIRED_DATE);
			if (required_by[0].equals("-"))
				required_by[0] = "";
			PageSearchListing.clickCloseOnItemPopUp(driver, testCaseName);
			boolean status1 = PageRequisitionCheckOut.compareItemLevelWithHeaderLevelDataWise(delivery_address,
				PageRequisitionCheckOut.getDeliveryAddressHeader(driver, testCaseName));
			boolean status2 = PageRequisitionCheckOut.compareItemLevelWithHeaderLevelDataWise(deilver_to, PageRequisitionCheckOut.getDeliverToHeader(driver, testCaseName));
			boolean status3 = false;
			if (required_by[0].compareTo(PageRequisitionCheckOut.getRequiredByDate(driver, testCaseName)) == 0)
				status3 = true;
			else
				status3 = false;

			Assert.assertTrue("delivery address, deliver to and required by date is not displayed", (status1 && status2 && status3));

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 5-Jan-2017 </b> <b>Method :
	 * RTC_31049 <b>Description : Delivery tab > 'Deliver to one or more persons
	 * or locations' > Quantity for all split lines should be equal to item qty.
	 * Reviewed by: kunal.ashar</font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_31049(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to search item and add to cart and checkout
			OnlineStore onlineStore = ObjectCreation.searchItem();
			FlowOnlineStore.clearCart(driver, testCaseName);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));

			PageOnlineStore.fillSearchText(driver, testCaseName, onlineStore.getSearchItem());
			PageOnlineStore.clickSearchButton(driver, testCaseName);
			ActionBot.waitForOperations(5000);
			if (ActionBot.isElementDisplayed(driver, IPageSearchListing.NO_CATLOGUE_FOUND))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}
			ActionBot.waitForPageLoad(driver);
			for (int i = 1; i <= 1; i++)
			{
				onlineStore = FlowOnlineStore.getItemId(driver, testCaseName, i, onlineStore);
				String item_id = onlineStore.getItemId();
				PageSearchListing.clickOnCheckBoxOfItem(driver, testCaseName, item_id);
				ActionBot.waitForOperations(10000);
			}
			PageSearchListing.clickOnAddMultipleItemsToCart(driver, testCaseName);
			ActionBot.defaultMediumSleep();
			PageSearchListing.clickOnCheckOutButton(driver, testCaseName);

			// to verify Option Quantity for all split lines should be equal to item qty.
			ActionBot.waitForPageLoad(driver);
			ActionBot.scroll(driver, "200");
			PageRequisitionCheckOut.clickEditItemRequisitionindexwise(driver, testCaseName, 1);
			PageRequisitionCheckOut.clickDeliveryMultiOptionSplit(driver, testCaseName);
			PageRequisitionCheckOut.clicktoAddItemLevelCostSplitIndexwise(driver, testCaseName, 1);
			PageRequisitionCheckOut.clickToSaveItemSummaryRequisition(driver, testCaseName);
			boolean status = !(PageRequisitionCheckOut.clickEditItemRequisitionindexwise(driver, testCaseName, 1));
			Assert.assertTrue("Quantity for all split lines were accepted even though not equal", (status));

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 5-Jan-2017 </b> <b>Method :
	 * RTC_53415_1 <b>Description : Check Cost splitting functionality in case
	 * of Draft requisition. Reviewed by: kunal.ashar</font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_53415_1(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();

		User user = null;

		try
		{
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to navigate to the My Requisition sub tab and copy a draft
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			ActionBot.waitForPageLoad(driver);
			FlowMyRequisitions.toFilterOutDraftReqFromMyRequisitions(driver, testCaseName);
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);

			// to apply a cost split
			ActionBot.waitForPageLoad(driver);
			CustomDate customDate = CommonUtilities.getRequiredBy();
			PageRequisitionCheckOut.selectRequiredByDate(driver, testCaseName, customDate.getDay(), customDate.getMonth(), customDate.getYear());
			PageRequisitionCheckOut.clickEditHeaderInfo(driver, testCaseName);
			PageRequisitionCheckOut.clickCostAllocation(driver, testCaseName);
			ActionBot.click(driver, IModelRequisitionSummaryCostBooking.MODAL_CHECKOUT_COSTBOOKING_YES_RADIO_BUTTON);
			FlowRequisition.toDoHeaderLevelCostSplitting(driver, testCaseName);
			PageRequisitionCheckOut.clickIAmDone(driver, testCaseName);
			ActionBot.defaultHighSleep();
			boolean status = PageMyRequisition.isReqSuccessfullySubmitted(driver, testCaseName);
			Assert.assertTrue("Submitting a draft with cost splitting failed", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 5-Jan-2017 </b> <b>Method :
	 * RTC_53416 <b>Description : Check Cost splitting functionality in case of
	 * editing returned requisition. Reviewed by: kunal.ashar </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_53416(TestCase testCase) throws Exception
	{

		WebDriver driver = null;
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		Requisition requisition = new Requisition();
		Item item = new Item();
		try
		{
			// log in
			driver = DriverSelector.getDriver(testCase);
			user = LoginLogoutServices.login(driver, testCase);
			CommonServices.startTestCase(driver, testCase);

			// to get Item object
			item = ObjectCreation.getItem(IConstantsData.CATALOG_ITEM);
			// to get requisition object
			requisition = ObjectCreation.getRequisition(driver);
			requisition.setItems(item);
			requisition.setNextAction(IConstantsData.SUBMIT_REQ);

			// to create req
			requisition = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			// to navigate to buyer's desk sub tab and return a req with resend enable
			FlowBuyersDeskListing.returnRequisitionFromBuyersDesk(driver, testCaseName, requisition, true);

			// to navigate to my requisition sub tab and edit and resubmit
			MainPageHeaderLevelTab.clickOnAllRequisitionsSubTab(driver);
			PageMyRequisition.searchRequisitionByReqNo(driver, testCaseName, requisition.getReqNo());
			FlowMyRequisitions.toCopyReqFromMyRequisitions(driver, testCaseName, 1);

			//Set Required by date
			CustomDate customDate = CommonUtilities.getRequiredBy();
			PageRequisitionCheckOut.selectRequiredByDate(driver, testCaseName, customDate.getDay(), customDate.getMonth(), customDate.getYear());

			// to perform cost split in header
			ActionBot.waitForPageLoad(driver);
			PageRequisitionCheckOut.clickEditHeaderInfo(driver, testCaseName);
			PageRequisitionCheckOut.clickCostAllocation(driver, testCaseName);
			ActionBot.click(driver, IModelRequisitionSummaryCostBooking.MODAL_CHECKOUT_COSTBOOKING_YES_RADIO_BUTTON);
			String cost_center[] = FlowRequisition.toDoHeaderLevelCostSplitting(driver, testCaseName);

			// to verify the cost split with 'multiple' key word in the summary
			boolean status = false;
			if (!(FlowRequisition.toCheckCostCenterValuesInHeaderSummary(driver, testCaseName, cost_center)))

				if (PageRequisitionCheckOut.fetchCostCenter(driver, testCaseName).equals("Multiple"))
					status = true;
			Assert.assertTrue("Invalid cost center information was displayed", status);
			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 5-Jan-2017 </b> <b>Method :
	 * RTC_53418 <b>Description : If cost has been booked to multiple cost
	 * centers, show "Multiple" at header summary [Check after changing option
	 * at header level to other than Item level split ] Reviewed by:
	 * kunal.ashar</font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_53418(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// clear cart
			FlowOnlineStore.clearCart(driver, testCaseName);

			// to naviagte to my requsition sub tab
			ActionBot.defaultMediumSleep();
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			FlowMyRequisitions.toFilterOutOrderingReqFromMyRequisitions(driver, testCaseName);
			FlowMyRequisitions.toCopyReqFromMyRequisitions(driver, testCaseName, 1);

			//Set Required by date
			CustomDate customDate = CommonUtilities.getRequiredBy();
			PageRequisitionCheckOut.selectRequiredByDate(driver, testCaseName, customDate.getDay(), customDate.getMonth(), customDate.getYear());

			// to perform cost split in header
			ActionBot.waitForPageLoad(driver);
			PageRequisitionCheckOut.clickEditHeaderInfo(driver, testCaseName);
			PageRequisitionCheckOut.clickCostAllocation(driver, testCaseName);
			ActionBot.click(driver, IModelRequisitionSummaryCostBooking.MODAL_CHECKOUT_COSTBOOKING_YES_RADIO_BUTTON);
			String cost_center[] = FlowRequisition.toDoHeaderLevelCostSplitting(driver, testCaseName);

			// to verify the cost split with 'multiple' key word in the summary
			boolean status = false;
			if (!(FlowRequisition.toCheckCostCenterValuesInHeaderSummary(driver, testCaseName, cost_center)))

				if (PageRequisitionCheckOut.fetchCostCenter(driver, testCaseName).equals("Multiple"))
					status = true;
			Assert.assertTrue("Invalid cost center information was displayed", status);
			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 5-Jan-2017 </b> <b>Method :
	 * RTC_30964 <b>Description : User should be able to see checkout summary
	 * updated on changes to the cart. Reviewed by: kunal.ashar </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_30964(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{

			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			OnlineStore onlineStore = ObjectCreation.searchItem();
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore.setQuantity(2);

			// to clear the cart and search a product
			FlowOnlineStore.clearCart(driver, testCaseName);
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			// to select an item and add to cart
			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);
			ActionBot.defaultMediumSleep();
			int cart_quantity = Integer.parseInt(PageOnlineStore.getTotalItemsInCart(driver, testCaseName));
			ActionBot.defaultMediumSleep();
			PageSearchListing.clickOnCheckOutButton(driver, testCaseName);
			int checkout_quantity = Integer.parseInt(PageRequisitionCheckOut.fetchCheckoutItemQuantity(driver, testCaseName));

			// to verify
			boolean status = false;
			if (cart_quantity == checkout_quantity)
				status = true;

			Assert.assertTrue("iconsistent cart and checkout-cart Quantites", status);

			// to select another item and add to cart too
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));

			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);
			ActionBot.defaultMediumSleep();

			cart_quantity = Integer.parseInt(PageOnlineStore.getTotalItemsInCart(driver, testCaseName));
			ActionBot.defaultMediumSleep();

			PageSearchListing.clickOnCheckOutButton(driver, testCaseName);
			checkout_quantity = Integer.parseInt(PageRequisitionCheckOut.fetchCheckoutItemQuantity(driver, testCaseName));
			// to verify
			status = false;
			if (cart_quantity == checkout_quantity)
				status = true;

			Assert.assertTrue("iconsistent cart and checkout-cart Quantites", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 5-Jan-2017 </b> <b>Method :
	 * RTC_30965 <b>Description : User should be able to see checkout summary
	 * updated on changes to the cart. Reviewed by: kunal.ashar </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_30965(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{

			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			OnlineStore onlineStore = ObjectCreation.searchItem();
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore.setQuantity(2);

			// to clear the cart and search a product
			FlowOnlineStore.clearCart(driver, testCaseName);

			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			// to select an item and add to cart
			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);
			ActionBot.defaultMediumSleep();

			int cart_quantity = Integer.parseInt(PageOnlineStore.getTotalItemsInCart(driver, testCaseName));
			ActionBot.defaultMediumSleep();

			PageSearchListing.clickOnCheckOutButton(driver, testCaseName);
			int checkout_quantity = Integer.parseInt(PageRequisitionCheckOut.fetchCheckoutItemQuantity(driver, testCaseName));

			// to verify
			boolean status = false;
			if (cart_quantity == checkout_quantity)
				status = true;
			Assert.assertTrue("iconsistent cart and checkout-cart Quantites", status);

			// to select another item and add to cart too
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}
			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);
			ActionBot.defaultMediumSleep();

			cart_quantity = Integer.parseInt(PageOnlineStore.getTotalItemsInCart(driver, testCaseName));
			if (cart_quantity - checkout_quantity > 1)
				status = false;
			ActionBot.defaultMediumSleep();

			PageSearchListing.clickOnCheckOutButton(driver, testCaseName);
			checkout_quantity = Integer.parseInt(PageRequisitionCheckOut.fetchCheckoutItemQuantity(driver, testCaseName));

			// to verify
			if (cart_quantity == checkout_quantity && status)
				status = true;
			Assert.assertTrue("iconsistent cart and checkout-cart Quantites", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 10-Jan-2017 </b> <b>Method :
	 * RTC_34435 <b>Description :Activity log should be present in every view
	 * page of Requisition. Reviewed by: kunal.ashar</font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_34435(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to navigate to the my requisition sub tab and check the
			// activity
			// log present or not
			boolean status = FlowViewRequisition.isActivityLogPresent(driver, testCaseName);

			// to verify the activity log availability
			Assert.assertTrue("activity log not avaialable", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 10-Jan-2017 </b> <b>Method :
	 * RTC_58104 <b>Description : Verify that Actions available in Action
	 * Dropdown should change according to change REQ status. Reviewed by:
	 * kunal.ashar</font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_58104(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 10-Jan-2017 </b> <b>Method :
	 * RTC_124879 <b>Description : Test for bug 198094 - All items are displayed
	 * if user searches by stop words like 'a','an','the','on','for' etc.
	 * Reviewed by: kunal.ashar</font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_124879(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		boolean status = false;
		int count = 0;

		try
		{
			OnlineStore onlineStore = ObjectCreation.searchItem();

			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to verify the search list for stop words like
			// 'a','an','the','on','for'
			String stop_words[] = { "a", "an", "the", "on" };
			for (int i = 0; i < stop_words.length; i++)
			{
				String item_name = CommonServices.getTestData(IConstantsData.searchFor);
				item_name = item_name + stop_words[i];
				onlineStore.setSearchItem(item_name);
				onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
				if (!ActionBot.isElementDisplayed(driver, IPageSearchListing.NO_CATLOGUE_FOUND))
					count++;
			}
			if (count == 0)
				status = true;
			Assert.assertTrue("item list generated for wrong/invalid inputs", status);
			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 10-Jan-2017 </b> <b>Method :
	 * RTC_134409_1 <b>Description : Test for bug 200854 - Draft REQ not getting
	 * deleted from REQ listing. Reviewed by: kunal.ashar </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_134409_1(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to verify the delete functionality of a draft
			boolean status = FlowMyRequisitions.isDraftStatusRequisitionDeletable(driver, testCaseName);
			Assert.assertTrue("the draft status req was not deleted", !status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 10-Jan-2017 </b> <b>Method :
	 * RTC_134431_1 <b>Description : Test for bug 201411 - Status of the
	 * requisition is displayed as 'Awaiting Approval' even though the approval
	 * request have been recalled Reviewed by: kunal.ashar</font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_134431_1(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		Requisition requisition = new Requisition();
		String recallcomment = IConstantsData.COMPLETE_RELEASED_FILTER_LABEL;
		User user = null;
		try
		{
			//Login
			user = LoginLogoutServices.login(driver, testCase);

			//Get requisition object
			requisition = ObjectCreation.getRequisition(driver);
			Item item = ObjectCreation.getItem("catalogItem");
			requisition.setItems(item);
			requisition.setNextAction(IConstantsData.SUBMIT_REQ);

			//Create requisition
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// click On Myreq
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);

			//Search req in Myreq 
			FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);

			//Recall req
			PageMyRequisition.clickOnActionBtnOfFirstReq(driver, testCaseName);
			PageMyRequisition.clickOnRecallApprocalRequestLink(driver, testCaseName);
			PageMyRequisition.fillRecallApprovalComment(driver, testCaseName, recallcomment);

			//Check status of recalled req
			ActionBot.defaultMediumSleep();
			FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			String status = PageMyRequisition.getStatusOfFirstReq(driver, testCaseName);
			boolean flag = status.contains("Draft");
			Assert.assertTrue("Status of the requisition is displayed as Awaiting Approval even though the approval request have been recalled", flag);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 10-Jan-2017 </b> <b>Method :
	 * RTC_134457 <b>Description : Test for bug 201183 - Unable to add to cart
	 * item from Basket item listing. Reviewed by: kunal.ashar </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_134457(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			Basket basket = ObjectCreation.createBasket();
			basket.setBasketName(CommonServices.getTestData(IConstantsData.BASKET_NAME) + Helper.getRandomString(4));
			OnlineStore onlineStore = ObjectCreation.searchItem();
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore.setQuantity(2);
			onlineStore.setAddItemTo(IConstantsData.ADD_TO_BASKET);

			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// to clear the cart
			FlowOnlineStore.clearCart(driver, testCaseName);

			// to create a new basket
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}
			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);
			FlowMyBasket.createNewBasket(driver, testCaseName, basket);

			// to add items to cart from the basket item listing
			MainPageHeaderLevelTab.clickOnShoppingBasketSubTab(driver);
			PageMyBasket.fillBasketSearchTextBox(driver, testCaseName, basket.getBasketName());
			PageMyBasket.clickOnSearchGoButton(driver, testCaseName);
			PageMyBasket.clickFirstBasket(driver, testCaseName);
			int basket_quantity = PageMyBasket.addAllBasketItemsToCart(driver, testCaseName);

			// to navigate to online store page and verify
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			int cart_quantity = Integer.parseInt(PageOnlineStore.getTotalItemsInCart(driver, testCaseName));
			boolean status = false;
			if (cart_quantity == basket_quantity)
				status = true;
			Assert.assertTrue("Unable to add to cart item from Basket item listing.", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 11-Jan-2017 </b> <b>Method :
	 * RTC_38584 <b>Description : Test for bug 192129 - Billing address while
	 * check-out & On view of this requisition is different. Reviewed by:
	 * kunal.ashar</font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_38584(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();

		User user = null;

		try
		{
			OnlineStore onlineStore = ObjectCreation.searchItem();
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore.setQuantity(2);

			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// to clear cart and create a requisition and submit it
			FlowOnlineStore.clearCart(driver, testCaseName);
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);
			ActionBot.defaultMediumSleep();
			PageSearchListing.clickOnCheckOutButton(driver, testCaseName);
			String billing_addres = PageRequisitionCheckOut.fetchBillingAddressFromHeader(driver, testCaseName);
			FlowRequisition.flow_IamDone_SaveAsDraft_Cancel(driver, testCaseName, onlineStore);
			;

			// to navigate to my req sub tab and confirm the following
			// scenario
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			String requisition_view_billing_address = FlowMyRequisitions.fetchRequisitionBillingAddressIndexwise(driver, testCaseName, 1);
			boolean status = FlowMyRequisitions.isBillingAddressSimilarIn_Checkout_MyRequisitionView(driver, testCaseName, billing_addres, requisition_view_billing_address);
			Assert.assertTrue("Billing address while check-out & On view of this requisition is different.", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 19-Jan-2017 </b> <b>Method :
	 * RTC_134443 <b>Description :Test for bug 199140 - On selecting sharing
	 * scope as 'Organization Units' while sharing the shopping basket and
	 * clicking on 'Share', JS error received Reviewed by: kunal.ashar</font>
	 * <b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_134443(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		Basket basket = null;
		try
		{

			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			//Get basket object
			basket = ObjectCreation.createBasket();

			OnlineStore onlineStore = ObjectCreation.searchItem();
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore.setAddItemTo(IConstantsData.ADD_TO_BASKET);
			onlineStore.setQuantity(1);

			//To search a product
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			//Add item to basket
			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);

			//Create a new basket
			basket = FlowMyBasket.createNewBasket(driver, testCaseName, basket);

			//To navigate to the shopping basket sub tab and share a basket
			MainPageHeaderLevelTab.clickOnShoppingBasketSubTab(driver);
			basket.setSharingScope(IConstantsData.ORGANIZATION_UNITS_SCOPE);
			basket.setBasketAction(IConstantsData.SHARE_BASKET);
			FlowMyBasket.searchAndPerformBasketAction(driver, testCaseName, basket);

			//Check basket shared or not
			basket.setBasketAction(IConstantsData.NONE);
			FlowMyBasket.searchAndPerformBasketAction(driver, testCaseName, basket);
			boolean flag = ActionBot.isElementPresent(driver, IPageMyBasket.ACTION_UNSHARE_BASKET);

			Assert.assertTrue("Basket not shared successfully", flag);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 19-Jan-2017 </b> <b>Method :
	 * RTC_134497 <b>Description : Test for bug 201025 - Error 500 is shown when
	 * user clicks on Remind Approver in REQ Reviewed by: kunal.ashar</font>
	 * <b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_134497(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// to navigate to the my req and remind the approver and verify
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			FlowMyRequisitions.toFilterOutInApprovalReqFromMyRequisitions(driver, testCaseName);
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			ActionBot.scroll(driver, "500");
			ActionBot.defaultMediumSleep();
			boolean status = PageRequisitionView.clickOnRemindApproverLink(driver, testCaseName);
			Assert.assertTrue("Error is shown when user clicks on Remind Approver in REQ", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 19-Jan-2017 </b> <b>Method :
	 * RTC_134420 <b>Description : Test for bug 201785 - Search not getting
	 * triggered even after selecting category from the auto complete. Reviewed
	 * by: kunal.ashar </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_134420(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			CommonServices.startTestCase(driver, testCase);

			OnlineStore onlineStore = ObjectCreation.searchItem();
			// login
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// to search a free text and select auto complete and verify the
			// scenario
			onlineStore.setSearchItem("free");
			PageOnlineStore.fillAutoCompleteSearchField(driver, IPageOnlineStore.TEXTBOX_ENTER_SEARCH_NAME, onlineStore.getSearchItem());
			boolean status = PageSearchListing.isLoadingPage(driver, testCaseName);
			boolean status1 = PageSearchListing.isSearchListingPage(driver, testCaseName);
			Assert.assertTrue("Search not getting triggered even after selecting category from the auto complete", (status || status1));

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 19-Jan-2017 </b> <b>Method :
	 * RTC_145059 <b>Description : Contract Number >> When requester add catalog
	 * item in cart and view that item from checkout then contract number should
	 * be displayed in item details. Reviewed by: kunal.ashar</font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_145059(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		boolean status = false;
		try
		{
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// to search a catlog item and add to cart and fetch contract number
			OnlineStore onlineStore = ObjectCreation.searchItem();
			onlineStore.setQuantity(1);
			/*
			 * onlineStore.setSearchItem(Helper.getRandomAlphaNumeric(4));
			 * onlineStore.setItemType(IConstantsData.GUIDED_ITEM);onlineStore.
			 * setNextAction(IConstantsData.Checkout);
			 */
			Catalog catalog = ObjectCreation.getDefaultCatalogObject();
			FlowCatalog.createCatalog(driver, testCaseName, catalog);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			onlineStore.setitemName(catalog.getCatelogItems().get(0).getItemName());
			FlowOnlineStore.clearCart(driver, testCaseName);
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			PageSearchListing.clickItemDescriptionIndexwise(driver, testCaseName, 1);
			String contract_no = PageSearchListing.getItemContractNumber(driver, testCaseName);
			PageSearchListing.clickOnCloseItemDescriptionButton(driver, testCaseName);
			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);

			ActionBot.defaultMediumSleep();

			// to checkout and click item link description and fetch
			// contract
			// number and verify
			PageSearchListing.clickOnCheckOutButton(driver, testCaseName);
			ActionBot.defaultSleep();
			ActionBot.scroll(driver, "200");
			PageRequisitionCheckOut.clickItemDescriptionLinkIndexwise(driver, testCaseName, 1);
			String c_no = PageSearchListing.getItemContractNumber(driver, testCaseName);
			if (c_no.equals(contract_no))
				status = true;
			Assert.assertTrue("Contract Number is inconsistent", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 19-Jan-2017 </b> <b>Method :
	 * RTC_134396 <b>Description : Test for bug 200277 - Amount filter not
	 * working as expected on Requisition listing ,buyer desk listing and
	 * upcoming req lisitng Reviewed by: kunal.ashar </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_134396(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		boolean statusForMyRequisitionPage = false;
		boolean statusForBuyerDeskPage = false;
		boolean statusForUpcomingRequisitionPage = false;
		try
		{
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// to check amount filter button in my requisition sub tab
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			statusForMyRequisitionPage = FlowMyRequisitions.checkFilterByAmountRequisitions(driver, testCaseName);
			Assert.assertTrue("amount filter not working properly in my requistion sub tab", statusForMyRequisitionPage);

			// to check amount filter button in buyer's desk sub tab
			MainPageHeaderLevelTab.clickOnBuyersDeskSubTab(driver, testCaseName);
			statusForBuyerDeskPage = FlowBuyersDeskListing.checkFilterByAmountRequisitions(driver, testCaseName);
			Assert.assertTrue("amount filter not working properly in buyer's desk sub tab", statusForBuyerDeskPage);

			// to check amount filter button in upcomming requistion sub tab
			MainPageHeaderLevelTab.clickOnUpcomingRequisitionTab(driver, testCaseName);
			statusForUpcomingRequisitionPage = FlowUpcomingRequisitionListing.checkFilterByAmountRequisitions(driver, testCaseName);
			Assert.assertTrue("amount filter not working properly in upcoming requistion sub tab", statusForUpcomingRequisitionPage);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 23-Jan-2017 </b> <b>Method :
	 * RTC_162223 <b>Description : Test for bug 205587 - Script and html tags
	 * gets executed in shipping and billing address in View requisition
	 * Reviewed by: kunal.ashar</font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_162223(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		OnlineStore onlineStore = ObjectCreation.searchItem();
		onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
		onlineStore.setQuantity(2);

		try
		{
			// login
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// to clear cart and search a product and checkout with few
			// items
			FlowOnlineStore.clearCart(driver, testCaseName);
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);
			ActionBot.defaultMediumSleep();
			PageSearchListing.clickOnCheckOutButton(driver, testCaseName);

			// to fill the checkout form by entering the scripts as values for delivery adnd shipping address
			FlowRequisition.fillCheckOutRequistionSummaryWithBillingToAddressScriptedInput(driver, testCaseName);

			// to verify the proper funactioning
			boolean status = PageMyRequisition.toHoverUponRequistionIndexwise(driver, testCaseName, 1);
			Assert.assertTrue("script input got executed", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 23-Jan-2017 </b> <b>Method :
	 * RTC_162224 <b>Description : Test for bug 205590 - Script error is
	 * displayed on editing billing and delivery info with custom delivery
	 * address Reviewed by: kunal.ashar</font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_162224(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			OnlineStore onlineStore = ObjectCreation.searchItem();
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore.setQuantity(2);

			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// to clear cart and search a product and checkout with few
			// items
			FlowOnlineStore.clearCart(driver, testCaseName);
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);
			ActionBot.defaultMediumSleep();

			// to fill the checkout form by entering the scripts as values for delivery adnd shipping address
			PageSearchListing.clickOnCheckOutButton(driver, testCaseName);
			FlowRequisition.fillCustomDeliveryCheckOutRequistionSummaryWithScriptedInput(driver, testCaseName);
			ActionBot.waitForPageLoad(driver);
			PageRequisitionCheckOut.clickIAmDone(driver, testCaseName);

			// to verify the proper funactioning
			boolean status = PageMyRequisition.toHoverUponRequistionIndexwise(driver, testCaseName, 1);
			Assert.assertTrue("script input got executed", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 23-Jan-2017 </b> <b>Method :
	 * RTC_162225 <b>Description :Test for bug 205586 - States are not displayed
	 * according to the country for custom address in Requisition checkout page
	 * Reviewed by: kunal.ashar</font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_162225(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			CommonServices.startTestCase(driver, testCase);

			OnlineStore onlineStore = ObjectCreation.searchItem();
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore.setQuantity(2);

			// login
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// to clear cart and seacrh item
			FlowOnlineStore.clearCart(driver, testCaseName);
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			// to select item to cart and checkout
			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);
			ActionBot.defaultMediumSleep();
			PageSearchListing.clickOnCheckOutButton(driver, testCaseName);

			// to verify the following scenario
			PageRequisitionCheckOut.clickEditHeaderInfo(driver, testCaseName);
			PageRequisitionCheckOut.clickDeliveryEditRequisitionSummary(driver, testCaseName);
			PageRequisitionCheckOut.clickMyAddressRadioButton(driver, testCaseName);
			PageRequisitionCheckOut.clickToEnterNewAddressLink(driver, testCaseName);
			boolean status = PageRequisitionCheckOut.isValidState(driver, testCaseName);
			Assert.assertTrue("The state is invalid for a given country", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 23-Jan-2017 </b> <b>Method :
	 * RTC_181959 <b>Description :Test for bug 206477 - Scripting is not handled
	 * in Alert message of quantity threshold on search listing screen. Reviewed
	 * by: kunal.ashar</font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_181959(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();

		User user = null;

		try
		{
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			OnlineStore onlineStore = ObjectCreation.searchItem();
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));

			// to set threshold value
			MainPageHeaderLevelTab.clickOnCustomizeSubTab(driver);
			PageCustomizeSettings.clickOnRequisitionLink(driver, testCaseName);
			ActionBot.sendKeys(driver, By.id("EPROC_REQUISITION_ITEM_QUANTITY_THRESHOLD"), "10");
			PageCustomizeSettings.clickOnSaveButtom(driver, testCaseName);
			ActionBot.defaultLowSleep();

			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);

			// to search for an item after clearing the cart
			FlowOnlineStore.clearCart(driver, testCaseName);
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			boolean status = FlowSearchListing.selectChoiceNumberOfItemsWithVeryHighQuantityAddToCart(driver, testCaseName, 1, onlineStore, 999);

			// to verify
			Assert.assertTrue("scripting not handled for threshold value of the item adding to cart", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 23-Jan-2017 </b> <b>Method :
	 * RTC_190629 <b>Description :Test for bug 209480 - Contract Number field of
	 * free text item not getting copied in Copy req. Reviewed by: kunal.ashar
	 * </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_190629(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();

		User user = null;

		try
		{

			CommonServices.startTestCase(driver, testCase);
			// login
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();
			OnlineStore onlineStore = ObjectCreation.searchItem();
			onlineStore.setQuantity(1);
			//onlineStore.setSearchItem("pencilp");

			// to search for an item after clearing the cart
			FlowOnlineStore.clearCart(driver, testCaseName);
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			// to select an item with contract number
			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);
			ActionBot.defaultMediumSleep();
			PageSearchListing.clickOnCheckOutButton(driver, testCaseName);

			// to fill out the checkut form
			FlowRequisition.flow_IamDone_SaveAsDraft_Cancel(driver, testCaseName, onlineStore);

			// to copy a req and verify
			FlowMyRequisitions.toCopyReqFromMyRequisitions(driver, testCaseName, 1);
			ActionBot.defaultLowSleep();
			ActionBot.scroll(driver, "200");
			ActionBot.defaultMediumSleep();
			PageRequisitionCheckOut.clickItemDescriptionLinkIndexwise(driver, testCaseName, 1);
			boolean status = PageRequisitionCheckOut.isContractNumberPresent(driver, testCaseName);
			Assert.assertTrue("Contract Number field of free text item not getting copied in Copy req", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 24-Jan-2017 </b> <b>Method :
	 * RTC_58075 <b>Description : Verify that User should be able to view status
	 * of each REQ. in listing Reviewed by: kunal.ashar </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_58075(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		try
		{
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// to navigate to the my req sub tab and verify
			boolean status = FlowMyRequisitions.checkStatusForEachRequisitionPresent(driver, testCaseName);
			Assert.assertTrue("status of each REQ. in listing is not visible", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 24-Jan-2017 </b> <b>Method :
	 * RTC_58077 <b>Description : verify that User should be able to view REQ
	 * Name of each REQ. In Listing Reviewed by: kunal.ashar </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_58077(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();

		User user = null;
		try
		{
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to navigate to the my req sub tab and verify
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			boolean status = FlowMyRequisitions.checkForEachRequisitionNamePresent(driver, testCaseName);
			Assert.assertTrue("name of each REQ. in listing is not visible", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 24-Jan-2017 </b> <b>Method :
	 * RTC_58078 <b>Description : verify that User should be able to view
	 * Requesterof each REQ. In Listing Reviewed by: kunal.ashar </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_58078(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		try
		{
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to navigate to the my req sub tab and verify
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			boolean status = FlowMyRequisitions.checkRequesterForEachRequisitionPresent(driver, testCaseName);
			Assert.assertTrue("requester of each REQ. in listing is not visible", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 24-Jan-2017 </b> <b>Method :
	 * RTC_58079 <b>Description : verify that User should be able to view
	 * submitted on of each REQ. In Listing Reviewed by: kunal.ashar </font>
	 * <b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_58079(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();

		User user = null;
		try
		{
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to navigate to the my req sub tab and verify
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			boolean status = FlowMyRequisitions.checkSubmittedonForEachRequisitionPresent(driver, testCaseName);
			Assert.assertTrue("submitted on of each REQ. in listing is not visible", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 24-Jan-2017 </b> <b>Method :
	 * RTC_58080 <b>Description : verify that User should be able to view Amount
	 * of each REQ. In Listing Reviewed by: kunal.ashar</font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_58080(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();

		User user = null;
		try
		{
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to navigate to the my req sub tab and verify
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			boolean status = FlowMyRequisitions.checkAmountForEachRequisitionPresent(driver, testCaseName);
			Assert.assertTrue("amount of each REQ. in listing is not visible", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 24-Jan-2017 </b> <b>Method :
	 * RTC_58085_1_Ascending <b>Description : Verify that User should be bale to
	 * Sort the REQ by its Number in asccending Reviewed by: kunal.ashar</font>
	 * <b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_58085_1_Ascending(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();

		User user = null;
		try
		{
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to navigate to the my req sub tab and verify
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			boolean status = FlowMyRequisitions.checkAscendingSortForRequisitionPresent(driver, testCaseName);
			Assert.assertTrue("Ascending order sort on REQ. No. in listing is not visible", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 24-Jan-2017 </b> <b>Method :
	 * RTC_58085_1_Descending <b>Description :Verify that User should be bale to
	 * Sort the REQ by its Number descending. Reviewed by: kunal.ashar</font>
	 * <b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_58085_1_Descending(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();

		User user = null;
		try
		{
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to navigate to the my req sub tab and verify
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			boolean status = FlowMyRequisitions.checkDesscendingSortForRequisitionPresent(driver, testCaseName);
			Assert.assertTrue("descending order sort on REQ. No. in listing is not visible", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 24-Jan-2017 </b> <b>Method :
	 * RTC_58085_2_Ascending <b>Description :Verify that User should be bale to
	 * Sort the REQ by its Date in asccending Reviewed by: kunal.ashar</font>
	 * <b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_58085_2_Ascending(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();

		User user = null;
		try
		{
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to navigate to the my req sub tab and verify
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			boolean status = FlowMyRequisitions.checkDesscendingSortForRequisitionPresentOnDate(driver, testCaseName);
			Assert.assertTrue("ascending order sort on REQ. Date in listing is not visible", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 24-Jan-2017 </b> <b>Method :
	 * RTC_58085_2_Descending <b>Description :Verify that User should be able to
	 * Sort the REQ by its Date Descending Reviewed by: kunal.ashar </font>
	 * <b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_58085_2_Descending(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();

		User user = null;
		try
		{
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to navigate to the my req sub tab and verify
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			boolean status = FlowMyRequisitions.checkDesscendingSortForRequisitionPresentOnDate(driver, testCaseName);
			Assert.assertTrue("Descending order sort on REQ. Date in listing is not visible", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 24-Jan-2017 </b> <b>Method :
	 * RTC_58083 <b>Description :Verify that status filed should contain Status
	 * filter which contains all status of REQ Reviewed by: kunal.ashar</font>
	 * <b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_58083(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();

		User user = null;
		try
		{
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to navigate to the my req sub tab and verify
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			ActionBot.defaultMediumSleep();
			boolean status = FlowMyRequisitions.checkAllRequisitionStatusPresent(driver, testCaseName);
			Assert.assertTrue("all status in REQ. listing is not visible", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 24-Jan-2017 </b> <b>Method :
	 * RTC_38143 <b>Description : Verify that requisition should be available in
	 * In Approval state Reviewed by: kunal.ashar</font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_38143(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		List<MappedTestCase> mappedTestCases = null;

		try
		{
			mappedTestCases = new ArrayList<MappedTestCase>();
			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_ReleasedPartiallyOrderFilter"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_ReleasedNotReceivedFilter"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_ReleasedPartiallyReceivedFilter"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_ReleasedFullyReceivedFilter"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_ClosedFilter"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_CancelledFilter"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_ReturnedWithQuoteFilter"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_SentForQuoteFilter"));
			}
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			//to navigate to the all req sub tab and verify

			//	MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			MainPageHeaderLevelTab.clickOnAllRequisitionsSubTab(driver);
			FlowMyRequisitions.toFilterOutInApprovalReqFromMyRequisitions(driver, testCaseName);
			Assert.assertTrue("No Req was found", PageMyRequisition.isReqPresentIndexwise(driver, testCaseName, 1));

			PageMyRequisition.clearStatusFilter(driver, testCaseName);

			/**
			 * RTC_ClosedFilter
			 */
			FlowMyRequisitions.toFilterOutClosedReqFromMyRequisitions(driver, testCaseName);
			Assert.assertTrue("No Req was found", PageMyRequisition.isReqPresentIndexwise(driver, testCaseName, 1));
			mappedTestCases.get(4).setTestResult(true);

			PageMyRequisition.clearStatusFilter(driver, testCaseName);

			/**
			 * RTC_CancelledFilter
			 */
			FlowMyRequisitions.toFilterOutCanceledReqFromMyRequisitions(driver, testCaseName);
			Assert.assertTrue("No Req was found", PageMyRequisition.isReqPresentIndexwise(driver, testCaseName, 1));
			mappedTestCases.get(5).setTestResult(true);

			PageMyRequisition.clearStatusFilter(driver, testCaseName);

			/**
			 * RTC_ReturnedWithQuoteFilter
			 */
			FlowMyRequisitions.toFilterOutReturnedWithQuoteReqFromMyRequisitions(driver, testCaseName);
			Assert.assertTrue("No Req was found", PageMyRequisition.isReqPresentIndexwise(driver, testCaseName, 1));
			mappedTestCases.get(6).setTestResult(true);

			PageMyRequisition.clearStatusFilter(driver, testCaseName);

			/**
			 * RTC_SentForQuoteFilter
			 */
			FlowMyRequisitions.toFilterOutSentForQuoteReqFromMyRequisitions(driver, testCaseName);
			Assert.assertTrue("No Req was found", PageMyRequisition.isReqPresentIndexwise(driver, testCaseName, 1));
			mappedTestCases.get(7).setTestResult(true);

			PageMyRequisition.clearStatusFilter(driver, testCaseName);

			/**
			 * RTC_ReleasedPartiallyOrderFilter
			 */
			FlowMyRequisitions.toFilterOutPartiallyOrderedReqFromMyRequisitions(driver, testCaseName);
			Assert.assertTrue("No Req was found", PageMyRequisition.isReqPresentIndexwise(driver, testCaseName, 1));
			mappedTestCases.get(0).setTestResult(true);

			PageMyRequisition.clearStatusFilter(driver, testCaseName);

			/**
			 * RTC_ReleasedNotReceivedFilter
			 */
			FlowMyRequisitions.toFilterOutNotRecievedReqFromMyRequisitions(driver, testCaseName);
			Assert.assertTrue("No Req was found", PageMyRequisition.isReqPresentIndexwise(driver, testCaseName, 1));
			mappedTestCases.get(1).setTestResult(true);

			PageMyRequisition.clearStatusFilter(driver, testCaseName);

			/**
			 * RTC_ReleasedPartiallyReceivedFilter
			 */
			FlowMyRequisitions.toFilterOutPartiallyRecievedReqFromMyRequisitions(driver, testCaseName);
			Assert.assertTrue("No Req was found", PageMyRequisition.isReqPresentIndexwise(driver, testCaseName, 1));
			mappedTestCases.get(2).setTestResult(true);

			PageMyRequisition.clearStatusFilter(driver, testCaseName);

			/**
			 * RTC_ReleasedFullyReceivedFilter
			 */
			FlowMyRequisitions.toFilterOutFullyRecievedReqFromMyRequisitions(driver, testCaseName);
			Assert.assertTrue("No Req was found", PageMyRequisition.isReqPresentIndexwise(driver, testCaseName, 1));
			mappedTestCases.get(3).setTestResult(true);

			//logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 24-Jan-2017 </b> <b>Method :
	 * RTC_ApprovalPendingFilter <b>Description : Verify that in approval tab
	 * requisition should be available in With Approval_PendingFilter . Reviewed
	 * by: kunal.ashar</font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_ApprovalPendingFilter(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		List<MappedTestCase> mappedTestCases = null;

		try
		{
			mappedTestCases = new ArrayList<MappedTestCase>();
			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_ApprovalApprovedFilter"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_ApprovalRejectedFilter"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_ApprovalDelegated"));
			}
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to navigate to the approval sub tab and verify
			MainPageHeaderLevelTab.clickOnApprovalTab(driver);

			//Clear filter
			PageAllRequestsApproval.clickOnClearAllFilter(driver, testCaseName);

			FlowAllRequestsApproval.toFilterOutPendingReqFromMyRequisitions(driver, testCaseName);
			boolean status = PageAllRequestsApproval.isNoDataRecordsMessageDisplayed(driver, testCaseName);
			Assert.assertTrue("No Req was found", !status);

			/**
			 * RTC_ApprovalApprovedFilter
			 */
			FlowAllRequestsApproval.toFilterOutApprovedReqFromMyRequisitions(driver, testCaseName);
			boolean status1 = PageAllRequestsApproval.isNoDataRecordsMessageDisplayed(driver, testCaseName);
			Assert.assertTrue("No Req was found", !(PageAllRequestsApproval.isNoDataRecordsMessageDisplayed(driver, testCaseName)));
			mappedTestCases.get(0).setTestResult(!status1);

			/**
			 * RTC_ApprovalRejectedFilter
			 */
			FlowAllRequestsApproval.toFilterOutRejectedReqFromMyRequisitions(driver, testCaseName);
			boolean status2 = PageAllRequestsApproval.isNoDataRecordsMessageDisplayed(driver, testCaseName);
			Assert.assertTrue("No Req was found", !(PageAllRequestsApproval.isNoDataRecordsMessageDisplayed(driver, testCaseName)));
			mappedTestCases.get(1).setTestResult(!status2);

			/**
			 * RTC_ApprovalDelegated
			 */
			FlowAllRequestsApproval.toFilterOutDelegatedReqFromMyRequisitions(driver, testCaseName);
			boolean status3 = PageAllRequestsApproval.isNoDataRecordsMessageDisplayed(driver, testCaseName);
			Assert.assertTrue("No Req was found", !(PageAllRequestsApproval.isNoDataRecordsMessageDisplayed(driver, testCaseName)));
			mappedTestCases.get(2).setTestResult(!status3);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 25-Jan-2017 </b> <b>Method :
	 * RTC_24257 <b>Description :Verify work-flow section should move above
	 * audit trail; items and work-flow should be open; other sections should be
	 * closed. Reviewed by: kunal.ashar</font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_24257(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();

		User user = null;
		try
		{
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to navigate to the my req sub tab and move on to view req
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);

			// to verify the functionality

			boolean status1 = PageRequisitionView.isItemBlockOpen(driver, testCaseName);
			logger.info("Is item block open" + status1);

			boolean status2 = PageRequisitionView.isWorkflowBlockOpen(driver, testCaseName);
			logger.info("Is workflow block open" + status2);

			boolean status3 = PageRequisitionView.isAccountingBlockOpen(driver, testCaseName);
			logger.info("Is account block open" + status3);

			boolean status4 = PageRequisitionView.isCostBookingBlockOpen(driver, testCaseName);
			logger.info("Is cost booking block open" + status4);

			boolean status5 = PageRequisitionView.isDeliveryAssetTagBlockOpen(driver, testCaseName);
			logger.info("Is delivery block open" + status5);

			Assert.assertTrue("Either item-work flow was not open or other sections were open", ((status1 && status2) && !(status3 && status4 && status5)));

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 25-Jan-2017 </b> <b>Method :
	 * RTC_31366 <b>Description :Verify that All actions for a shopping basket
	 * should be present in Action dropdown list Reviewed by: kunal.ashar</font>
	 * <b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_31366(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{

			Basket basket = ObjectCreation.createBasket();
			OnlineStore onlineStore = ObjectCreation.searchItem();
			CommonServices.startTestCase(driver, testCase);

			basket.setBasketName(CommonServices.getTestData(IConstantsData.BASKET_NAME) + Helper.getRandomString(4));
			onlineStore.setSearchItem(CommonServices.getTestData(IConstantsData.ITEM_NAME_FOR_SEARCHING, 1));
			onlineStore.setAddItemTo(IConstantsData.ADD_TO_BASKET);
			onlineStore.setQuantity(2);
			onlineStore.setItemType(IConstantsData.CATALOG_ITEM);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// fill in the search text box and click search
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			// to add a item to new basket
			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);

			// to create basket
			basket = FlowMyBasket.createNewBasket(driver, testCaseName, basket);

			// to navigate to the my shipping basket sub tab and verify
			MainPageHeaderLevelTab.clickOnShoppingBasketSubTab(driver);
			FlowMyBasket.searchBasket(driver, testCaseName, basket);
			boolean status = FlowMyBasket.toVerifyAllActionsPresentInBasket(driver, testCaseName);
			Assert.assertTrue("some actions are missing from the actions of the basket", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 25-Jan-2017 </b> <b>Method :
	 * RTC_130504 <b>Description :Workflow and audit trail along with comments
	 * and time stamp should be displayed on REQ view window from [Version
	 * document] >> Audi trail and workflow section should be shown as per the
	 * opned version only Reviewed by: kunal.ashar</font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_130504(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		try
		{
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to navigate to the req view page of the ordering req and
			// verify
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			FlowMyRequisitions.toFilterOutOrderingReqFromMyRequisitions(driver, testCaseName);
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			boolean status = FlowViewRequisition.isCompleteInfoPresentInAuditTrail(driver, testCaseName);
			Assert.assertTrue("audit trail along with comments and time stamp is not displayed", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 27-Jan-2017 </b> <b>Method :
	 * RTC_80564 <b>Description : Verify that As a requester, I should be able
	 * to edit all fields of free text items while editing draft/returned req.
	 * Reviewed by: kunal.ashar</font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_80564_2(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = null;
		User user = null;

		try
		{
			OnlineStore onlineStore = ObjectCreation.searchItem();
			onlineStore.setSearchItem(Helper.getRandomString(4));
			onlineStore.setItemType(IConstantsData.GUIDED_ITEM);
			onlineStore.setNextAction(IConstantsData.Checkout);
			CEform cEform = ObjectCreation.getDefaultCEformObject();

			mappedTestCases = new ArrayList<MappedTestCase>();
			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_80573"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_94019"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_94018"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_94022"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_94023"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_94029"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_94031"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64243"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64231"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64180"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_80552"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64188"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64189"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64185"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64198"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64199"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64194"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64195"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64196"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64200"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64201"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64202"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64203"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64205"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64208"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64209"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64210"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_145056"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_145057"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64078"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_75021"));
			}
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to clear cart and add a free text item to cart and checkout
			FlowOnlineStore.clearCart(driver, testCaseName);
			/**
			 * RTC_64231 , RTC_64188 , RTC_64189 , RTC_64185 , RTC_64198 ,
			 * RTC_64199 , RTC_64194 , RTC_64195 , RTC_64200 , RTC_64201 ,
			 * RTC_64202 , RTC_64203, RTC_64205 , RTC_64208 , RTC_64209 ,
			 * RTC_64210 , RTC_145056 , RTC_64078 , RTC_75021
			 */
			cEform = FlowCEform.createCEform(driver, testCaseName, cEform);
			ActionBot.defaultLowSleep();
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			ActionBot.defaultLowSleep();
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, cEform);
			Assert.assertTrue("on hit of cancel button the control was not returned to the previous page", onlineStore.isResult());

			// to save as draft and verify
			PageRequisitionCheckOut.clickSaveAsDraft(driver, testCaseName);

			// to verify the draft with above mentioned functionality
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			/**
			 * RTC_80573
			 */
			PageRequisitionCheckOut.clickItemDescriptionLinkIndexwise(driver, testCaseName, 1);
			ActionBot.defaultMediumSleep();
			boolean res = FlowRequisition.toCheckBasicItemInformationRemainSameAfterChangingItemCategory(driver, testCaseName);
			Assert.assertTrue("the basic free text item descriptions got changed after changing the category", res);

			/**
			 * RTC_80564
			 */
			/*
			 * boolean status = FlowViewRequisition
			 * .isItemDescriptionIndexwiseEditable(driver, testCaseName, 1);
			 */
			Assert.assertTrue("the free text item description field was not editable", res);

			// fill-up the checkout page and sumbit requisition and return
			// req
			// from buyer's desk
			ActionBot.defaultMediumSleep();
			FlowRequisition.flow_IamDone_SaveAsDraft_Cancel(driver, testCaseName, onlineStore);
			;
			MainPageHeaderLevelTab.clickOnApprovalAllRequestsTab(driver);
			FlowAllRequestsApproval.toApproveRequisitionIndexwise(driver, testCaseName, 1);
			MainPageHeaderLevelTab.clickOnBuyersDeskSubTab(driver, testCaseName);
			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			/**
			 * RTC_94019 , RTC_94022 , RTC_94023 , RTC_94029 , RTC_64243 ,
			 * RTC_64180 , RTC_80552 , RTC_64196
			 */
			boolean flag1 = FlowBuyersDesk.isCategoryFreeTextItemEditable(driver, testCaseName, cEform);
			boolean flag2 = FlowRequisition.toCheckBasicItemInformationRemainSameAfterChangingItemCategory(driver, testCaseName);
			boolean flag3 = FlowBuyersDesk.isRequirementDetailTabThereAfterCategoryFreeTextItemChange(driver, testCaseName, cEform);
			// PageRequisitionCheckOut.clickCancelFreeTextButton(driver,
			// testCaseName);
			Assert.assertTrue("category for free text item was not changeable", flag1);
			Assert.assertTrue("the basic free text item descriptions got changed after changing the category", flag2);
			Assert.assertTrue("the requirement details tab did not appear after category got changed ", flag3);
			String supplierName = FlowBuyersDesk.toFillSupplierTab(driver, testCaseName);
			ActionBot.defaultMediumSleep();
			PageRequisitionCheckOut.clickSaveFreeTextButton(driver, testCaseName);
			ActionBot.defaultLowSleep();

			MainPageHeaderLevelTab.clickOnBuyersDeskSubTab(driver, testCaseName);

			PageBuyersDeskListing.clickOnFirstActionButton(driver, testCaseName);
			PageBuyersDeskListing.clickOnReturnLinkIndexwise(driver, testCaseName, 1);
			ModalBuyersDeskReturnRequisition.fillReturnRequisitionComment(driver, testCaseName, IConstantsData.COMMENT_FOR_RETURN_REQUISITION);
			PageBuyersDeskListing.clickReturnSubmitFromBuyer(driver, testCaseName);

			PopUpDefaultConfirmation.clickOnConfirmYesButton(driver, testCaseName);

			ActionBot.waitTillPopUpIsPresent(driver, IPageBuyersDesk.UPDATE_REQUISITION_PROCESSING_DIV);

			ActionBot.defaultLowSleep();
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);

			// to verify
			/**
			 * RTC_94018 , RTC_80564 , RTC_94031 , RTC_145057
			 */
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			ActionBot.waitForPageLoad(driver);
			boolean status1 = FlowViewRequisition.isItemDescriptionIndexwiseEditable(driver, testCaseName, 1);
			Assert.assertTrue("the free text item description field was not editable", status1);
			PageRequisitionCheckOut.clickItemDescriptionLinkIndexwise(driver, testCaseName, 1);
			ActionBot.defaultHighSleep();
			PageBuyersDesk.clickSuppliersTab(driver, testCaseName);
			ActionBot.defaultMediumSleep();
			boolean status2 = (PageBuyersDesk.getFreeTextSupplier(driver, testCaseName)).equals(supplierName) ? true : false;
			Assert.assertTrue("the free text item supplier was not same as there in the buyer's desk", status2);
			boolean status3 = PageBuyersDesk.editContractNumber(driver, testCaseName, Helper.getRandomNumber(4));
			Assert.assertTrue("the free text item supplier contract number field was not editable in the buyer's desk", status3);

			// logout
			mappedTestCases.get(0).setTestResult(res);
			mappedTestCases.get(1).setTestResult(flag1);
			mappedTestCases.get(2).setTestResult(flag1);
			mappedTestCases.get(3).setTestResult(flag1);
			mappedTestCases.get(4).setTestResult(flag1);
			mappedTestCases.get(5).setTestResult(flag2);
			mappedTestCases.get(6).setTestResult(flag2);
			mappedTestCases.get(7).setTestResult(flag2);
			mappedTestCases.get(8).setTestResult(flag3);
			mappedTestCases.get(9).setTestResult(flag3);
			mappedTestCases.get(10).setTestResult(flag3);
			mappedTestCases.get(11).setTestResult(flag3);
			mappedTestCases.get(12).setTestResult(flag3);
			mappedTestCases.get(13).setTestResult(flag3);
			mappedTestCases.get(14).setTestResult(status1);
			mappedTestCases.get(15).setTestResult(status1);
			mappedTestCases.get(16).setTestResult(status1);
			mappedTestCases.get(17).setTestResult(status1);
			mappedTestCases.get(18).setTestResult(status1);
			mappedTestCases.get(19).setTestResult(status2);
			mappedTestCases.get(20).setTestResult(status2);
			mappedTestCases.get(21).setTestResult(status2);
			mappedTestCases.get(22).setTestResult(status2);
			mappedTestCases.get(23).setTestResult(status2);
			mappedTestCases.get(24).setTestResult(status2);
			mappedTestCases.get(25).setTestResult(status3);
			mappedTestCases.get(26).setTestResult(status3);
			mappedTestCases.get(27).setTestResult(status3);
			mappedTestCases.get(28).setTestResult(status3);
			mappedTestCases.get(29).setTestResult(status3);
			mappedTestCases.get(30).setTestResult(status3);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: bhakti.sawant </b> <b>Created On : 27-Jan-2017 </b> <b>Method :
	 * RTC_80564 <b>Description : Verify that As a requester, I should be able
	 * to edit all fields of free text items while editing draft/returned req.
	 * </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_80564(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = null;
		User user = null;
		Item item = new Item();

		boolean flag = false;
		try
		{
			GuidedItem guidedItem = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.SUGGEST_EXISTING_SUPPLIER);
			List<GuidedItem> guidedItems = new ArrayList<>();
			guidedItems.add(guidedItem);
			item.setGuidedItems(guidedItems);
			Requisition requisition = ObjectCreation.getRequisition(driver);
			CEform cEform = ObjectCreation.getDefaultCEformObject();

			mappedTestCases = new ArrayList<MappedTestCase>();
			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_80573"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_94019"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_94018"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_94022"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_94023"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_94029"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_94031"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64243"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64231"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64180"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_80552"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64188"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64189"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64185"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64198"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64199"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64194"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64195"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64196"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64200"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64201"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64202"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64203"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64205"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64208"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64209"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64210"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_145056"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_145057"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64078"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_75021"));
			}
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to clear cart and add a free text item to cart and checkout

			/**
			 * RTC_64231 , RTC_64188 , RTC_64189 , RTC_64185 , RTC_64198 ,
			 * RTC_64199 , RTC_64194 , RTC_64195 , RTC_64200 , RTC_64201 ,
			 * RTC_64202 , RTC_64203, RTC_64205 , RTC_64208 , RTC_64209 ,
			 * RTC_64210 , RTC_145056 , RTC_64078 , RTC_75021
			 */
			requisition.setItems(item);
			requisition.setEditItemLevelInfo(false);
			requisition.setNextAction(IConstantsData.NONE);
			cEform = FlowCEform.createCEform(driver, testCaseName, cEform);

			flag = FlowCEform.searchCEform(driver, testCaseName, cEform.getCeformName());
			Assert.assertTrue("ceform not searched", flag);

			ModalGuidedItemSelectCategory category = new ModalGuidedItemSelectCategory();
			category.setCategory(cEform.getCategory());
			category.setCategoryEFormName(cEform.getCeformDisplayName());
			requisition.getItems().getGuidedItems().get(0).setCategory(category);

			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// submit requisistion
			FlowRequisition.saveReqAsDraft(driver, testCaseName);

			Requisition requisitionSearch = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			Assert.assertTrue("requisition not searched", requisitionSearch != null);
			FlowMyRequisitions.viewRequisition(driver, testCaseName);

			/**
			 * RTC_80573
			 */
			PageRequisitionCheckOut.clickOnItemNameToViewItemDetails(driver, testCaseName, item.getGuidedItems().get(0).getItemID());
			boolean res = FlowRequisition.toCheckBasicItemInformationRemainSameAfterChangingItemCategory(driver, testCaseName);
			Assert.assertTrue("the basic free text item descriptions got changed after changing the category", res);

			/**
			 * RTC_80564
			 */
			Assert.assertTrue("the free text item description field was not editable", res);

			// fill-up the checkout page and sumbit requisition and return req from buyer's desk
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);

			requisitionSearch = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			Assert.assertTrue("requisition not searched", requisitionSearch != null);
			FlowMyRequisitions.viewRequisition(driver, testCaseName);
			FlowRequisition.submitReq(driver, testCaseName, true);

			//approve requisition under 'All Requests' to approve requisition
			ApprovalAllRequests approvalAllRequests = new ApprovalAllRequests();
			approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, requisition.getReqNo(), IConstantsData.REQUISITION, IConstantsData.APPROVE);
			FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

			// to search in aprroval tab
			String docNo = null;
			FlowAllRequestsApproval.searchInApprovalTab(driver, testCaseName, approvalAllRequests);
			docNo = PageAllRequestsApproval.getFirstRowDocumentNo(driver, testCaseName);
			Assert.assertTrue("Requisition not approved", docNo.equalsIgnoreCase(requisition.getReqNo()));

			requisitionSearch = FlowBuyersDeskListing.searchAtBuyersDeskListing(driver, testCaseName, requisition);
			Assert.assertTrue("req not searched", requisitionSearch != null);

			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);

			/**
			 * RTC_94019 , RTC_94022 , RTC_94023 , RTC_94029 , RTC_64243 ,
			 * RTC_64180 , RTC_80552 , RTC_64196
			 */
			boolean flag1 = FlowBuyersDesk.isCategoryFreeTextItemEditable(driver, testCaseName, cEform);
			logger.info("is Category FreeTextItem Editable" + flag1);

			boolean flag2 = FlowRequisition.toCheckBasicItemInformationRemainSameAfterChangingItemCategory(driver, testCaseName);

			boolean flag3 = FlowBuyersDesk.isRequirementDetailTabThereAfterCategoryFreeTextItemChange(driver, testCaseName, cEform);

			Assert.assertTrue("category for free text item was not changeable", flag1);
			Assert.assertTrue("the basic free text item descriptions got changed after changing the category", flag2);
			Assert.assertTrue("the requirement details tab did not appear after category got changed ", flag3);
			String supplierName = FlowBuyersDesk.toFillSupplierTab(driver, testCaseName);
			ActionBot.defaultMediumSleep();
			PageRequisitionCheckOut.clickSaveFreeTextButton(driver, testCaseName);
			ActionBot.defaultLowSleep();
			MainPageHeaderLevelTab.clickOnBuyersDeskSubTab(driver, testCaseName);

			// return requisition from buyers desk
			requisitionSearch = FlowBuyersDeskListing.searchAtBuyersDeskListing(driver, testCaseName, requisition);
			Assert.assertTrue("req not searched", requisitionSearch != null);
			FlowBuyersDeskListing.returnRequisitionFromBuyersDesk(driver, testCaseName, requisitionSearch, true);

			/**
			 * RTC_94018 , RTC_80564 , RTC_94031 , RTC_145057
			 */
			ActionBot.defaultSleep();
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			requisitionSearch = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			Assert.assertTrue("requisition not searched", requisitionSearch != null);
			FlowMyRequisitions.viewRequisition(driver, testCaseName);

			boolean status1 = FlowViewRequisition.isItemDescriptionIndexwiseEditable(driver, testCaseName, 1);
			Assert.assertTrue("the free text item description field was not editable", status1);
			PageRequisitionCheckOut.clickItemDescriptionLinkIndexwise(driver, testCaseName, 1);
			ActionBot.defaultHighSleep();
			PageBuyersDesk.clickSuppliersTab(driver, testCaseName);
			ActionBot.defaultMediumSleep();

			String getSuppName = PageRequisitionView.getSuggestedSupplierNameInItemDetails(driver, testCaseName).trim();
			boolean status2 = (getSuppName).equals(supplierName) ? true : false;
			Assert.assertTrue("the free text item supplier was not same as there in the buyer's desk", status2);

			flag = ModalGuidedItemDetails.clickOnEditActionItemDetailsModal(driver, testCaseName, getSuppName);
			Assert.assertTrue("supplier edit action not present under req suggested suppliers", flag);
			ActionBot.defaultSleep();

			boolean status3 = PageFreeTextForm.fillExistingSuggestSupplierContractNo(driver, testCaseName, Helper.getRandomNumber(4)) != null;
			//boolean status3 = PageBuyersDesk.editContractNumber(driver, testCaseName, Helper.getRandomNumber(4));
			Assert.assertTrue("the free text item supplier contract number field was not editable in the buyer's desk", status3);

			// logout
			mappedTestCases.get(0).setTestResult(res);
			mappedTestCases.get(1).setTestResult(flag1);
			mappedTestCases.get(2).setTestResult(flag1);
			mappedTestCases.get(3).setTestResult(flag1);
			mappedTestCases.get(4).setTestResult(flag1);
			mappedTestCases.get(5).setTestResult(flag2);
			mappedTestCases.get(6).setTestResult(flag2);
			mappedTestCases.get(7).setTestResult(flag2);
			mappedTestCases.get(8).setTestResult(flag3);
			mappedTestCases.get(9).setTestResult(flag3);
			mappedTestCases.get(10).setTestResult(flag3);
			mappedTestCases.get(11).setTestResult(flag3);
			mappedTestCases.get(12).setTestResult(flag3);
			mappedTestCases.get(13).setTestResult(flag3);
			mappedTestCases.get(14).setTestResult(status1);
			mappedTestCases.get(15).setTestResult(status1);
			mappedTestCases.get(16).setTestResult(status1);
			mappedTestCases.get(17).setTestResult(status1);
			mappedTestCases.get(18).setTestResult(status1);
			mappedTestCases.get(19).setTestResult(status2);
			mappedTestCases.get(20).setTestResult(status2);
			mappedTestCases.get(21).setTestResult(status2);
			mappedTestCases.get(22).setTestResult(status2);
			mappedTestCases.get(23).setTestResult(status2);
			mappedTestCases.get(24).setTestResult(status2);
			mappedTestCases.get(25).setTestResult(status3);
			mappedTestCases.get(26).setTestResult(status3);
			mappedTestCases.get(27).setTestResult(status3);
			mappedTestCases.get(28).setTestResult(status3);
			mappedTestCases.get(29).setTestResult(status3);
			mappedTestCases.get(30).setTestResult(status3);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 31-Jan-2017 </b> <b>Method :
	 * RTC_64173 <b>Description : verify that In category POPUP screen, user
	 * should get search text box to change category. Reviewed by:
	 * kunal.ashar</font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_64173(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = null;
		User user = null;
		boolean flag = false, RTC_64174 = false, RTC_64175 = false, RTC_64177 = false, RTC_64178 = false;
		String selectedCategory = null;
		try
		{
			GuidedItem guidedItem = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.EXISTING_SUPPLIER);
			CEform cEform = ObjectCreation.getDefaultCEformObject();
			mappedTestCases = new ArrayList<MappedTestCase>();
			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64174"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64175"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64177"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64178"));
			}
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			// login
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			cEform = FlowCEform.createCEform(driver, testCaseName, cEform);

			flag = FlowCEform.searchCEform(driver, testCaseName, cEform.getCeformName());
			Assert.assertTrue("ceform was nt searched", flag);

			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);

			// to search a free text and add to cart
			/**
			 * RTC_64174 , RTC_64173 , RTC_64175 , RTC_64177 , RTC_64178
			 */
			FlowShoppingCart.emptyShoppingCart(driver, testCaseName);
			FlowSearchListing.searchItem(driver, testCaseName, guidedItem.getItemName());
			FlowFillGuidedItem.addGuidedItem(driver, testCaseName);

			ModalGuidedItemSelectCategory category = new ModalGuidedItemSelectCategory();
			category.setCategory(cEform.getCategory());
			category.setCategoryEFormName(cEform.getCeformDisplayName());
			guidedItem.setCategory(category);

			ActionBot.waitTillPopUpIsPresent(driver, IPageFreeTextForm.PRODUCT_CATEGORY_LOADER);
			PageFreeTextForm.clickOnSelectCategory(driver, testCaseName);

			/**
			 * RTC_64174 : verify that Search text box should be autocomplete in category POPUP screen.
			 */
			selectedCategory = ModalSelectCategory.fillSelectCategory(driver, testCaseName, category.getCategory());
			ActionBot.waitForPageLoad(driver);
			RTC_64174 = selectedCategory != null;
			Assert.assertTrue("category is not autocompleted", RTC_64174);
			mappedTestCases.get(0).setTestResult(RTC_64174);

			/**
			 * RTC_64177 : verify that Eform found for particular category should be displayed in grid in category POPUP screen.
			 */
			RTC_64177 = ModalSelectCategory.isSelectEformIsPresent(driver, testCaseName);
			ModalSelectCategory.selectCategoryEform(driver, testCaseName, category.getCategoryEFormName());
			PopUpSelectCategoryEForm.toClickContinueBtn(driver, testCaseName);
			Assert.assertTrue("eform was not present in pop up", RTC_64177);
			mappedTestCases.get(2).setTestResult(RTC_64177);

			/**
			 * RTC_64173 :
			 */
			ActionBot.waitTillPopUpIsPresent(driver, IPageFreeTextForm.PRODUCT_CATEGORY_LOADER);
			PageFreeTextForm.clickOnSelectCategory(driver, testCaseName);
			selectedCategory = ModalSelectCategory.fillSelectCategory(driver, testCaseName, category.getCategory());
			ActionBot.waitForPageLoad(driver);
			flag = selectedCategory != null;
			Assert.assertTrue("category is not allowed to change through category search box", flag);

			/**
			 * RTC_64175 : verify that user should be able to search eform by entering data in search text box.
			 */
			PageFreeTextForm.clickSelectEFormLink(driver, testCaseName, cEform.getCeformDisplayName());
			RTC_64175 = PageFreeTextForm.clickEFormNamewise(driver, testCaseName, cEform.getCeformDisplayName());
			PageFreeTextForm.clickCategoryUnderEFormIndexwise(driver, testCaseName, 1);
			Assert.assertTrue("user is not able to search eform by entering data in search text box.", RTC_64175);
			mappedTestCases.get(1).setTestResult(RTC_64175);

			/**
			 * RTC_64178 : "Continue without category" option in category POPUP.
			 */
			ActionBot.waitTillPopUpIsPresent(driver, IPageFreeTextForm.PRODUCT_CATEGORY_LOADER);
			PageFreeTextForm.clickSelectCategoryLink(driver, testCaseName);
			RTC_64178 = !PageFreeTextForm.isContinueWithoutCategoryPresent(driver, testCaseName, 1);
			Assert.assertTrue("Continue without category is present .", RTC_64178);
			mappedTestCases.get(3).setTestResult(RTC_64178);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);
		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 22-Feb-2017 </b> <b>Method :
	 * RTC_145058 <b>Description : Test for bug 196810 - Free text item currency
	 * not retained if user edit item from checkout page. Reviewed by:
	 * kunal.ashar </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_145058_2(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = null;
		User user = null;

		try
		{
			OnlineStore onlineStore = ObjectCreation.searchItem();
			onlineStore.setSearchItem((IConstantsData.FREE_TEXT_ITEM_NAME));
			onlineStore.setItemType(IConstantsData.GUIDED_ITEM);
			onlineStore.setNextAction(IConstantsData.Checkout);
			CEform cEform = ObjectCreation.getDefaultCEformObject();

			mappedTestCases = new ArrayList<MappedTestCase>();
			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_108237"));
			}
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to clear cart and add a free text item by adding a contract
			// number
			cEform = FlowCEform.createCEform(driver, testCaseName, cEform);
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			FlowOnlineStore.clearCart(driver, testCaseName);
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, cEform);

			// to fill the checkout form and submit
			FlowRequisition.flow_IamDone_SaveAsDraft_Cancel(driver, testCaseName, onlineStore);

			// to approve the requisition ad send it to the buyer's desk
			ActionBot.defaultLowSleep();
			String reqNo = PageMyRequisition.getReqNumberRowise(driver, testCaseName, 1);
			ActionBot.defaultMediumSleep();
			MainPageHeaderLevelTab.clickOnAllRequisitionsSubTab(driver);
			PageAllRequestsApproval.enterReqNoFilter(driver, testCaseName, reqNo);
			FlowAllRequestsApproval.approveSingleRequisition(driver, testCaseName, reqNo);
			ActionBot.waitForPageLoad(driver);

			// to move on to buyer's desk and change the contract number
			MainPageHeaderLevelTab.clickOnBuyersDeskSubTab(driver, testCaseName);
			PageBuyersDesk.clickReqRowise(driver, testCaseName, 1);
			PageBuyersDesk.clickOnItemLinkDiscriptionIndexwise(driver, testCaseName, 1);
			ActionBot.waitForPageLoad(driver);
			PageBuyersDesk.clickSuppliersTab(driver, testCaseName);
			ActionBot.defaultMediumSleep();
			PageBuyersDesk.enterContractNumber(driver, testCaseName, "121");

			// PageBuyersDesk.clickCloseItemDetailPopup(driver, testCaseName);
			PageBuyersDesk.clickOnSave(driver, testCaseName);

			// to go back to free text screen and check the new contract
			// number
			ActionBot.defaultLowSleep();
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			// ActionBot.defaultMediumSleep();
			boolean status = false;
			// MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);

			PageOnlineStore.fillSearchText(driver, testCaseName, onlineStore.getSearchItem());
			PageOnlineStore.clickSearchButton(driver, testCaseName);
			ActionBot.waitForOperations(5000);

			if (ActionBot.isElementDisplayed(driver, IPageSearchListing.NO_CATLOGUE_FOUND))
			{
				status = FlowOnlineStore.veiwFreeTextItemCheckContractNumber(driver, testCaseName, "121");
			}
			Assert.assertTrue("the contract number was not updated at the free text item screen", status);

			/**
			 * RTC_108237
			 */
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, cEform);
			PageRequisitionCheckOut.clickItemDescriptionLinkIndexwise(driver, testCaseName, 1);
			PageRequisitionCheckOut.fillCurrencyForItemDetailPopup(driver, testCaseName, "usd");
			PageRequisitionCheckOut.clickSaveFreeTextButton(driver, testCaseName);
			PageRequisitionCheckOut.clickSaveAsDraft(driver, testCaseName);

			// to naivigate to the online store and check the currency
			ActionBot.defaultLowSleep();
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			ActionBot.defaultMediumSleep();
			status = false;
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);

			PageOnlineStore.fillSearchText(driver, testCaseName, onlineStore.getSearchItem());
			PageOnlineStore.clickSearchButton(driver, testCaseName);
			ActionBot.waitForOperations(5000);

			if (ActionBot.isElementDisplayed(driver, IPageSearchListing.NO_CATLOGUE_FOUND))
			{
				status = FlowOnlineStore.veiwFreeTextItemCheckItemCurrency(driver, testCaseName, "usd");
			}
			Assert.assertTrue("the currency was not retained at the free text item screen after being edited in the checkout screen", status);

			// logout
			mappedTestCases.get(0).setTestResult(true);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}
	}

	/**
	 * <b>Author: bhakti.sawant </b> <b>Created On : 22-Feb-2017 </b> <b>Method
	 * : RTC_145058 <b>Description : Test for bug 196810 - Free text item
	 * currency not retained if user edit item from checkout page.
	 * </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_145058(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		List<MappedTestCase> mappedTestCases = null;
		User user = null;
		Item item = ObjectCreation.getItem(IConstantsData.GUIDED_ITEM);
		ModalGuidedItemSelectCategory category = new ModalGuidedItemSelectCategory();
		category.setCategory(CommonServices.getTestData(IConstantsData.Item_Product_Category, 0));
		item.getGuidedItems().get(0).setCategory(category);
		Requisition requisition = ObjectCreation.getRequisition(driver);
		boolean RTC_108237 = false;

		try
		{
			OnlineStore onlineStore = ObjectCreation.searchItem();
			onlineStore.setSearchItem((IConstantsData.FREE_TEXT_ITEM_NAME));
			onlineStore.setItemType(IConstantsData.GUIDED_ITEM);
			onlineStore.setNextAction(IConstantsData.Checkout);
			mappedTestCases = new ArrayList<MappedTestCase>();
			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_108237"));
			}
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			requisition.setItems(item);
			//requisition.setEditHeaderLevelInfo(false);
			requisition.setNextAction(IConstantsData.NONE);
			FlowRequisition.createRequisition(driver, testCaseName, requisition);

			//to change currency at checkout page 
			PageRequisitionCheckOut.clickOnItemNameToViewItemDetails(driver, testCaseName, item.getGuidedItems().get(0).getItemID());
			String currency = "ZAR";
			PageRequisitionCheckOut.fillCurrencyForItemDetailPopup(driver, testCaseName, currency);
			PageRequisitionCheckOut.clickSaveFreeTextButton(driver, testCaseName);

			//submit requisistion
			FlowRequisition.submitReq(driver, testCaseName, true);

			Requisition requisitionSearch = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			Assert.assertTrue("requisition not searched", requisitionSearch != null);
			FlowMyRequisitions.viewRequisition(driver, testCaseName);

			//checking whether currency got updated or not after changing it at req checkout page
			String itemLevelCurrency = PageRequisitionCheckOut.getItemLevelCurrency(driver, testCaseName, item.getGuidedItems().get(0).getItemID());
			RTC_108237 = currency.equalsIgnoreCase(itemLevelCurrency);
			Assert.assertTrue("currency is not getting updated after changing it at requisistion checkout page", RTC_108237);

			//to approve requisition
			ApprovalAllRequests approvalAllRequests = new ApprovalAllRequests();
			approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, requisition.getReqNo(), IConstantsData.REQUISITION, IConstantsData.APPROVE);
			FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

			// to search in aprroval tab
			String docNo = null;
			FlowAllRequestsApproval.searchInApprovalTab(driver, testCaseName, approvalAllRequests);
			docNo = PageAllRequestsApproval.getFirstRowDocumentNo(driver, testCaseName);
			Assert.assertTrue("Requisition not approved", docNo.equalsIgnoreCase(requisition.getReqNo()));

			requisitionSearch = FlowBuyersDeskListing.searchAtBuyersDeskListing(driver, testCaseName, requisition);
			Assert.assertTrue("req not searched", requisitionSearch != null);

			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);

			ActionBot.refreshPage(driver, testCaseName);

			String contractNo = "" + System.currentTimeMillis();
			ActionBot.defaultSleep();
			String contractInSuppInfo = null;
			for (int i = 0; i < item.getGuidedItems().size(); i++)
			{
				PageBuyersDesk.clickOnItemName(driver, testCaseName, item.getGuidedItems().get(0).getItemID());
				ModalGuidedItemDetails.clickOnSupplierDetailsTab(driver, testCaseName);
				contractInSuppInfo = PageFreeTextForm.fillcontractNoInSuppInfo(driver, testCaseName, contractNo);

				ModalGuidedItemDetails.clickOnOkButton(driver, testCaseName);
				if (PopUpDefaultConfirmation.isConfirmYesButtonPresent(driver, testCaseName))
				{
					PopUpDefaultConfirmation.clickOnConfirmYesButton(driver, testCaseName);
				}
			}
			ActionBot.scroll(driver, "1000");
			PageBuyersDesk.fillReqChangeComment(driver, testCaseName, IConstantsData.CONVERT_TO_PO_COMMENT);
			FlowBuyersDesk.saveRequisitionFromBuyersDesk(driver, testCaseName);

			// verifying supplier contract number updated for recently ordered
			// free text item
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			PageOnlineStore.fillSearchText(driver, testCaseName, onlineStore.getSearchItem());
			PageOnlineStore.clickSearchButton(driver, testCaseName);

			PageOnlineStore.clickOnGuidedProcurementLink(driver, testCaseName);
			IFlowFillGuidedItemImpl iFlowFillGuidedItemImpl = new IFlowFillGuidedItemImpl();
			iFlowFillGuidedItemImpl.fillSelectcategory(driver, testCaseName, category);

			PageFreeTextForm.clickOnRecentlyOrderedFreeTextItems(driver, testCaseName);
			PageFreeTextForm.clickOnshortDescriptionLinkInRecentlyOrderedFreeTextItemsNameWise(driver, testCaseName, item.getGuidedItems().get(0).getShortDescription());
			PageFreeTextForm.clickSupplierSubTab(driver, testCaseName);

			String updatedContractNo = PageFreeTextForm.getContractNumberFromItemDetailPopup(driver, testCaseName);
			logger.info("\n supplier contract entered" + updatedContractNo);
			logger.info("\n supplier contract after updation at recent items view " + contractInSuppInfo);
			logger.info("\n item no of added item" + item.getGuidedItems().get(0));

			Assert.assertTrue("the contract number was not updated at the free text item screen",
				contractInSuppInfo.equalsIgnoreCase(updatedContractNo) || updatedContractNo != null);

			mappedTestCases.get(0).setTestResult(RTC_108237);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 23-Feb-2017 </b> <b>Method :
	 * RTC_230186 <b>Description : Test for bug 216927 - Price and quantity is
	 * not getting copied on copying recently ordered free text item . Reviewed
	 * by: kunal.ashar</font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_230186(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		List<MappedTestCase> mappedTestCases = null;

		try
		{
			OnlineStore onlineStore = ObjectCreation.searchItem();
			onlineStore.setSearchItem(Helper.getRandomString(4));

			mappedTestCases = new ArrayList<MappedTestCase>();
			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_108237"));
			}
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			ActionBot.defaultLowSleep();
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			ActionBot.defaultMediumSleep();
			boolean status = false;
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);

			PageOnlineStore.fillSearchText(driver, testCaseName, onlineStore.getSearchItem());
			PageOnlineStore.clickSearchButton(driver, testCaseName);
			ActionBot.defaultSleep();

			if (ActionBot.isElementDisplayed(driver, IPageSearchListing.NO_CATLOGUE_FOUND))
			{
				status = FlowOnlineStore.checkSuccessfullCopyOfRecentlyOrderedFreeTextItem(driver, testCaseName);
			}
			Assert.assertTrue("the quantity and the price was not copied succesfully", status);

			// logout
			mappedTestCases.get(0).setTestResult(true);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}
	}

	/**
	 * <b>Author: bhakti.sawant </b> <b>Created On : 30-Jan-2018 </b> <b>Method :
	 * RTC_229962 <b>Description : Check for the message displayed on hover over
	 * icon in items in cart listing at checkout,for an item with sourcing
	 * status as "Quoted by supplier".</font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_229962(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		Requisition requisition = new Requisition();
		User user = null;
		boolean status = false;

		try
		{
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// create req
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.GUIDED_ITEM);
			requisition.setNextAction(IConstantsData.NONE);

			FlowRequisition.createRequisition(driver, testCaseName, requisition);
			status = PageRequisitionCheckOut.isItemWithQuotedBySupplierSourcingStatusPresent(driver, testCaseName);
			Assert.assertTrue("hover over icon for sourcing status as 'Quoted by supplier' was not present", status);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}
		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 23-Feb-2017 </b> <b>Method :
	 * RTC_229962 <b>Description : Check for the message displayed on hover over
	 * icon in items in cart listing at checkout,for an item with sourcing
	 * status as "Quoted by supplier". Reviewed by: kunal.ashar </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_229962_2(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		boolean status = false;

		try
		{
			OnlineStore onlineStore = ObjectCreation.searchItem();
			onlineStore.setSearchItem(Helper.getRandomString(4));
			onlineStore.setItemType(IConstantsData.GUIDED_ITEM);
			onlineStore.setNextAction(IConstantsData.Checkout);
			CEform cEform = ObjectCreation.getDefaultCEformObject();

			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to create CE-Form
			FlowCEform.createCEform(driver, testCaseName, cEform);

			// to add a free text item and checkout to cart
			onlineStore = FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, cEform);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			// verify the hover over icon in the checkout screen to show
			// sourcing status as "Quoted by supplier"
			status = PageRequisitionCheckOut.isItemWithQuotedBySupplierSourcingStatusPresent(driver, testCaseName);
			Assert.assertTrue("hover over icon for sourcing status as 'Quoted by supplier' was not present", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 1-March-2017 </b> <b>Method :
	 * RTC_232984 <b>Description : Check for the message displayed on hover over
	 * icon in items in cart listing at checkout,for an item with sourcing
	 * status as "Quoted by supplier". Reviewed by: kunal.ashar</font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_232984(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		boolean status = false;

		try
		{
			OnlineStore onlineStore = ObjectCreation.searchItem();
			onlineStore.setSearchItem(Helper.getRandomString(4));

			// login
			user = LoginLogoutServices.login(driver, testCase);
			ActionBot.defaultHighSleep();

			// to clear the cart , select an item and checkout
			ActionBot.defaultLowSleep();
			onlineStore = FlowOnlineStore.clearCartAndSearchProduct(driver, testCaseName, onlineStore, null);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			FlowSearchListing.selectItems_Cart_Basket_Favourite(driver, testCaseName, onlineStore);
			PageSearchListing.clickOnCheckOutButton(driver, testCaseName);

			// verify the hover over icon in the checkout screen to show
			// sourcing status as "Quoted by supplier"
			status = PageRequisitionCheckOut.isItemWithQuotedBySupplierSourcingStatusPresent(driver, testCaseName);
			Assert.assertTrue("hover over icon for sourcing status as 'Quoted by supplier' was not present", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 27-March-2017 </b> <b>Method :
	 * RTC_64171 <b>Description : verify that If more than one eform is present
	 * for user selected category then category POPUP should get displayed on
	 * screen Reviewed by: kunal.ashar </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_64171(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		boolean status_RTC_64171 = false;
		boolean status_RTC_64078_RTC_75021 = false;
		boolean status_RTC_106981_RTC_75019 = false;
		boolean status_RTC_130451 = false;
		boolean status_RTC_130455 = false;
		boolean status_RTC_132383 = false;
		int eFormCount = 0, counter = 0;
		ArrayList<MappedTestCase> mappedTestCases = null;
		boolean flag = false;
		CEform newcEform = null;
		CEform cEform = null;
		try
		{
			cEform = ObjectCreation.getDefaultCEformObject();
			OnlineStore onlineStore = ObjectCreation.searchItem();
			onlineStore.setSearchItem(Helper.getRandomString(4));
			onlineStore.setItemType(IConstantsData.GUIDED_ITEM);
			onlineStore.setNextAction(IConstantsData.SEARCH);
			GuidedItem guidedItem = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.SUGGEST_EXISTING_SUPPLIER);

			mappedTestCases = new ArrayList<MappedTestCase>();
			{
				//mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_64171"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_106981"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_130451"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_130455"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_75021"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_75019"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_132383"));
			}
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// create ceform
			newcEform = FlowCEform.createCEform(driver, testCaseName, cEform);
			Assert.assertTrue("ceform was not created", newcEform != null);

			flag = FlowCEform.searchCEform(driver, testCaseName, cEform.getCeformName());
			Assert.assertTrue("ceform was not searched", flag);
			//code to add free text item
			Requisition requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.GUIDED_ITEM);

			ModalGuidedItemSelectCategory category = new ModalGuidedItemSelectCategory();
			category.setCategory(cEform.getCategory());
			category.setCategoryEFormName(cEform.getCeformDisplayName());
			requisition.getItems().getGuidedItems().get(0).setCategory(category);

			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);

			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			Assert.assertTrue("req not searched", requisition.isResult());

			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			FlowSearchListing.searchItem(driver, testCaseName, guidedItem.getItemName());
			FlowFillGuidedItem.addGuidedItem(driver, testCaseName);

			/** RTC_132383 **/
			PageFreeTextForm.fillLongDescription(driver, testCaseName, guidedItem.getLongDescription());
			if (PageFreeTextForm.isErrorMessageVisible(driver, testCaseName))
				status_RTC_132383 = true;
			Assert.assertTrue("Error page received on inputting maximum characters in long description while adding a free text item", status_RTC_132383);

			/** RTC_106981 , RTC_75019 **/
			status_RTC_106981_RTC_75019 = (PageFreeTextForm.fillPrice(driver, testCaseName, guidedItem.getPrice()) != 0.000000) ? true : false;
			Assert.assertTrue("5 digit decimal was not able to be inserted into the price field of guided page", status_RTC_106981_RTC_75019);

			// to verify the given scenario
			PageFreeTextForm.clickOnSelectCategory(driver, testCaseName);
			ActionBot.defaultLowSleep();
			PageFreeTextForm.selectCategoryFromTheSearchBox(driver, testCaseName, cEform.getCategory());
			ActionBot.defaultSleep();

			/** status_RTC_64171 **/
			eFormCount = Integer.parseInt(ActionBot.getTextWithInElement(driver, IPageFreeTextForm.CATEGORY_MODAL_POPUP_EFORM_COUNT_LABEL));
			counter = PageFreeTextForm.countEForms(driver, testCaseName);
			if (eFormCount == counter)
				status_RTC_64171 = true;
			Assert.assertTrue("E-Forms were not present on the category popup", status_RTC_64171);

			/** RTC_64078 , RTC_75021 **/
			ModalSelectCategory.selectCategoryEform(driver, testCaseName, cEform.getCeformDisplayName());
			// to verify the eform being displayed in the requirements field or
			// not
			status_RTC_64078_RTC_75021 = PageFreeTextForm.isEFormFieldsVisible(driver, testCaseName, cEform.getFieldName());
			Assert.assertTrue("E-Forms field(s) were not present in the requirements section", status_RTC_64078_RTC_75021);

			/** RTC_130451 , 130455 **/
			PageFreeTextForm.clickToAddFreeTextItemIndexwise(driver, testCaseName, 1);
			ActionBot.defaultLowSleep();
			if (ActionBot.isElementDisplayed(driver, IPageFreeTextForm.ITEM_TAB_RECENTLY_ORDERED_ITEM_POPUP)
				&& ActionBot.isElementDisplayed(driver, IPageFreeTextForm.REQUIREMENT_TAB_RECENTLY_ORDERED_ITEM_POPUP)
				&& ActionBot.isElementDisplayed(driver, IPageFreeTextForm.SUPPLIER_TAB_RECENTLY_ORDERED_ITEM_POPUP))
				status_RTC_130451 = true;
			ActionBot.defaultSleep();
			status_RTC_130455 = PageFreeTextForm.clickCopyItem(driver, testCaseName);
			FlowOnlineStore.clickCloseOnItemPopUp(driver, testCaseName, "(.//*[contains(@class,'ui-dialog-titlebar')]//*[@title='Close']//*[text()='Close'])");
			Assert.assertTrue("mandatory fields like item details, requirement details and supplier info tabs were not visible", status_RTC_130451);
			Assert.assertTrue("recently ordered Item detail popup was editable", status_RTC_130451);

			// logout
			mappedTestCases.get(0).setTestResult(status_RTC_106981_RTC_75019);
			mappedTestCases.get(1).setTestResult(status_RTC_130451);
			mappedTestCases.get(2).setTestResult(status_RTC_130455);
			mappedTestCases.get(3).setTestResult(status_RTC_64078_RTC_75021);
			mappedTestCases.get(4).setTestResult(status_RTC_106981_RTC_75019);
			mappedTestCases.get(5).setTestResult(status_RTC_132383);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			FlowCEform.deactivateNdeleteCEform(driver, testCaseName, cEform.getCeformName());
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 1-March-2017 </b> <b>Method :
	 * RTC_75020 <b>Description : Test for bug 195205 - Inactive eforms should
	 * not get displayed on Guided screen in category POPUP and see all eform
	 * link. Reviewed by: kunal.ashar</font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_75020(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		ArrayList<MappedTestCase> mappedTestCases = null;
		boolean status = false;
		boolean status_RTC_130469 = false;
		boolean status_RTC_130475 = false;
		boolean status_RTC_130465 = false;
		String shortDesc = "", price = null;

		try
		{
			Requisition requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.GUIDED_ITEM);
			OnlineStore onlineStore = ObjectCreation.searchItem();
			onlineStore.setSearchItem(Helper.getRandomString(4));
			onlineStore.setItemType(IConstantsData.GUIDED_ITEM);
			onlineStore.setNextAction(IConstantsData.SEARCH);
			CEform cEform = ObjectCreation.getDefaultCEformObject();
			boolean flag = false;
			mappedTestCases = new ArrayList<MappedTestCase>();
			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_130469"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_130475"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_130465"));
			}
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// create ceform
			cEform = FlowCEform.createCEform(driver, testCaseName, cEform);
			flag = FlowCEform.searchCEform(driver, testCaseName, cEform.getCeformName());
			Assert.assertTrue("ceform was not searched", flag);
			flag = FlowCEform.deactivateCEform(driver, testCaseName, cEform.getCeformName());
			Assert.assertTrue("ceform was no deleted ", flag);

			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			flag = FlowShoppingCart.emptyShoppingCart(driver, testCaseName);
			Assert.assertTrue("shopping cart was not emptied", flag);

			FlowSearchListing.searchItem(driver, testCaseName, requisition.getItems().getGuidedItems().get(0).getItemName());
			FlowFillGuidedItem.addGuidedItem(driver, testCaseName);

			// to check if anydeactivated e-form is visible in the category popup or not
			PageFreeTextForm.clickOnSelectCategory(driver, testCaseName);
			ActionBot.click(driver, IPageFreeTextForm.SELECT_EFORM_LINK);
			if (!PageFreeTextForm.isEFormVisible(driver, testCaseName, cEform.getCeformDisplayName()))
				status = true;
			Assert.assertTrue("Inactive eforms are getting displayed on Guided screen", status);
			PageFreeTextForm.clickCloseCategoryDailogueButton(driver, testCaseName);

			/** RTC_130469 **/
			// to create another ceform
			cEform = ObjectCreation.getDefaultCEformObject();
			cEform = FlowCEform.createCEform(driver, testCaseName, cEform);
			flag = FlowCEform.searchCEform(driver, testCaseName, cEform.getCeformName());
			Assert.assertTrue("ceform was not searched", flag);
			// to add a free text item and add to cart

			ModalGuidedItemSelectCategory category = new ModalGuidedItemSelectCategory();
			category.setCategory(cEform.getCategory());
			category.setCategoryEFormName(cEform.getCeformDisplayName());
			requisition.getItems().getGuidedItems().get(0).setCategory(category);

			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			Assert.assertTrue("req not searched", requisition.isResult());

			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);

			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			flag = FlowShoppingCart.emptyShoppingCart(driver, testCaseName);
			Assert.assertTrue("shopping cart was not emptied", flag);

			FlowSearchListing.searchItem(driver, testCaseName, requisition.getItems().getGuidedItems().get(0).getItemName());
			FlowFillGuidedItem.addGuidedItem(driver, testCaseName);

			//PageFreeTextForm.clickOnSelectCategory(driver, testCaseName);
			IFlowFillGuidedItemImpl fillGuidedItemImpl = new IFlowFillGuidedItemImpl();
			fillGuidedItemImpl.fillSelectcategory(driver, testCaseName, category);

			ActionBot.click(driver, IPageFreeTextForm.RECENTLY_ORDERED_FREE_TEXT_ITEMS);
			if (PageFreeTextForm.isFreeTextItemVisible(driver, testCaseName, requisition.getItems().getGuidedItems().get(0).getItemName()))
				status_RTC_130469 = true;
			Assert.assertTrue("free text item is added to cart but item is not displayed in Recently Ordered Free-form Items section", status_RTC_130469);
			mappedTestCases.get(0).setTestResult(status_RTC_130469);
			/** RTC_130475 **/
			PageFreeTextForm.clickRecentlyOrderedItemsIndexwise(driver, testCaseName, 1);

			PageFreeTextForm.clickCloseItemModalPopup(driver, testCaseName);
			shortDesc = PageFreeTextForm.getPrice(driver, testCaseName);
			if (!(shortDesc != null))
				status_RTC_130475 = true;
			Assert.assertTrue("when user click on cancel on item modal then that item got loaded in guided screen.", status_RTC_130475);
			mappedTestCases.get(1).setTestResult(status_RTC_130475);

			/** RTC_130465 **/
			flag = PageFreeTextForm.clickOnshortDescriptionLinkInRecentlyOrderedFreeTextItemsNameWise(driver, testCaseName,
				requisition.getItems().getGuidedItems().get(0).getShortDescription());
			Assert.assertTrue("item was not clicked from recently ordered items", flag);

			PageFreeTextForm.clickCopyItem(driver, testCaseName);
			price = PageFreeTextForm.getPrice(driver, testCaseName);
			Assert.assertTrue("price was not loaded after copying item from recently ordred item", price != null);

			status_RTC_130465 = PageFreeTextForm.fillPrice(driver, testCaseName, 3.005f) == 0.00 ? false : true;
			Assert.assertTrue("Verification that when user load ordered free text item on guided screen all fields should be editable failed", status_RTC_130465);
			mappedTestCases.get(2).setTestResult(status_RTC_130465);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 1-March-2017 </b> <b>Method :
	 * RTC_131092 <b>Description : User should be able to input configured
	 * Parametric field values when creating/editing items on Guided. Reviewed
	 * by: kunal.ashar</font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_131092(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		ArrayList<MappedTestCase> mappedTestCases = null;
		boolean status = false;
		boolean status_RTC_131100 = false;

		try
		{
			OnlineStore onlineStore = ObjectCreation.searchItem();
			onlineStore.setSearchItem(Helper.getRandomString(4));

			GuidedItem guidedItem = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.SUGGEST_EXISTING_SUPPLIER);

			mappedTestCases = new ArrayList<MappedTestCase>();
			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_131100"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_131105"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_131189"));
			}
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to clear the cart , select an item and checkout
			FlowShoppingCart.emptyShoppingCart(driver, testCaseName);
			FlowSearchListing.searchItem(driver, testCaseName, Helper.getRandomString(4));
			FlowFillGuidedItem.addGuidedItem(driver, testCaseName);

			/** RTC_131105,RTC_131189 **/
			// to show parametric fields and perform validation tests
			status = FlowFillGuidedItem.fillExtraFields(driver, testCaseName, guidedItem);
			Assert.assertTrue("User was not able to input configured Parametric field values", status);

			/** RTC_131100 **/
			status_RTC_131100 = FlowFillGuidedItem.fillExtraFieldsWithScriptedInput(driver, testCaseName, guidedItem);
			Assert.assertTrue("User was not able to input configured Parametric field values with scripted inputs", status_RTC_131100);

			// logout
			mappedTestCases.get(0).setTestResult(status_RTC_131100);
			mappedTestCases.get(1).setTestResult(status);
			mappedTestCases.get(2).setTestResult(status);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 1-March-2017 </b> <b>Method :
	 * RTC_131099 <b>Description : User should be able to input configured
	 * Parametric field values when creating/editing items on Buyer desk.-Check
	 * Validation for these fields. Reviewed by: kunal.ashar </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_131099(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		ArrayList<MappedTestCase> mappedTestCases = null;
		boolean status = false;
		Item item = ObjectCreation.getItem(IConstantsData.GUIDED_ITEM);
		Requisition requisition = ObjectCreation.getRequisition(driver);

		try
		{
			OnlineStore onlineStore = ObjectCreation.searchItem();
			//CEform cEform = ObjectCreation.getDefaultCEformObject();
			onlineStore.setSearchItem(Helper.getRandomString(4));
			onlineStore.setItemType(IConstantsData.GUIDED_ITEM);
			onlineStore.setNextAction(IConstantsData.Checkout);

			mappedTestCases = new ArrayList<MappedTestCase>();
			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_131102"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_131103"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_131191"));
			}
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			requisition.setItems(item);
			//requisition.setEditHeaderLevelInfo(false);
			requisition.setEditItemLevelInfo(false);
			requisition.setNextAction(IConstantsData.NONE);
			requisition.setAssignedBuyer(user.getUsername());
			FlowRequisition.createRequisition(driver, testCaseName, requisition);

			// submit requisistion
			FlowRequisition.submitReq(driver, testCaseName, true);

			Requisition requisitionSearch = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			Assert.assertTrue("requisition not searched", requisitionSearch != null);

			//to approve requisition
			ApprovalAllRequests approvalAllRequests = new ApprovalAllRequests();
			approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, requisition.getReqNo(), IConstantsData.REQUISITION, IConstantsData.APPROVE);
			FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);

			// to search in aprroval tab
			String docNo = null;
			FlowAllRequestsApproval.searchInApprovalTab(driver, testCaseName, approvalAllRequests);
			docNo = PageAllRequestsApproval.getFirstRowDocumentNo(driver, testCaseName);
			Assert.assertTrue("Requisition not approved", docNo.equalsIgnoreCase(requisition.getReqNo()));

			requisitionSearch = FlowBuyersDeskListing.searchAtBuyersDeskListing(driver, testCaseName, requisition);
			Assert.assertTrue("req not searched", requisitionSearch != null);

			PageBuyersDeskListing.clickOnFirstReqNoLink(driver, testCaseName);
			PageBuyersDesk.clickOnItemName(driver, testCaseName, item.getGuidedItems().get(0).getItemID());

			/** RTC_131099,RTC_131103,RTC_131191 **/
			status = FlowBuyersDesk.fillExtraFields(driver, testCaseName, IConstantsData.NONE);
			Assert.assertTrue("User was not able to input configured Parametric field values", status);

			PageBuyersDesk.clickShowMoreExtraFields(driver, testCaseName);
			ActionBot.defaultLowSleep();

			/** RTC_131102,RTC_131103,RTC_131191 **/
			status = FlowBuyersDesk.fillExtraFields(driver, testCaseName, IConstantsData.SCRIPT_INPUT);
			Assert.assertTrue("User was not able to input configured Parametric field for scripted values", status);

			// logout
			mappedTestCases.get(0).setTestResult(status);
			mappedTestCases.get(1).setTestResult(status);
			mappedTestCases.get(2).setTestResult(status);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}
	}

	/**
	 * <b>Author: bhakti.sawant </b> <b>Created On : 1-March-2017 </b> <b>Method :
	 * RTC_134406 <b>Description : Test for bug 200961 - Error shown on page if
	 * user copy item from "Recently ordered item" list if version got update
	 * for eform of that item. Reviewed by: kunal.ashar </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_134406(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		ArrayList<MappedTestCase> mappedTestCases = null;
		boolean status = false;
		int contractNumber = 0;
		boolean status_RTC_183991 = false;
		boolean status_RTC_190789 = false;
		boolean flag = false;
		Requisition requisition;
		try
		{
			OnlineStore onlineStore = ObjectCreation.searchItem();
			onlineStore.setSearchItem(Helper.getRandomString(4));
			onlineStore.setItemType(IConstantsData.GUIDED_ITEM);
			onlineStore.setNextAction(IConstantsData.Checkout);
			CEform cEform = ObjectCreation.getDefaultCEformObject();

			mappedTestCases = new ArrayList<MappedTestCase>();
			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_140352"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_183991"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_190789"));
			}

			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.GUIDED_ITEM);
			requisition.setVerifyWorkflow(false);
			requisition.setEditItemLevelInfo(false);

			ModalGuidedItemSelectCategory guidedItemSelectCategory = new ModalGuidedItemSelectCategory();
			guidedItemSelectCategory.setCategory(cEform.getCategory());
			guidedItemSelectCategory.setCategoryEFormName(cEform.getCeformDisplayName());
			requisition.getItems().getGuidedItems().get(0).setCategory(guidedItemSelectCategory);

			// to create ceform
			cEform = FlowCEform.createCEform(driver, testCaseName, cEform);

			flag = FlowCEform.searchCEform(driver, testCaseName, cEform.getCeformName());
			Assert.assertTrue("ceform was not created ", flag);

			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			//create requisition with item using category of cefrom
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			//search requisition
			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			Assert.assertTrue("requisition was not searched", flag);
			mappedTestCases.get(0).setTestResult(flag);
			MainPageHeaderLevelTab.clickOnCategoryEformTab(driver, testCaseName);

			//update ceform
			cEform.setNextAction(IConstantsData.PUBLISH_EFORM);
			cEform.setChangeCategory(false);
			cEform.setSectionName(CommonUtilities.getSectionName());
			cEform.setFieldName(CommonUtilities.getFieldName());

			flag = FlowCEform.searchCEform(driver, testCaseName, cEform.getCeformName());
			Assert.assertTrue("ceform was not created ", flag);

			cEform = FlowCEform.updateCEform(driver, testCaseName, cEform);

			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);

			flag = FlowShoppingCart.emptyShoppingCart(driver, testCaseName);
			Assert.assertTrue("cart is not empty", flag);

			FlowSearchListing.searchItem(driver, testCaseName, requisition.getItems().getGuidedItems().get(0).getItemName());
			FlowFillGuidedItem.addGuidedItem(driver, testCaseName);

			IFlowFillGuidedItemImpl fillGuidedItemImpl = new IFlowFillGuidedItemImpl();
			fillGuidedItemImpl.fillSelectcategory(driver, testCaseName, guidedItemSelectCategory);

			PageFreeTextForm.clickOnRecentlyOrderedFreeTextItems(driver, testCaseName);
			flag = PageFreeTextForm.clickOnshortDescriptionLinkInRecentlyOrderedFreeTextItemsNameWise(driver, testCaseName,
				requisition.getItems().getGuidedItems().get(0).getShortDescription());
			Assert.assertTrue("item was not clicked from recently ordered items", flag);

			PageFreeTextForm.clickSupplierSubTab(driver, testCaseName);
			contractNumber = Integer.parseInt(PageFreeTextForm.getContractNumberFromItemDetailPopup(driver, testCaseName));
			PageFreeTextForm.clickCopyItem(driver, testCaseName);

			flag = requisition.getItems().getGuidedItems().get(0).getShortDescription().equalsIgnoreCase(PageFreeTextForm.getShortDescription(driver, testCaseName));
			Assert.assertTrue("item was not copied successfully after copying it from recently ordered free text items", flag);

			/** RTC_183991 **/
			if (contractNumber == Integer.parseInt(ActionBot.getTextWithInElement(driver, IPageFreeTextForm.CONTRACT_NO_IN_SUPPLIER_INFO)))
				status_RTC_183991 = true;
			Assert.assertTrue(" Contract number is not getting copied on guided screen when user copy free text item from Recently Ordered Item section", status_RTC_183991);
			mappedTestCases.get(1).setTestResult(status_RTC_183991);
			status = PageFreeTextForm.isErrorMessageVisible(driver, testCaseName);
			Assert.assertTrue(" Error shown on page if user copy item from 'Recently ordered item' list if version got update for eform of that item", status);

			/** RTC_190789 **/
			PageFreeTextForm.clickSelectCategoryLink(driver, testCaseName);
			cEform.setCategory(IConstantsData.Cleaning_and_janitorial_services);
			PageFreeTextForm.selectCategoryFromTheSearchBox(driver, testCaseName, cEform.getCategory());
			ActionBot.defaultLowSleep();
			status_RTC_190789 = PageFreeTextForm.isCatalogItemCountVisible(driver, testCaseName) && PageFreeTextForm.isPunchoutCountLinkVisible(driver, testCaseName) ? true
				: false;
			Assert.assertTrue("Message of count of catalog items & punch out available for selected category is not displayed", status_RTC_190789);
			mappedTestCases.get(2).setTestResult(status_RTC_190789);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 1-March-2017 </b> <b>Method :
	 * RTC_134406 <b>Description : Test for bug 200961 - Error shown on page if
	 * user copy item from "Recently ordered item" list if version got update
	 * for eform of that item. Reviewed by: kunal.ashar </font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_134406_old(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		ArrayList<MappedTestCase> mappedTestCases = null;
		boolean status = false;
		int contractNumber = 0;
		boolean status_RTC_140352 = false;
		boolean status_RTC_183991 = false;
		boolean status_RTC_190789 = false;

		try
		{
			OnlineStore onlineStore = ObjectCreation.searchItem();
			GuidedItem guidedItem = ObjectCreation.getDefaultGuidedItemObject(IConstantsData.SUGGEST_EXISTING_SUPPLIER);
			onlineStore.setSearchItem(Helper.getRandomString(4));
			onlineStore.setItemType(IConstantsData.GUIDED_ITEM);
			onlineStore.setNextAction(IConstantsData.Checkout);
			CEform cEform = ObjectCreation.getDefaultCEformObject();

			mappedTestCases = new ArrayList<MappedTestCase>();
			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_140352"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_183991"));
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_190789"));
			}

			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to create ceform
			cEform = FlowCEform.createCEform(driver, testCaseName, cEform);

			// to clear the cart , select an item and checkout
			/** RTC_140352 **/
			ActionBot.defaultLowSleep();
			onlineStore = FlowOnlineStore.clearCartAndSearchProduct(driver, testCaseName, onlineStore, cEform);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}
			status_RTC_140352 = onlineStore.isResult();
			FlowRequisition.flow_IamDone_SaveAsDraft_Cancel(driver, testCaseName, onlineStore);
			;

			// navigate to online store and search a free text item and verify
			onlineStore.setNextAction(IConstantsData.SEARCH);
			onlineStore.setSearchItem(Helper.getRandomString(4));
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			onlineStore = FlowOnlineStore.clearCartAndSearchProduct(driver, testCaseName, onlineStore, cEform);

			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}
			PageFreeTextForm.veiwRecentlyOrderedItemLink(driver, testCaseName);
			PageFreeTextForm.clickRecentlyOrderedItemsIndexwise(driver, testCaseName, 1);
			PageFreeTextForm.clickSupplierSubTab(driver, testCaseName);
			contractNumber = Integer.parseInt(PageFreeTextForm.getContractNumberFromItemDetailPopup(driver, testCaseName));
			PageFreeTextForm.clickCopyItem(driver, testCaseName);
			/** RTC_183991 **/
			if (contractNumber == Integer.parseInt(PageFreeTextForm.getExistingSupplierContractNumber(driver, testCaseName)))
				status_RTC_183991 = true;
			// to verify if the contract number is copied in the guided page
			// from the recently ordered items
			Assert.assertTrue(" Contract number is not getting copied on guided screen when user copy free text item from Recently Ordered Item section", status_RTC_183991);
			status = PageFreeTextForm.isErrorMessageVisible(driver, testCaseName);
			Assert.assertTrue(" Error shown on page if user copy item from 'Recently ordered item' list if version got update for eform of that item", !status);

			/** RTC_190789 **/
			PageFreeTextForm.clickSelectCategoryLink(driver, testCaseName);
			cEform.setCategory(IConstantsData.Cleaning_and_janitorial_services);
			PageFreeTextForm.selectCategoryFromTheSearchBox(driver, testCaseName, cEform.getCategory());
			ActionBot.defaultLowSleep();
			status_RTC_190789 = PageFreeTextForm.isCatalogItemCountVisible(driver, testCaseName) && PageFreeTextForm.isPunchoutCountLinkVisible(driver, testCaseName) ? true
				: false;
			Assert.assertTrue("Message of count of catalog items & punch out available for selected category is not displayed", status_RTC_190789);

			// logout
			mappedTestCases.get(0).setTestResult(status_RTC_140352);
			mappedTestCases.get(1).setTestResult(status_RTC_140352);
			mappedTestCases.get(2).setTestResult(status_RTC_190789);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 4-April-2017 </b> <b>Method :
	 * RTC_190816 <b>Description : Test for bug 209584 - Category eform details
	 * are not displayed to user While adding item from guided screen if user
	 * view cart & click on item detail. Reviewed by: kunal.ashar</font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_190816(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		boolean status = false, flag = false;
		try
		{
			Requisition requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.GUIDED_ITEM);
			CEform cEform = ObjectCreation.getDefaultCEformObject();
			cEform.setCeformName("Zycus Test category form" + System.currentTimeMillis());
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			ModalGuidedItemSelectCategory category = new ModalGuidedItemSelectCategory();
			category.setCategory(cEform.getCategory());
			category.setCategoryEFormName(cEform.getCeformDisplayName());
			requisition.getItems().getGuidedItems().get(0).setCategory(category);

			// to create a ceform
			cEform = FlowCEform.createCEform(driver, testCaseName, cEform);

			flag = FlowCEform.searchCEform(driver, testCaseName, cEform.getCeformName());
			Assert.assertTrue("ceform was not searched", flag);

			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			Item item = FlowSearchListing.addItem(driver, testCaseName, requisition.getItems());
			Assert.assertTrue("item not added to cart", item != null);

			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			PageOnlineStore.clickOnViewCart(driver, testCaseName);

			// to veirfy the above scenario
			PageOnlineStore.clickItemInCartindexwise(driver, testCaseName, 1);
			PageOnlineStore.clickRequirementDetailsTabInItemDetailsPopupInViewCart(driver, testCaseName);
			status = PageOnlineStore.verifyEformFieldInItemDetailsPopupInViewCart(driver, testCaseName, cEform.getFieldName());
			Assert.assertTrue(" Category eform details are not displayed to user While adding item from guided screen if user view cart & click on item detail", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 4-April-2017 </b> <b>Method :
	 * RTC_190823 <b>Description : Test for bug 209596 - Suggested suppliers are
	 * not shown in view link of item from recently ordered items. Reviewed by:
	 * kunal.ashar</font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_190823(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		ArrayList<MappedTestCase> mappedTestCases = null;
		boolean status = false;
		boolean status_RTC_191091 = false, flag = false;
		int count = 0;
		Requisition requisition = new Requisition();

		try
		{
			OnlineStore onlineStore = ObjectCreation.searchItem();
			onlineStore.setSearchItem(Helper.getRandomString(4));
			onlineStore.setItemType(IConstantsData.GUIDED_ITEM);
			onlineStore.setNextAction(IConstantsData.SEARCH);

			mappedTestCases = new ArrayList<MappedTestCase>();
			{
				mappedTestCases.add(MappedTestCaseUtil.findMappedTestCase("RTC_191091"));
			}
			CommonServices.startTestCase(driver, testCase, mappedTestCases);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.GUIDED_ITEM);
			requisition.getItems().getGuidedItems().get(0).setSupplierType(IConstantsData.SUGGEST_NEW_SUPPLIER);
			ModalGuidedItemSelectCategory category = new ModalGuidedItemSelectCategory();
			category.setCategory("Paper Materials and Products");
			requisition.getItems().getGuidedItems().get(0).setCategory(category);

			GuidedItemSuggestSupplier suggestSupplier = ObjectCreation.getDefaultObjectOfGuidedItemSuggestSupplier(IConstantsData.SUGGEST_NEW_SUPPLIER);
			requisition.getItems().getGuidedItems().get(0).setGuidedItemSuggestSupplier(suggestSupplier);
			//requisition.getItems().getGuidedItems().get(0).setActivity(IConstantsData.Checkout);
			GuidedItem guidedItem = requisition.getItems().getGuidedItems().get(0);

			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			requisition = FlowMyRequisitions.searchRequisition(driver, testCaseName, requisition);
			Assert.assertTrue("req not searched", requisition.isResult());

			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			FlowShoppingCart.emptyShoppingCart(driver, testCaseName);
			FlowSearchListing.searchItem(driver, testCaseName, requisition.getItems().getGuidedItems().get(0).getItemName());
			FlowFillGuidedItem.addGuidedItem(driver, testCaseName);

			IFlowFillGuidedItemImpl iFlowFillGuidedItemImpl = new IFlowFillGuidedItemImpl();
			category = iFlowFillGuidedItemImpl.fillSelectcategory(driver, testCaseName, category);
			guidedItem.setCategory(category);

			PageFreeTextForm.clickOnRecentlyOrderedFreeTextItems(driver, testCaseName);
			flag = PageFreeTextForm.clickOnshortDescriptionLinkInRecentlyOrderedFreeTextItemsNameWise(driver, testCaseName,
				requisition.getItems().getGuidedItems().get(0).getShortDescription());
			Assert.assertTrue("item was not clicked from recently ordered items", flag);

			PageFreeTextForm.clickCopyItem(driver, testCaseName);

			// to veirfy the above scenario
			count = PageFreeTextForm.countSupplier(driver, testCaseName);
			if (count > 0)
				status = true;
			Assert.assertTrue("Suggested suppliers are not shown in view link of item from recently ordered items", status);

			/** RTC_191091 **/
			// to click on add to checkout and click add another item and verify
			// the above scenario
			PageFreeTextForm.clickOnAddToCartButton(driver, testCaseName);
			PageFreeTextForm.clickOnAddAnotherItemOnAddToCartPopup(driver, testCaseName);
			status_RTC_191091 = PageFreeTextForm.fillQuantity(driver, testCaseName, Integer.parseInt(Helper.getRandomNumber(2))) > 0 ? true : false;
			Assert.assertTrue(" Script error is occurred when user click on Add another item action from Guided screen.", status);

			// logout
			mappedTestCases.get(0).setTestResult(status_RTC_191091);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user, mappedTestCases);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 4-April-2017 </b> <b>Method :
	 * RTC_190826 <b>Description : Test for bug 209604 - Unable to submit the
	 * requisition if user reloads returned requisition in cart & then canceled
	 * that requisition from listing. Reviewed by: kunal.ashar</font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_190826(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;
		boolean status = false, flag = false;
		Requisition requisition = new Requisition();
		String reqStatus = null;

		try
		{
			OnlineStore onlineStore = ObjectCreation.searchItem();
			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.GUIDED_ITEM);

			//requisition = CombineFlowImpl.reqToBuyersDesk(driver, testCaseName, requisition);

			FlowRequisition.createRequisition(driver, testCaseName, requisition);

			requisition = FlowMyRequisitions.searchInMyRequisitionTab(driver, testCaseName, requisition);
			assertTrue("Requisition was not created", requisition.isResult());
			// to approve req
			ApprovalAllRequests approvalAllRequests = new ApprovalAllRequests();
			approvalAllRequests = ObjectCreation.getObjectOfApprovalAllRequests(IConstantsData.DOC_NO, requisition.getReqNo(), IConstantsData.REQUISITION, IConstantsData.APPROVE);

			FlowAllRequestsApproval.searchAndPerformActions(driver, testCaseName, approvalAllRequests);
			reqStatus = PageAllRequestsApproval.getDocumentStatus(driver, testCaseName);
			assertTrue("Requisition was not rejected", reqStatus.equalsIgnoreCase(IConstantsData.APPROVED_FILTER_STATUS));

			// search at buyers desk
			requisition = FlowBuyersDeskListing.searchAtBuyersDeskListing(driver, testCaseName, requisition);
			assertTrue("Requisition was not searched at buyers desk", requisition.isResult());

			// to return req from buyers desk
			flag = FlowBuyersDeskListing.returnRequisitionFromBuyersDesk(driver, testCaseName, requisition, true);
			assertTrue("Pending Requisition was not returned", flag);

			// to naivagte to the myrequisition sub tab and filter out returned
			// requisition and cancel it
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			FlowMyRequisitions.toFilterOutReturnedReqFromMyRequisitions(driver, testCaseName);
			PageMyRequisition.clickOnFirstReqNo(driver, testCaseName);
			MainPageHeaderLevelTab.clickOnMyRequisitionSubTab(driver);
			FlowMyRequisitions.toFilterOutReturnedReqFromMyRequisitions(driver, testCaseName);

			FlowMyRequisitions.toCancelReqFromMyRequisitions(driver, testCaseName, 1);

			// to naivagate to online store and checkout with the loaded cart
			// items
			MainPageHeaderLevelTab.clickOnOnlineStoreSubTab(driver);
			PageOnlineStore.clickOnCheckOut(driver, testCaseName);

			// to try to verify submitting the requisition
			status = FlowRequisition.flow_IamDone_SaveAsDraft_Cancel(driver, testCaseName, onlineStore).isResult();
			Assert.assertTrue(" Unable to submit the requisition if user reloads returned requisition in cart & then canceled that requisition from listing", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 4-April-2017 </b> <b>Method :
	 * RTC_64172 <b>Description : verify that when category POPUP is displayed
	 * then free text item page should be displayed in background with any of
	 * the valid eform displayed in item details section. Reviewed by:
	 * kunal.ashar</font><b><br>
	 * </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_64172(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		boolean status = false;

		try
		{
			OnlineStore onlineStore = ObjectCreation.searchItem();
			onlineStore.setSearchItem(Helper.getRandomString(4));
			onlineStore.setItemType(IConstantsData.GUIDED_ITEM);
			onlineStore.setNextAction(IConstantsData.SEARCH);
			CEform cEform = ObjectCreation.getDefaultCEformObject();

			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to create ceform
			cEform = FlowCEform.createCEform(driver, testCaseName, cEform);

			// to search a free text item
			FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}
			PageFreeTextForm.clickSelectCategoryLink(driver, testCaseName);
			PageFreeTextForm.selectCategoryFromTheSearchBox(driver, testCaseName, cEform.getCategory());
			PageFreeTextForm.clickEFormInCategoryNameWise(driver, testCaseName, cEform.getCeformDisplayName());
			PageFreeTextForm.clickSelectCategoryLink(driver, testCaseName);

			// to verify
			status = PageFreeTextForm.isEformFieldVisible(driver, testCaseName, cEform.getFieldName());
			Assert.assertTrue("when category POPUP is displayed the free text item page did not display in background the valid eform displayed in item details section.", status);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/**
	 * <b>Author: raj.singh </b> <b>Created On : 4-April-2017 </b> <b>Method :
	 * RTC_227524 <b>Description : For free-text items; Supplier address field
	 * should be selectable on supplier-selection <b>Reviewed by: kunal.ashar
	 */
	@Test(dataProvider = "dataProvider")
	public void RTC_227524(TestCase testCase) throws Exception
	{

		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		User user = null;

		boolean status = false;

		try
		{
			OnlineStore onlineStore = ObjectCreation.searchItem();
			onlineStore.setSearchItem(Helper.getRandomString(4));
			onlineStore.setItemType(IConstantsData.GUIDED_ITEM);
			onlineStore.setNextAction(IConstantsData.SEARCH);

			CommonServices.startTestCase(driver, testCase);

			// login
			user = LoginLogoutServices.login(driver, testCase);

			// to search a free text item
			FlowOnlineStore.search_FreeText_CatalogItem(driver, testCaseName, onlineStore, null);
			if (onlineStore.isResult() == false && onlineStore.getItemType().equals(IConstantsData.CATALOG_ITEM))
			{
				CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
			}

			// to verify the editability of the address field of the suggested
			// supplier

			PageFreeTextForm.clickSuggestedSupplierRadioLink(driver, testCaseName);
			PageFreeTextForm.clickOnSelectExistingSupplierLink(driver, testCaseName);

			PageFreeTextForm.searchForSupplierName(driver, testCaseName, CommonServices.getTestData(IConstantsData.SUPPLIER_NAME, 0));

			ActionBot.moveToElement(driver, IPageFreeTextForm.SELECT_EXISTING_SUGGEST_SUPPLIER_ADDRESS);
			String selectedSupplierAddress = ActionBot.selectValueFromAutoCompleteList(driver, IPageFreeTextForm.SELECT_EXISTING_SUGGEST_SUPPLIER_ADDRESS,
				IPageFreeTextForm.AUTO_POPULATED_LIST_FOR_SUGGEST_EXISTING_SUPPLIER_ADDRESS, null);

			Assert.assertTrue("Supplier address field was not selectable on supplier-selection", selectedSupplierAddress != null);

			// logout
			CommonServices.successfulExecutionOfTestCase(driver, testCase);

		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{

			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{

			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);

		}
	}

	/*********************************************
	 * End of Raj's TestCases
	 *****************************************************/

	/*************************************
	 * KunalAshar's TestCases - Start
	 **********************************************/
	/**
	 * <b>Author: kunal.ashar </b> <b>Created On : 14-Feb-2017 </b> <b>Method :
	 * create req with multiple items
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void CFT_createPrWithCustomAddress(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		String purchaseType = null;
		try
		{
			// login
			user = LoginLogoutServices.login(driver, testCase);

			// Adding Item and checking out
			OnlineStore onlinestore = ObjectCreation.searchItem();
			MainPageHeaderLevelTab.clickOnRequisitionTab(driver);
			FlowShoppingCart.emptyShoppingCart(driver, testCaseName);
			onlinestore = FlowOnlineStore.addSingleItemAndCheckout(driver, testCaseName, onlinestore);

			// fill checkout form
			PageRequisitionCheckOut.fillCheckoutReqName(driver, testCaseName, CommonUtilities.getReqName());
			PageRequisitionCheckOut.selectPurchaseType(driver, testCaseName, purchaseType);
			String settlementVia = "SETTLEMENT_VIA_OPTION_INVOICE";
			PageRequisitionCheckOut.selectSettlementVia(driver, testCaseName, settlementVia);

			PageRequisitionCheckOut.selectRequiredByDate(driver, testCaseName, CommonUtilities.getRequiredBy().getDay(), CommonUtilities.getRequiredBy().getMonth(),
				CommonUtilities.getRequiredBy().getYear());

			PageBuyersDesk.clickEditLinkForBillingDeliverySummary(driver, testCaseName);
			PageBuyersDesk.clickCostAllocationTab(driver, testCaseName);

			/*
			 * BuyersDesk buyersdesk =
			 * ObjectCreation.changeCostcenterProjectBudget();
			 * PageBuyersDesk.enterCostCenterSummary(driver, testCaseName,
			 * buyersdesk.getCostCenter());
			 * PageBuyersDesk.enterProjectSummary(driver, testCaseName,
			 * buyersdesk.getProject());
			 * PageBuyersDesk.enterBudgetSummary(driver, testCaseName,
			 * buyersdesk.getBudget());
			 */

			CostBookingRequisitionSummary costBooking = ObjectCreation.getDefaultObjectOfCostBooking();
			PageBuyersDesk.enterCostCenterSummary(driver, testCaseName, costBooking.getCostCenter());
			PageBuyersDesk.enterProjectSummary(driver, testCaseName, costBooking.getProject());
			PageBuyersDesk.enterBudgetSummary(driver, testCaseName, costBooking.getBudget());

			// Add custom address
			FlowRequisition.changeAddressDeliveryTab(driver, testCaseName, IConstantsData.DeliveryAddress_MyAddress);

			PageRequisitionCheckOut.clickIAmDone(driver, testCaseName);
			PageRequisitionCheckOut.clickContinueButtonForConfirmPopup(driver, testCaseName);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
		}
	}

	/**
	 * <b>Author: kunal.ashar </b> <b>Created On : 14-Feb-2017 </b> <b>Method :
	 * create req with multiple items
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void CFT_createPrWithOtherAddress(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		String purchaseType = null;
		try
		{
			// login
			user = LoginLogoutServices.login(driver, testCase);

			// Adding Item and checking out
			OnlineStore onlinestore = ObjectCreation.searchItem();
			MainPageHeaderLevelTab.clickOnRequisitionTab(driver);
			FlowShoppingCart.emptyShoppingCart(driver, testCaseName);
			onlinestore = FlowOnlineStore.addSingleItemAndCheckout(driver, testCaseName, onlinestore);

			// fill checkout form
			PageRequisitionCheckOut.fillCheckoutReqName(driver, testCaseName, CommonUtilities.getReqName());
			PageRequisitionCheckOut.selectPurchaseType(driver, testCaseName, purchaseType);
			String settlementVia = "SETTLEMENT_VIA_OPTION_INVOICE";
			PageRequisitionCheckOut.selectSettlementVia(driver, testCaseName, settlementVia);

			PageRequisitionCheckOut.selectRequiredByDate(driver, testCaseName, CommonUtilities.getRequiredBy().getDay(), CommonUtilities.getRequiredBy().getMonth(),
				CommonUtilities.getRequiredBy().getYear());

			PageBuyersDesk.clickEditLinkForBillingDeliverySummary(driver, testCaseName);
			PageBuyersDesk.clickCostAllocationTab(driver, testCaseName);
			/*
			 * BuyersDesk buyersdesk =
			 * ObjectCreation.changeCostcenterProjectBudget();
			 * PageBuyersDesk.enterCostCenterSummary(driver, testCaseName,
			 * buyersdesk.getCostCenter());
			 * PageBuyersDesk.enterProjectSummary(driver, testCaseName,
			 * buyersdesk.getProject());
			 * PageBuyersDesk.enterBudgetSummary(driver, testCaseName,
			 * buyersdesk.getBudget());
			 */

			CostBookingRequisitionSummary costBooking = ObjectCreation.getDefaultObjectOfCostBooking();
			PageBuyersDesk.enterCostCenterSummary(driver, testCaseName, costBooking.getCostCenter());
			PageBuyersDesk.enterProjectSummary(driver, testCaseName, costBooking.getProject());
			PageBuyersDesk.enterBudgetSummary(driver, testCaseName, costBooking.getBudget());

			// Add custom address
			FlowRequisition.changeAddressDeliveryTab(driver, testCaseName, IConstantsData.DeliveryAddress_OtherAddress);

			PageRequisitionCheckOut.clickIAmDone(driver, testCaseName);
			PageRequisitionCheckOut.clickContinueButtonForConfirmPopup(driver, testCaseName);
			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
		}

	}

	/*************************************
	 * KunalAshar's TestCases - End
	 **********************************************/

	/**
	 * <b>Author: bhakti.sawant </b> <b>Created On : </b> <b>Method : create req
	 * with multiple items
	 * 
	 * @param testCase
	 *        </font><b><br>
	 * @throws Exception
	 *         </b> <br>
	 */
	@Test(dataProvider = "dataProvider")
	public void EPROC_25276(TestCase testCase) throws Exception
	{
		WebDriver driver = DriverSelector.getDriver(testCase);
		String testCaseName = testCase.getTestMethodName();
		Map<String, String> map = new HashMap<String, String>();
		CommonServices.startTestCase(driver, testCase);
		User user = null;
		String purchaseType = null;
		Requisition requisition = new Requisition();

		try
		{
			// login
			user = LoginLogoutServices.login(driver, testCase);
			requisition = ObjectCreation.getDefaultObjectOfRequisitionWithItems(driver, IConstantsData.CATALOG_ITEM);
			requisition.setNextAction(IConstantsData.NONE);
			requisition.setEditHeaderLevelInfo(false);

			// create req
			requisition = FlowRequisition.createRequisition(driver, testCaseName, requisition);

			CommonServices.successfulExecutionOfTestCase(driver, testCase);
		}

		catch (AssertionError e)
		{
			CommonServices.assertionMethod(driver, testCase, user, e);
		}
		catch (Exception e)
		{
			CommonServices.exceptionMethod(driver, testCase, user, e);
		}
		finally
		{
			CommonServices.afterExecutionOfTestcase(driver, testCase, map, user);
		}
	}
}

//RTC_358454
