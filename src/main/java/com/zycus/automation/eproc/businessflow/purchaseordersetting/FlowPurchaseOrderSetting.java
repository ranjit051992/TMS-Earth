/**
 * 
 */
package com.zycus.automation.eproc.businessflow.purchaseordersetting;

import org.apache.log4j.Logger;
import org.openqa.selenium.WebDriver;

import com.zycus.automation.bo.PurchaseOrderSettings;
import com.zycus.automation.eproc.pageobjects.pages.settings.cusomizesettings.PageCustomizeSettings;
import com.zycus.automation.eproc.pageobjects.pages.settings.projectssettings.PageProjectsSettings;
import com.zycus.automation.eproc.pageobjects.pages.settings.purchaseordersettings.PagePurchaseOrderSetting;
import com.zycus.automation.eproc.pageobjects.tabs.mainpageheaderleveltabs.MainPageHeaderLevelTab;
import com.zycus.automation.eproc.testdata.IConstantsData;
import com.zycus.automation.exception.ActionBotException;
import com.zycus.automation.exception.FactoryMethodException;
import com.zycus.automation.utilities.actionbot.ActionBot;
import com.zycus.automation.utilities.screenshot.ScreenShot;
import com.zycus.framework.framework_version_2_4.framework.ConfigProperty;

/**
 * @author ankita.sawant
 *
 */
public class FlowPurchaseOrderSetting
{
	static Logger logger = Logger.getLogger(FlowPurchaseOrderSetting.class);

	public static PurchaseOrderSettings changePOSetting(WebDriver driver, String testCaseName, PurchaseOrderSettings purchaseOrderSettings) throws ActionBotException
	{
		MainPageHeaderLevelTab.clickOnCustomizeSubTab(driver);
		PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);

		if (purchaseOrderSettings.getPoNoFormat() != null)
		{
			purchaseOrderSettings.setPoNoFormat(PagePurchaseOrderSetting.fillPONumberFormat(driver, testCaseName, purchaseOrderSettings.getPoNoFormat()));
		}
		if (purchaseOrderSettings.getSeqNoStartsAt() != 0)
		{
			purchaseOrderSettings.setSeqNoStartsAt(PagePurchaseOrderSetting.fillSequenceNumberStartsAt(driver, testCaseName, purchaseOrderSettings.getSeqNoStartsAt()));
		}
		if (purchaseOrderSettings.getSeqNoEndsAt() != 0)
		{
			purchaseOrderSettings.setSeqNoEndsAt(PagePurchaseOrderSetting.fillSequenceNumberEndsAt(driver, testCaseName, purchaseOrderSettings.getSeqNoEndsAt()));
		}
		if (purchaseOrderSettings.getPoNameForAutoGeneratedOrders() != null)
		{
			purchaseOrderSettings
				.setPoNameForAutoGeneratedOrders(PagePurchaseOrderSetting.fillPOName(driver, testCaseName, purchaseOrderSettings.getPoNameForAutoGeneratedOrders()));
		}
		if (purchaseOrderSettings.getLimitationOfDisplayOfPO() != null)
		{
			purchaseOrderSettings.setLimitationOfDisplayOfPO(
				PagePurchaseOrderSetting.selectDisplayLimitationOfPurchaseOrder(driver, testCaseName, purchaseOrderSettings.getLimitationOfDisplayOfPO()));
		}
		if (purchaseOrderSettings.isAutoGenerateLineItemNumbers())
		{
			purchaseOrderSettings.setAutoGenerateLineItemNumbers(PagePurchaseOrderSetting.clickOnAutoGenerateLineItemNumbersOnPO_Yes(driver, testCaseName));
		}
		else
		{
			purchaseOrderSettings.setAutoGenerateLineItemNumbers(PagePurchaseOrderSetting.clickOnAutoGenerateLineItemNumbersOnPO_No(driver, testCaseName));
		}

		if (purchaseOrderSettings.isModifyItemClassificationCode())
		{
			purchaseOrderSettings.setModifyItemClassificationCode(PagePurchaseOrderSetting.clickOnAllowModificationOfItemClassificationCode_Yes(driver, testCaseName));
		}
		else
		{
			purchaseOrderSettings.setModifyItemClassificationCode(PagePurchaseOrderSetting.clickOnAllowModificationOfItemClassificationCode_No(driver, testCaseName));
		}

		if (purchaseOrderSettings.isAllowManualOrdersReleasedWithoutDeliveryDate())
		{
			purchaseOrderSettings
				.setAllowManualOrdersReleasedWithoutDeliveryDate(PagePurchaseOrderSetting.clickOnAllowManualOrdersReleasedWithoutDeliveryDate_Yes(driver, testCaseName));
		}
		else
		{
			purchaseOrderSettings
				.setAllowManualOrdersReleasedWithoutDeliveryDate(PagePurchaseOrderSetting.clickOnAllowManualOrdersReleasedWithoutDeliveryDate_No(driver, testCaseName));
		}

		if (purchaseOrderSettings.isReleaseOrdersImmediately())
		{
			purchaseOrderSettings.setReleaseOrdersImmediately(PagePurchaseOrderSetting.clickOnReleaseOrdersImmediately_Yes(driver, testCaseName));
		}
		else
		{
			purchaseOrderSettings.setReleaseOrdersImmediately(PagePurchaseOrderSetting.clickOnReleaseOrdersImmediately_No(driver, testCaseName));

			purchaseOrderSettings.setReleaseOrderDays(PagePurchaseOrderSetting.fillReleasePOAutomaticParkValue(driver, testCaseName, purchaseOrderSettings.getReleaseOrderDays()));
		}

		if (purchaseOrderSettings.isAllowEmailingPOToContactsOtherThanSuppliersContact())
		{
			PagePurchaseOrderSetting.clickOnAllowEmailingPOToOtherThanSupplierPOContact_Yes(driver, testCaseName);
		}
		else
		{
			PagePurchaseOrderSetting.clickOnAllowEmailingPOToOtherThanSupplierPOContact_No(driver, testCaseName);
		}

		/*
		 * if (purchaseOrderSettings.isAllowEmailingPOToUsersOutsideCompany()) {
		 * PagePurchaseOrderSetting.
		 * clickOnAllowEmailingPOToUsersOutsideCompany_Yes(driver,
		 * testCaseName); } else { PagePurchaseOrderSetting.
		 * clickOnAllowEmailingPOToUsersOutsideCompany_No(driver, testCaseName);
		 * }
		 */

		if (purchaseOrderSettings.isAllowUsersToChangeDefaultSupplierCurrency())
		{
			PagePurchaseOrderSetting.clickOnAllowToChangeDefaultSupplierCurrencyOnPO_Yes(driver, testCaseName);
		}
		else
		{
			PagePurchaseOrderSetting.clickOnAllowToChangeDefaultSupplierCurrencyOnPO_No(driver, testCaseName);
		}

		if (purchaseOrderSettings.isAllowUsersToChangeDefaultSupplierPaymentTerms())
		{
			PagePurchaseOrderSetting.clickOnAllowToChangeDefaultSupplierPaymentTermsOnPO_Yes(driver, testCaseName);
		}
		else
		{
			PagePurchaseOrderSetting.clickOnAllowToChangeDefaultSupplierPaymentTermsOnPO_No(driver, testCaseName);
		}

		if (purchaseOrderSettings.isAllowUsersToChangeDefaultSupplierDeliveryTerms())
		{
			PagePurchaseOrderSetting.clickOnAllowToChangeDefaultSupplierDeliveryTermsOnPO_Yes(driver, testCaseName);
		}
		else
		{
			PagePurchaseOrderSetting.clickOnAllowToChangeDefaultSupplierDeliveryTermsOnPO_No(driver, testCaseName);
		}

		if (purchaseOrderSettings.isAllowEditingAutoGeneratedPONO())
		{
			PagePurchaseOrderSetting.clickOnAllowEditingAutoGeneratedPONumber_Yes(driver, testCaseName);
		}
		else
		{
			PagePurchaseOrderSetting.clickOnAllowEditingAutoGeneratedPONumber_No(driver, testCaseName);
		}

		if (purchaseOrderSettings.isAutomaticallyGenerateOrders())
		{
			purchaseOrderSettings.setAutomaticallyGenerateOrders(PagePurchaseOrderSetting.clickOnAutomaticallyGeneratePO_Yes(driver, testCaseName));
		}
		else
		{
			purchaseOrderSettings.setAutomaticallyGenerateOrders(PagePurchaseOrderSetting.clickOnAutomaticallyGeneratePO_No(driver, testCaseName));
		}

		// bpo auth type
		if (purchaseOrderSettings.getBPOAuthorizationType() != null)
		{
			if (purchaseOrderSettings.getBPOAuthorizationType().equalsIgnoreCase(IConstantsData.BPO_AUTH_TYPE_RELEASE_ORDER))
			{
				PagePurchaseOrderSetting.clickOnBPOAuthTypeReleaseOrder(driver, testCaseName);
			}
			else if (purchaseOrderSettings.getBPOAuthorizationType().equalsIgnoreCase(IConstantsData.BPO_AUTH_TYPE_DIRECT_INVOINCING))
			{
				PagePurchaseOrderSetting.clickOnBPOAuthTypeDirectInvoicicng(driver, testCaseName);
			}
			else if (purchaseOrderSettings.getBPOAuthorizationType().equalsIgnoreCase(IConstantsData.BPO_AUTH_TYPE_LET_USER_DECIDE))
			{
				PagePurchaseOrderSetting.clickOnBPOAuthTypeLetUserDecide(driver, testCaseName);
			}
		}

		// bpo send to supplier
		if (purchaseOrderSettings.getBPOAuthorizationType() != null)
		{
			if (!purchaseOrderSettings.getBPOAuthorizationType().equalsIgnoreCase(IConstantsData.BPO_AUTH_TYPE_DIRECT_INVOINCING))
			{
				if (purchaseOrderSettings.isSendBPOToSupplierWithRelease())
				{
					PagePurchaseOrderSetting.clickOnSendBPOWithReleaseOrderYes(driver, testCaseName);
				}
				else
				{
					PagePurchaseOrderSetting.clickOnSendBPOWithReleaseOrderNo(driver, testCaseName);
				}
			}
		}

		if (purchaseOrderSettings.getNextAction().equalsIgnoreCase(IConstantsData.SAVE))
		{
			PagePurchaseOrderSetting.clickOnSaveButton(driver, testCaseName);
		}
		else if (purchaseOrderSettings.getNextAction().equalsIgnoreCase(IConstantsData.CANCEL))
		{
			PagePurchaseOrderSetting.clickOnCancelButton(driver, testCaseName);
		}
		else
		{
			logger.info("Invalid next action");
		}
		purchaseOrderSettings = getPOSettings(driver, testCaseName);
		return purchaseOrderSettings;
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>To get PO Settings <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * @param driver </font><b><br>
	 * @param testCaseName </font><b><br>
	 * @return </font><b><br>
	 * @throws ActionBotException </b> <br>
	 */
	public static PurchaseOrderSettings getPOSettings(WebDriver driver, String testCaseName) throws ActionBotException
	{
		PurchaseOrderSettings purchaseOrderSettings = new PurchaseOrderSettings();

		purchaseOrderSettings.setDefaultBuyerForAutoPO(PagePurchaseOrderSetting.getDefaultBuyerForAutoPO(driver, testCaseName));

		return purchaseOrderSettings;
	}

	/**
	 * <b>Author: ankita.sawant </b> <b><br>
	 * <font color="blue">Method :</b>To get PO Settings <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * @param driver </font><b><br>
	 * @param testCaseName </font><b><br>
	 * @return </font><b><br>
	 * @throws ActionBotException </b> <br>
	 */
	public static PurchaseOrderSettings goToPOSettingsAndgetPOSettings(WebDriver driver, String testCaseName) throws ActionBotException
	{
		PurchaseOrderSettings purchaseOrderSettings = new PurchaseOrderSettings();

		MainPageHeaderLevelTab.clickOnCustomizeSubTab(driver);
		PageCustomizeSettings.clickOnPurchaseOrderLink(driver, testCaseName);

		purchaseOrderSettings = getPOSettings(driver, testCaseName);

		return purchaseOrderSettings;
	}

	/**
	 * <b>Author: kunal.ashar </b> <b><br>
	 * <font color="blue">Method :</b>Naviagte to TMS to change CostBooking
	 * setting <br>
	 * </font><b><font color="green">Note :</b> </font><b><br>
	 * <font color="red">Assertion :</b> </font><b><br>
	 * @param driver </font><b><br>
	 * @param testCaseName </font><b><br>
	 * @return </font><b><br>
	 * @throws ActionBotException </b> <br>
	 * 
	 * @throws FactoryMethodException
	 */
	public static String changeCostBookingSettingFromTMS(WebDriver driver, String testCaseName, String radioButtonValue) throws ActionBotException, FactoryMethodException
	{
		// navigates to TMS
		driver.get(ConfigProperty.getConfig("TMS_URL"));
		ActionBot.waitForPageLoad(driver);

		ScreenShot.screenshot(driver, testCaseName, "After navigating to TMS Page");

		// navigates to Master data
		PageCustomizeSettings.clickOnMasterDataLink(driver, testCaseName);
		MainPageHeaderLevelTab.clickOnCustomize(driver, testCaseName);

		// click on cost booking link
		PageCustomizeSettings.clickOnCostBookingLink(driver, testCaseName);

		if (radioButtonValue.equalsIgnoreCase("Always"))
		{
			PageProjectsSettings.clickOnAlways(driver);
		}
		else if (radioButtonValue.equalsIgnoreCase("Never"))
		{
			PageProjectsSettings.clickOnNever(driver);
		}
		else if (radioButtonValue.equalsIgnoreCase("Let users decide"))
		{
			PageProjectsSettings.clickOnLetUsersDecide(driver);
		}
		// get all radio btn value
		// Get the latest value
		String radioButtonClickedValue = PageProjectsSettings.getAssignProjectToPurchaseCost(driver);
		PageProjectsSettings.clickOnSave(driver);

		// navigate back to eproc
		driver.get(ConfigProperty.getConfig("Product_URL"));
		ActionBot.waitForPageLoad(driver);

		ScreenShot.screenshot(driver, testCaseName, "After navigating to eProc Page");

		return radioButtonClickedValue;

	}
}
